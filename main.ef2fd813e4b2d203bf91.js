/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.reflect.to-string-tag.js */ "./node_modules/core-js/modules/es.reflect.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.reflect.apply.js */ "./node_modules/core-js/modules/es.reflect.apply.js");

__webpack_require__(/*! core-js/modules/es.reflect.own-keys.js */ "./node_modules/core-js/modules/es.reflect.own-keys.js");

__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");

__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");

__webpack_require__(/*! core-js/modules/es.object.get-own-property-names.js */ "./node_modules/core-js/modules/es.object.get-own-property-names.js");

__webpack_require__(/*! core-js/modules/es.number.is-nan.js */ "./node_modules/core-js/modules/es.number.is-nan.js");

__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");

__webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");

__webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");

__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");

__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");

__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");

__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");

__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var R = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter;
module.exports.once = once; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function get() {
    return defaultMaxListeners;
  },
  set: function set(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) {
    args.push(arguments[i]);
  }

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      ReflectApply(listeners[i], this, args);
    }
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) {
    copy[i] = arr[i];
  }

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) {
    list[index] = list[index + 1];
  }

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }

      resolve([].slice.call(arguments));
    }

    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });

    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }

      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + _typeof(emitter));
  }
}

/***/ }),

/***/ "./src/modules/app.js":
/*!****************************!*\
  !*** ./src/modules/app.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.json.stringify.js */ "./node_modules/core-js/modules/es.json.stringify.js");
/* harmony import */ var core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");
/* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/add/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/startOfDay/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/endOfDay/index.js");
/* harmony import */ var _styles_reset_css__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../styles/reset.css */ "./src/styles/reset.css");
/* harmony import */ var _styles_main_css__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../styles/main.css */ "./src/styles/main.css");
/* harmony import */ var _images_menu_svg__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../images/menu.svg */ "./src/images/menu.svg");
/* harmony import */ var _images_app_options_svg__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../images/app-options.svg */ "./src/images/app-options.svg");
/* harmony import */ var _images_add_svg__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../images/add.svg */ "./src/images/add.svg");
/* harmony import */ var _images_delete_svg__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../images/delete.svg */ "./src/images/delete.svg");
/* harmony import */ var _images_done_svg__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../images/done.svg */ "./src/images/done.svg");
/* harmony import */ var _images_edit_svg__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../images/edit.svg */ "./src/images/edit.svg");
/* harmony import */ var _images_group_svg__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../images/group.svg */ "./src/images/group.svg");
/* harmony import */ var _images_more_svg__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../images/more.svg */ "./src/images/more.svg");
/* harmony import */ var _images_order_svg__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../images/order.svg */ "./src/images/order.svg");
/* harmony import */ var _images_save_svg__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../images/save.svg */ "./src/images/save.svg");
/* harmony import */ var _images_settings_svg__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../images/settings.svg */ "./src/images/settings.svg");
/* harmony import */ var _images_sort_svg__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../images/sort.svg */ "./src/images/sort.svg");
/* harmony import */ var _images_info_svg__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../images/info.svg */ "./src/images/info.svg");
/* harmony import */ var _appInfo__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./appInfo */ "./src/modules/appInfo.js");
/* harmony import */ var _modals_addProjectModal__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./modals/addProjectModal */ "./src/modules/modals/addProjectModal.js");
/* harmony import */ var _modals_addTaskModal__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./modals/addTaskModal */ "./src/modules/modals/addTaskModal.js");
/* harmony import */ var _modals_confirmModal__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./modals/confirmModal */ "./src/modules/modals/confirmModal.js");
/* harmony import */ var _modals_dataModal__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./modals/dataModal */ "./src/modules/modals/dataModal.js");
/* harmony import */ var _filterMenu__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./filterMenu */ "./src/modules/filterMenu.js");
/* harmony import */ var _modals_infoModal__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./modals/infoModal */ "./src/modules/modals/infoModal.js");
/* harmony import */ var _modalStack__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./modalStack */ "./src/modules/modalStack.js");
/* harmony import */ var _popupMenu__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./popupMenu */ "./src/modules/popupMenu.js");
/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./project */ "./src/modules/project.js");
/* harmony import */ var _projectList__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./projectList */ "./src/modules/projectList.js");
/* harmony import */ var _recurringDate__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./recurringDate */ "./src/modules/recurringDate.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./settings */ "./src/modules/settings.js");
/* harmony import */ var _modals_settingsModal__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./modals/settingsModal */ "./src/modules/modals/settingsModal.js");
/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./task */ "./src/modules/task.js");
/* harmony import */ var _taskDisplay__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./taskDisplay */ "./src/modules/taskDisplay.js");
/* harmony import */ var _taskList__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./taskList */ "./src/modules/taskList.js");
/* harmony import */ var _utility_data__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./utility/data */ "./src/modules/utility/data.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./utility/dates */ "./src/modules/utility/dates.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./utility/dom */ "./src/modules/utility/dom.js");
/* harmony import */ var _utility_storage__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./utility/storage */ "./src/modules/utility/storage.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


























/**
 * Defines the [App]{@link module:app~App} class.
 * @module app
 */





































var ICON_WIDTH = 24;
var ICON_HEIGHT = 24;
var NARROW_LAYOUT_CUTOFF = 700;
/**
 * Object holding private members for the [App]{@link module:app~App} class.
 * @typedef {Object} module:app~App~privates
 * @property {module:taskList~TaskList} tasks Holds the task container.
 * @property {module:projectList~ProjectList} projects Holds the project
 *   container.
 * @property {module:modalStack~ModalStack} modalStack The stack of modal
 *   dialogs.
 * @property {module:filterMenu~FilterMenu} filterMenu The menu of task filters
 *   in the side panel.
 * @property {module:filterMenu~FilterMenu~filterInfo} currentFilter Holds the
 *   task filter that is currently being displayed in the main panel.
 * @property {module:taskDisplay~TaskDisplay} taskDisplay Holds the task
 *   display panel.
 * @property {module:settings~Settings} settings Holds user app settings.
 * @property {module:popupMenu~PopupMenu} mainPanelMenu The popup menu that is
 *   shown when the user clicks the 'more' button in the main panel.
 * @property {Object} elements An object holding references to the page
 *   elements in the DOM.
 * @property {HTMLElement} elements.appContainer Holds a reference to the
 *   container element holding all the elements for the app.
 * @property {HTMLElement} elements.sidePanel Holds a reference to the side
 *   panel element.
 * @property {HTMLElement} elements.resizer Holds a reference to the resizing
 *   bar for the side panel.
 * @property {HTMLElement} elements.mainPanel Holds a reference to the main
 *   panel element.
 * @property {HTMLElement} elements.menuButton Holds a reference to the menu
 *   button in the header.
 * @property {HTMLElement} elements.appOptionsButton Holds a reference to the
 *   app options button in the header.
 * @property {HTMLElement} elements.addTaskButton Holds a reference to the
 *   button in the main panel that adds a new task.
 * @property {HTMLElement} elements.mainPanelMenuButton Holds a reference to
 *   the main panel menu button.
 * @property {boolean} narrowScreen Indicates whether the screen size is
 *   narrow. This should be true when the viewport width is less than or equal
 *   to NARROW_LAYOUT_CUTOFF.
 */

/**
 * Holds private data for the [App]{@link module:app~App} class.
 * @type {WeakMap}
 * @see module:app~App~privates
 */

var privateMembers = new WeakMap();

function addRandomData(instance, taskCount, projCount) {
  var getRandom = function getRandom(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  };

  var passCheck = function passCheck(probability) {
    return Math.random() < probability;
  };

  var sentences = ['Call me Ishmael.', 'It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair.', 'It is a truth universally acknowledged, that a single man in possession of a good fortune, must be in want of a wife.', 'In my younger and more vulnerable years my father gave me some advice that I\'ve been turning over in my mind ever since.', 'It was a bright cold day in April, and the clocks were striking thirteen.', 'It was a pleasure to burn.', 'As Gregor Samsa awoke one morning from uneasy dreams he found himself transformed in his bed into an enormous insect.', 'Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small, unregarded yellow sun.', 'All happy families are alike; each unhappy family is unhappy in its own way', 'Whether I shall turn out to be the hero of my own life, or whether that station will be held by anybody else, these pages must show.'];

  var randomSentence = function randomSentence() {
    return sentences[getRandom(0, sentences.length - 1)];
  };

  var randomDate = function randomDate() {
    var today = new Date();
    return (0,date_fns__WEBPACK_IMPORTED_MODULE_60__["default"])(today, {
      days: getRandom(-5, 40)
    });
  };

  var randomRecurrence = function randomRecurrence() {
    var random = Math.random();
    var unit;
    if (random < 0.25) unit = 'day';else if (random < 0.5) unit = 'week';else if (random < 0.75) unit = 'month';else unit = 'year';
    return new _recurringDate__WEBPACK_IMPORTED_MODULE_50__["default"](unit, {
      intervalLength: passCheck(0.5) ? 1 : getRandom(2, 10),
      startDate: passCheck(0.5) ? randomDate() : null,
      baseOnCompletion: passCheck(0.25)
    });
  };

  var privates = privateMembers.get(instance);
  var projects = [];

  for (var i = 0; i < projCount; i += 1) {
    var project = new _project__WEBPACK_IMPORTED_MODULE_48__["default"]("Project ".concat(i + 1), {
      description: passCheck(0.5) ? randomSentence() : null
    });
    projects.push(privates.projects.addProject(project));
  }

  var randomProject = function randomProject() {
    return projects[getRandom(0, projects.length - 1)];
  };

  for (var _i = 0; _i < taskCount; _i += 1) {
    var task = new _task__WEBPACK_IMPORTED_MODULE_53__["default"]("Task ".concat(_i + 1), {
      dueDate: passCheck(0.5) ? randomDate() : null,
      completionDate: passCheck(0.1) ? new Date() : null,
      priority: getRandom(-2, 2),
      description: passCheck(0.5) ? randomSentence() : null,
      recurringDate: passCheck(0.5) ? randomRecurrence() : null,
      project: passCheck(0.5) ? randomProject() : null
    });
    privates.tasks.addTask(task);
  }
}
/**
 * Open the side panel, so that the filter menu is visible.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function openSidePanel(instance) {
  var _privateMembers$get = privateMembers.get(instance),
      elements = _privateMembers$get.elements;

  elements.sidePanel.classList.remove('closed');
  elements.resizer.classList.remove('closed');
}
/**
 * Close the side panel, so that the filter menu is hidden.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function closeSidePanel(instance) {
  var _privateMembers$get2 = privateMembers.get(instance),
      elements = _privateMembers$get2.elements;

  elements.sidePanel.classList.add('closed');
  elements.resizer.classList.add('closed');
}
/**
 * Toggle the side panel's visibility.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function toggleSidePanel(instance) {
  var _privateMembers$get3 = privateMembers.get(instance),
      elements = _privateMembers$get3.elements;

  var closed = elements.sidePanel.classList.toggle('closed');
  if (closed) elements.resizer.classList.add('closed');else elements.resizer.classList.remove('closed');
}
/**
 * Update the menu items in the popup menu for the main panel based on the
 * selected filter.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function updateMainPanelMenu(instance) {
  var privates = privateMembers.get(instance);
  var _privates$currentFilt = privates.currentFilter,
      group = _privates$currentFilt.group,
      filter = _privates$currentFilt.filter;
  var filterOptions = privates.settings.getFilterOptions(group);
  var GROUP_ICON = 'category';
  var SORT_ICON = 'sort';

  var iconOptions = function iconOptions(source) {
    return {
      source: source,
      width: ICON_WIDTH,
      height: ICON_HEIGHT
    };
  };

  var groupBy = filterOptions.groupBy,
      sortBy = filterOptions.sortBy,
      sortDescending = filterOptions.sortDescending,
      showCompleted = filterOptions.showCompleted;
  var optionItems = [{
    label: 'Add Task...',
    id: 'add-task',
    icon: iconOptions(_images_add_svg__WEBPACK_IMPORTED_MODULE_28__)
  }, {
    label: 'Add Project...',
    id: 'add-project',
    icon: iconOptions(_images_add_svg__WEBPACK_IMPORTED_MODULE_28__)
  }];
  var groupByItems = [];
  var sortByItems = [];

  if (group === 'projects' && filter !== 'none') {
    optionItems.push({
      label: 'Edit Project...',
      id: 'edit-project',
      icon: iconOptions(_images_edit_svg__WEBPACK_IMPORTED_MODULE_31__)
    });
    optionItems.push({
      label: 'Delete Project...',
      id: 'delete-project',
      icon: iconOptions(_images_delete_svg__WEBPACK_IMPORTED_MODULE_29__)
    });
  }

  optionItems.push({
    label: showCompleted ? 'Hide Completed Tasks' : 'Show Completed Tasks',
    id: showCompleted ? 'hide-completed' : 'show-completed',
    icon: iconOptions(_images_done_svg__WEBPACK_IMPORTED_MODULE_30__)
  }, {
    label: sortDescending ? 'Sort Ascending' : 'Sort Descending',
    id: sortDescending ? 'sort-ascending' : 'sort-descending',
    icon: iconOptions(_images_order_svg__WEBPACK_IMPORTED_MODULE_34__)
  });

  if (groupBy !== 'default') {
    groupByItems.push({
      label: 'Use Default Grouping',
      id: 'group-by-default',
      icon: iconOptions(_images_group_svg__WEBPACK_IMPORTED_MODULE_32__)
    });
  }

  if (groupBy !== 'none') {
    groupByItems.push({
      label: 'Do Not Group Tasks',
      id: 'group-by-none',
      icon: iconOptions(_images_group_svg__WEBPACK_IMPORTED_MODULE_32__)
    });
  }

  if (sortBy !== 'create-date') {
    sortByItems.push({
      label: 'Sort by Date Added',
      id: 'sort-by-create-date',
      icon: iconOptions(_images_sort_svg__WEBPACK_IMPORTED_MODULE_37__)
    });
  }

  if ((group !== 'dates' || filter !== 'past-due') && groupBy !== 'due-date') {
    groupByItems.push({
      label: 'Group by Due Date',
      id: 'group-by-due-date',
      icon: iconOptions(_images_group_svg__WEBPACK_IMPORTED_MODULE_32__)
    });

    if (sortBy !== 'due-date') {
      sortByItems.push({
        label: 'Sort by Due Date',
        id: 'sort-by-due-date',
        icon: iconOptions(_images_sort_svg__WEBPACK_IMPORTED_MODULE_37__)
      });
    }
  }

  if (group !== 'projects' && groupBy !== 'project') {
    groupByItems.push({
      label: 'Group by Project',
      id: 'group-by-project',
      icon: iconOptions(_images_group_svg__WEBPACK_IMPORTED_MODULE_32__)
    });

    if (sortBy !== 'project') {
      sortByItems.push({
        label: 'Sort by Project',
        id: 'sort-by-project',
        icon: iconOptions(_images_sort_svg__WEBPACK_IMPORTED_MODULE_37__)
      });
    }
  }

  if (group !== 'priorities' && groupBy !== 'priority') {
    groupByItems.push({
      label: 'Group by Priority',
      id: 'group-by-priority',
      icon: iconOptions(_images_group_svg__WEBPACK_IMPORTED_MODULE_32__)
    });

    if (sortBy !== 'priority') {
      sortByItems.push({
        label: 'Sort by Priority',
        id: 'sort-by-priority',
        icon: iconOptions(_images_sort_svg__WEBPACK_IMPORTED_MODULE_37__)
      });
    }
  }

  var menuItems = [].concat(optionItems, groupByItems, sortByItems);
  privates.mainPanelMenu.setMenuItems(menuItems);
}
/**
 * Update the heading in the main panel.
 * @param {string} heading The new heading to display.
 * @param {string} [subheading] The new subheading to display, if any.
 */


function updateMainHeading(heading, subheading) {
  var headingElem = document.getElementById('main-panel-heading');
  var subheadingElem = document.getElementById('main-panel-subheading');
  headingElem.textContent = heading;

  if (subheading) {
    subheadingElem.textContent = subheading;
    subheadingElem.style.display = 'block';
  } else {
    subheadingElem.textContent = '';
    subheadingElem.style.display = 'none';
  }
}
/**
 * Refresh the main panel.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {Object} [options={}] An object holding options for the main panel.
 * @param {boolean} [options.resetScroll=true] If set to true (the default),
 *   then the panel's scroll position will be reset back to the top. Otherwise
 *   the scroll position will not be changed.
 */


function updateMainPanel(instance) {
  var _options$resetScroll;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var privates = privateMembers.get(instance);
  var _privates$currentFilt2 = privates.currentFilter,
      group = _privates$currentFilt2.group,
      filter = _privates$currentFilt2.filter;
  var heading = null;
  var subheading = null;
  var displayOptions = {
    groupBy: 'none',
    resetScroll: (_options$resetScroll = options.resetScroll) !== null && _options$resetScroll !== void 0 ? _options$resetScroll : true,
    dateFormat: privates.settings.dateFormat
  };
  var filterOptions;

  switch (group) {
    case 'dates':
      {
        filterOptions = privates.settings.getFilterOptions('dates');
        var today = (0,date_fns__WEBPACK_IMPORTED_MODULE_61__["default"])(new Date());
        var todayEnd = (0,date_fns__WEBPACK_IMPORTED_MODULE_62__["default"])(today);
        var duration = {};

        switch (filter) {
          case 'today':
            heading = 'Today';
            subheading = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_57__.formatDate)(today, 'eeee, MMMM d, yyyy');
            break;

          case 'week':
            heading = 'This Week';
            displayOptions.groupBy = 'due-date';
            duration.weeks = 1;
            duration.days = -1;
            break;

          case 'month':
            heading = 'This Month';
            displayOptions.groupBy = 'due-date';
            duration.months = 1;
            duration.days = -1;
            break;

          case 'past-due':
            heading = 'Past Due';
            duration.days = -1;
            displayOptions.requireDueDate = true;
            break;

          default:
            break;
        }

        displayOptions.endDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_60__["default"])(todayEnd, duration);

        if (filter !== 'today' && filter !== 'past-due') {
          var dateFormat = privates.settings.dateFormat.outputPattern;
          var startStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_57__.formatDate)(today, dateFormat);
          var endStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_57__.formatDate)(displayOptions.endDate, dateFormat);
          subheading = "".concat(startStr, " to ").concat(endStr);
        }

        break;
      }

    case 'projects':
      filterOptions = privates.settings.getFilterOptions('projects');
      displayOptions.project = filter;

      if (filter === 'none') {
        heading = 'Uncategorized';
      } else {
        var project = privates.projects.getProject(filter);
        heading = project.name;
        subheading = project.description || null;
      }

      break;

    case 'priorities':
      {
        filterOptions = privates.settings.getFilterOptions('priorities');
        var priority = _task__WEBPACK_IMPORTED_MODULE_53__["default"].convertStringToPriority(filter);
        displayOptions.priority = priority;
        heading = "".concat(_task__WEBPACK_IMPORTED_MODULE_53__["default"].convertPriorityToPrettyString(priority), " Priority");
        break;
      }

    case 'default':
    default:
      filterOptions = privates.settings.getFilterOptions('default');
      heading = 'All Tasks';
      break;
  } // Override grouping if needed


  if (filterOptions.groupBy !== 'default') {
    displayOptions.groupBy = filterOptions.groupBy;
  }

  displayOptions.sortBy = filterOptions.sortBy;
  displayOptions.completed = filterOptions.showCompleted;
  displayOptions.sortDescending = filterOptions.sortDescending;
  updateMainHeading(heading, subheading);
  privates.taskDisplay.update(displayOptions);
  updateMainPanelMenu(instance);
}
/**
 * Refresh the list of projects in the filter menu.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function updateProjectFilters(instance) {
  var privates = privateMembers.get(instance);
  var selection = privates.filterMenu.getSelection();
  privates.filterMenu.removeAllFilters('projects');
  privates.filterMenu.addFilter('projects', 'none', 'Uncategorized');
  privates.projects.forEach(function (entry) {
    privates.filterMenu.addFilter('projects', entry.id, entry.project.name);
  }); // Restore selection

  if (selection.group === 'projects') {
    var filter = selection.filter;

    if (privates.filterMenu.hasFilter('projects', filter)) {
      privates.filterMenu.selectFilter('projects', filter);
    } else {
      privates.filterMenu.selectFilter('projects', 'none');
    }
  }
}
/**
 * Export app data to a JSON file.
 * @param {module:app~App} instance The [App]{@link module:app~App} instance
 *   whose data is to be exported.
 * @param {Object} [options={}] An object holding additional file options.
 * @param {string} [options.newlineSequence] The character sequence to use for
 *   newlines.
 */


function exportToJson(instance) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var output = "".concat(JSON.stringify(instance, null, 2), "\n");

  if (options.newlineSequence) {
    output = output.replace(/\n/g, options.newlineSequence);
  }

  (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.generateFile)(output, 'tasks.json', 'application/json');
}
/**
 * Export app data to a CSV file.
 * @param {module:app~App} instance The [App]{@link module:app~App} instance
 *   whose data is to be exported.
 * @param {Object} [options={}] An object holding additional file options.
 * @param {string} [options.newlineSequence] The character sequence to use for
 *   newlines.
 */


function exportToCsv(instance) {
  var _options$newlineSeque;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _privateMembers$get4 = privateMembers.get(instance),
      tasks = _privateMembers$get4.tasks,
      projects = _privateMembers$get4.projects;

  var output = tasks.toCsv({
    newlineSequence: (_options$newlineSeque = options.newlineSequence) !== null && _options$newlineSeque !== void 0 ? _options$newlineSeque : '\r\n',
    projectList: projects
  });
  (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.generateFile)(output, 'tasks.csv', 'text/csv');
}
/**
 * Import app data from a string in JSON format.
 * @param {module:app~App} instance The [App]{@link module:app~App} instance in
 *   which to import the data.
 * @param {string} data The app data in JSON format.
 * @returns {module:app~App~importStatus} An object holding information about
 *   the status of the import.
 */


function importFromJson(instance, data) {
  var privates = privateMembers.get(instance);
  var taskCounts = {
    added: 0,
    updated: 0,
    failed: 0,
    total: 0
  };

  var projectCounts = _objectSpread({}, taskCounts);

  var errors = [];

  try {
    var _JSON$parse = JSON.parse(data),
        app = _JSON$parse.app,
        settings = _JSON$parse.settings,
        tasks = _JSON$parse.tasks,
        projects = _JSON$parse.projects;

    if ((app === null || app === void 0 ? void 0 : app.name) !== _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].name || (app === null || app === void 0 ? void 0 : app.version) == null) {
      errors.push('Warning: Imported data does not follow the expected schema. The data may have been created by a different application, or may have been altered.');
    } else if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_56__.compareVersions)(app.version, _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].version) > 0) {
      errors.push('Warning: Imported data seems to have been created by a newer version of the application. Some information might not be imported or might be imported incorrectly.');
    }

    if (settings != null) {
      var result = privates.settings.importFromJson(settings);
      errors.push.apply(errors, _toConsumableArray(result.errors));
    }

    if (projects != null) {
      var _result = privates.projects.importFromJson(projects);

      Object.assign(projectCounts, _result.projects);
      errors.push.apply(errors, _toConsumableArray(_result.errors));
    }

    if (tasks != null) {
      var _result2 = privates.tasks.importFromJson(tasks, {
        projectList: privates.projects
      });

      Object.assign(taskCounts, _result2.tasks);
      errors.push.apply(errors, _toConsumableArray(_result2.errors));
    }

    return {
      successful: true,
      format: 'json',
      tasks: taskCounts,
      projects: projectCounts,
      errors: errors
    };
  } catch (e) {
    if (e instanceof SyntaxError) {
      return {
        successful: false,
        format: 'json',
        tasks: taskCounts,
        projects: projectCounts,
        errors: ["Fatal Error: ".concat(e.message)]
      };
    }

    throw e;
  }
}
/**
 * Import app data from a CSV string.
 * @param {module:app~App} instance The [App]{@link module:app~App} instance in
 *   which to import the data.
 * @param {string} data The app data in CSV format.
 * @returns {module:app~App~importStatus} An object holding information about
 *   the status of the import.
 */


function importFromCsv(instance, data) {
  var privates = privateMembers.get(instance);
  var taskCounts = {
    added: 0,
    updated: 0,
    failed: 0,
    total: 0
  };

  var projectCounts = _objectSpread({}, taskCounts);

  var errors = [];
  var parsedData = (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.parseCsv)(data);
  var result;
  result = privates.projects.importFromCsv(parsedData);
  Object.assign(projectCounts, result.projects);
  errors.push.apply(errors, _toConsumableArray(result.errors));
  result = privates.tasks.importFromCsv(parsedData, {
    projectList: privates.projects
  });
  Object.assign(taskCounts, result.tasks);
  errors.push.apply(errors, _toConsumableArray(result.errors));
  return {
    successful: true,
    format: 'csv',
    tasks: taskCounts,
    projects: projectCounts,
    errors: errors
  };
}
/**
 * Import app data from a file. This function will attempt to determine whether
 * the file is in JSON or CSV format, first using the file extension and,
 * failing that, by examining the contents.
 * @param {module:app~App} instance The [App]{@link module:app~App} instance in
 *   which to import the data.
 * @param {string} content The contents of the file being imported.
 * @param {string} [name] The name of the file being imported.
 * @returns {module:app~App~importStatus} An object holding information about
 *   the status of the import.
 */


function importFromFile(instance, content, name) {
  var fileExt = name ? (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.getFileExtension)(name).toLowerCase() : '';

  switch (fileExt) {
    case '.json':
      return importFromJson(instance, content);

    case '.csv':
      return importFromCsv(instance, content);

    default:
      {
        var result = importFromJson(instance, content);

        if (!result.successful) {
          result = importFromCsv(instance, content);

          if (!result.successful) {
            var counts = {
              added: 0,
              updated: 0,
              failed: 0,
              total: 0
            };
            return {
              successful: false,
              format: 'unknown',
              tasks: _objectSpread({}, counts),
              projects: _objectSpread({}, counts),
              errors: ['Fatal Error: Unable to determine file format. Imported data must be in either JSON or CSV format.']
            };
          }
        }

        return result;
      }
  }
}
/**
 * Delete all user data.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function deleteAllData(instance) {
  var privates = privateMembers.get(instance);
  privates.settings.resetToDefault();
  privates.tasks.deleteAll();
  privates.projects.deleteAll();
  updateProjectFilters(instance);
  updateMainPanel(instance);
}
/**
 * Display a modal confirmation dialog.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {string} message The message to display to the user.
 * @param {Function} [onConfirm] A callback function to be invoked when the
 *   user confirms the modal.
 * @param {Function} [onCancel] A callback function to be invoked when the user
 *   cancels the modal.
 */


function showConfirmation(instance, message, onConfirm, onCancel) {
  var privates = privateMembers.get(instance);
  var modal = new _modals_confirmModal__WEBPACK_IMPORTED_MODULE_42__["default"](message, {
    confirm: onConfirm || null,
    cancel: onCancel || null
  });
  privates.modalStack.showModal(modal);
}
/**
 * Display the modal dialog for adding or editing a task. After the user
 * confirms the dialog, the task is added to the task list.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {Object} [options={}] An object holding options for creating the
 *   modal.
 * @param {string} [options.taskId] The identifier for the task to edit, if
 *   any.
 * @param {string} [options.projectId] The identifier for the default project
 *   that the task should be assigned to, if any. If a task id was given,
 *   then this option is ignored.
 * @param {number} [options.priority=0] The default priority for the task. If
 *   a task id was given, then this option is ignored.
 */


function showAddTaskModal(instance) {
  var _options$priority;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var privates = privateMembers.get(instance);
  var modal = new _modals_addTaskModal__WEBPACK_IMPORTED_MODULE_41__["default"](privates.tasks, privates.projects, {
    taskId: options.taskId || null,
    projectId: options.projectId || null,
    priority: (_options$priority = options.priority) !== null && _options$priority !== void 0 ? _options$priority : 0,
    dateFormat: privates.settings.dateFormat,
    confirm: function confirm() {
      return updateMainPanel(instance, {
        resetScroll: false
      });
    },
    newProject: function newProject() {
      return updateProjectFilters(instance);
    }
  });
  privates.modalStack.showModal(modal);
}
/**
 * Display the modal dialog for adding or editing a project. After the user
 * confirms the dialog, the project is added to the project list.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {Object} [options={}] An object holding options for creating the
 *   modal.
 * @param {string} [options.projectId] The identifier for the project to
 *   edit, if any. If not given, a new project is created.
 */


function showAddProjectModal(instance) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var privates = privateMembers.get(instance);
  var projectToUpdate = null;

  if (options.projectId) {
    projectToUpdate = privates.projects.getProject(options.projectId);
  }

  var modal = new _modals_addProjectModal__WEBPACK_IMPORTED_MODULE_40__["default"]({
    confirm: function confirm(project) {
      var newId = null;

      if (options.projectId) {
        privates.projects.updateProject(options.projectId, project);
      } else {
        newId = privates.projects.addProject(project);
      }

      updateProjectFilters(instance);
      if (newId) privates.filterMenu.selectFilter('projects', newId);
    },
    project: projectToUpdate
  });
  privates.modalStack.showModal(modal);
}
/**
 * Display the modal dialog for modifying user settings.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function showSettingsModal(instance) {
  var privates = privateMembers.get(instance);
  var modal = new _modals_settingsModal__WEBPACK_IMPORTED_MODULE_52__["default"](privates.settings, {
    confirm: function confirm() {
      return updateMainPanel(instance, {
        resetScroll: false
      });
    }
  });
  privates.modalStack.showModal(modal);
}
/**
 * Display the modal dialog for managing user data.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function showDataModal(instance) {
  var privates = privateMembers.get(instance);
  var modal = new _modals_dataModal__WEBPACK_IMPORTED_MODULE_43__["default"]({
    importData: function importData(content, _ref) {
      var name = _ref.name;
      var result = importFromFile(instance, content, name);
      if (result.projects.total > 0) updateProjectFilters(instance);

      if (result.tasks.total > 0) {
        updateMainPanel(instance, {
          resetScroll: false
        });
      }

      var container = document.createElement('div');
      var statusMsg = document.createElement('div');
      statusMsg.classList.add('data-import-results');
      container.appendChild(statusMsg);

      if (result.successful) {
        statusMsg.textContent = ['Data import succeeded.', "Processed ".concat(result.tasks.total, " ").concat(result.tasks.total !== 1 ? 'tasks' : 'task', ": ").concat(result.tasks.added, " added, ").concat(result.tasks.updated, " updated, ").concat(result.tasks.failed, " failed."), "Processed ".concat(result.projects.total, " ").concat(result.projects.total !== 1 ? 'projects' : 'project', ": ").concat(result.projects.added, " added, ").concat(result.projects.updated, " updated, ").concat(result.projects.failed, " failed.")].join('\n');
      } else {
        statusMsg.textContent = 'Data import failed.';
      }

      if (result.errors.length > 0) {
        var errorList = document.createElement('ul');
        errorList.classList.add('data-import-error-list');
        result.errors.forEach(function (error) {
          var listItem = document.createElement('li');
          listItem.classList.add('data-import-results');
          listItem.textContent = error;
          errorList.appendChild(listItem);
        });
        container.appendChild(errorList);
      }

      var infoModal = new _modals_infoModal__WEBPACK_IMPORTED_MODULE_45__["default"](container, {
        title: 'Import Status'
      });
      privates.modalStack.showModal(infoModal);
    },
    exportData: function exportData(fileType, fileOptions) {
      if (fileType === 'csv') exportToCsv(instance, fileOptions);else exportToJson(instance, fileOptions);
    },
    deleteAll: function deleteAll() {
      return deleteAllData(instance);
    }
  });
  privates.modalStack.showModal(modal);
}
/**
 * Display the modal dialog showing information about the app.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function showAboutModal(instance) {
  var content = document.createElement('div');
  var paragraphs = [{
    content: "Version ".concat(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].version),
    classList: ['about-modal-version']
  }, {
    content: ["Copyright ".concat(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].copyrightYears, " "), {
      content: _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].author,
      url: _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].authorWebsite,
      target: '_blank'
    }, ". License: ".concat(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].license, ".")]
  }, {
    content: [{
      content: 'View full license information',
      url: 'licenses.html',
      target: '_blank'
    }, '.']
  }];
  content.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_58__.createParagraphs)(paragraphs, {
    classList: ['about-modal-paragraph']
  }));
  var modal = new _modals_infoModal__WEBPACK_IMPORTED_MODULE_45__["default"](content, {
    title: _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].name
  });
  privateMembers.get(instance).modalStack.showModal(modal);
}
/**
 * Respond to a selection in the main panel menu.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {string} itemId The identifier for the menu item that was selected.
 */


function handleMainPanelMenuSelection(instance, itemId) {
  var privates = privateMembers.get(instance);
  var _privates$currentFilt3 = privates.currentFilter,
      group = _privates$currentFilt3.group,
      filter = _privates$currentFilt3.filter;
  var filterOptions = privates.settings.getFilterOptions(group);
  var needPanelUpdate = true;
  var needFilterOptionUpdate = true;

  switch (itemId) {
    case 'add-task':
      {
        var modalOptions = {};

        if (group === 'projects' && filter !== 'none') {
          modalOptions.projectId = filter;
        } else if (group === 'priorities') {
          modalOptions.priority = _task__WEBPACK_IMPORTED_MODULE_53__["default"].convertStringToPriority(filter);
        }

        showAddTaskModal(instance, modalOptions);
        needPanelUpdate = false;
        needFilterOptionUpdate = false;
        break;
      }

    case 'add-project':
      showAddProjectModal(instance);
      needPanelUpdate = false;
      needFilterOptionUpdate = false;
      break;

    case 'edit-project':
      showAddProjectModal(instance, {
        projectId: filter
      });
      needFilterOptionUpdate = false;
      break;

    case 'delete-project':
      {
        var project = privates.projects.getProject(filter);
        if (!project) break;
        showConfirmation(instance, "Are you sure you want to delete the project '".concat(project.name, "'?"), function () {
          privates.tasks.clearProject(filter);
          privates.projects.deleteProject(filter);
          updateProjectFilters(instance);
        });
        needPanelUpdate = false;
        needFilterOptionUpdate = false;
        break;
      }

    case 'show-completed':
      filterOptions.showCompleted = true;
      break;

    case 'hide-completed':
      filterOptions.showCompleted = false;
      break;

    case 'sort-ascending':
      filterOptions.sortDescending = false;
      break;

    case 'sort-descending':
      filterOptions.sortDescending = true;
      break;

    case 'group-by-default':
      filterOptions.groupBy = 'default';
      break;

    case 'group-by-none':
      filterOptions.groupBy = 'none';
      break;

    case 'group-by-due-date':
      filterOptions.groupBy = 'due-date';
      break;

    case 'group-by-project':
      filterOptions.groupBy = 'project';
      break;

    case 'group-by-priority':
      filterOptions.groupBy = 'priority';
      break;

    case 'sort-by-create-date':
      filterOptions.sortBy = 'create-date';
      break;

    case 'sort-by-due-date':
      filterOptions.sortBy = 'due-date';
      break;

    case 'sort-by-project':
      filterOptions.sortBy = 'project';
      break;

    case 'sort-by-priority':
      filterOptions.sortBy = 'priority';
      break;

    default:
      break;
  }

  if (needFilterOptionUpdate) {
    privates.settings.setFilterOptions(group, filterOptions);
  }

  if (needPanelUpdate) updateMainPanel(instance, {
    resetScroll: false
  });
}
/**
 * Complete a task in the task list.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {string} id The unique identifier of the task to complete.
 */


function completeTask(instance, id) {
  var _privateMembers$get5 = privateMembers.get(instance),
      taskList = _privateMembers$get5.tasks;

  var task = taskList.getTask(id);
  var now = new Date();

  if (task.recurringDate) {
    var baseDate = now;

    if (task.dueDate && !task.recurringDate.baseOnCompletion) {
      baseDate = task.dueDate;
    }

    var newDueDate = task.recurringDate.getNextOccurrence(baseDate);

    if (!newDueDate) {
      task.markComplete();
      task.recurringDate = null;
    } else {
      task.markIncomplete();
      task.recurringDate.advance();
      task.dueDate = newDueDate;
    }
  } else {
    task.markComplete();
  }

  taskList.updateTask(id, task);
}
/**
 * Respond to an action that the user performed on a task.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {string} type The type of action being performed: 'mark-complete',
 *   'mark-incomplete', 'edit', or 'delete'.
 * @param {string} id The unique identifier of the task being updated.
 * @param {module:task~Task} task The task being updated.
 */


function handleTaskUpdate(instance, type, id, task) {
  var privates = privateMembers.get(instance);
  var needUpdate = true;

  switch (type) {
    case 'mark-complete':
      completeTask(instance, id);
      break;

    case 'mark-incomplete':
      task.markIncomplete();
      privates.tasks.updateTask(id, task);
      break;

    case 'edit':
      showAddTaskModal(instance, {
        taskId: id
      });
      needUpdate = false;
      break;

    case 'clone':
      privates.tasks.addTask(task);
      break;

    case 'delete':
      showConfirmation(instance, "Are you sure you want to delete the task '".concat(task.name, "'?"), function () {
        privates.tasks.deleteTask(id);
        updateMainPanel(instance, {
          resetScroll: false
        });
      });
      needUpdate = false;
      break;

    case 'go-to-project':
      privates.filterMenu.selectFilter('projects', task.project || 'none');
      needUpdate = false;
      break;

    default:
      needUpdate = false;
      break;
  }

  if (needUpdate) updateMainPanel(instance, {
    resetScroll: false
  });
}
/**
 * Respond to a change in the filter menu selection.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {Object} event The event object.
 * @param {string} [event.groupId] The identifier for the group containing the
 *   filter that was selected, if any.
 * @param {string} [event.filterId] The identifier for the filter that was
 *   selected, if any.
 * @param {string} [event.filterLabel] The displayed label for the selected
 *   filter, if any.
 */


function handleFilterChange(instance, event) {
  if (!event.groupId || !event.filterId) return;
  var privates = privateMembers.get(instance);
  privates.currentFilter.group = event.groupId;
  privates.currentFilter.filter = event.filterId;
  updateMainPanel(instance);
}
/**
 * Respond to a selection in the App Options menu.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {string} itemId The identifier of the menu item that was selected.
 */


function handleAppMenuSelection(instance, itemId) {
  switch (itemId) {
    case 'settings':
      showSettingsModal(instance);
      break;

    case 'data':
      showDataModal(instance);
      break;

    case 'about':
      showAboutModal(instance);
      break;

    default:
      break;
  }
}
/**
 * Make sure app information and settings are stored in local storage if
 * needed.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function initializeStorage(instance) {
  (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, 'app.version', _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].version);
  var storageMethod = (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.retrieveData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, 'setting.storageMethod');
  if (storageMethod && storageMethod !== 'local') return; // Store any settings that are not already in local storage

  privateMembers.get(instance).settings.forEach(function (name, value) {
    var key = "setting.".concat(name);

    if (!(0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.retrieveData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, key)) {
      (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, key, value);
    }
  });
}
/**
 * Load all items from local storage into the app.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function loadAllStorageData(instance) {
  var privates = privateMembers.get(instance);
  (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.forEachDataItem)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, function (key, value) {
    var dotIndex = key.indexOf('.');
    var type = key.substring(0, dotIndex);
    var id = key.substring(dotIndex + 1);

    switch (type) {
      case 'task':
        privates.tasks.addOrUpdateTask(id, _task__WEBPACK_IMPORTED_MODULE_53__["default"].fromJson(value));
        break;

      case 'project':
        privates.projects.addOrUpdateProject(id, _project__WEBPACK_IMPORTED_MODULE_48__["default"].fromJson(value));
        break;

      case 'setting':
        privates.settings.setSetting(id, value);
        break;

      default:
        break;
    }
  });
}
/**
 * Store all user data in local storage.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 */


function storeAllData(instance) {
  var privates = privateMembers.get(instance);
  (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, 'app.version', _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].version);

  if (privates.settings.storageMethod === 'local') {
    privates.tasks.forEach(function (_ref2) {
      var id = _ref2.id,
          task = _ref2.task;
      (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, "task.".concat(id), task);
    });
    privates.projects.forEach(function (_ref3) {
      var id = _ref3.id,
          project = _ref3.project;
      (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, "project.".concat(id), project);
    });
    privates.settings.forEach(function (name, value) {
      (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, "setting.".concat(name), value);
    });
  } else {
    (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, 'setting.storageMethod', 'none');
  }
}
/**
 * Update local storage after data has been changed.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {string} type The type of data that was changed: 'setting', 'task',
 *   or 'project'.
 * @param {Object} eventData The event object specifying the data that was
 *   changed.
 */


function updateStorage(instance, type, eventData) {
  var privates = privateMembers.get(instance); // If storage method is changing, we need to delete or restore everything

  if (type === 'setting' && eventData.name === 'storageMethod') {
    if (eventData.value !== 'local') (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.clearData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix);
    storeAllData(instance);
    return;
  }

  if (privates.settings.storageMethod !== 'local') return;

  switch (type) {
    case 'task':
      {
        var eventType = eventData.type,
            id = eventData.id,
            task = eventData.task;
        var key = "task.".concat(id);

        switch (eventType) {
          case 'add-task':
          case 'update-task':
            (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, key, task);
            break;

          case 'delete-task':
            (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.removeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, key);
            break;

          default:
            break;
        }

        break;
      }

    case 'project':
      {
        var _eventType = eventData.type,
            _id = eventData.id,
            project = eventData.project;

        var _key = "project.".concat(_id);

        switch (_eventType) {
          case 'add-project':
          case 'update-project':
            (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, _key, project);
            break;

          case 'delete-project':
            (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.removeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, _key);
            break;

          default:
            break;
        }

        break;
      }

    case 'setting':
      {
        var name = eventData.name,
            value = eventData.value;
        (0,_utility_storage__WEBPACK_IMPORTED_MODULE_59__.storeData)(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].storagePrefix, "setting.".concat(name), value);
        break;
      }

    default:
      break;
  }
}
/**
 * Create the app's task filter menu.
 * @param {module:app~App} instance The class instances on which to apply the
 *   function.
 */


function createFilterMenu(instance) {
  var privates = privateMembers.get(instance);
  var filterGroups = [{
    id: 'default',
    label: null
  }, {
    id: 'dates',
    label: 'Dates'
  }, {
    id: 'projects',
    label: 'Projects'
  }, {
    id: 'priorities',
    label: 'Priorities'
  }];
  var filterMenu = new _filterMenu__WEBPACK_IMPORTED_MODULE_44__["default"](privates.elements.sidePanel, filterGroups);
  var filters = [{
    groupId: 'default',
    filterId: 'all',
    label: 'All Tasks'
  }, {
    groupId: 'dates',
    filterId: 'today',
    label: 'Today'
  }, {
    groupId: 'dates',
    filterId: 'week',
    label: 'This Week'
  }, {
    groupId: 'dates',
    filterId: 'month',
    label: 'This Month'
  }, {
    groupId: 'dates',
    filterId: 'past-due',
    label: 'Past Due'
  }, {
    groupId: 'priorities',
    filterId: 'very-high',
    label: 'Very High'
  }, {
    groupId: 'priorities',
    filterId: 'high',
    label: 'High'
  }, {
    groupId: 'priorities',
    filterId: 'medium',
    label: 'Medium'
  }, {
    groupId: 'priorities',
    filterId: 'low',
    label: 'Low'
  }, {
    groupId: 'priorities',
    filterId: 'very-low',
    label: 'Very Low'
  }];
  filters.forEach(function (filter) {
    filterMenu.addFilter(filter.groupId, filter.filterId, filter.label);
  });
  filterMenu.addEventListener('select-filter', function (e) {
    handleFilterChange(instance, e);
  });
  filterMenu.addGroupIconButton('projects', _images_add_svg__WEBPACK_IMPORTED_MODULE_28__, {
    altText: 'Add project',
    width: ICON_WIDTH,
    height: ICON_HEIGHT,
    callback: function callback() {
      return showAddProjectModal(instance);
    }
  });
  privates.filterMenu = filterMenu;
  updateProjectFilters(instance);
}
/**
 * Create the app's header.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {HTMLElement} parent The parent element under which the header
 *   should be inserted.
 */


function createHeader(instance, parent) {
  var _privateMembers$get6 = privateMembers.get(instance),
      elements = _privateMembers$get6.elements;

  var header = document.createElement('header');
  header.id = 'header';
  var menuButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_58__.createImageButton)(_images_menu_svg__WEBPACK_IMPORTED_MODULE_26__, {
    altText: 'Toggle side panel',
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  });
  elements.menuButton = menuButton;
  var titleContainer = document.createElement('div');
  titleContainer.classList.add('title-container');
  titleContainer.appendChild(menuButton);
  var title = document.createElement('p');
  title.classList.add('title');
  title.textContent = _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].name;
  titleContainer.appendChild(title);
  header.appendChild(titleContainer);
  var appOptionsButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_58__.createImageButton)(_images_app_options_svg__WEBPACK_IMPORTED_MODULE_27__, {
    altText: 'More options',
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  });
  elements.appOptionsButton = appOptionsButton;
  var toolContainer = document.createElement('div');
  toolContainer.classList.add('tools');
  toolContainer.appendChild(appOptionsButton);
  header.appendChild(toolContainer);
  parent.appendChild(header);
}
/**
 * Create the app's side panel.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {HTMLElement} parent The parent element under which the side panel
 *   should be inserted.
 */


function createSidePanel(instance, parent) {
  var _privateMembers$get7 = privateMembers.get(instance),
      elements = _privateMembers$get7.elements;

  elements.sidePanel = document.createElement('aside');
  elements.sidePanel.id = 'side-panel';
  createFilterMenu(instance);
  parent.appendChild(elements.sidePanel);
}
/**
 * Create the resizing bar for the side panel.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {HTMLElement} parent The parent element under which the resizer is
 *   to be inserted.
 */


function createResizer(instance, parent) {
  var _privateMembers$get8 = privateMembers.get(instance),
      elements = _privateMembers$get8.elements;

  elements.resizer = document.createElement('div');
  elements.resizer.classList.add('resizer');

  var handler = function handler(e) {
    var size = "".concat(e.x, "px");
    elements.sidePanel.style.width = size;
    e.preventDefault();
  };

  elements.resizer.addEventListener('mousedown', function (e) {
    // Check for left-click
    if (e.button === 0) {
      document.addEventListener('mousemove', handler);
      e.target.classList.add('dragging');
      e.preventDefault();
    }
  });
  document.addEventListener('mouseup', function (e) {
    if (e.button === 0) {
      document.removeEventListener('mousemove', handler);
      elements.resizer.classList.remove('dragging');
    }
  });
  parent.appendChild(elements.resizer);
}
/**
 * Create the app's main panel.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {HTMLElement} parent The parent element under which the main panel
 *   is to be inserted.
 */


function createMainPanel(instance, parent) {
  var privates = privateMembers.get(instance);
  var mainPanel = document.createElement('div');
  mainPanel.id = 'main-panel';
  privates.elements.mainPanel = mainPanel;
  var header = document.createElement('div');
  header.id = 'main-panel-header';
  var headingContainer = document.createElement('div');
  headingContainer.id = 'main-panel-heading-container';
  header.appendChild(headingContainer);
  var heading = document.createElement('h2');
  heading.id = 'main-panel-heading';
  headingContainer.appendChild(heading);
  var subheading = document.createElement('h3');
  subheading.id = 'main-panel-subheading';
  headingContainer.appendChild(subheading);
  var menu = new _popupMenu__WEBPACK_IMPORTED_MODULE_47__["default"]({
    closeIfScrolled: mainPanel
  });
  privates.mainPanelMenu = menu;
  var addTaskButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_58__.createImageButton)(_images_add_svg__WEBPACK_IMPORTED_MODULE_28__, {
    altText: 'Add task',
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  });
  privates.elements.addTaskButton = addTaskButton;
  var menuButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_58__.createImageButton)(_images_more_svg__WEBPACK_IMPORTED_MODULE_33__, {
    altText: 'More actions',
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  });
  privates.elements.mainPanelMenuButton = menuButton;
  var iconContainer = document.createElement('div');
  iconContainer.classList.add('icon-container');
  iconContainer.appendChild(addTaskButton);
  iconContainer.appendChild(menuButton);
  header.appendChild(iconContainer);
  mainPanel.appendChild(header);
  var taskDisplayOptions = {
    taskCallback: function taskCallback(type, id, task) {
      handleTaskUpdate(instance, type, id, task);
    }
  };
  privates.taskDisplay = new _taskDisplay__WEBPACK_IMPORTED_MODULE_54__["default"](mainPanel, privates.tasks, privates.projects, taskDisplayOptions);
  parent.appendChild(mainPanel);
}
/**
 * Create the app's footer.
 * @param {HTMLElement} parent The parent element under which the footer is
 *   to be inserted.
 */


function createFooter(parent) {
  var footer = document.createElement('footer');
  footer.id = 'footer';
  var copyright = document.createElement('div');
  copyright.classList.add('copyright');
  copyright.innerHTML = "Copyright &copy; ".concat(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].copyrightYears, " ") + "<a href=\"".concat(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].authorWebsite, "\" target=\"_blank\">") + "".concat(_appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].author, "</a>");
  footer.appendChild(copyright);
  parent.appendChild(footer);
}
/**
 * Create the DOM elements for the page content.
 * @param {module:app~App} instance The class instance on which to apply the
 *   function.
 * @param {HTMLElement} parent The container element under which the page
 *   elements should be inserted.
 */


function createPageElements(instance, parent) {
  var privates = privateMembers.get(instance);
  var container = document.createElement('div');
  container.id = 'app';
  privates.elements.appContainer = container;
  createHeader(instance, container);
  var middleContainer = document.createElement('div');
  middleContainer.id = 'middle-container';
  createSidePanel(instance, middleContainer);
  createResizer(instance, middleContainer);
  createMainPanel(instance, middleContainer);
  container.appendChild(middleContainer);
  createFooter(container);
  parent.appendChild(container);
  privates.modalStack = new _modalStack__WEBPACK_IMPORTED_MODULE_46__["default"](parent, container);
}
/**
 * Class responsible for creating the DOM elements for the app and running the
 * event-driven logic.
 */


var App = /*#__PURE__*/function () {
  /**
   * An object holding information about the status of a data import, including
   * whether or not the import was successful and any errors that were
   * encountered.
   * @typedef {Object} module:app~App~importStatus
   * @property {boolean} successful Will be true if data was imported, or false
   *   if data could not be imported due to a fatal error.
   * @property {string} format The format of the data string that was imported.
   *   Will be 'json', 'csv', or 'unknown'. A value of 'unknown' indicates that
   *   the format could not be automatically determined.
   * @property {Object} tasks An object holding information about the number of
   *   tasks that were imported.
   * @property {number} tasks.added The number of new tasks that were added to
   *   the task list.
   * @property {number} tasks.updated The number of existing tasks in the task
   *   list that were updated.
   * @property {number} tasks.failed The number of tasks that failed to import.
   * @property {number} tasks.total The total number of tasks that were
   *   processed.
   * @property {Object} projects An object holding information about the number
   *   of projects that were imported.
   * @property {number} projects.added The number of new projects that were
   *   added to the project list.
   * @property {number} projects.updated The number of existing projects in the
   *   project list that were updated.
   * @property {number} projects.failed The number of projects that failed to
   *   import.
   * @property {number} projects.total The total number of projects that were
   *   processed.
   * @property {string[]} errors An array of error messages describing any
   *   errors that occurred during the import.
   */

  /**
   * Append the DOM elements for the app to the given parent node.
   * @param {HTMLElement} parent The DOM node where the app elements should be
   *   appended.
   */
  function App(parent) {
    _classCallCheck(this, App);

    var privates = {
      tasks: new _taskList__WEBPACK_IMPORTED_MODULE_55__["default"](),
      projects: new _projectList__WEBPACK_IMPORTED_MODULE_49__["default"](),
      modalStack: null,
      filterMenu: null,
      currentFilter: {
        group: null,
        filter: null
      },
      taskDisplay: null,
      settings: new _settings__WEBPACK_IMPORTED_MODULE_51__["default"](),
      mainPanelMenu: null,
      elements: {
        appContainer: null,
        sidePanel: null,
        resizer: null,
        mainPanel: null,
        menuButton: null,
        appOptionsButton: null,
        addTaskButton: null,
        mainPanelMenuButton: null
      },
      narrowScreen: false
    };
    privateMembers.set(this, privates);
    createPageElements(this, parent);
  }
  /**
   * Run the app. This method sets up the event handlers and performs
   * high-level logic. This should not be called until the page elements have
   * been added to the DOM.
   */


  _createClass(App, [{
    key: "run",
    value: function run() {
      var _this = this;

      var privates = privateMembers.get(this);
      window.addEventListener('resize', function () {
        var width = document.documentElement.clientWidth;
        var narrow = width <= NARROW_LAYOUT_CUTOFF; // Adjust side panel if screen changes from narrow to wide or vice versa

        if (narrow && !privates.narrowScreen) {
          closeSidePanel(_this);
        } else if (!narrow && privates.narrowScreen) {
          openSidePanel(_this);
        }

        privates.narrowScreen = narrow;
      });
      privates.filterMenu.expandGroup('dates');
      privates.filterMenu.expandGroup('projects');
      privates.filterMenu.selectFilter('dates', 'today');
      privates.elements.menuButton.addEventListener('click', function () {
        toggleSidePanel(_this);
      });
      var appOptionsButton = privates.elements.appOptionsButton;

      var iconOptions = function iconOptions(source) {
        return {
          source: source,
          width: ICON_WIDTH,
          height: ICON_HEIGHT
        };
      };

      var appOptionsMenu = new _popupMenu__WEBPACK_IMPORTED_MODULE_47__["default"]({
        menuItems: [{
          label: 'Settings...',
          id: 'settings',
          icon: iconOptions(_images_settings_svg__WEBPACK_IMPORTED_MODULE_36__)
        }, {
          label: 'Data Management...',
          id: 'data',
          icon: iconOptions(_images_save_svg__WEBPACK_IMPORTED_MODULE_35__)
        }, {
          label: 'About...',
          id: 'about',
          icon: iconOptions(_images_info_svg__WEBPACK_IMPORTED_MODULE_38__)
        }]
      });
      appOptionsButton.addEventListener('click', function () {
        appOptionsMenu.open(function (itemId) {
          return handleAppMenuSelection(_this, itemId);
        }, {
          referenceElement: appOptionsButton
        });
      });
      privates.elements.addTaskButton.addEventListener('click', function () {
        handleMainPanelMenuSelection(_this, 'add-task');
      });
      var mainPanelMenuButton = privates.elements.mainPanelMenuButton;
      mainPanelMenuButton.addEventListener('click', function () {
        privates.mainPanelMenu.open(function (item) {
          return handleMainPanelMenuSelection(_this, item);
        }, {
          referenceElement: mainPanelMenuButton
        });
      });
      initializeStorage(this);
      loadAllStorageData(this);

      var taskCallback = function taskCallback(event) {
        return updateStorage(_this, 'task', event);
      };

      privates.tasks.addEventListener('add-task', taskCallback);
      privates.tasks.addEventListener('update-task', taskCallback);
      privates.tasks.addEventListener('delete-task', taskCallback);

      var projCallback = function projCallback(event) {
        return updateStorage(_this, 'project', event);
      };

      privates.projects.addEventListener('add-project', projCallback);
      privates.projects.addEventListener('update-project', projCallback);
      privates.projects.addEventListener('delete-project', projCallback);

      var settingsCallback = function settingsCallback(event) {
        return updateStorage(_this, 'setting', event);
      };

      privates.settings.addEventListener('update-setting', settingsCallback);
      /* Add random task and project data for testing */
      // TODO: remove

      addRandomData(this, 0, 0);
      updateProjectFilters(this);
      privates.filterMenu.selectFilter('default', 'all');
    }
    /**
     * Convert data to an object suitable for serialization.
     * @returns {Object} An object representing serializable data for the class.
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var privates = privateMembers.get(this);
      return {
        app: {
          name: _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].name,
          version: _appInfo__WEBPACK_IMPORTED_MODULE_39__["default"].version
        },
        settings: privates.settings,
        tasks: privates.tasks,
        projects: privates.projects
      };
    }
  }]);

  return App;
}();

/* harmony default export */ __webpack_exports__["default"] = (App);

/***/ }),

/***/ "./src/modules/appInfo.js":
/*!********************************!*\
  !*** ./src/modules/appInfo.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var AppInfo = {
  name: 'Task It Up',
  version: "1.0.0",
  author: "Greg Kikola",
  authorWebsite: "https://www.gregkikola.com/",
  copyrightYears: "2021\u20132022",
  license: "MIT",
  homepage: "https://github.com/gkikola/task-it-up#readme",
  storagePrefix: "task-it-up"
};
/* harmony default export */ __webpack_exports__["default"] = (AppInfo);

/***/ }),

/***/ "./src/modules/collapsible.js":
/*!************************************!*\
  !*** ./src/modules/collapsible.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_15__);
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


















/**
 * Defines the [Collapsible]{@link module:collapsible~Collapsible} class.
 * @module collapsible
 */
var FOCUSABLE_SELECTOR = ['a[href]', 'input', 'select', 'textarea', 'button'].join(', ');
/**
 * Object holding private members for the
 * [Collapsible]{@link module:collapsible~Collapsible} class.
 * @typedef {Object} module:collapsible~Collapsible~privates
 * @property {HTMLElement} container The collapsible element.
 * @property {HTMLElement} content The inner container holding the collapsible
 *   contents.
 * @property {boolean} collapsed Indicates whether the container is currently
 *   collapsed or not.
 */

/**
 * Holds private data for the
 * [Collapsible]{@link module:collapsible~Collapsible} class.
 * @type {WeakMap}
 * @see module:collapsible~Collapsible~privates
 */

var privateMembers = new WeakMap();
/**
 * A container on the page that can be expanded or collapsed.
 */

var Collapsible = /*#__PURE__*/function () {
  /**
   * Create a collapsible panel and add it to the DOM.
   * @param {HTMLElement} parent The parent node under which the collapsible is
   *   to be inserted.
   * @param {HTMLElement} [referenceNode=null] The child node before which the
   *   collapsible should be inserted. If not given, the collapsible will be
   *   appended at the end of the parent's child nodes.
   * @param {Object} [options={}] Specifies additional options for the modal.
   * @param {string} [options.id] The identifier for the collapsible container.
   * @param {string[]} [options.classList] An array of class names to be
   *   applied to the collapsible container.
   * @param {boolean} [options.collapsed] Specifies whether the panel should be
   *   initially collapsed.
   */
  function Collapsible(parent) {
    var _container$classList;

    var referenceNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Collapsible);

    var container = document.createElement('div');
    if (options.id) container.id = options.id;
    container.classList.add('collapsible');
    if (options.classList) (_container$classList = container.classList).add.apply(_container$classList, _toConsumableArray(options.classList));
    var innerContainer = document.createElement('div');
    innerContainer.classList.add('collapsible-content');
    container.appendChild(innerContainer);
    parent.insertBefore(container, referenceNode);
    var privates = {
      container: container,
      content: innerContainer,
      collapsed: false
    };
    privateMembers.set(this, privates);
    if ('collapsed' in options && options.collapsed) this.collapse();else this.expand();
  }
  /**
   * Determines whether the container is currently collapsed.
   * @type {boolean}
   */


  _createClass(Collapsible, [{
    key: "collapsed",
    get: function get() {
      return privateMembers.get(this).collapsed;
    },
    set: function set(collapsed) {
      if (collapsed) this.collapse();else this.expand();
    }
    /**
     * The inner container element holding the panel's content.
     * @type {HTMLElement}
     */

  }, {
    key: "content",
    get: function get() {
      return privateMembers.get(this).content;
    }
    /**
     * Expand the panel, so that its contents are visible.
     */

  }, {
    key: "expand",
    value: function expand() {
      var privates = privateMembers.get(this);

      if (privates.collapsed) {
        privates.collapsed = false;
        privates.container.classList.remove('collapsed');
        privates.container.removeAttribute('aria-hidden');
        privates.container.querySelectorAll(FOCUSABLE_SELECTOR).forEach(function (elem) {
          elem.removeAttribute('tabindex');
        });
        this.update();
      }
    }
    /**
     * Collapse the panel, so that its contents are hidden.
     */

  }, {
    key: "collapse",
    value: function collapse() {
      var privates = privateMembers.get(this);

      if (!privates.collapsed) {
        privates.collapsed = true;
        privates.container.classList.add('collapsed');
        privates.container.setAttribute('aria-hidden', 'true');
        privates.container.querySelectorAll(FOCUSABLE_SELECTOR).forEach(function (elem) {
          elem.setAttribute('tabindex', '-1');
        });
        this.update();
      }
    }
    /**
     * Toggle the collapsed state of the panel.
     * @returns {boolean} True if the panel is in the collapsed state after the
     *   toggle, and false otherwise.
     */

  }, {
    key: "toggle",
    value: function toggle() {
      var privates = privateMembers.get(this);
      if (privates.collapsed) this.expand();else this.collapse();
      return privates.collapsed;
    }
    /**
     * Update the collapsible container to account for changes to its content.
     * This will recalculate the height of the container and should be called
     * whenever the panel's content is altered.
     */

  }, {
    key: "update",
    value: function update() {
      var privates = privateMembers.get(this);
      var height = privates.collapsed ? '0' : "".concat(privates.content.offsetHeight, "px");
      privates.container.style.height = height;
    }
  }]);

  return Collapsible;
}();

/* harmony default export */ __webpack_exports__["default"] = (Collapsible);

/***/ }),

/***/ "./src/modules/datePicker.js":
/*!***********************************!*\
  !*** ./src/modules/datePicker.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.number.is-integer.js */ "./node_modules/core-js/modules/es.number.is-integer.js");
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/startOfMonth/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/startOfWeek/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/add/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isBefore/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isSameDay/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isToday/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isSameMonth/index.js");
/* harmony import */ var _images_arrow_left_svg__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../images/arrow-left.svg */ "./src/images/arrow-left.svg");
/* harmony import */ var _images_arrow_right_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../images/arrow-right.svg */ "./src/images/arrow-right.svg");
/* harmony import */ var _images_today_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../images/today.svg */ "./src/images/today.svg");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utility/dom */ "./src/modules/utility/dom.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }












/**
 * Defines the [DatePicker]{@link module:datePicker~DatePicker} class.
 * @module datePicker
 */





var ICON_WIDTH = 24;
var ICON_HEIGHT = 24;
var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
/**
 * Object holding private members for the
 * [DatePicker]{@link module:datePicker~DatePicker} class.
 * @typedef {Object} module:datePicker~DatePicker~privates
 * @property {number} year The year that is currently selected.
 * @property {number} month The month that is currently selected, represented
 *   as a value from 0 to 11.
 * @property {number} day The day of the month that is currently selected,
 *   represented as a value from 1 to 31.
 * @property {number} displayedMonth The month that is currently being
 *   displayed in the calendar grid.
 * @property {number} displayedYear The year that is currently being displayed
 *   in the calendar grid.
 * @property {HTMLElement} monthInput The select box element that is shown in
 *   the header and is used to select the month.
 * @property {HTMLElement} yearInput The input element that is shown in the
 *   header and is used to select the year.
 * @property {HTMLElement} dayGrid The container element holding the grid of
 *   calendar days.
 */

/**
 * Holds private data for the [DatePicker]{@link module:datePicker~DatePicker}
 * class.
 * @type {WeakMap}
 * @see module:datePicker~DatePicker~privates
 */

var privateMembers = new WeakMap();
/**
 * Clear the grid of calendar days and rebuild it using the current display
 * month and display year.
 * @param {module:datePicker~DatePicker} instance The class instance on which
 *   to apply the function.
 */

function updateDayGrid(instance) {
  var privates = privateMembers.get(instance);
  privates.dayGrid.innerHTML = '';
  var date = new Date(privates.displayedYear, privates.displayedMonth, 1);

  if (privates.displayedYear < 100) {
    // Fix for two-digit years
    date.setFullYear(privates.displayedYear);
  }

  var selected = instance.date;
  var monthStart = (0,date_fns__WEBPACK_IMPORTED_MODULE_14__["default"])(date);
  var start = (0,date_fns__WEBPACK_IMPORTED_MODULE_15__["default"])(monthStart);
  var end = (0,date_fns__WEBPACK_IMPORTED_MODULE_16__["default"])(start, {
    weeks: 5,
    days: 6,
    hours: 11
  });
  ['S', 'M', 'T', 'W', 'T', 'F', 'S'].forEach(function (label) {
    var dayLabel = document.createElement('span');
    dayLabel.classList.add('date-picker-day-header');
    dayLabel.textContent = label;
    privates.dayGrid.appendChild(dayLabel);
  });
  var currentDay = start;

  while ((0,date_fns__WEBPACK_IMPORTED_MODULE_17__["default"])(currentDay, end)) {
    var dayElem = document.createElement('button');
    dayElem.classList.add('date-picker-day');
    if ((0,date_fns__WEBPACK_IMPORTED_MODULE_18__["default"])(selected, currentDay)) dayElem.classList.add('selected');else if ((0,date_fns__WEBPACK_IMPORTED_MODULE_19__["default"])(currentDay)) dayElem.classList.add('today');

    if (!(0,date_fns__WEBPACK_IMPORTED_MODULE_20__["default"])(date, currentDay)) {
      dayElem.classList.add('different-month');
    }

    dayElem.textContent = currentDay.getDate();
    dayElem.dataset.year = currentDay.getFullYear();
    dayElem.dataset.month = currentDay.getMonth();
    dayElem.dataset.day = currentDay.getDate();
    privates.dayGrid.appendChild(dayElem);
    currentDay = (0,date_fns__WEBPACK_IMPORTED_MODULE_16__["default"])(currentDay, {
      days: 1
    });
  }
}
/**
 * Update the month and year input controls to match the selected date.
 * @param {module:datePicker~DatePicker} instance The class instance on which
 *   to apply the function.
 */


function updateInputs(instance) {
  var privates = privateMembers.get(instance);
  privates.monthInput.value = privates.displayedMonth.toString();
  privates.yearInput.value = privates.displayedYear.toString();
}
/**
 * Create the form elements for the date picker.
 * @param {module:datePicker~DatePicker} instance The class instance on which
 *   to apply the function.
 * @param {HTMLElement} parent The parent DOM node under which the form
 *   should be inserted.
 */


function createFormElements(instance, parent) {
  var privates = privateMembers.get(instance);
  var heading = document.createElement('div');
  heading.classList.add('date-picker-heading');
  var menuItems = MONTHS.map(function (month, index) {
    return {
      value: index.toString(),
      label: month
    };
  });
  privates.monthInput = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createFormControl)({
    type: 'select',
    id: 'date-picker-month-select',
    name: 'date-picker-month-select',
    classList: ['form-select-inline'],
    menuItems: menuItems
  });
  privates.yearInput = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createFormControl)({
    type: 'number',
    id: 'date-picker-year-input',
    name: 'date-picker-year-input',
    classList: ['form-input-inline', 'form-input-count']
  });
  var monthYearContainer = document.createElement('div');
  monthYearContainer.appendChild(privates.monthInput);
  var spacer = document.createElement('span');
  spacer.classList.add('form-input-label-inline');
  spacer.textContent = ' ';
  monthYearContainer.appendChild(spacer);
  monthYearContainer.appendChild(privates.yearInput);
  heading.appendChild(monthYearContainer);
  var buttonContainer = document.createElement('div');
  var backButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createImageButton)(_images_arrow_left_svg__WEBPACK_IMPORTED_MODULE_10__, {
    altText: 'Go to previous month',
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  });
  var todayButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createImageButton)(_images_today_svg__WEBPACK_IMPORTED_MODULE_12__, {
    altText: 'Go to today',
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  });
  var forwardButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createImageButton)(_images_arrow_right_svg__WEBPACK_IMPORTED_MODULE_11__, {
    altText: 'Go to next month',
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  });
  buttonContainer.appendChild(backButton);
  buttonContainer.appendChild(todayButton);
  buttonContainer.appendChild(forwardButton);
  heading.appendChild(buttonContainer);
  parent.appendChild(heading);
  var grid = document.createElement('div');
  grid.classList.add('date-picker-grid');
  parent.appendChild(grid);
  privates.dayGrid = grid;
  updateInputs(instance);
  updateDayGrid(instance);
  backButton.addEventListener('click', function () {
    return instance.goToPreviousMonth();
  });
  todayButton.addEventListener('click', function () {
    return instance.goToThisMonth();
  });
  forwardButton.addEventListener('click', function () {
    return instance.goToNextMonth();
  });
  privates.monthInput.addEventListener('change', function (e) {
    privates.displayedMonth = Number(e.target.value);
    updateDayGrid(instance);
  });

  var yearListener = function yearListener(e) {
    if (e.type === 'change' || e.target.value.length === 4) {
      var value = Number(e.target.value);

      if (e.target.value.length > 0 && Number.isInteger(value)) {
        if (privates.displayedYear !== value) {
          privates.displayedYear = value;
          updateDayGrid(instance);
        }
      } else if (e.type === 'change') {
        e.target.value = privates.displayedYear.toString();
      }
    }
  };

  privates.yearInput.addEventListener('input', yearListener);
  privates.yearInput.addEventListener('change', yearListener);
  privates.dayGrid.addEventListener('click', function (e) {
    var elem = e.target;

    if (elem.classList.contains('date-picker-day')) {
      privates.year = Number(elem.dataset.year);
      privates.month = Number(elem.dataset.month);
      privates.day = Number(elem.dataset.day);

      if (privates.displayedMonth !== privates.month || privates.displayedYear !== privates.year) {
        privates.displayedMonth = privates.month;
        privates.displayedYear = privates.year;
        updateInputs(instance);
      }

      updateDayGrid(instance);
    }
  });
}
/**
 * Controls a form that the user can use to select a calendar date.
 */


var DatePicker = /*#__PURE__*/function () {
  /**
   * Create the date picker form.
   * @param {HTMLElement} parent The parent DOM node under which the form
   *   should be inserted.
   * @param {Date} [startDate] The date that will be initially selected. If not
   *   given, then the present date is used.
   */
  function DatePicker(parent, startDate) {
    _classCallCheck(this, DatePicker);

    var date = startDate || new Date();
    var privates = {
      year: date.getFullYear(),
      month: date.getMonth(),
      day: date.getDate(),
      displayedMonth: date.getMonth(),
      displayedYear: date.getFullYear(),
      monthInput: null,
      yearInput: null,
      dayGrid: null
    };
    privateMembers.set(this, privates);
    createFormElements(this, parent);
  }
  /**
   * The date that is currently selected in the form.
   * @type {Date}
   */


  _createClass(DatePicker, [{
    key: "date",
    get: function get() {
      var privates = privateMembers.get(this);
      var value = new Date(privates.year, privates.month, privates.day);

      if (privates.year < 100) {
        // Fix for two-digit years
        value.setFullYear(privates.year);
      }

      return value;
    }
    /**
     * The year that is currently selected in the form. For four-digit years,
     * this will be a four-digit number.
     * @type {number}
     */

  }, {
    key: "year",
    get: function get() {
      return privateMembers.get(this).year;
    }
    /**
     * The month that is currently selected in the form, as a number between 0
     * and 11, with January corresponding to a value of 0.
     * @type {number}
     */

  }, {
    key: "month",
    get: function get() {
      return privateMembers.get(this).month;
    }
    /**
     * The day of the month that is currently selected in the form, as a number
     * between 1 and 31.
     * @type {number}
     */

  }, {
    key: "day",
    get: function get() {
      return privateMembers.get(this).day;
    }
    /**
     * Switch to the present month.
     */

  }, {
    key: "goToThisMonth",
    value: function goToThisMonth() {
      var privates = privateMembers.get(this);
      var now = new Date();
      privates.displayedYear = now.getFullYear();
      privates.displayedMonth = now.getMonth();
      updateInputs(this);
      updateDayGrid(this);
    }
    /**
     * Switch to the previous month.
     */

  }, {
    key: "goToPreviousMonth",
    value: function goToPreviousMonth() {
      var privates = privateMembers.get(this);

      if (privates.displayedMonth > 0) {
        privates.displayedMonth -= 1;
      } else {
        privates.displayedYear -= 1;
        privates.displayedMonth = 11;
      }

      updateInputs(this);
      updateDayGrid(this);
    }
    /**
     * Switch to the next month.
     */

  }, {
    key: "goToNextMonth",
    value: function goToNextMonth() {
      var privates = privateMembers.get(this);

      if (privates.displayedMonth < 11) {
        privates.displayedMonth += 1;
      } else {
        privates.displayedYear += 1;
        privates.displayedMonth = 0;
      }

      updateInputs(this);
      updateDayGrid(this);
    }
  }]);

  return DatePicker;
}();

/* harmony default export */ __webpack_exports__["default"] = (DatePicker);

/***/ }),

/***/ "./src/modules/filterMenu.js":
/*!***********************************!*\
  !*** ./src/modules/filterMenu.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.map.js */ "./node_modules/core-js/modules/es.map.js");
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _images_arrow_right_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../images/arrow-right.svg */ "./src/images/arrow-right.svg");
/* harmony import */ var _images_arrow_down_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../images/arrow-down.svg */ "./src/images/arrow-down.svg");
/* harmony import */ var _collapsible__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./collapsible */ "./src/modules/collapsible.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utility/dom */ "./src/modules/utility/dom.js");


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }















var ICON_WIDTH = 24;
var ICON_HEIGHT = 24;
/**
 * Object holding private members for the
 * [FilterMenu]{@link module:filterMenu~FilterMenu} class.
 * @typedef {Object} module:filterMenu~FilterMenu~privates
 * @property {HTMLElement} container The DOM element that contains the menu.
 * @property {module:filterMenu~FilterMenu~filterInfo} selectedFilter Describes
 *   the currently selected task filter, if any.
 * @property {Map} groupElements A map associating filter group identifiers to
 *   [groupElements]{@link module:filterMenu~FilterMenu~groupElements} objects.
 * @property {EventEmitter} eventEmitter Holds the event emitter. The event
 *   emitter dispatches events to any attached event listeners.
 */

/**
 * Holds privates data for the [FilterMenu]{@link module:filterMenu~FilterMenu}
 * class.
 * @type {WeakMap}
 * @see module:filterMenu~FilterMenu~privates
 */

var privateMembers = new WeakMap();
/**
 * Get the [groupElements]{@link module:filterMenu~FilterMenu~groupElements}
 * object associated with a filter group.
 * @param {module:filterMenu~FilterMenu} instance The class instance on which
 *   to apply the function.
 * @param {string} groupId The identifier for the group whose elements are to
 *   be retrieved.
 * @return {module:filterMenu~FilterMenu~groupElements} The object containing
 *   the group's DOM elements.
 * @throws {RangeError} If the given group identifier is invalid.
 */

function getGroupElements(instance, groupId) {
  var elements = privateMembers.get(instance).groupElements.get(groupId);

  if (!elements) {
    throw new RangeError("Cannot locate filter group \"".concat(groupId, "\""));
  }

  return elements;
}
/**
 * Get the list item element in the DOM belonging to a particular filter.
 * @param {module:filterMenu~FilterMenu} instance The class instance on which
 *   to apply the function.
 * @param {string} groupId The identifier for the group containing the
 *   filter.
 * @param {string} filterId The identifier for the filter.
 * @returns {HTMLElement} The list item element for the filter.
 * @throws {RangeError} If either the group or filter identifiers are
 *   invalid.
 */


function getFilterItemElement(instance, groupId, filterId) {
  var item = getGroupElements(instance, groupId).filterItems.get(filterId);

  if (!item) {
    throw new RangeError("Cannot locate filter \"".concat(filterId, "\" in group ") + "\"".concat(groupId, "\""));
  }

  return item;
}
/**
 * Clear the filter selection, but do so without firing any events.
 * @param {module:filterMenu~FilterMenu} instance The class instance on which
 *   to apply the function.
 */


function silentClearSelection(instance) {
  var privates = privateMembers.get(instance);

  if (privates.selectedFilter.group && privates.selectedFilter.filter) {
    var listItem = getFilterItemElement(instance, privates.selectedFilter.group, privates.selectedFilter.filter);
    listItem.classList.remove('selected');
  }

  privates.selectedFilter.group = null;
  privates.selectedFilter.filter = null;
}
/**
 * A customizable menu of task filters.
 */


var FilterMenu = /*#__PURE__*/function () {
  /**
   * Event that is fired when a filter item is selected, or when the selection
   * is cleared.
   * @event module:filterMenu~FilterMenu~selectFilter
   * @type {Object}
   * @property {string} type The event type: select-filter.
   * @property {module:filterMenu~FilterMenu} target The filter menu that fired
   *   the event.
   * @property {string} [groupId] The identifier for the filter group
   *   containing the selected filter, if any.
   * @property {string} [filterId] The identifier for the filter that was
   *   selected, if any.
   * @property {string} [filterLabel] The displayed label for the filter that
   *   was selected, if any.
   */

  /**
   * Identifies a task filter in the menu.
   * @typedef {Object} module:filterMenu~FilterMenu~filterInfo
   * @property {string} [group] The identifier for the filter group
   *   containing the filter.
   * @property {string} [filter] The identifier for the filter.
   */

  /**
   * Holds references to DOM elements related to a particular filter group in
   * the filter menu.
   * @typedef {Object} module:filterMenu~FilterMenu~groupElements
   * @property {HTMLElement} container The container element for the group.
   * @property {HTMLElement} [expandIcon] The expand/collapse icon element in
   *   the group heading (if any).
   * @property {module:collapsible~Collapsible} [collapsible] The collapsible
   *   panel containing the group's filter list. If the group cannot be
   *   collapsed, this should be null.
   * @property {HTMLElement} filterList The list element containing the
   *   filter items belonging to the group.
   * @property {Map} filterItems A map associating filter identifiers to the
   *   list item elements in the DOM belonging to each filter item in the
   *   group.
   */

  /**
   * Create a filter menu and add it to the DOM.
   * @param {HTMLElement} parent The parent DOM node that will contain the
   *   menu.
   * @param {Object[]} [groups] An array of filter groups to add to the menu.
   * @param {string} groups[].id The identifier of the filter group.
   * @param {string} [groups[].label] The displayed label for the filter group.
   *   If not given, the group will have no heading and will not be
   *   collapsible.
   */
  function FilterMenu(parent, groups) {
    var _this = this;

    _classCallCheck(this, FilterMenu);

    var privates = {
      container: null,
      selectedFilter: {
        group: null,
        filter: null
      },
      groupElements: new Map(),
      eventEmitter: new (events__WEBPACK_IMPORTED_MODULE_10___default())()
    };
    privateMembers.set(this, privates);
    privates.container = document.createElement('div');
    privates.container.classList.add('filter-menu');

    if (groups) {
      groups.forEach(function (group) {
        return _this.addGroup(group.id, group.label);
      });
    }

    parent.appendChild(privates.container);
  }
  /**
   * Add a filter group to the menu.
   * @param {string} id The unique identifier of the group.
   * @param {string} [label] The displayed label for the group. If not given,
   *   the group will have no heading and will not be collapsible.
   */


  _createClass(FilterMenu, [{
    key: "addGroup",
    value: function addGroup(id, label) {
      var _this2 = this;

      var privates = privateMembers.get(this);
      var groupContainer = document.createElement('div');
      groupContainer.classList.add('filter-group');
      groupContainer.dataset.groupId = id;
      var toggle = null;
      var arrow = null;

      if (label) {
        var heading = document.createElement('div');
        heading.classList.add('filter-group-heading');
        groupContainer.appendChild(heading);
        toggle = document.createElement('button');
        toggle.classList.add('filter-group-toggle');
        heading.appendChild(toggle);
        var iconContainer = document.createElement('div');
        iconContainer.classList.add('icon-container');
        heading.appendChild(iconContainer);
        arrow = new Image();
        arrow.src = _images_arrow_right_svg__WEBPACK_IMPORTED_MODULE_11__;
        arrow.alt = 'Expand';
        arrow.width = ICON_WIDTH;
        arrow.height = ICON_HEIGHT;
        arrow.classList.add('filter-group-expand-icon');
        toggle.appendChild(arrow);
        var text = document.createElement('span');
        text.classList.add('filter-group-label');
        text.textContent = label;
        toggle.appendChild(text);
      }

      var collapsible;
      var listContainer;

      if (label) {
        collapsible = new _collapsible__WEBPACK_IMPORTED_MODULE_13__["default"](groupContainer, null, {
          collapsed: true
        });
        listContainer = collapsible.content;
      } else {
        collapsible = null;
        listContainer = groupContainer;
      }

      var list = document.createElement('ul');
      list.classList.add('filter-list');
      listContainer.appendChild(list);
      privates.groupElements.set(id, {
        container: groupContainer,
        expandIcon: arrow,
        collapsible: collapsible,
        filterList: list,
        filterItems: new Map()
      });
      if (toggle) toggle.addEventListener('click', function () {
        return _this2.toggleGroup(id);
      });
      privates.container.appendChild(groupContainer);
    }
    /**
     * Add a filter to the menu.
     * @param {string} groupId The identifier of the group in which to insert the
     *   filter.
     * @param {string} filterId The identifier for the filter.
     * @param {string} label The displayed label for the filter.
     * @param {Object} [options={}] An object holding options controlling the
     *   filter insertion.
     * @param {number} [options.count=0] The number of tasks matching the filter.
     * @param {string} [options.insertBefore] The identifier for the filter
     *   before which the new filter should be inserted. If not given, then the
     *   filter will be inserted at the end of the list.
     * @throws {RangeError} If the group identifier is invalid.
     */

  }, {
    key: "addFilter",
    value: function addFilter(groupId, filterId, label) {
      var _groupElements$collap,
          _this3 = this;

      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var groupElements = getGroupElements(this, groupId);
      var item = document.createElement('li');
      item.classList.add('filter-item');
      item.dataset.filterId = filterId;
      item.dataset.filterLabel = label;
      var button = document.createElement('button');
      button.classList.add('filter-item-selector');
      item.appendChild(button);
      var labelElem = document.createElement('span');
      labelElem.classList.add('filter-item-label');
      labelElem.textContent = label;
      button.appendChild(labelElem);
      var countElem = document.createElement('span');
      countElem.classList.add('filter-item-count');
      countElem.textContent = options.count || '';
      button.appendChild(countElem);
      var referenceNode = null;

      if (options.insertBefore) {
        referenceNode = getFilterItemElement(this, groupId, options.insertBefore);
      }

      groupElements.filterList.insertBefore(item, referenceNode);
      groupElements.filterItems.set(filterId, item);
      (_groupElements$collap = groupElements.collapsible) === null || _groupElements$collap === void 0 ? void 0 : _groupElements$collap.update();
      button.addEventListener('click', function () {
        _this3.selectFilter(groupId, filterId);
      });
    }
    /**
     * Remove a filter from the menu.
     * @param {string} groupId The identifier of the group containing the filter.
     * @param {string} filterId The identifier of the filter to remove.
     * @throws {RangeError} If either the group or filter identifiers are
     *   invalid.
     */

  }, {
    key: "removeFilter",
    value: function removeFilter(groupId, filterId) {
      var _groupElements$collap2;

      var privates = privateMembers.get(this); // If filter is selected, clear selection

      if (privates.selectedFilter.group === groupId && privates.selectedFilter.filter === filterId) {
        this.clearSelection();
      }

      var groupElements = getGroupElements(this, groupId);
      var item = getFilterItemElement(this, groupId, filterId);
      groupElements.filterList.removeChild(item);
      groupElements.filterItems.delete(filterId);
      (_groupElements$collap2 = groupElements.collapsible) === null || _groupElements$collap2 === void 0 ? void 0 : _groupElements$collap2.update();
    }
    /**
     * Remove all the filters in a filter group.
     * @param {string} id The identifier for the group to empty.
     * @throws {RangeError} If the group identifier is invalid.
     */

  }, {
    key: "removeAllFilters",
    value: function removeAllFilters(id) {
      var _groupElements$collap3;

      // If a filter in the group is selected, clear selection
      if (privateMembers.get(this).selectedFilter.group === id) {
        this.clearSelection();
      }

      var groupElements = getGroupElements(this, id);
      var list = groupElements.filterList;
      groupElements.filterItems.forEach(function (item) {
        return list.removeChild(item);
      });
      groupElements.filterItems.clear();
      (_groupElements$collap3 = groupElements.collapsible) === null || _groupElements$collap3 === void 0 ? void 0 : _groupElements$collap3.update();
    }
    /**
     * Determine whether or not a filter exists in a filter group. This method
     * will return false if either the group does not exist, or if the filter
     * does not exist within the group.
     * @param {string} groupId The identifier of the group containing the filter.
     * @param {string} filterId The identifier of the filter to test.
     * @returns {boolean} True if the given group and filter exist in the filter
     *   menu.
     */

  }, {
    key: "hasFilter",
    value: function hasFilter(groupId, filterId) {
      var groupElements = privateMembers.get(this).groupElements.get(groupId);
      return groupElements ? groupElements.filterItems.has(filterId) : false;
    }
    /**
     * Expand a filter group, so that its filter items are visible.
     * @param {string} id The identifier for the group to be expanded.
     * @throws {RangeError} If the group identifier is invalid.
     */

  }, {
    key: "expandGroup",
    value: function expandGroup(id) {
      var elements = getGroupElements(this, id);
      var collapsible = elements.collapsible,
          expandIcon = elements.expandIcon;

      if (collapsible) {
        collapsible.expand();
        expandIcon.src = _images_arrow_down_svg__WEBPACK_IMPORTED_MODULE_12__;
        expandIcon.alt = 'Collapse';
      }
    }
    /**
     * Collapse a filter group, so that its filter items are hidden.
     * @param {string} id The identifier for the group to be collapsed.
     * @throws {RangeError} If the group identifier is invalid.
     */

  }, {
    key: "collapseGroup",
    value: function collapseGroup(id) {
      var elements = getGroupElements(this, id);
      var collapsible = elements.collapsible,
          expandIcon = elements.expandIcon;

      if (collapsible) {
        collapsible.collapse();
        expandIcon.src = _images_arrow_right_svg__WEBPACK_IMPORTED_MODULE_11__;
        expandIcon.alt = 'Expand';
      }
    }
    /**
     * Toggle the collapsed state of a filter group. If the group is collapsed,
     * it will be expanded and vice versa.
     * @param {string} id The identifier for the group to expand or collapse.
     * @throws {RangeError} If the group identifier is invalid.
     */

  }, {
    key: "toggleGroup",
    value: function toggleGroup(id) {
      var elements = getGroupElements(this, id);
      var collapsible = elements.collapsible;

      if (collapsible) {
        if (collapsible.collapsed) this.expandGroup(id);else this.collapseGroup(id);
      }
    }
    /**
     * Add an icon button to a group heading.
     * @param {string} groupId The identifier of the group in which to insert the
     *   icon button.
     * @param {string} source The source URL for the image to display in the
     *   button.
     * @param {module:dom~imageButtonOptions} [options={}] An object holding
     *   configuration options for the button.
     * @returns {HTMLElement} A reference to the button that was created.
     * @throws {RangeError} If the group identifier is invalid.
     */

  }, {
    key: "addGroupIconButton",
    value: function addGroupIconButton(groupId, source) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var _getGroupElements = getGroupElements(this, groupId),
          container = _getGroupElements.container;

      var iconContainer = container.querySelector('.icon-container');
      var button = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_14__.createImageButton)(source, options);
      iconContainer.appendChild(button);
      return button;
    }
    /**
     * Select a filter in the menu.
     * @param {string} groupId The identifier for the group containing the filter
     *   to be selected.
     * @param {string} filterId The identifier for the filter to be selected.
     * @fires module:filterMenu~FilterMenu~selectFilter
     */

  }, {
    key: "selectFilter",
    value: function selectFilter(groupId, filterId) {
      var privates = privateMembers.get(this);
      silentClearSelection(this); // Expand the containing group if it is not already

      this.expandGroup(groupId);
      var listItem = getFilterItemElement(this, groupId, filterId);
      listItem.classList.add('selected');
      privates.selectedFilter.group = groupId;
      privates.selectedFilter.filter = filterId;
      var filterLabel = listItem.dataset.filterLabel;
      privates.eventEmitter.emit('select-filter', {
        type: 'select-filter',
        target: this,
        groupId: groupId,
        filterId: filterId,
        filterLabel: filterLabel
      });
    }
    /**
     * Clear the filter selection, so that none of the filters in the menu are
     * selected.
     * @fires module:filterMenu~FilterMenu~selectFilter
     */

  }, {
    key: "clearSelection",
    value: function clearSelection() {
      silentClearSelection(this);
      privateMembers.get(this).eventEmitter.emit('select-filter', {
        type: 'select-filter',
        target: this,
        groupId: null,
        filterId: null,
        filterLabel: null
      });
    }
    /**
     * Retrieve the task filter that is currently selected in the menu, if any.
     * @returns {module:filterMenu~FilterMenu~filterInfo} An object describing
     *   the selected filter.
     */

  }, {
    key: "getSelection",
    value: function getSelection() {
      return lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_0___default()(privateMembers.get(this).selectedFilter);
    }
    /**
     * Add an event listener to the menu.
     * @param {string} type The type of event to listen for.
     * @param {Function} listener The event listener to be called when the event
     *   is fired.
     */

  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      privateMembers.get(this).eventEmitter.on(type, listener);
    }
  }]);

  return FilterMenu;
}();

/* harmony default export */ __webpack_exports__["default"] = (FilterMenu);

/***/ }),

/***/ "./src/modules/modalStack.js":
/*!***********************************!*\
  !*** ./src/modules/modalStack.js ***!
  \***********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _images_close_svg__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../images/close.svg */ "./src/images/close.svg");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utility/dom */ "./src/modules/utility/dom.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }











/**
 * Defines the [ModalStack]{@link module:modalStack~ModalStack} class.
 * @module modalStack
 */


var FOCUSABLE_SELECTOR = ['a[href]', 'input', 'select', 'textarea', 'button'].join(', ');
var ICON_WIDTH = 24;
var ICON_HEIGHT = 24;
var Z_INDEX_START = 500;
var Z_INDEX_STEP = 100;
var Z_INDEX_OVERLAY_STEP = 50;
/**
 * Interface for classes that represent a modal dialog.
 * @interface Modal
 */

/**
 * The title of the modal.
 * @member {string} module:modalStack~Modal#title
 */

/**
 * The label that should be used for the confirm button, shown at the bottom of
 * the modal.
 * @member {string} module:modalStack~Modal#confirmLabel
 * @default Okay
 */

/**
 * The label that should be used for the cancel button, shown at the bottom of
 * the modal.
 * @member {string} module:modalStack~Modal#cancelLabel
 * @default Cancel
 */

/**
 * Indicates whether to show the cancel button in the modal window. If set to
 * true, then the button should not be displayed.
 * @member {boolean} module:modalStack~Modal#noCancelButton
 * @default false
 */

/**
 * Indicates which element to focus after the modal has been opened. This
 * property can either give the element itself, or can be a string with one of
 * the following options: 'confirm' will focus the Confirm button in the modal,
 * 'cancel' will focus the Cancel button, and 'none' will focus nothing.
 * @member {HTMLElement|string} module:modalStack~Modal#initFocus
 * @default confirm
 */

/**
 * Create and display the modal's main content.
 * @function module:modalStack~Modal#addContent
 * @param {HTMLElement} parent The parent DOM node under which the modal's main
 *   content will be inserted.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal is being inserted.
 */

/**
 * Confirm the modal. This method should be invoked when the modal is
 * succesfully confirmed by the user.
 * @function module:modalStack~Modal#confirm
 */

/**
 * Cancel the modal. This method should be invoked when the modal is canceled
 * by the user.
 * @function module:modalStack~Modal#cancel
 */

/**
 * Validate the modal. This method should be invoked when the user attempts to
 * confirm the modal.
 * @function module:modalStack~Modal#validate
 * @returns {boolean} True if the user's selections have passed validation, and
 *   false otherwise.
 */

/**
 * Object holding private members for the
 * [ModalStack]{@link module:modalStack~ModalStack} class.
 * @typedef {Object} module:modalStack~ModalStack~privates
 * @property {HTMLElement} overlay The screen overlay element in the DOM.
 * @property {HTMLElement} parent The parent element under which modals should
 *   be inserted.
 * @property {HTMLElement} [background] Container holding background elements
 *   that should be hidden when a modal is open.
 * @property {module:modalStack~ModalStack~modalInfo[]} modals The stack of
 *   modal dialogs.
 */

/**
 * Holds private data for the [ModalStack]{@link module:modalStack~ModalStack}
 * class.
 * @type {WeakMap}
 * @see module:modalStack~ModalStack~privates
 */

var privateMembers = new WeakMap();
/**
 * Calculate the z-index for a modal dialog.
 * @param {number} index The index of the dialog in the stack.
 * @returns {number} The z-index that the modal should be set to.
 */

function getZIndex(index) {
  return Z_INDEX_START + (index - 1) * Z_INDEX_STEP;
}
/**
 * Update the modal overlay. The overlay will be shown or hidden depending on
 * whether any modals are open, and its z-index will be adjusted to sit below
 * the topmost modal.
 * @param {module:modalStack~ModalStack} instance The class instance on which
 *   to apply the function.
 */


function updateOverlay(instance) {
  var privates = privateMembers.get(instance);
  var count = privates.modals.length;

  if (count > 0) {
    var zIndex = getZIndex(count) - Z_INDEX_OVERLAY_STEP;
    privates.overlay.style.zIndex = zIndex.toString();
    privates.overlay.classList.remove('closed');
  } else {
    privates.overlay.classList.add('closed');
  }
}
/**
 * Show the modal overlay and hide any background elements.
 * @param {module:modalStack~ModalStack} instance The class instance on which
 *   to apply the function.
 */


function hideBackground(instance) {
  var privates = privateMembers.get(instance);
  var toHide = null; // If this is the first modal, hide page background

  if (privates.modals.length <= 1) {
    toHide = privates.background;
  } else {
    // Otherwise, hide the modal below the topmost one
    toHide = privates.modals[privates.modals.length - 2].wrapper;
  }

  if (toHide) {
    toHide.setAttribute('aria-hidden', 'true');
    var oldTabIndex = privates.modals[privates.modals.length - 1].oldTabIndex;
    toHide.querySelectorAll(FOCUSABLE_SELECTOR).forEach(function (elem) {
      var tabIndex = elem.hasAttribute('tabindex') ? elem.tabIndex : null;
      oldTabIndex.push({
        element: elem,
        tabIndex: tabIndex
      });
      elem.setAttribute('tabindex', '-1');
    });
  }

  updateOverlay(instance);
}
/**
 * Restore background element visibility. If there are still modals open,
 * only the topmost modal's elements will become visible. If all modals are
 * closed, then the overlay will be hidden.
 * @param {module:modalStack~ModalStack} instance The class instance on which
 *   to apply the function.
 * @param {module:modalStack~ModalStack~elemTabIndex[]} oldTabIndex An array of
 *   objects specifying elements whose tabindex attributes need to be restored.
 */


function restoreBackground(instance, oldTabIndex) {
  var privates = privateMembers.get(instance);
  var toRestore = null; // If no modals remain open, restore the page background

  if (privates.modals.length === 0) {
    toRestore = privates.background;
  } else {
    toRestore = privates.modals[privates.modals.length - 1].wrapper;
  }

  if (toRestore) {
    toRestore.removeAttribute('aria-hidden');
    oldTabIndex.forEach(function (entry) {
      var element = entry.element,
          tabIndex = entry.tabIndex;
      if (tabIndex !== null) element.tabIndex = tabIndex;else element.removeAttribute('tabindex');
    });
  }

  updateOverlay(instance);
}
/**
 * Manages and displays a stack of modal dialog windows.
 */


var ModalStack = /*#__PURE__*/function () {
  /**
   * Holds information about an element's tab index, used for changing and
   * restoring tab order when modals are opened or closed.
   * @typedef {Object} module:modalStack~ModalStack~elemTabIndex
   * @property {HTMLElement} element An element in the DOM.
   * @property {number} [tabIndex] The tab index of the element, or null if it
   *   is not set.
   */

  /**
   * Holds information about a modal dialog in the stack.
   * @typedef {Object} module:modalStack~ModalStack~modalInfo
   * @property {module:modalStack~Modal} modal The modal instance.
   * @property {HTMLElement} wrapper The outer wrapper node which contains the
   *   modal window container.
   * @property {HTMLElement} container The container node holding the modal
   *   dialog.
   * @property {HTMLElement} content The DOM node holding the main contents of
   *   the modal dialog.
   * @property {HTMLElement} [oldActive] The element that had keyboard focus
   *   before the modal was opened, if any.
   * @property {module:modalStack~ModalStack~elemTabIndex[]} oldTabIndex An
   *   array of objects specifying elements whose tabindex attributes need to
   *   be restored after the modal is closed.
   */

  /**
   * Initialize the modal stack. A hidden overlay will be inserted into the
   * DOM.
   * @param {HTMLElement} [parent=document.body] The parent node under which
   *   the modal overlay is to be inserted.
   * @param {HTMLElement} [background] A DOM node containing elements that
   *   should be hidden from screen readers and made unfocusable while a modal
   *   is open.
   */
  function ModalStack() {
    var _this = this;

    var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
    var background = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, ModalStack);

    var overlay = document.createElement('div');
    overlay.classList.add('modal-overlay', 'closed');
    parent.appendChild(overlay);
    var privates = {
      overlay: overlay,
      parent: parent,
      background: background || null,
      modals: []
    };
    privateMembers.set(this, privates);
    document.addEventListener('keydown', function (e) {
      if (privates.modals.length > 0 && (e.key === 'Escape' || e.key === 'Esc')) {
        _this.cancelModal();

        e.preventDefault();
      }
    });
  }
  /**
   * Display a modal dialog.
   * @param {module:modalStack~Modal} modal The modal dialog to show.
   */


  _createClass(ModalStack, [{
    key: "showModal",
    value: function showModal(modal) {
      var _this2 = this;

      var privates = privateMembers.get(this);
      var oldActive = document.activeElement;
      if (oldActive) oldActive.blur();
      var wrapper = document.createElement('div');
      wrapper.classList.add('modal-wrapper');
      wrapper.style.zIndex = getZIndex(privates.modals.length + 1);
      var container = document.createElement('div');
      container.classList.add('modal');
      wrapper.appendChild(container);
      var titleBar = document.createElement('div');
      titleBar.classList.add('modal-title-bar');
      container.appendChild(titleBar);
      var titleText = document.createElement('div');
      titleText.classList.add('modal-title');
      titleText.textContent = modal.title;
      titleBar.appendChild(titleText);
      var closeIcon = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_10__.createImageButton)(_images_close_svg__WEBPACK_IMPORTED_MODULE_9__, {
        altText: 'Close',
        width: ICON_WIDTH,
        height: ICON_HEIGHT,
        callback: function callback() {
          return _this2.cancelModal();
        }
      });
      titleBar.appendChild(closeIcon);
      var content = document.createElement('div');
      content.classList.add('modal-content');
      modal.addContent(content, this);
      container.appendChild(content);
      var buttonContainer = document.createElement('div');
      buttonContainer.classList.add('modal-button-container');
      container.appendChild(buttonContainer);
      var cancelButton = null;

      if (!modal.noCancelButton) {
        cancelButton = document.createElement('button');
        cancelButton.classList.add('modal-button');
        cancelButton.textContent = modal.cancelLabel || 'Cancel';
        cancelButton.addEventListener('click', function () {
          return _this2.cancelModal();
        });
        buttonContainer.appendChild(cancelButton);
      }

      var okayButton = document.createElement('button');
      okayButton.classList.add('modal-button', 'modal-okay');
      okayButton.textContent = modal.confirmLabel || 'Okay';
      okayButton.addEventListener('click', function () {
        return _this2.confirmModal();
      });
      buttonContainer.appendChild(okayButton);
      var modalInfo = {
        modal: modal,
        wrapper: wrapper,
        container: container,
        content: content,
        oldActive: oldActive,
        oldTabIndex: []
      };
      privates.modals.push(modalInfo);
      privates.parent.appendChild(wrapper);
      hideBackground(this);

      if (typeof modal.initFocus === 'string') {
        switch (modal.initFocus) {
          case 'confirm':
            okayButton.focus();
            break;

          case 'cancel':
            if (cancelButton) cancelButton.focus();
            break;

          case 'none':
          default:
            break;
        }
      } else if (modal.initFocus) {
        modal.initFocus.focus();
      } else {
        okayButton.focus();
      }
    }
    /**
     * Close the topmost modal dialog. This will not invoke the associated
     * callback function.
     */

  }, {
    key: "closeModal",
    value: function closeModal() {
      var privates = privateMembers.get(this);
      var modalInfo = privates.modals.pop();

      if (modalInfo) {
        privates.parent.removeChild(modalInfo.wrapper);
        restoreBackground(this, modalInfo.oldTabIndex);
        if (modalInfo.oldActive) modalInfo.oldActive.focus();
      }
    }
    /**
     * Attempt to confirm the topmost modal dialog. The modal's
     * [validate]{@link module:modalStack~Modal#validate} method will first be
     * invoked. If the modal passes validation, then its
     * [confirm]{@link module:modalStack~Modal#confirm} method is invoked, and
     * then the modal is closed.
     * @returns {boolean} True if the modal was successfully confirmed, and false
     *   if the modal failed validation.
     */

  }, {
    key: "confirmModal",
    value: function confirmModal() {
      var privates = privateMembers.get(this);
      if (privates.modals.length === 0) return false;
      var modal = privates.modals[privates.modals.length - 1].modal;
      if (!modal.validate()) return false;
      modal.confirm();
      this.closeModal();
      return true;
    }
    /**
     * Cancel the topmost modal dialog. This will invoke the modal's
     * [cancel]{@link module:modalStack~Modal#cancel} method, and then the modal
     * will be closed.
     * @returns {boolean} This method will return false if it is called when
     *   there are no modals in the stack. Otherwise it returns true.
     */

  }, {
    key: "cancelModal",
    value: function cancelModal() {
      var privates = privateMembers.get(this);
      if (privates.modals.length === 0) return false;
      privates.modals[privates.modals.length - 1].modal.cancel();
      this.closeModal();
      return true;
    }
  }]);

  return ModalStack;
}();

/* harmony default export */ __webpack_exports__["default"] = (ModalStack);

/***/ }),

/***/ "./src/modules/modals/addProjectModal.js":
/*!***********************************************!*\
  !*** ./src/modules/modals/addProjectModal.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../project */ "./src/modules/project.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utility/dom */ "./src/modules/utility/dom.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }











/**
 * Defines the [AddProjectModal]{@link module:addProjectModal~AddProjectModal}
 * class.
 * @module addProjectModal
 */


/**
 * Object holding private members for the
 * [AddProjectModal]{@link module:addProjectModal~AddProjectModal} class.
 * @typedef {Object} module:addProjectModal~AddProjectModal~privates
 * @property {module:project~Project} [project] The project being edited, if
 *   any.
 * @property {string} mode Indicates the status of the project being entered.
 *   If set to 'add', a new project is being created, and if set to 'edit',
 *   then an existing project is being updated.
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.confirm] A callback function that will be
 *   invoked when the user successfully confirms the modal.
 * @property {Function} [callbacks.cancel] A callback function that will be
 *   invoked when the user cancels the modal.
 * @property {Object} controls An object holding the form input elements for
 *   the modal.
 * @property {HTMLElement} controls.name The text input element for the project
 *   name.
 * @property {HTMLElement} controls.description The textarea element for the
 *   project description.
 */

/**
 * Holds private data for the
 * [AddProjectModal]{@link module:addProjectModal~AddProjectModal} class.
 * @type {WeakMap}
 * @see module:addProjectModal~AddProjectModal~privates
 */

var privateMembers = new WeakMap();
/**
 * Initialize the values of the form elements based on the initial project that
 * was passed to the constructor, if any.
 * @param {module:addProjectModal~AddProjectModal} instance The class instance
 *   on which to apply the function.
 */

function initFormValues(instance) {
  var _privateMembers$get = privateMembers.get(instance),
      project = _privateMembers$get.project,
      controls = _privateMembers$get.controls;

  if (project) {
    controls.name.value = project.name || '';
    controls.description.value = project.description || '';
  }
}
/**
 * A modal dialog for adding or editing a project.
 * @implements {module:modalStack~Modal}
 */


var AddProjectModal = /*#__PURE__*/function () {
  /**
   * Specifies options for the modal.
   * @typedef {Object} module:addProjectModal~AddProjectModal~options
   * @property {Function} [confirm] A callback function that will be invoked
   *   when the user successfully confirms the modal. The function will be
   *   passed the new (or modified) project.
   * @property {Function} [cancel] A callback function that will be invoked
   *   when the user cancels the modal.
   * @property {module:project~Project} [project] The project to edit. If not
   *   given, then a new project is created.
   */

  /**
   * Initialize the modal.
   * @param {module:addProjectModal~AddProjectModal~options} [options={}] An
   *   object holding configuration options for the modal.
   */
  function AddProjectModal() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AddProjectModal);

    var privates = {
      project: options.project || null,
      mode: options.project ? 'edit' : 'add',
      callbacks: {
        confirm: options.confirm || null,
        cancel: options.cancel || null
      },
      controls: {
        name: null,
        description: null
      }
    };
    privateMembers.set(this, privates);
  }

  _createClass(AddProjectModal, [{
    key: "title",
    get: function get() {
      var privates = privateMembers.get(this);
      return privates.mode === 'edit' ? 'Edit Project' : 'Add Project';
    }
  }, {
    key: "confirmLabel",
    get: function get() {
      var privates = privateMembers.get(this);
      return privates.mode === 'edit' ? 'Update' : 'Add';
    }
  }, {
    key: "initFocus",
    get: function get() {
      return privateMembers.get(this).controls.name;
    }
  }, {
    key: "addContent",
    value: function addContent(parent) {
      var containerType = {
        classList: ['form-input-container']
      };

      var labelType = function labelType(value) {
        return {
          value: value,
          classList: ['form-input-label']
        };
      };

      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_10__.createFormControl)({
        type: 'text',
        id: 'project-name',
        name: 'project-name',
        classList: ['form-input'],
        required: true,
        label: labelType('Name'),
        container: containerType
      }));
      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_10__.createFormControl)({
        type: 'textarea',
        id: 'project-description',
        name: 'project-description',
        classList: ['form-textarea'],
        label: labelType('Description'),
        container: containerType,
        size: {
          rows: 4,
          cols: 20
        }
      }));
      privateMembers.get(this).controls = {
        name: parent.querySelector('#project-name'),
        description: parent.querySelector('#project-description')
      };
      initFormValues(this);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var privates = privateMembers.get(this);
      var controls = privates.controls;
      var project = new _project__WEBPACK_IMPORTED_MODULE_9__["default"](controls.name.value, {
        description: controls.description.value || null
      });
      if (privates.callbacks.confirm) privates.callbacks.confirm(project);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var privates = privateMembers.get(this);
      if (privates.callbacks.cancel) privates.callbacks.cancel();
    }
  }, {
    key: "validate",
    value: function validate() {
      if (!privateMembers.get(this).controls.name.reportValidity()) return false;
      return true;
    }
  }]);

  return AddProjectModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (AddProjectModal);

/***/ }),

/***/ "./src/modules/modals/addTaskModal.js":
/*!********************************************!*\
  !*** ./src/modules/modals/addTaskModal.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _addProjectModal__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./addProjectModal */ "./src/modules/modals/addProjectModal.js");
/* harmony import */ var _datePickerModal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./datePickerModal */ "./src/modules/modals/datePickerModal.js");
/* harmony import */ var _recurrenceModal__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./recurrenceModal */ "./src/modules/modals/recurrenceModal.js");
/* harmony import */ var _recurringDate__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../recurringDate */ "./src/modules/recurringDate.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../settings */ "./src/modules/settings.js");
/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../task */ "./src/modules/task.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utility/dates */ "./src/modules/utility/dates.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../utility/dom */ "./src/modules/utility/dom.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

















/**
 * Defines the [AddTaskModal]{@link module:addTaskModal~AddTaskModal} class.
 * @module addTaskModal
 */








/**
 * Object holding private members for the
 * [AddTaskModal]{@link module:addTaskModal~AddTaskModal} class.
 * @typedef {Object} module:addTaskModal~AddTaskModal~privates
 * @property {module:taskList~TaskList} tasks The task list to update.
 * @property {module:projectList~ProjectList} projects The project list to use
 *   for the Project field.
 * @property {string} [taskId] The unique identifier for the task being edited,
 *   if any.
 * @property {string} [projectId] The unique identifier for the default
 *   project, if any.
 * @property {number} priority The default priority.
 * @property {string} mode Indicates the status of the task being entered. If
 *   set to 'add', a new task is being created, and if set to 'edit', then an
 *   existing task is being updated.
 * @property {module:recurringDate~RecurringDate} [customRecurrence] The custom
 *   recurrence that the user added, if any.
 * @property {module:settings~Settings~dateFormat} dateFormat An object holding
 *   date format information.
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.confirm] A callback function that will be
 *   invoked when the user successfully confirms the modal.
 * @property {Function} [callbacks.cancel] A callback function that will be
 *   invoked when the user cancels the modal.
 * @property {Function} [callbacks.newProject] A callback function that will be
 *   invoked when the user adds a new project.
 * @property {Object} controls An object holding the form input elements for
 *   the modal.
 * @property {HTMLElement} controls.name The text input element for the task
 *   name.
 * @property {HTMLElement} controls.dueDate The text input element for the task
 *   due date.
 * @property {HTMLElement} controls.recurringDate The select element for the
 *   task recurring date.
 * @property {HTMLElement} controls.priority The select element for the task
 *   priority.
 * @property {HTMLElement} controls.project The select element for the task's
 *   containing project.
 * @property {HTMLElement} controls.description The textarea element for the
 *   task description.
 */

/**
 * Holds private data for the
 * [AddTaskModal]{@link module:addTaskModal~AddTaskModal} class.
 * @type {WeakMap}
 * @see module:addTaskModal~AddTaskModal~privates
 */

var privateMembers = new WeakMap();
/**
 * Update the project select box options.
 * @param {module:addTaskModal~AddTaskModal} instance The class instance on
 *   which to apply the function.
 */

function updateProjects(instance) {
  var privates = privateMembers.get(instance);
  var projectItems = [{
    value: 'none',
    label: 'None'
  }];
  privates.projects.forEach(function (entry) {
    projectItems.push({
      value: entry.id,
      label: entry.project.name
    });
  });
  projectItems.push({
    value: 'new',
    label: 'New Project...'
  });
  var selectBox = privates.controls.project;
  selectBox.innerHTML = '';
  projectItems.forEach(function (entry) {
    var optElem = document.createElement('option');
    optElem.value = entry.value;
    optElem.textContent = entry.label;
    selectBox.appendChild(optElem);
  });
}
/**
 * Initialize the values of the form elements based on the initial task that
 * was passed to the constructor, if any.
 * @param {module:addTaskModal~AddTaskModal} instance The class instance on
 *   which to apply the function.
 */


function initFormValues(instance) {
  var _task, _task2, _task3, _task4, _task5, _task6;

  updateProjects(instance);
  var privates = privateMembers.get(instance);
  var controls = privates.controls;
  var task = null;
  if (privates.taskId) task = privates.tasks.getTask(privates.taskId);
  if ((_task = task) !== null && _task !== void 0 && _task.name) controls.name.value = task.name;

  if ((_task2 = task) !== null && _task2 !== void 0 && _task2.dueDate) {
    controls.dueDate.value = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_21__.formatDate)(task.dueDate, privates.dateFormat.outputPattern);
  }

  if ((_task3 = task) !== null && _task3 !== void 0 && _task3.recurringDate) {
    var value;

    if (task.recurringDate.isDefault()) {
      switch (task.recurringDate.intervalUnit) {
        case 'day':
          value = 'daily';
          break;

        case 'week':
          value = 'weekly';
          break;

        case 'month':
          value = 'monthly';
          break;

        case 'year':
          value = 'annually';
          break;

        default:
          value = 'custom';
          break;
      }
    } else {
      value = 'custom';
    }

    controls.recurringDate.value = value;
    if (value === 'custom') privates.customRecurrence = task.recurringDate;
  }

  if ((_task4 = task) !== null && _task4 !== void 0 && _task4.priorityString && task.priorityString !== 'unknown') {
    controls.priority.value = task.priorityString;
  } else {
    controls.priority.value = _task__WEBPACK_IMPORTED_MODULE_20__["default"].convertPriorityToString(privates.priority);
  }

  var projectId = privates.projectId;
  if ((_task5 = task) !== null && _task5 !== void 0 && _task5.project) projectId = task.project;
  if (projectId) controls.project.value = projectId;
  if ((_task6 = task) !== null && _task6 !== void 0 && _task6.description) controls.description.value = task.description;
}
/**
 * Opens a date picker and updates the due date field.
 * @param {module:addTaskModal~AddTaskModal} instance The class instance on
 *   which to apply the function.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal has been inserted.
 */


function pickDueDate(instance, modalStack) {
  var privates = privateMembers.get(instance);
  var input = privates.controls.dueDate;
  var startDate = null;

  if (input.value) {
    startDate = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_21__.parseDate)(input.value, privates.dateFormat.inputPatterns);
  }

  modalStack.showModal(new _datePickerModal__WEBPACK_IMPORTED_MODULE_16__["default"]({
    confirm: function confirm(date) {
      input.value = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_21__.formatDate)(date, privates.dateFormat.outputPattern);
      input.setCustomValidity('');
    },
    startDate: startDate,
    title: 'Select Due Date'
  }));
}
/**
 * Add the event listeners to the form controls in the modal.
 * @param {module:addTaskModal~AddTaskModal} instance The class instance on
 *   which to apply the function.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal is being inserted.
 */


function addListeners(instance, modalStack) {
  var privates = privateMembers.get(instance);
  var controls = privates.controls,
      dateFormat = privates.dateFormat; // Handle recurrence selection

  var recurringDate = controls.recurringDate;
  var recurrenceValue = recurringDate.value;

  var processRecurrence = function processRecurrence(recurrence) {
    privates.customRecurrence = recurrence;
    var newValue = 'custom-result';

    if (recurrence.isDefault()) {
      switch (recurrence.intervalUnit) {
        case 'day':
          newValue = 'daily';
          break;

        case 'week':
          newValue = 'weekly';
          break;

        case 'month':
          newValue = 'monthly';
          break;

        case 'year':
          newValue = 'annually';
          break;

        default:
          break;
      }
    } // Update select box options


    var selector = 'option[value="custom-result"]';
    var optElem = recurringDate.querySelector(selector);

    if (optElem && newValue !== 'custom-result') {
      recurringDate.removeChild(optElem);
    } else if (newValue === 'custom-result') {
      if (!optElem) {
        optElem = document.createElement('option');
        optElem.value = 'custom-result';
        recurringDate.insertBefore(optElem, recurringDate.lastChild);
      }

      var dateFormatStr = dateFormat.outputPattern;
      optElem.textContent = recurrence.toStringVerbose(dateFormatStr);
    }

    recurringDate.value = newValue;
    recurrenceValue = newValue;
  };

  if (privates.customRecurrence) processRecurrence(privates.customRecurrence);

  var cancelRecurrence = function cancelRecurrence() {
    recurringDate.value = recurrenceValue;
  };

  recurringDate.addEventListener('change', function (e) {
    if (e.target.value === 'custom') {
      // Get due date, if any
      var dateInput = controls.dueDate;
      var baseDate = null;

      if (dateInput.value) {
        baseDate = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_21__.parseDate)(dateInput.value, dateFormat.inputPatterns);
      }

      var modal = new _recurrenceModal__WEBPACK_IMPORTED_MODULE_17__["default"]({
        confirm: processRecurrence,
        cancel: cancelRecurrence,
        initial: privates.customRecurrence,
        baseDate: baseDate,
        dateFormat: dateFormat
      });
      modalStack.showModal(modal);
    } else {
      recurrenceValue = e.target.value;
    }
  }); // Handle project selection

  var projectValue = controls.project.value;
  controls.project.addEventListener('change', function (e) {
    if (e.target.value === 'new') {
      var modal = new _addProjectModal__WEBPACK_IMPORTED_MODULE_15__["default"]({
        confirm: function confirm(project) {
          var id = privates.projects.addProject(project);
          updateProjects(instance);
          controls.project.value = id;
          projectValue = id;
          if (privates.callbacks.newProject) privates.callbacks.newProject(id);
        },
        cancel: function cancel() {
          controls.project.value = projectValue;
        }
      });
      modalStack.showModal(modal);
    } else {
      projectValue = e.target.value;
    }
  }); // Check date validity

  controls.dueDate.addEventListener('change', function (e) {
    var value = e.target.value;

    if (value.length > 0) {
      var message = '';

      if (!(0,_utility_dates__WEBPACK_IMPORTED_MODULE_21__.parseDate)(value, dateFormat.inputPatterns)) {
        var format = dateFormat.visualPattern;
        message = "Please enter a valid date in ".concat(format, " format.");
      }

      e.target.setCustomValidity(message);
    }
  });
}
/**
 * A modal dialog for adding or editing a task.
 * @implements {module:modalStack~Modal}
 */


var AddTaskModal = /*#__PURE__*/function () {
  /**
   * Specifies options for the modal.
   * @typedef {Object} module:addTaskModal~AddTaskModal~options
   * @property {Function} [confirm] A callback function that will be invoked
   *   when the user successfully confirms the modal. The function will be
   *   passed the unique identifier of the task that was inserted into the task
   *   list (or the identifier of the existing task that was modified).
   * @property {Function} [cancel] A callback function that will be invoked
   *   when the user cancels the modal.
   * @property {Function} [newProject] A callback function that will be invoked
   *   when the user adds a new project to the project list. The unique
   *   identifier for the project will be passed to the function as an
   *   argument.
   * @property {string} [taskId] The unique identifier for the task that is
   *   being edited, if any. If not provided, then a new task will be created.
   * @property {string} [projectId] The unique identifier for the project to
   *   use as the default selection in the Project field. If not provided, then
   *   the task will default to having no project. This property is ignored if
   *   an existing task is being edited.
   * @property {number} [priority=0] The default priority to use for the task.
   *   This is ignored if an existing task is being edited.
   * @property {module:settings~Settings~dateFormat} [dateFormat] An object
   *   holding information about the calendar date format to use for date
   *   fields. If not given, then the browser default is used.
   */

  /**
   * Initialize the modal.
   * @param {module:taskList~TaskList} taskList The task list in which the new
   *   task should be inserted.
   * @param {module:projectList~ProjectList} projectList The project list that
   *   will be used to populate the Project select box. The user can also
   *   create a new project, which will be added to the list.
   * @param {module:addTaskModal~AddTaskModal~options} [options={}] Holds
   *   configuration options for the modal.
   */
  function AddTaskModal(taskList, projectList) {
    var _options$priority;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, AddTaskModal);

    var privates = {
      tasks: taskList,
      projects: projectList,
      taskId: options.taskId || null,
      projectId: options.projectId || null,
      priority: (_options$priority = options.priority) !== null && _options$priority !== void 0 ? _options$priority : 0,
      mode: options.taskId ? 'edit' : 'add',
      customRecurrence: null,
      dateFormat: options.dateFormat || _settings__WEBPACK_IMPORTED_MODULE_19__["default"].lookupDateFormat(),
      callbacks: {
        confirm: options.confirm || null,
        cancel: options.cancel || null,
        newProject: options.newProject || null
      },
      controls: {
        name: null,
        dueDate: null,
        recurringDate: null,
        priority: null,
        project: null,
        description: null
      }
    };
    privateMembers.set(this, privates);
  }

  _createClass(AddTaskModal, [{
    key: "title",
    get: function get() {
      var privates = privateMembers.get(this);
      return privates.mode === 'edit' ? 'Edit Task' : 'Add Task';
    }
  }, {
    key: "confirmLabel",
    get: function get() {
      var privates = privateMembers.get(this);
      return privates.mode === 'edit' ? 'Update' : 'Add';
    }
  }, {
    key: "initFocus",
    get: function get() {
      return privateMembers.get(this).controls.name;
    }
  }, {
    key: "addContent",
    value: function addContent(parent, modalStack) {
      var _dateContainer$classL,
          _this = this;

      var privates = privateMembers.get(this);
      var containerType = {
        classList: ['form-input-container']
      };

      var labelType = function labelType(value) {
        return {
          value: value,
          classList: ['form-input-label']
        };
      };

      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_22__.createFormControl)({
        type: 'text',
        id: 'task-name',
        name: 'task-name',
        classList: ['form-input'],
        required: true,
        label: labelType('Name'),
        container: containerType
      }));
      var dateContainer = document.createElement('div');

      (_dateContainer$classL = dateContainer.classList).add.apply(_dateContainer$classL, _toConsumableArray(containerType.classList));

      var dateLabel = document.createElement('label');
      dateLabel.textContent = 'Due Date';
      dateLabel.htmlFor = 'task-due-date';
      dateLabel.classList.add('form-input-label');
      dateContainer.appendChild(dateLabel);
      dateContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_22__.createDateInputField)({
        id: 'task-due-date',
        name: 'task-due-date',
        placeholder: privates.dateFormat.visualPattern,
        classList: ['form-input-inline'],
        container: {
          classList: ['form-input-date-container']
        },
        button: {
          classList: ['form-button'],
          callback: function callback() {
            return pickDueDate(_this, modalStack);
          }
        }
      }));
      parent.appendChild(dateContainer);
      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_22__.createFormControl)({
        type: 'select',
        id: 'task-recurring-date',
        name: 'task-recurring-date',
        classList: ['form-select'],
        label: labelType('Recurring Date'),
        container: containerType,
        menuItems: [{
          value: 'none',
          label: 'Never Repeat',
          selected: true
        }, {
          value: 'daily',
          label: 'Repeat Daily'
        }, {
          value: 'weekly',
          label: 'Repeat Weekly'
        }, {
          value: 'monthly',
          label: 'Repeat Monthly'
        }, {
          value: 'annually',
          label: 'Repeat Annually'
        }, {
          value: 'custom',
          label: 'Custom Recurrence...'
        }]
      }));
      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_22__.createFormControl)({
        type: 'select',
        id: 'task-priority',
        name: 'task-priority',
        classList: ['form-select'],
        label: labelType('Priority'),
        container: containerType,
        menuItems: [{
          value: 'very-high',
          label: 'Very High'
        }, {
          value: 'high',
          label: 'High'
        }, {
          value: 'medium',
          label: 'Medium',
          selected: true
        }, {
          value: 'low',
          label: 'Low'
        }, {
          value: 'very-low',
          label: 'Very Low'
        }]
      }));
      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_22__.createFormControl)({
        type: 'select',
        id: 'task-project',
        name: 'task-project',
        classList: ['form-select'],
        label: labelType('Project'),
        container: containerType,
        menuItems: [{
          value: 'none',
          label: 'None'
        }]
      }));
      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_22__.createFormControl)({
        type: 'textarea',
        id: 'task-description',
        name: 'task-description',
        classList: ['form-textarea'],
        label: labelType('Description'),
        container: containerType,
        size: {
          rows: 4,
          cols: 20
        }
      }));
      privates.controls = {
        name: parent.querySelector('#task-name'),
        dueDate: parent.querySelector('#task-due-date'),
        recurringDate: parent.querySelector('#task-recurring-date'),
        priority: parent.querySelector('#task-priority'),
        project: parent.querySelector('#task-project'),
        description: parent.querySelector('#task-description')
      };
      initFormValues(this);
      addListeners(this, modalStack);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var privates = privateMembers.get(this);
      var controls = privates.controls,
          dateFormat = privates.dateFormat;
      var dueDate = null;

      if (controls.dueDate.value) {
        dueDate = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_21__.parseDate)(controls.dueDate.value, dateFormat.inputPatterns);
      }

      var creationDate = null;
      var completionDate = null;

      if (privates.taskId) {
        var _task7 = privates.tasks.getTask(privates.taskId);

        creationDate = _task7.creationDate;
        completionDate = _task7.completionDate;
      }

      var recurringDate = null;

      switch (controls.recurringDate.value) {
        case 'daily':
          recurringDate = new _recurringDate__WEBPACK_IMPORTED_MODULE_18__["default"]('day');
          break;

        case 'weekly':
          recurringDate = new _recurringDate__WEBPACK_IMPORTED_MODULE_18__["default"]('week');
          break;

        case 'monthly':
          recurringDate = new _recurringDate__WEBPACK_IMPORTED_MODULE_18__["default"]('month');
          break;

        case 'annually':
          recurringDate = new _recurringDate__WEBPACK_IMPORTED_MODULE_18__["default"]('year');
          break;

        case 'custom-result':
          recurringDate = privates.customRecurrence;
          break;

        default:
          break;
      }

      var project = null;

      switch (controls.project.value) {
        case 'none':
        case 'new':
          break;

        default:
          project = controls.project.value;
          break;
      }

      var task = new _task__WEBPACK_IMPORTED_MODULE_20__["default"](controls.name.value, {
        dueDate: dueDate,
        creationDate: creationDate,
        completionDate: completionDate,
        priority: controls.priority.value,
        description: controls.description.value || null,
        recurringDate: recurringDate,
        project: project
      });
      var id;

      if (privates.taskId) {
        id = privates.taskId;
        privates.tasks.updateTask(id, task);
      } else {
        id = privates.tasks.addTask(task);
      }

      if (privates.callbacks.confirm) privates.callbacks.confirm(id);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var _privateMembers$get = privateMembers.get(this),
          callbacks = _privateMembers$get.callbacks;

      if (callbacks.cancel) callbacks.cancel();
    }
  }, {
    key: "validate",
    value: function validate() {
      var _privateMembers$get2 = privateMembers.get(this),
          controls = _privateMembers$get2.controls;

      if (!controls.name.reportValidity()) return false;
      if (!controls.dueDate.reportValidity()) return false;
      return true;
    }
  }]);

  return AddTaskModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (AddTaskModal);

/***/ }),

/***/ "./src/modules/modals/confirmModal.js":
/*!********************************************!*\
  !*** ./src/modules/modals/confirmModal.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utility/dom */ "./src/modules/utility/dom.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








/**
 * Defines the [ConfirmModal]{@link module:confirmModal~ConfirmModal} class.
 * @module confirmModal
 */

/**
 * Object holding the private members for the
 * [ConfirmModal]{@link module:confirmModal~ConfirmModal} class.
 * @typedef {Object} module:confirmModal~ConfirmModal~privates
 * @property {string} title The title for the modal.
 * @property {string} message The message to be displayed in the content of the
 *   modal.
 * @property {string} confirmLabel The label to be used for the confirm button.
 * @property {string} cancelLabel The label to be used for the cancel button.
 * @property {string} initFocus Which button to give initial keyboard focus:
 *   'confirm', 'cancel', or 'none'.
 * @property {module:confirmModal~ConfirmModal~confirmBox} [confirmBox] Holds
 *   options controlling text that the user must enter to confirm the modal.
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.confirm] A callback function that will be
 *   invoked when the user successfully confirms the modal.
 * @property {Function} [callbacks.cancel] A callback function that will be
 *   invoked when the user cancels the modal.
 * @property {Object} controls An object holding the form input elements for
 *   the modal.
 * @property {HTMLElement} [controls.confirmBox] The text input element for the
 *   confirmation text that the user must enter, if applicable.
 */

/**
 * Holds private data for the
 * [ConfirmModal]{@link module:confirmModal~ConfirmModal} class.
 * @type {WeakMap}
 * @see module:confirmModal~ConfirmModal~privates
 */

var privateMembers = new WeakMap();
/**
 * Initialize the form elements for the modal.
 * @param {module:confirmModal~ConfirmModal} instance The class instance on
 *   which to apply the function.
 */

function initFormControls(instance) {
  var privates = privateMembers.get(instance);
  var controls = privates.controls;

  if (controls.confirmBox) {
    var confirmBox = privates.confirmBox;
    controls.confirmBox.value = '';
    controls.confirmBox.addEventListener('change', function (e) {
      var value = e.target.value;

      if (value.length > 0) {
        var message = '';
        if (value !== confirmBox.value) message = confirmBox.errorMessage;
        e.target.setCustomValidity(message);
      }
    });
  }
}
/**
 * A modal dialog prompting the user for confirmation.
 * @implements {module:modalStack~Modal}
 */


var ConfirmModal = /*#__PURE__*/function () {
  /**
   * Specifies options for text that the user must enter to confirm the action.
   * @typedef {Object} module:confirmModal~ConfirmModal~confirmBox
   * @property {string} [value=confirm] A value that the user must enter in a
   *   text box in order to confirm the action.
   * @property {string} [label] The label for the text box. If not given, a
   *   generic label is created.
   * @property {string} [errorMessage] The validation message that should be
   *   displayed when the user tries to confirm the modal without entering the
   *   correct value. If not given, a generic message is used.
   */

  /**
   * Specifies options for the modal.
   * @typedef {Object} module:confirmModal~ConfirmModal~options
   * @property {string} [title=Confirm] The title for the modal.
   * @property {string} [confirmLabel=Yes] The label to be used for the confirm
   *   button.
   * @property {string} [cancelLabel=No] The label to be used for the cancel
   *   button.
   * @property {string} [initFocus=cancel] Which element to give initial
   *   keyboard focus: 'confirm' (the Confirm button), 'cancel' (the Cancel
   *   button), 'confirm-box' (the confirmation text box), or 'none'.
   * @property {module:confirmModal~ConfirmModal~confirmBox} [confirmBox] An
   *   object specifying options for text that the user must enter in order to
   *   confirm the action. If this property is provided, then a textbox will be
   *   displayed and the user will be required to type in the given value
   *   before confirming the modal.
   * @property {Function} [confirm] A callback function that will be invoked
   *   when the user successfully confirms the modal.
   * @property {Function} [cancel] A callback function that will be invoked
   *   when the user cancels the modal.
   */

  /**
   * Initialize the modal.
   * @param {string} message The message that should be displayed to the user.
   * @param {module:confirmModal~ConfirmModal~options} [options={}] Holds
   *   configuration options for the modal.
   */
  function ConfirmModal(message) {
    var _options$title;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, ConfirmModal);

    var privates = {
      title: (_options$title = options.title) !== null && _options$title !== void 0 ? _options$title : 'Confirm',
      message: message,
      confirmLabel: options.confirmLabel || 'Yes',
      cancelLabel: options.cancelLabel || 'No',
      initFocus: options.initFocus || 'cancel',
      confirmBox: null,
      callbacks: {
        confirm: options.confirm || null,
        cancel: options.cancel || null
      },
      controls: {
        confirmBox: null
      }
    };
    var confirmBox = options.confirmBox;

    if (options.confirmBox) {
      privates.confirmBox = {
        value: confirmBox.value || 'confirm',
        label: confirmBox.label || "Please enter '".concat(confirmBox.value, "':"),
        errorMessage: confirmBox.errorMessage || "Please enter '".concat(confirmBox.value, "'.")
      };
    }

    privateMembers.set(this, privates);
  }

  _createClass(ConfirmModal, [{
    key: "title",
    get: function get() {
      return privateMembers.get(this).title;
    }
  }, {
    key: "confirmLabel",
    get: function get() {
      return privateMembers.get(this).confirmLabel;
    }
  }, {
    key: "cancelLabel",
    get: function get() {
      return privateMembers.get(this).cancelLabel;
    }
  }, {
    key: "initFocus",
    get: function get() {
      var privates = privateMembers.get(this);

      if (privates.initFocus === 'confirm-box') {
        return privates.controls.confirmBox || 'none';
      }

      return privates.initFocus;
    }
  }, {
    key: "addContent",
    value: function addContent(parent) {
      var privates = privateMembers.get(this);
      var message = privates.message,
          confirmBox = privates.confirmBox;
      var label = document.createElement('p');
      label.classList.add('form-input-label-inline');
      label.textContent = message;
      parent.appendChild(label);

      if (confirmBox) {
        label = document.createElement('p');
        label.classList.add('form-input-label-inline');
        label.textContent = ' ';
        parent.appendChild(label);
        parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_6__.createFormControl)({
          type: 'text',
          id: 'confirmation-box',
          name: 'confirmation-box',
          classList: ['form-input', 'confirmation-box'],
          required: true,
          placeholder: confirmBox.value,
          label: {
            value: confirmBox.label,
            classList: ['form-input-label-inline']
          },
          container: {
            classList: ['form-input-container']
          }
        }));
        privates.controls.confirmBox = parent.querySelector('#confirmation-box');
      }

      initFormControls(this);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var confirm = privateMembers.get(this).callbacks.confirm;
      if (confirm) confirm();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var cancel = privateMembers.get(this).callbacks.cancel;
      if (cancel) cancel();
    }
  }, {
    key: "validate",
    value: function validate() {
      var _privateMembers$get = privateMembers.get(this),
          controls = _privateMembers$get.controls;

      if (controls.confirmBox && !controls.confirmBox.reportValidity()) {
        return false;
      }

      return true;
    }
  }]);

  return ConfirmModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (ConfirmModal);

/***/ }),

/***/ "./src/modules/modals/dataModal.js":
/*!*****************************************!*\
  !*** ./src/modules/modals/dataModal.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _confirmModal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./confirmModal */ "./src/modules/modals/confirmModal.js");
/* harmony import */ var _exportModal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./exportModal */ "./src/modules/modals/exportModal.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utility/dom */ "./src/modules/utility/dom.js");
/* harmony import */ var _utility_storage__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utility/storage */ "./src/modules/utility/storage.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }









/**
 * Defines the [DataModal]{@link module:dataModal~dataModal} class.
 * @module dataModal
 */




/**
 * Object holding the private members for the
 * [DataModal]{@link module:dataModal~dataModal} class.
 * @typedef {Object} module:dataModal~DataModal~privates
 * @property {Object} callbacks An object holding callback functions.
 * @property {module:dataModal~DataModal~importData} [callbacks.importData] A
 *   callback function that will be invoked if the user chooses to import data
 *   from a file.
 * @property {module:dataModal~DataModal~exportData} [callbacks.exportData] A
 *   callback function that will be invoked if the user chooses to export data
 *   to a file.
 * @property {Function} [callbacks.deleteAll] A callback function that will be
 *   invoked if the user chooses to delete all data.
 * @property {Function} [callbacks.close] A callback function that will be
 *   invoked when the user closes the modal.
 * @property {Object} controls An object holding the form controls in the modal
 *   content.
 * @property {HTMLElement} controls.fileSelector The file input control.
 * @property {HTMLElement} controls.importButton The import button.
 * @property {HTMLElement} controls.exportButton The export button.
 * @property {HTMLElement} controls.deleteButton The delete button.
 */

/**
 * Holds private data for the [DataModal]{@link module:dataModal~dataModal}
 * class.
 * @type {WeakMap}
 * @see module:dataModal~DataModal~privates
 */

var privateMembers = new WeakMap();
/**
 * Perform a data import that was requested by the user.
 * @param {module:dataModal~DataModal} instance The class instance on which to
 *   apply the function.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal is being inserted.
 * @param {Blob} file The file that the user selected for import.
 */

function doImport(instance, modalStack, file) {
  (0,_utility_storage__WEBPACK_IMPORTED_MODULE_10__.readFile)(file, function (content) {
    if (content) {
      modalStack.closeModal();
      var callback = privateMembers.get(instance).callbacks.importData;

      if (callback) {
        var fileInfo = {
          name: file.name,
          size: file.size,
          type: file.type || null
        };
        callback(content, fileInfo);
      }
    }
  });
}
/**
 * Perform a data export that was requested by the user.
 * @param {module:dataModal~DataModal} instance The class instance on which to
 *   apply the function.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal is being inserted.
 * @param {string} fileType A string specifying the file format to use for
 *   export: 'json' or 'csv'.
 * @param {Object} fileOptions An object specifying additional file options.
 */


function doExport(instance, modalStack, fileType, fileOptions) {
  // Use setTimeout to wait for export modal to finish
  setTimeout(function () {
    modalStack.closeModal();
    var callback = privateMembers.get(instance).callbacks.exportData;
    if (callback) callback(fileType, fileOptions);
  });
}
/**
 * Perform a data deletion operation that was requested by the user.
 * @param {module:dataModal~DataModal} instance The class instance on which to
 *   apply the function.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal is being inserted.
 */


function doDelete(instance, modalStack) {
  var callback = privateMembers.get(instance).callbacks.deleteAll;
  if (callback) callback(); // Close the data modal (using setTimeout to wait for confirm modal to close)

  setTimeout(function () {
    return modalStack.closeModal();
  });
}
/**
 * Add the event listeners to the buttons in the modal.
 * @param {module:dataModal~DataModal} instance The class instance on which to
 *   apply the function.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal is being inserted.
 */


function addListeners(instance, modalStack) {
  var _privateMembers$get = privateMembers.get(instance),
      controls = _privateMembers$get.controls;

  controls.importButton.addEventListener('click', function () {
    controls.fileSelector.click();
  });
  controls.exportButton.addEventListener('click', function () {
    var modal = new _exportModal__WEBPACK_IMPORTED_MODULE_8__["default"]({
      confirm: function confirm(fileType, options) {
        doExport(instance, modalStack, fileType, options);
      }
    });
    modalStack.showModal(modal);
  });
  controls.deleteButton.addEventListener('click', function () {
    var modal = new _confirmModal__WEBPACK_IMPORTED_MODULE_7__["default"]('Are you sure you want to delete all user data? This will erase all tasks and projects, and will also reset app settings.', {
      initFocus: 'confirm-box',
      confirmBox: {
        value: 'delete',
        label: 'This action cannot be undone. Please confirm your intention by typing the word \'delete\' (without quotes) in the box:',
        errorMessage: 'Please enter the word \'delete\'.'
      },
      confirm: function confirm() {
        return doDelete(instance, modalStack);
      }
    });
    modalStack.showModal(modal);
  });
  controls.fileSelector.addEventListener('change', function (e) {
    var files = e.target.files;
    if (files.length > 0) doImport(instance, modalStack, files[0]);
  });
}
/**
 * A modal dialog for managing user data.
 * @implements {module:modalStack~Modal}
 */


var DataModal = /*#__PURE__*/function () {
  /**
   * A callback function that will be invoked when the user chooses to import
   * data from a file and the file is read successfully.
   * @callback module:dataModal~DataModal~importData
   * @param {string} content The contents of the file.
   * @param {Object} [info] An object specifying additional file information.
   * @param {string} [info.name] The name of the file.
   * @param {number} [info.size] The size of the file in bytes.
   * @param {string} [info.type] The media type of the file, or null if the
   *   browser could not determine a media type.
   */

  /**
   * A callback function that will be invoked when the user chooses to export
   * data to a file.
   * @callback module:dataModal~DataModal~exportData
   * @param {string} fileType A string specifying the file format to use for
   *   export. This can be either 'json' or 'csv'.
   * @param {Object} [options] An object specifying additional file options.
   * @param {string} [options.newlineSequence] The character sequence to use
   *   for newlines.
   */

  /**
   * Specifies options for the modal.
   * @typedef {Object} module:dataModal~DataModal~options
   * @property {module:dataModal~DataModal~importData} [importData] A callback
   *   function that will be invoked when the user chooses to import data from
   *   a file and the file is read successfully.
   * @property {module:dataModal~DataModal~exportData} [exportData] A callback
   *   function that will be invoked when the user chooses to export data to a
   *   file.
   * @property {Function} [deleteAll] A callback function that will be invoked
   *   when the user chooses (and confirms the choice) to delete all data.
   * @property {Function} [close] A callback function that will be invoked when
   *   the user closes the modal. This will not be invoked if the modal is
   *   automatically closed following a data management operation.
   */

  /**
   * Initialize the modal.
   * @param {module:dataModal~DataModal~options} [options={}] Holds
   *   configuration options for the modal.
   */
  function DataModal() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, DataModal);

    var privates = {
      callbacks: {
        importData: options.importData || null,
        exportData: options.exportData || null,
        deleteAll: options.deleteAll || null,
        close: options.close || null
      },
      controls: {
        fileSelector: null,
        importButton: null,
        exportButton: null,
        deleteButton: null
      }
    };
    privateMembers.set(this, privates);
  }
  /* eslint-disable class-methods-use-this --
   * We need to set these properties to conform to the Modal interface, but
   * setting them directly in the constructor would allow external
   * modification.
   */


  _createClass(DataModal, [{
    key: "title",
    get: function get() {
      return 'Manage Data';
    }
  }, {
    key: "confirmLabel",
    get: function get() {
      return 'Close';
    }
  }, {
    key: "noCancelButton",
    get: function get() {
      return true;
    }
  }, {
    key: "initFocus",
    get: function get() {
      return 'confirm';
    }
    /* eslint-enable class-methods-use-this */

  }, {
    key: "addContent",
    value: function addContent(parent, modalStack) {
      var addContainer = function addContainer() {
        var container = document.createElement('div');
        container.classList.add('form-input-container');
        parent.appendChild(container);
        return container;
      };

      var addHeading = function addHeading(label, container) {
        var labelElem = document.createElement('div');
        labelElem.classList.add('form-input-label');
        labelElem.textContent = label;
        container.appendChild(labelElem);
      };

      var addButton = function addButton(label, container) {
        var button = document.createElement('button');
        button.classList.add('form-button');
        button.textContent = label;
        container.appendChild(button);
        return button;
      };

      var _privateMembers$get2 = privateMembers.get(this),
          controls = _privateMembers$get2.controls;

      var container = addContainer();
      addHeading('Import/Export', container);
      var buttonContainer = document.createElement('div');
      buttonContainer.classList.add('form-button-container');
      container.appendChild(buttonContainer);
      controls.importButton = addButton('Import from File...', buttonContainer);
      controls.exportButton = addButton('Export to File...', buttonContainer);
      container = addContainer();
      addHeading('Delete Data', container);
      controls.deleteButton = addButton('Erase All Data...', container);
      controls.fileSelector = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_9__.createFormControl)({
        type: 'file',
        id: 'data-import-file-select',
        name: 'data-import-file-select',
        classList: ['form-input-hidden'],
        accept: ['.json', '.csv', 'application/json', 'text/csv']
      });
      addListeners(this, modalStack);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      this.cancel();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var close = privateMembers.get(this).callbacks.close;
      if (close) close();
    }
    /* eslint-disable-next-line class-methods-use-this --
     * Necessary since modal must have validate function in order to satisfy
     * Modal interface.
     */

  }, {
    key: "validate",
    value: function validate() {
      return true;
    }
  }]);

  return DataModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (DataModal);

/***/ }),

/***/ "./src/modules/modals/datePickerModal.js":
/*!***********************************************!*\
  !*** ./src/modules/modals/datePickerModal.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _datePicker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../datePicker */ "./src/modules/datePicker.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








/**
 * Defines the [DatePickerModal]{@link module:datePickerModal~DatePickerModal}
 * class.
 * @module datePickerModal
 */

/**
 * Object holding private members for the
 * [DatePickerModal]{@link module:datePickerModal~DatePickerModal} class.
 * @typedef {Object} module:datePickerModal~DatePickerModal~privates
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.confirm] A callback function that will be
 *   invoked when the user successfully confirms the modal.
 * @property {Function} [callbacks.cancel] A callback function that will be
 *   invoked when the user cancels the modal.
 * @property {Date} [stateDate] The default date that is selected when the
 *   modal is opened, if different from today.
 * @property {string} title The title of the modal.
 * @property {module:datePicker~DatePicker} picker The date picker instance.
 */

/**
 * Holds private data for the
 * [DatePickerModal]{@link module:datePickerModal~DatePickerModal} class.
 * @type {WeakMap}
 * @see module:datePickerModal~DatePickerModal~privates
 */

var privateMembers = new WeakMap();
/**
 * A modal dialog for choosing a calendar date.
 * @implements {module:modalStack~Modal}
 */

var DatePickerModal = /*#__PURE__*/function () {
  /**
   * Initialize the modal.
   * @param {Object} [options={}] Holds configuration options for the modal.
   * @param {Function} [options.confirm] A callback function that will be
   *   invoked when the user successfully confirms the modal. The selected date
   *   will be passed to the function as an argument.
   * @param {Function} [options.cancel] A callback function that will be
   *   invoked when the user cancels the modal.
   * @param {Date} [options.startDate] The date that will be initially
   *   selected. If not given, then the present date is used.
   * @param {string} [options.title=Select Date] The title of the modal.
   */
  function DatePickerModal() {
    var _options$title;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, DatePickerModal);

    var privates = {
      callbacks: {
        confirm: options.confirm || null,
        cancel: options.cancel || null
      },
      startDate: options.startDate || null,
      title: (_options$title = options.title) !== null && _options$title !== void 0 ? _options$title : 'Select Date',
      picker: null
    };
    privateMembers.set(this, privates);
  }

  _createClass(DatePickerModal, [{
    key: "title",
    get: function get() {
      return privateMembers.get(this).title;
    }
  }, {
    key: "addContent",
    value: function addContent(parent) {
      var privates = privateMembers.get(this);
      privates.picker = new _datePicker__WEBPACK_IMPORTED_MODULE_6__["default"](parent, privates.startDate);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var _privateMembers$get = privateMembers.get(this),
          callbacks = _privateMembers$get.callbacks,
          picker = _privateMembers$get.picker;

      if (callbacks.confirm) callbacks.confirm(picker.date);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var _privateMembers$get2 = privateMembers.get(this),
          callbacks = _privateMembers$get2.callbacks;

      if (callbacks.cancel) callbacks.cancel();
    }
    /* eslint-disable-next-line class-methods-use-this --
     * Necessary since modal must have validate function in order to satisfy
     * Modal interface.
     */

  }, {
    key: "validate",
    value: function validate() {
      return true;
    }
  }]);

  return DatePickerModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (DatePickerModal);

/***/ }),

/***/ "./src/modules/modals/exportModal.js":
/*!*******************************************!*\
  !*** ./src/modules/modals/exportModal.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utility/dom */ "./src/modules/utility/dom.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








/**
 * Defines the [ExportModal]{@link module:exportModal~ExportModal} class.
 * @module exportModal
 */

/**
 * Object holding private members for the
 * [ExportModal]{@link module:exportModal~ExportModal} class.
 * @typedef {Object} module:exportModal~ExportModal~privates
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.confirm] A callback function that will be
 *   invoked when the user successfully confirms the modal.
 * @property {Function} [callbacks.cancel] A callback function that will be
 *   invoked when the user cancels the modal.
 * @property {Object} controls An object holding the form input elements for
 *   the modal.
 * @property {HTMLElement} controls.exportJson The radio button for selecting
 *   the JSON file format.
 * @property {HTMLElement} controls.exportCsv The radio button for selecting
 *   the CSV file format.
 * @property {HTMLElement} controls.newlineSequence The select box for choosing
 *   the newline style.
 */

/**
 * Holds private data for the
 * [ExportModal]{@link module:exportModal~ExportModal} class.
 * @type {WeakMap}
 * @see module:exportModal~ExportModal~privates
 */

var privateMembers = new WeakMap();
/**
 * A modal dialog for exporting data to a file.
 * @implements {module:modalStack~Modal}
 */

var ExportModal = /*#__PURE__*/function () {
  /**
   * A callback function that will be invoked when the user chooses to export
   * data to a file.
   * @callback module:exportModal~ExportModal~exportCallback
   * @param {string} fileType A string specifying the file format to use for
   *   export. This can be either 'json' or 'csv'.
   * @param {Object} [options] An object specifying additional file options.
   * @param {string} [options.newlineSequence] The character sequence to use
   *   for newlines.
   */

  /**
   * Specifies options for the modal.
   * @typedef {Object} module:exportModal~ExportModal~options
   * @property {module:exportModal~ExportModal~exportCallback} [confirm] A
   *   callback function that will be invoked when the user successfully
   *   confirms the modal.
   * @property {Function} [cancel] A callback function that will be invoked
   *   when the user cancels the modal.
   */

  /**
   * Initialize the modal.
   * @param {module:exportModal~ExportModal~options} [options={}] Holds
   *   configuration options for the modal.
   */
  function ExportModal() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ExportModal);

    var privates = {
      callbacks: {
        confirm: options.confirm || null,
        cancel: options.cancel || null
      },
      controls: {
        exportJson: null,
        exportCsv: null,
        newlineSequence: null
      }
    };
    privateMembers.set(this, privates);
  }
  /* eslint-disable class-methods-use-this --
   * We need to set these properties to conform to the Modal interface, but
   * setting them directly in the constructor would allow external
   * modification.
   */


  _createClass(ExportModal, [{
    key: "title",
    get: function get() {
      return 'Export Data';
    }
  }, {
    key: "confirmLabel",
    get: function get() {
      return 'Export...';
    }
    /* eslint-enable class-methods-use-this */

  }, {
    key: "addContent",
    value: function addContent(parent) {
      var radioLabel = function radioLabel(value) {
        return {
          value: value,
          classList: ['form-input-label-inline']
        };
      };

      var container = document.createElement('div');
      container.classList.add('form-input-container');
      var label = document.createElement('div');
      label.classList.add('form-input-label');
      label.textContent = 'File Format';
      container.appendChild(label);
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_6__.createFormControl)({
        type: 'radio',
        id: 'export-format-json',
        name: 'export-format',
        value: 'json',
        checked: true,
        label: radioLabel('Export all data to JSON format'),
        container: {
          classList: ['form-input-item-container']
        }
      }));
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_6__.createFormControl)({
        type: 'radio',
        id: 'export-format-csv',
        name: 'export-format',
        value: 'csv',
        label: radioLabel('Export tasks to CSV format'),
        container: {
          classList: ['form-input-item-container']
        }
      }));
      parent.appendChild(container);
      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_6__.createFormControl)({
        type: 'select',
        id: 'export-line-ending',
        name: 'export-line-ending',
        classList: ['form-select'],
        label: {
          value: 'Line Ending Style',
          classList: ['form-input-label']
        },
        container: {
          classList: ['form-input-container']
        },
        menuItems: [{
          value: 'crlf',
          label: 'Windows Standard: CRLF',
          selected: true
        }, {
          value: 'lf',
          label: 'Unix Standard: LF'
        }, {
          value: 'cr',
          label: 'Classic Mac OS Standard (Before OS X): CR'
        }]
      }));

      var _privateMembers$get = privateMembers.get(this),
          controls = _privateMembers$get.controls;

      controls.exportJson = parent.querySelector('#export-format-json');
      controls.exportCsv = parent.querySelector('#export-format-csv');
      controls.newlineSequence = parent.querySelector('#export-line-ending');
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var _privateMembers$get2 = privateMembers.get(this),
          callbacks = _privateMembers$get2.callbacks,
          controls = _privateMembers$get2.controls;

      if (callbacks.confirm) {
        var fileType = controls.exportJson.checked ? 'json' : 'csv';
        var newlineSequence;

        switch (controls.newlineSequence.value) {
          case 'lf':
            newlineSequence = '\n';
            break;

          case 'cr':
            newlineSequence = '\r';
            break;

          case 'crlf':
          default:
            newlineSequence = '\r\n';
            break;
        }

        callbacks.confirm(fileType, {
          newlineSequence: newlineSequence
        });
      }
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var callback = privateMembers.get(this).callbacks.cancel;
      if (callback) callback();
    }
    /* eslint-disable-next-line class-methods-use-this --
     * Necessary since modal must have validate function in order to satisfy
     * Modal interface.
     */

  }, {
    key: "validate",
    value: function validate() {
      return true;
    }
  }]);

  return ExportModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (ExportModal);

/***/ }),

/***/ "./src/modules/modals/infoModal.js":
/*!*****************************************!*\
  !*** ./src/modules/modals/infoModal.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_6__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }









/**
 * Defines the [InfoModal]{@link module:infoModal~InfoModal} class.
 * @module infoModal
 */

/**
 * Object holding the private members for the
 * [InfoModal]{@link module:infoModal~InfoModal} class.
 * @typedef {Object} module:infoModal~InfoModal~privates
 * @property {string} title The title for the modal.
 * @property {string} confirmLabel The label to be used for the confirm button.
 * @property {HTMLElement} content The custom content to display in the modal.
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.close] A callback function that will be
 *   invoked when the user closes the modal.
 */

/**
 * Holds private data for the [InfoModal]{@link module:infoModal~InfoModal}
 * class.
 * @type {WeakMap}
 * @see module:infoModal~InfoModal~privates
 */
var privateMembers = new WeakMap();
/**
 * A modal dialog displaying custom informational content.
 * @implements {module:modalStack~Modal}
 */

var InfoModal = /*#__PURE__*/function () {
  /**
   * Specifies options for the modal.
   * @typedef {Object} module:infoModal~InfoModal~options
   * @property {string} [title=Alert] The title for the modal.
   * @property {string} [confirmLabel=Okay] The label to be used for the
   *   confirm button.
   * @property {Function} [close] A callback function that will be invoked when
   *   the user closes the modal.
   */

  /**
   * Initialize the modal.
   * @param {string|string[]|HTMLElement} content The content that will be
   *   displayed in the modal. This can either be a string specifying a
   *   message, an array of strings each specifying a paragraph of text, or a
   *   custom element that will be inserted into the modal content area.
   * @param {module:infoModal~InfoModal~options} [options={}] Holds
   *   configuration options for the modal.
   */
  function InfoModal(content) {
    var _options$title;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, InfoModal);

    var privates = {
      title: (_options$title = options.title) !== null && _options$title !== void 0 ? _options$title : 'Alert',
      confirmLabel: options.confirmLabel || 'Okay',
      content: null,
      callbacks: {
        close: options.close || null
      }
    };

    if (content instanceof Node) {
      privates.content = content;
    } else {
      var container = document.createElement('div');
      container.classList.add('info-modal-content-container');
      var paragraphs = Array.isArray(content) ? content : [content];
      paragraphs.forEach(function (paragraph) {
        var pElem = document.createElement('p');
        pElem.classList.add('info-modal-content-paragraph');
        pElem.textContent = paragraph;
        container.appendChild(pElem);
      });
      privates.content = container;
    }

    privateMembers.set(this, privates);
  }

  _createClass(InfoModal, [{
    key: "title",
    get: function get() {
      return privateMembers.get(this).title;
    }
  }, {
    key: "confirmLabel",
    get: function get() {
      return privateMembers.get(this).confirmLabel;
    }
    /* eslint-disable class-methods-use-this --
     * We need to set these properties to conform to the Modal interface, but
     * setting them directly in the constructor would allow external
     * modification.
     */

  }, {
    key: "noCancelButton",
    get: function get() {
      return true;
    }
  }, {
    key: "initFocus",
    get: function get() {
      return 'confirm';
    }
    /* eslint-enable class-methods-use-this */

  }, {
    key: "addContent",
    value: function addContent(parent) {
      parent.appendChild(privateMembers.get(this).content);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var callback = privateMembers.get(this).callbacks.close;
      if (callback) callback();
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.confirm();
    }
    /* eslint-disable-next-line class-methods-use-this --
     * Necessary since modal must have validate function in order to satisfy
     * Modal interface.
     */

  }, {
    key: "validate",
    value: function validate() {
      return true;
    }
  }]);

  return InfoModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (InfoModal);

/***/ }),

/***/ "./src/modules/modals/recurrenceModal.js":
/*!***********************************************!*\
  !*** ./src/modules/modals/recurrenceModal.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var lodash_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/range */ "./node_modules/lodash/range.js");
/* harmony import */ var lodash_range__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_range__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.number.is-integer.js */ "./node_modules/core-js/modules/es.number.is-integer.js");
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.number.is-finite.js */ "./node_modules/core-js/modules/es.number.is-finite.js");
/* harmony import */ var core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.find-index.js */ "./node_modules/core-js/modules/es.array.find-index.js");
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var ordinal__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ordinal */ "./node_modules/ordinal/index.js");
/* harmony import */ var ordinal__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(ordinal__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _datePickerModal__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./datePickerModal */ "./src/modules/modals/datePickerModal.js");
/* harmony import */ var _recurringDate__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../recurringDate */ "./src/modules/recurringDate.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../settings */ "./src/modules/settings.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utility/dates */ "./src/modules/utility/dates.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utility/dom */ "./src/modules/utility/dom.js");


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }





















var UNITS = [{
  value: 'day',
  singular: 'Day',
  plural: 'Days'
}, {
  value: 'week',
  singular: 'Week',
  plural: 'Weeks'
}, {
  value: 'month',
  singular: 'Month',
  plural: 'Months'
}, {
  value: 'year',
  singular: 'Year',
  plural: 'Years'
}];
/**
 * Object holding private members for the
 * [RecurrenceModal]{@link module:recurrenceModal~RecurrenceModal} class.
 * @typedef {Object} module:recurrenceModal~RecurrenceModal~privates
 * @property {module:recurringDate~RecurringDate} [initialRecurrence] The
 *   recurring date to use as a default when initializing the form controls, if
 *   any.
 * @property {Date} baseDate The date to use when initializing certain input
 *   fields.
 * @property {module:settings~Settings~dateFormat} dateFormat An object holding
 *   date format information.
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.confirm] A callback function that will be
 *   invoked when the user successfully confirms the modal.
 * @property {Function} [callbacks.cancel] A callback function that will be
 *   invoked when the user cancels the modal.
 * @property {Object} containers An object holding the various container
 *   elements used in the modal's contents.
 * @property {HTMLElement} containers.parent The parent container element
 *   holding all the form elements.
 * @property {HTMLElement} containers.context The container element holding
 *   context-sensitive options that depend on the selected interval unit.
 * @property {HTMLElement} containers.weekOptions The container element holding
 *   the form elements specific to weekly recurrences.
 * @property {HTMLElement} containers.monthOptions The container element
 *   holding the form elements specific to monthly recurrences.
 * @property {HTMLElement} containers.yearOptions The container element holding
 *   the form elements specific to yearly recurrences.
 * @property {string} title The title of the modal.
 */

/**
 * Holds private data for the
 * [RecurrenceModal]{@link module:recurrenceModal~RecurrenceModal} class.
 * @type {WeakMap}
 * @see module:recurrenceModal~RecurrenceModal~privates
 */

var privateMembers = new WeakMap();
/**
 * Create the form elements for the context options for weekly recurrences.
 * @returns {HTMLElement} The container element holding the form elements.
 */

function createWeekContextForm() {
  var container = document.createElement('div');
  container.classList.add('form-input-container');
  var label = document.createElement('div');
  label.classList.add('form-input-label-inline');
  label.textContent = 'Repeat on';
  container.appendChild(label);
  container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'radio',
    id: 'recurring-date-week-type-previous',
    name: 'recurring-date-week-type',
    value: 'use-previous',
    checked: true,
    label: {
      value: 'The same day of the week as before',
      classList: ['form-input-label-inline']
    },
    container: {
      classList: ['form-input-item-container']
    }
  }));
  var optionContainer = document.createElement('div');
  optionContainer.classList.add('form-input-item-container');
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'radio',
    id: 'recurring-date-week-type-select-days',
    name: 'recurring-date-week-type',
    value: 'select-days'
  }));
  label = document.createElement('label');
  label.classList.add('form-input-label-inline');
  label.textContent = 'These days: ';
  label.htmlFor = 'recurring-date-week-type-select-days';
  optionContainer.appendChild(label);

  lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(7).map(function (index) {
    var name = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getWeekdayName)(index);
    return {
      value: name.toLowerCase(),
      label: name.slice(0, 1)
    };
  }).forEach(function (day) {
    optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createToggleButton)(day.label, {
      id: "recurring-date-weekday-".concat(day.value),
      name: 'recurring-date-weekday',
      value: day.value,
      classList: ['toggle-button', 'form-weekday-button']
    }));
  });

  container.appendChild(optionContainer);
  return container;
}
/**
 * Create the form elements for the context options for monthly recurrences.
 * @returns {HTMLElement} The container element holding the form elements.
 */


function createMonthContextForm() {
  var container = document.createElement('div');
  container.classList.add('form-input-container');
  var label;
  var optionContainer;
  var selectItems;
  label = document.createElement('div');
  label.classList.add('form-input-label-inline');
  label.textContent = 'Repeat on';
  container.appendChild(label);
  container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'radio',
    id: 'recurring-date-month-type-previous',
    name: 'recurring-date-month-type',
    value: 'use-previous',
    checked: true,
    label: {
      value: 'The same day of the month as before',
      classList: ['form-input-label-inline']
    },
    container: {
      classList: ['form-input-item-container']
    }
  }));
  optionContainer = document.createElement('div');
  optionContainer.classList.add('form-input-item-container');
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'radio',
    id: 'recurring-date-month-type-day',
    name: 'recurring-date-month-type',
    value: 'day-of-month'
  }));
  label = document.createElement('label');
  label.classList.add('form-input-label-inline');
  label.htmlFor = 'recurring-date-month-type-day';
  label.textContent = 'The ';
  optionContainer.appendChild(label);
  selectItems = lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(1, 32).map(function (day) {
    return {
      value: day.toString(),
      label: ordinal__WEBPACK_IMPORTED_MODULE_15___default()(day)
    };
  });
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'select',
    id: 'recurring-date-month-day',
    name: 'recurring-date-month-day',
    classList: ['form-select-inline'],
    menuItems: selectItems
  }));
  label = document.createElement('label');
  label.classList.add('form-input-label-inline');
  label.htmlFor = 'recurring-date-month-day';
  label.textContent = ' day of the month';
  optionContainer.appendChild(label);
  container.appendChild(optionContainer);
  optionContainer = document.createElement('div');
  optionContainer.classList.add('form-input-item-container');
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'radio',
    id: 'recurring-date-month-type-week',
    name: 'recurring-date-month-type',
    value: 'week-of-month'
  }));
  label = document.createElement('label');
  label.classList.add('form-input-label-inline');
  label.htmlFor = 'recurring-date-month-type-week';
  label.textContent = 'The ';
  optionContainer.appendChild(label);
  selectItems = lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(1, 6).map(function (week) {
    return {
      value: week.toString(),
      label: week < 5 ? ordinal__WEBPACK_IMPORTED_MODULE_15___default()(week) : 'last'
    };
  });
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'select',
    id: 'recurring-date-month-week-number',
    name: 'recurring-date-month-week-number',
    classList: ['form-select-inline'],
    menuItems: selectItems
  }));
  label = document.createElement('span');
  label.classList.add('form-input-label-inline');
  label.textContent = ' ';
  optionContainer.appendChild(label);
  selectItems = lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(7).map(function (index) {
    var day = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getWeekdayName)(index);
    return {
      value: day.toLowerCase(),
      label: day
    };
  });
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'select',
    id: 'recurring-date-month-week-day',
    name: 'recurring-date-month-week-day',
    classList: ['form-select-inline'],
    menuItems: selectItems
  }));
  label = document.createElement('label');
  label.classList.add('form-input-label-inline');
  label.htmlFor = 'recurring-date-month-week-day';
  label.textContent = ' of the month';
  optionContainer.appendChild(label);
  container.appendChild(optionContainer);
  return container;
}
/**
 * Create the form elements for the context options for yearly recurrences.
 * @returns {HTMLElement} The container element holding the form elements.
 */


function createYearContextForm() {
  var container = document.createElement('div');
  container.classList.add('form-input-container');
  var label;
  var selectItems;
  label = document.createElement('div');
  label.classList.add('form-input-label-inline');
  label.textContent = 'Repeat on';
  container.appendChild(label);
  container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'radio',
    id: 'recurring-date-year-type-previous',
    name: 'recurring-date-year-type',
    value: 'use-previous',
    checked: true,
    label: {
      value: 'The same month and day as before',
      classList: ['form-input-label-inline']
    },
    container: {
      classList: ['form-input-item-container']
    }
  }));
  var optionContainer = document.createElement('div');
  optionContainer.classList.add('form-input-item-container');
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'radio',
    id: 'recurring-date-year-type-day',
    name: 'recurring-date-year-type',
    value: 'month-and-day'
  }));
  label = document.createElement('label');
  label.classList.add('form-input-label-inline');
  label.htmlFor = 'recurring-date-year-type-day';
  label.textContent = 'The ';
  optionContainer.appendChild(label);
  selectItems = lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(1, 32).map(function (day) {
    return {
      value: day.toString(),
      label: ordinal__WEBPACK_IMPORTED_MODULE_15___default()(day)
    };
  });
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'select',
    id: 'recurring-date-year-day',
    name: 'recurring-date-year-day',
    classList: ['form-select-inline'],
    menuItems: selectItems
  }));
  label = document.createElement('span');
  label.classList.add('form-input-label-inline');
  label.textContent = ' day of ';
  optionContainer.appendChild(label);
  selectItems = lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(12).map(function (index) {
    var name = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getMonthName)(index);
    return {
      value: name.toLowerCase(),
      label: name
    };
  });
  optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
    type: 'select',
    id: 'recurring-date-year-month',
    name: 'recurring-date-year-month',
    classList: ['form-select-inline'],
    menuItems: selectItems
  }));
  container.appendChild(optionContainer);
  return container;
}
/**
 * Select a form control in the modal.
 * @param {module:recurrenceModal~RecurrenceModal} instance The class instance
 *   on which to apply the function.
 * @param {string} idSuffix The identifier of the control to retrieve,
 *   without the 'recurring-date-' prefix.
 * @param {string} [container] The container in which to look for the
 *   control. If not given, then the modal content container is used.
 * @returns {HTMLElement} The requested element, or undefined if not found.
 */


function getControl(instance, idSuffix, container) {
  var parent = container || privateMembers.get(instance).containers.parent;
  return parent.querySelector("#recurring-date-".concat(idSuffix));
}
/**
 * Initialize the values of the form elements based on the initial recurrence
 * that was passed to the constructor, if any.
 * @param {module:recurrenceModal~RecurrenceModal} instance The class instance
 *   on which to apply the function.
 */


function initFormValues(instance) {
  var privates = privateMembers.get(instance);
  var _privates$containers = privates.containers,
      weekOptions = _privates$containers.weekOptions,
      monthOptions = _privates$containers.monthOptions,
      yearOptions = _privates$containers.yearOptions;
  var initial = privates.initialRecurrence;

  if (initial) {
    getControl(instance, 'interval-length').value = initial.intervalLength;
    getControl(instance, 'interval-unit').value = initial.intervalUnit;
    var context;

    switch (initial.intervalUnit) {
      case 'week':
        context = weekOptions;

        if (initial.daysOfWeek) {
          getControl(instance, 'week-type-select-days', context).checked = true;
          initial.daysOfWeek.forEach(function (day) {
            var id = "weekday-".concat((0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getWeekdayName)(day).toLowerCase());
            var button = getControl(instance, id, context);
            if (button) button.classList.add('active');
          });
        } else {
          getControl(instance, 'week-type-previous', context).checked = true;
        }

        break;

      case 'month':
        context = monthOptions;

        if (initial.dayOfMonth) {
          getControl(instance, 'month-type-day', context).checked = true;
          getControl(instance, 'month-day', context).value = initial.dayOfMonth;
        } else if (initial.weekNumber && initial.daysOfWeek && initial.daysOfWeek.length === 1) {
          getControl(instance, 'month-type-week', context).checked = true;
          var weekSelect = getControl(instance, 'month-week-number', context);
          var daySelect = getControl(instance, 'month-week-day', context);
          weekSelect.value = initial.weekNumber;
          daySelect.value = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getWeekdayName)(initial.daysOfWeek[0]).toLowerCase();
        } else {
          getControl(instance, 'month-type-previous', context).checked = true;
        }

        break;

      case 'year':
        context = yearOptions;

        if (Number.isInteger(initial.month) && initial.dayOfMonth) {
          getControl(instance, 'year-type-day', context).checked = true;
          var monthSelect = getControl(instance, 'year-month', context);

          var _daySelect = getControl(instance, 'year-day', context);

          monthSelect.value = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getMonthName)(initial.month).toLowerCase();
          _daySelect.value = initial.dayOfMonth;
        } else {
          getControl(instance, 'year-type-previous', context).checked = true;
        }

        break;

      default:
        break;
    }

    if (initial.endDate) {
      getControl(instance, 'end-type-date').checked = true;
      var input = getControl(instance, 'end-date');
      input.value = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.formatDate)(initial.endDate, privates.dateFormat.outputPattern);
    } else if (initial.maxCount) {
      getControl(instance, 'end-type-count').checked = true;
      getControl(instance, 'end-count').value = initial.maxCount;
    } else {
      getControl(instance, 'end-type-never').checked = true;
    }

    if (initial.startDate) {
      getControl(instance, 'use-start-date').checked = true;

      var _input = getControl(instance, 'start-date');

      _input.value = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.formatDate)(initial.startDate, privates.dateFormat.outputPattern);
    }

    if (initial.baseOnCompletion) {
      getControl(instance, 'base-on-completion').checked = true;
    }

    if (initial.onWeekend !== 'no-change') {
      getControl(instance, 'no-weekend').checked = true;
      getControl(instance, 'weekend-select').value = initial.onWeekend;
    }
  }

  var date = privates.baseDate;
  var dayOfWeek = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getWeekdayName)(date.getDay()).toLowerCase();
  var dayOfMonth = date.getDate();
  var month = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getMonthName)(date.getMonth()).toLowerCase();
  var weekNumber = Math.floor((dayOfMonth - 1) / 7) + 1;

  if (!initial || initial.intervalUnit !== 'week' || !initial.daysOfWeek) {
    var dayButton = getControl(instance, "weekday-".concat(dayOfWeek), weekOptions);
    dayButton.classList.add('active');
  }

  if (!initial || initial.intervalUnit !== 'month' || !initial.dayOfMonth) {
    var monthDaySelect = getControl(instance, 'month-day', monthOptions);
    monthDaySelect.value = dayOfMonth.toString();
  }

  if (!initial || initial.intervalUnit !== 'month' || !initial.weekNumber) {
    var monthWeekNumSelect = getControl(instance, 'month-week-number', monthOptions);
    var monthWeekDaySelect = getControl(instance, 'month-week-day', monthOptions);
    monthWeekNumSelect.value = weekNumber.toString();
    monthWeekDaySelect.value = dayOfWeek;
  }

  if (!initial || initial.intervalUnit !== 'year' || !Number.isInteger(initial.month)) {
    var yearMonthSelect = getControl(instance, 'year-month', yearOptions);
    var yearDaySelect = getControl(instance, 'year-day', yearOptions);
    yearMonthSelect.value = month;
    yearDaySelect.value = dayOfMonth.toString();
  }
}
/**
 * Opens a date picker and updates the given input field with the selected
 * date.
 * @param {module:recurrenceModal~RecurrenceModal} instance The class instance
 *   on which to apply the function.
 * @param {HTMLElement} input The text input field where the date is being
 *   entered.
 * @param {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal has been inserted.
 */


function pickDate(instance, input, modalStack) {
  var privates = privateMembers.get(instance);
  var startDate = null;

  if (input.value) {
    startDate = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.parseDate)(input.value, privates.dateFormat.inputPatterns);
  }

  var title = null;

  switch (input.id) {
    case 'recurring-date-start-date':
      title = 'Select Start Date';
      break;

    case 'recurring-date-end-date':
      title = 'Select End Date';
      break;

    default:
      break;
  }

  var field = input;
  modalStack.showModal(new _datePickerModal__WEBPACK_IMPORTED_MODULE_16__["default"]({
    confirm: function confirm(date) {
      field.value = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.formatDate)(date, privates.dateFormat.outputPattern);
      field.setCustomValidity('');
    },
    startDate: startDate,
    title: title
  }));
}
/**
 * Update the contents of the container holding context-sensitive options,
 * based on the selected interval unit.
 * @param {module:recurrenceModal~RecurrenceModal} instance The class instance
 *   on which to apply the function.
 */


function updateContextContainer(instance) {
  var _privateMembers$get = privateMembers.get(instance),
      containers = _privateMembers$get.containers;

  var contextContainer = containers.context;

  while (contextContainer.firstChild) {
    contextContainer.removeChild(contextContainer.firstChild);
  }

  switch (getControl(instance, 'interval-unit').value) {
    case 'week':
      contextContainer.appendChild(containers.weekOptions);
      break;

    case 'month':
      contextContainer.appendChild(containers.monthOptions);
      break;

    case 'year':
      contextContainer.appendChild(containers.yearOptions);
      break;

    default:
      break;
  }
}
/**
 * Add the event listeners to the form controls in the modal.
 * @param {module:recurrenceModal~RecurrenceModal} instance The class instance
 *   on which to apply the function.
 */


function addListeners(instance) {
  var privates = privateMembers.get(instance);
  var parent = privates.containers.parent;

  var fireEvent = function fireEvent(input) {
    return input.dispatchEvent(new Event('change'));
  }; // Make units singular or plural based on length


  var lengthSelect = getControl(instance, 'interval-length');
  var unitSelect = getControl(instance, 'interval-unit');
  lengthSelect.addEventListener('change', function (e) {
    var length = Number(e.target.value);

    if (e.target.value.length > 0 && Number.isFinite(length)) {
      var plural = length !== 1;
      UNITS.forEach(function (unit) {
        var selector = "option[value=\"".concat(unit.value, "\"]");
        var option = unitSelect.querySelector(selector);
        var label = plural ? unit.plural : unit.singular;
        if (option.textContent !== label) option.textContent = label;
      });
    }
  });
  fireEvent(lengthSelect);
  unitSelect.addEventListener('change', function () {
    updateContextContainer(instance);
  });
  fireEvent(unitSelect);
  var radioSelector = 'input[type="radio"]';
  var _privates$containers2 = privates.containers,
      weekOptions = _privates$containers2.weekOptions,
      monthOptions = _privates$containers2.monthOptions,
      yearOptions = _privates$containers2.yearOptions; // Conditionally enable/disable controls for weekly recurrences

  var weekTypeListener = function weekTypeListener(e) {
    var buttons = weekOptions.querySelectorAll('.form-weekday-button');
    var enable = e.target.value === 'select-days';
    buttons.forEach(function (button) {
      var elem = button;
      elem.disabled = !enable;
    });
  };

  weekOptions.querySelectorAll(radioSelector).forEach(function (radio) {
    radio.addEventListener('change', weekTypeListener);
    if (radio.checked) fireEvent(radio);
  }); // Conditionally enable/disable controls for monthly recurrences

  var monthTypeListener = function monthTypeListener(e) {
    var daySelect = getControl(instance, 'month-day', monthOptions);
    var weekNumberSelect = getControl(instance, 'month-week-number', monthOptions);
    var weekDaySelect = getControl(instance, 'month-week-day', monthOptions);
    daySelect.disabled = e.target.value !== 'day-of-month';
    weekNumberSelect.disabled = e.target.value !== 'week-of-month';
    weekDaySelect.disabled = e.target.value !== 'week-of-month';
  };

  monthOptions.querySelectorAll(radioSelector).forEach(function (radio) {
    radio.addEventListener('change', monthTypeListener);
    if (radio.checked) fireEvent(radio);
  }); // Conditionally enable/disable controls for yearly recurrences

  var yearTypeListener = function yearTypeListener(e) {
    var selectBoxes = yearOptions.querySelectorAll('select');
    var enable = e.target.value === 'month-and-day';
    selectBoxes.forEach(function (select) {
      var elem = select;
      elem.disabled = !enable;
    });
  };

  yearOptions.querySelectorAll(radioSelector).forEach(function (radio) {
    radio.addEventListener('change', yearTypeListener);
    if (radio.checked) fireEvent(radio);
  }); // Update day select box based on the number of days in the selected month

  var yearMonthSelect = getControl(instance, 'year-month', yearOptions);
  var yearDaySelect = getControl(instance, 'year-day', yearOptions);

  var yearMonthListener = function yearMonthListener(e) {
    var month = lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(12).findIndex(function (monthIndex) {
      return (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getMonthName)(monthIndex).toLowerCase() === e.target.value;
    });

    var oldValue = Number(yearDaySelect.value);
    yearDaySelect.innerHTML = '';
    var maxDays = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getDaysInMonth)(month);

    lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(1, maxDays + 1).forEach(function (day) {
      var opt = document.createElement('option');
      opt.value = day.toString();
      opt.textContent = ordinal__WEBPACK_IMPORTED_MODULE_15___default()(day);
      yearDaySelect.appendChild(opt);
    });

    if (oldValue <= maxDays) yearDaySelect.value = oldValue;else yearDaySelect.value = maxDays;
  };

  yearMonthSelect.addEventListener('change', yearMonthListener);
  fireEvent(yearMonthSelect); // Make end count label singular/plural based on value

  var endCount = getControl(instance, 'end-count');
  endCount.addEventListener('change', function (e) {
    var count = Number(e.target.value);

    if (e.target.value.length > 0 && Number.isFinite(count)) {
      var label = count === 1 ? ' occurrence' : ' occurrences';
      getControl(instance, 'end-count-label').textContent = label;
    }
  });
  fireEvent(endCount); // Conditionally enable/disable recurrence end controls

  var endRadioSelector = 'input[name="recurring-date-end-type"]';

  var endTypeListener = function endTypeListener(e) {
    var dateInput = getControl(instance, 'end-date');
    var dateButton = getControl(instance, 'end-date-button');
    var countInput = getControl(instance, 'end-count');
    dateInput.disabled = e.target.value !== 'date';
    dateButton.disabled = e.target.value !== 'date';
    countInput.disabled = e.target.value !== 'count';
  };

  parent.querySelectorAll(endRadioSelector).forEach(function (radio) {
    radio.addEventListener('change', endTypeListener);
    if (radio.checked) fireEvent(radio);
  }); // Conditionally enable/disable controls for checkbox options

  var useDateCheckbox = getControl(instance, 'use-start-date');
  useDateCheckbox.addEventListener('change', function (e) {
    var enable = e.target.checked;
    getControl(instance, 'start-date').disabled = !enable;
    getControl(instance, 'start-date-button').disabled = !enable;
  });
  fireEvent(useDateCheckbox);
  var noWeekendCheckbox = getControl(instance, 'no-weekend');
  noWeekendCheckbox.addEventListener('change', function (e) {
    getControl(instance, 'weekend-select').disabled = !e.target.checked;
  });
  fireEvent(noWeekendCheckbox); // Check date validity

  var dateListener = function dateListener(e) {
    var value = e.target.value;

    if (value.length > 0) {
      var message = '';

      if (!(0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.parseDate)(value, privates.dateFormat.inputPatterns)) {
        var format = privates.dateFormat.visualPattern;
        message = "Please enter a valid date in ".concat(format, " format.");
      }

      e.target.setCustomValidity(message);
    }
  };

  getControl(instance, 'end-date').addEventListener('change', dateListener);
  getControl(instance, 'start-date').addEventListener('change', dateListener);
}
/**
 * A modal dialog for selecting a recurring date.
 * @implements {module:modalStack~Modal}
 */


var RecurrenceModal = /*#__PURE__*/function () {
  /**
   * Initialize the modal.
   * @param {Object} [options={}] Holds configuration options for the modal.
   * @param {Function} [options.confirm] A callback function that will be
   *   invoked when the user successfully confirms the modal. The function will
   *   be passed the recurring date that was selected.
   * @param {Function} [options.cancel] A callback function that will be
   *   invoked when the user cancels the modal.
   * @param {module:recurringDate~RecurringDate} [options.initial] A recurring
   *   date to use as a default when initializing the form controls.
   * @param {Date} [options.baseDate] The date to use as a default for
   *   initializing certain fields. If not given, then the present date is
   *   used.
   * @param {module:settings~Settings~dateFormat} [options.dateFormat] An
   *   object holding information about the calendar date format to use for
   *   date fields. If not given, then the browser default is used.
   */
  function RecurrenceModal() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RecurrenceModal);

    var privates = {
      initialRecurrence: options.initial || null,
      baseDate: options.baseDate || new Date(),
      dateFormat: options.dateFormat || _settings__WEBPACK_IMPORTED_MODULE_18__["default"].lookupDateFormat(),
      callbacks: {
        confirm: options.confirm || null,
        cancel: options.cancel || null
      },
      containers: {
        parent: null,
        context: null,
        weekOptions: null,
        monthOptions: null,
        yearOptions: null
      },
      title: 'Edit Recurring Date'
    };
    privateMembers.set(this, privates);
  }

  _createClass(RecurrenceModal, [{
    key: "title",
    get: function get() {
      return privateMembers.get(this).title;
    }
  }, {
    key: "addContent",
    value: function addContent(parent, modalStack) {
      var _this = this;

      var privates = privateMembers.get(this);
      var container = document.createElement('div');
      container.classList.add('form-input-container');
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'number',
        id: 'recurring-date-interval-length',
        name: 'recurring-date-interval-length',
        value: '1',
        classList: ['form-input-inline', 'form-input-count'],
        required: true,
        min: 1,
        container: {
          inline: true
        },
        label: {
          value: 'Repeat every ',
          classList: ['form-input-label-inline']
        }
      }));
      var label = document.createElement('span');
      label.classList.add('form-input-label-inline');
      label.textContent = ' ';
      container.appendChild(label);
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'select',
        id: 'recurring-date-interval-unit',
        name: 'recurring-date-interval-unit',
        classList: ['form-select-inline'],
        menuItems: UNITS.map(function (unit) {
          var selected = unit.value === 'week';
          return {
            value: unit.value,
            label: unit.singular,
            selected: selected
          };
        })
      }));
      parent.appendChild(container);
      var contextContainer = document.createElement('div');
      parent.appendChild(contextContainer);
      container = document.createElement('div');
      container.classList.add('form-input-container');
      label = document.createElement('div');
      label.classList.add('form-input-label-inline');
      label.textContent = 'Stop repeating';
      container.appendChild(label);
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'radio',
        id: 'recurring-date-end-type-never',
        name: 'recurring-date-end-type',
        value: 'never',
        checked: true,
        label: {
          value: 'Never',
          classList: ['form-input-label-inline']
        },
        container: {
          classList: ['form-input-item-container']
        }
      }));
      var optionContainer = document.createElement('div');
      optionContainer.classList.add('form-input-item-container');
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'radio',
        id: 'recurring-date-end-type-date',
        name: 'recurring-date-end-type',
        value: 'date'
      }));
      label = document.createElement('label');
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'recurring-date-end-type-date';
      label.textContent = 'On date ';
      optionContainer.appendChild(label);
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createDateInputField)({
        id: 'recurring-date-end-date',
        name: 'recurring-date-end-date',
        placeholder: privates.dateFormat.visualPattern,
        classList: ['form-input-inline'],
        required: true,
        container: {
          classList: ['form-input-date-container-inline'],
          inline: true
        },
        button: {
          id: 'recurring-date-end-date-button',
          classList: ['form-button'],
          callback: function callback(input) {
            return pickDate(_this, input, modalStack);
          }
        }
      }));
      container.appendChild(optionContainer);
      optionContainer = document.createElement('div');
      optionContainer.classList.add('form-input-item-container');
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'radio',
        id: 'recurring-date-end-type-count',
        name: 'recurring-date-end-type',
        value: 'count'
      }));
      label = document.createElement('label');
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'recurring-date-end-type-count';
      label.textContent = 'After ';
      optionContainer.appendChild(label);
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'number',
        id: 'recurring-date-end-count',
        name: 'recurring-date-end-count',
        value: '1',
        classList: ['form-input-inline', 'form-input-count'],
        required: true,
        min: 1
      }));
      label = document.createElement('label');
      label.id = 'recurring-date-end-count-label';
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'recurring-date-end-count';
      label.textContent = ' occurrences';
      optionContainer.appendChild(label);
      container.appendChild(optionContainer);
      parent.appendChild(container);
      container = document.createElement('div');
      container.classList.add('form-input-container');
      label = document.createElement('div');
      label.classList.add('form-input-label-inline');
      label.textContent = 'Additional options:';
      container.appendChild(label);
      optionContainer = document.createElement('div');
      optionContainer.classList.add('form-input-item-container');
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'checkbox',
        id: 'recurring-date-use-start-date',
        name: 'recurring-date-additional-options',
        value: 'use-start-date'
      }));
      label = document.createElement('label');
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'recurring-date-use-start-date';
      label.textContent = 'Start on ';
      optionContainer.appendChild(label);
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createDateInputField)({
        id: 'recurring-date-start-date',
        name: 'recurring-date-start-date',
        placeholder: privates.dateFormat.visualPattern,
        classList: ['form-input-inline'],
        required: true,
        container: {
          classList: ['form-input-date-container-inline'],
          inline: true
        },
        button: {
          id: 'recurring-date-start-date-button',
          classList: ['form-button'],
          callback: function callback(input) {
            return pickDate(_this, input, modalStack);
          }
        }
      }));
      container.appendChild(optionContainer);
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'checkbox',
        id: 'recurring-date-base-on-completion',
        name: 'recurring-date-additional-options',
        value: 'base-on-completion',
        label: {
          value: 'Repeat from completion date',
          classList: ['form-input-label-inline']
        },
        container: {
          classList: ['form-input-item-container']
        }
      }));
      optionContainer = document.createElement('div');
      optionContainer.classList.add('form-input-item-container');
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'checkbox',
        id: 'recurring-date-no-weekend',
        name: 'recurring-date-additional-options',
        value: 'no-weekend'
      }));
      label = document.createElement('label');
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'recurring-date-no-weekend';
      label.textContent = 'On weekends, use ';
      optionContainer.appendChild(label);
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_20__.createFormControl)({
        type: 'select',
        id: 'recurring-date-weekend-select',
        name: 'recurring-date-weekend-select',
        classList: ['form-select-inline'],
        menuItems: [{
          value: 'nearest-weekday',
          label: 'nearest',
          selected: true
        }, {
          value: 'previous-weekday',
          label: 'previous'
        }, {
          value: 'next-weekday',
          label: 'next'
        }]
      }));
      label = document.createElement('label');
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'recurring-date-weekend-select';
      label.textContent = ' weekday';
      optionContainer.appendChild(label);
      container.appendChild(optionContainer);
      parent.appendChild(container);
      var weekOptions = createWeekContextForm();
      var monthOptions = createMonthContextForm();
      var yearOptions = createYearContextForm();
      privates.containers = {
        parent: parent,
        context: contextContainer,
        weekOptions: weekOptions,
        monthOptions: monthOptions,
        yearOptions: yearOptions
      };
      initFormValues(this);
      addListeners(this);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var privates = privateMembers.get(this);

      if (privates.callbacks.confirm) {
        var unit = getControl(this, 'interval-unit').value;
        var options = {};
        var lengthInput = getControl(this, 'interval-length');
        options.intervalLength = Number(lengthInput.value);
        var context;

        var getDayIndex = function getDayIndex(day) {
          return lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(7).findIndex(function (dayIndex) {
            return day === (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getWeekdayName)(dayIndex).toLowerCase();
          });
        };

        switch (unit) {
          case 'week':
            context = privates.containers.weekOptions;

            if (getControl(this, 'week-type-select-days', context).checked) {
              var daysOfWeek = [];
              context.querySelectorAll('.form-weekday-button').forEach(function (button) {
                if (button.classList.contains('active')) {
                  daysOfWeek.push(getDayIndex(button.value));
                }
              });
              if (daysOfWeek.length > 0) options.daysOfWeek = daysOfWeek;
            }

            break;

          case 'month':
            context = privates.containers.monthOptions;

            if (getControl(this, 'month-type-day', context).checked) {
              var daySelect = getControl(this, 'month-day', context);
              options.dayOfMonth = Number(daySelect.value);
            } else if (getControl(this, 'month-type-week', context).checked) {
              var weekSelect = getControl(this, 'month-week-number', context);

              var _daySelect2 = getControl(this, 'month-week-day', context);

              options.weekNumber = Number(weekSelect.value);
              options.daysOfWeek = [getDayIndex(_daySelect2.value)];
            }

            break;

          case 'year':
            context = privates.containers.yearOptions;

            if (getControl(this, 'year-type-day', context).checked) {
              var monthSelect = getControl(this, 'year-month', context);

              var _daySelect3 = getControl(this, 'year-day', context);

              options.month = lodash_range__WEBPACK_IMPORTED_MODULE_0___default()(12).findIndex(function (monthIndex) {
                return (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.getMonthName)(monthIndex).toLowerCase() === monthSelect.value;
              });
              options.dayOfMonth = Number(_daySelect3.value);
            }

            break;

          default:
            break;
        }

        if (getControl(this, 'end-type-date').checked) {
          var input = getControl(this, 'end-date');
          options.endDate = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.parseDate)(input.value, privates.dateFormat.inputPatterns);
        } else if (getControl(this, 'end-type-count').checked) {
          var _input2 = getControl(this, 'end-count');

          options.maxCount = Number(_input2.value);
        }

        if (getControl(this, 'use-start-date').checked) {
          var _input3 = getControl(this, 'start-date');

          options.startDate = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_19__.parseDate)(_input3.value, privates.dateFormat.inputPatterns);
        }

        options.baseOnCompletion = getControl(this, 'base-on-completion').checked;

        if (getControl(this, 'no-weekend').checked) {
          options.onWeekend = getControl(this, 'weekend-select').value;
        }

        privates.callbacks.confirm(new _recurringDate__WEBPACK_IMPORTED_MODULE_17__["default"](unit, options));
      }
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var _privateMembers$get2 = privateMembers.get(this),
          callbacks = _privateMembers$get2.callbacks;

      if (callbacks.cancel) callbacks.cancel();
    }
  }, {
    key: "validate",
    value: function validate() {
      if (!getControl(this, 'interval-length').reportValidity()) return false;

      if (getControl(this, 'end-type-date').checked) {
        if (!getControl(this, 'end-date').reportValidity()) return false;
      }

      if (getControl(this, 'end-type-count').checked) {
        if (!getControl(this, 'end-count').reportValidity()) return false;
      }

      if (getControl(this, 'use-start-date').checked) {
        if (!getControl(this, 'start-date').reportValidity()) return false;
      }

      return true;
    }
  }]);

  return RecurrenceModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (RecurrenceModal);

/***/ }),

/***/ "./src/modules/modals/settingsModal.js":
/*!*********************************************!*\
  !*** ./src/modules/modals/settingsModal.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.number.is-finite.js */ "./node_modules/core-js/modules/es.number.is-finite.js");
/* harmony import */ var core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _confirmModal__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./confirmModal */ "./src/modules/modals/confirmModal.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../settings */ "./src/modules/settings.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utility/dom */ "./src/modules/utility/dom.js");
/* harmony import */ var _utility_storage__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utility/storage */ "./src/modules/utility/storage.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }













/**
 * Defines the [SettingsModal]{@link module:settingsModal~SettingsModal} class.
 * @module settingsModal
 */




/**
 * Object holding private members for the
 * [SettingsModal]{@link module:settingsModal~SettingsModal} class.
 * @typedef {Object} module:settingsModal~SettingsModal~privates
 * @property {module:settings~Settings} settings The app settings being
 *   modified.
 * @property {module:modalStack~ModalStack} modalStack The modal stack in which
 *   the modal was inserted.
 * @property {boolean} confirmNoStorage If true, then the user should be asked
 *   for confirmation when disabling local storage.
 * @property {Object} callbacks An object holding callback functions.
 * @property {Function} [callbacks.confirm] A callback function that will be
 *   invoked when the user successfully confirms the modal.
 * @property {Function} [callbacks.cancel] A callback function that will be
 *   invoked when the user cancels the modal.
 * @property {Object} [controls] An object holding the form input elements for
 *   the modal.
 * @property {HTMLElement} controls.saveLocal The radio button element for
 *   indicating that data should be saved to local storage.
 * @property {HTMLElement} controls.saveNever The radio button element for
 *   indicating that data should not be saved.
 * @property {HTMLElement} controls.dateFormat The select element for the date
 *   format.
 * @property {HTMLElement} controls.deleteOld The checkbox element indicating
 *   whether to delete old completed tasks.
 * @property {HTMLElement} controls.deleteAfter The input element for entering
 *   the number of days after which to delete completed tasks.
 * @property {HTMLElement} controls.deleteAfterLabel The label element for the
 *   deleteAfter control.
 */

/**
 * Holds private data for the
 * [SettingsModal]{@link module:settingsModal~SettingsModal} class.
 * @type {WeakMap}
 * @see module:settingsModal~SettingsModal~privates
 */

var privateMembers = new WeakMap();
/**
 * Initialize the values of the form elements based on current settings.
 * @param {module:settingsModal~SettingsModal} instance The class instance on
 *   which to apply the function.
 */

function initFormValues(instance) {
  var privates = privateMembers.get(instance);
  var controls = privates.controls,
      settings = privates.settings;

  switch (settings.storageMethod) {
    case 'none':
      privates.confirmNoStorage = false;
      controls.saveNever.checked = true;
      break;

    case 'local':
    default:
      privates.confirmNoStorage = true;
      controls.saveLocal.checked = true;
      break;
  }

  controls.dateFormat.value = settings.dateFormat.type;
  var deleteOld = settings.deleteAfter !== null;
  controls.deleteOld.checked = deleteOld;
  if (deleteOld) controls.deleteAfter.value = settings.deleteAfter.toString(); // Disable storage options if local storage is unsupported or disabled

  if (!(0,_utility_storage__WEBPACK_IMPORTED_MODULE_14__.isLocalStorageSupported)()) {
    controls.saveNever.disabled = true;
    controls.saveLocal.disabled = true;
  }
}
/**
 * Add the event listeners to the form controls in the modal.
 * @param {module:settingsModal~SettingsModal} instance The class instance on
 *   which to apply the function.
 */


function addListeners(instance) {
  var _privateMembers$get = privateMembers.get(instance),
      controls = _privateMembers$get.controls;

  var fireEvent = function fireEvent(input) {
    return input.dispatchEvent(new Event('change'));
  };

  controls.deleteOld.addEventListener('change', function (e) {
    controls.deleteAfter.disabled = !e.target.checked;
  });
  fireEvent(controls.deleteOld); // Make delete-after label singular/plural based on value

  controls.deleteAfter.addEventListener('change', function (e) {
    var count = Number(e.target.value);

    if (e.target.value.length > 0 && Number.isFinite(count)) {
      var label = count === 1 ? ' day' : ' days';
      controls.deleteAfterLabel.textContent = label;
    }
  });
  fireEvent(controls.deleteAfter);
}
/**
 * A modal dialog for modifying user settings.
 * @implements {module:modalStack~Modal}
 */


var SettingsModal = /*#__PURE__*/function () {
  /**
   * Specifies options for the modal.
   * @typedef {Object} module:settingsModal~SettingsModal~options
   * @property {Function} [confirm] A callback function that will be invoked
   *   when the user successfully confirms the modal. The function will be
   *   passed a reference to the modified [Settings]{module:settings~Settings}
   *   instance.
   * @property {Function} [cancel] A callback function that will be invoked
   *   when the user cancels the modal.
   */

  /**
   * Initialize the modal.
   * @param {module:settings~Settings} settings The app settings being
   *   modified.
   * @param {module:settingsModal~SettingsModal~options} [options={}] Holds
   *   configuration options for the modal.
   */
  function SettingsModal(settings) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, SettingsModal);

    var privates = {
      settings: settings,
      modalStack: null,
      confirmNoStorage: true,
      callbacks: {
        confirm: options.confirm || null,
        cancel: options.cancel || null
      },
      controls: {
        saveLocal: null,
        saveNever: null,
        dateFormat: null,
        deleteOld: null,
        deleteAfter: null,
        deleteAfterLabel: null
      }
    };
    privateMembers.set(this, privates);
  }
  /* eslint-disable-next-line class-methods-use-this --
   * Need to set title to conform to Modal interface, but setting property
   * directly in constructor would allow external modification.
   */


  _createClass(SettingsModal, [{
    key: "title",
    get: function get() {
      return 'Edit Settings';
    }
  }, {
    key: "addContent",
    value: function addContent(parent, modalStack) {
      var container = document.createElement('div');
      container.classList.add('form-input-container');
      var label = document.createElement('div');
      label.classList.add('form-input-label');
      label.textContent = 'Data Storage';
      container.appendChild(label);
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createFormControl)({
        type: 'radio',
        id: 'settings-save-local',
        name: 'settings-save-method',
        value: 'local',
        label: {
          value: 'Save data in browser\'s local storage area',
          classList: ['form-input-label-inline']
        },
        container: {
          classList: ['form-input-item-container']
        }
      }));
      container.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createFormControl)({
        type: 'radio',
        id: 'settings-save-never',
        name: 'settings-save-method',
        value: 'never',
        label: {
          value: 'Do not save data',
          classList: ['form-input-label-inline']
        },
        container: {
          classList: ['form-input-item-container']
        }
      }));
      parent.appendChild(container);
      var dateFormats = ['local', 'iso', 'month-day-year', 'day-month-year', 'year-month-day'].map(function (value) {
        var format = _settings__WEBPACK_IMPORTED_MODULE_12__["default"].lookupDateFormat(value).visualPattern;
        var description;

        switch (value) {
          case 'local':
            description = 'Local Format';
            break;

          case 'iso':
            description = 'ISO';
            break;

          case 'month-day-year':
            description = 'Month/Day/Year';
            break;

          case 'day-month-year':
            description = 'Day/Month/Year';
            break;

          case 'year-month-day':
            description = 'Year/Month/Day';
            break;

          default:
            break;
        }

        return {
          value: value,
          label: "".concat(description, ": ").concat(format)
        };
      });
      parent.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createFormControl)({
        type: 'select',
        id: 'settings-date-format',
        name: 'settings-date-format',
        classList: ['form-select'],
        label: {
          value: 'Date Format',
          classList: ['form-input-label']
        },
        container: {
          classList: ['form-input-container']
        },
        menuItems: dateFormats
      }));
      container = document.createElement('div');
      container.classList.add('form-input-container');
      label = document.createElement('div');
      label.classList.add('form-input-label');
      label.textContent = 'Additional Options';
      container.appendChild(label);
      var optionContainer = document.createElement('div');
      optionContainer.classList.add('form-input-item-container');
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createFormControl)({
        type: 'checkbox',
        id: 'settings-delete-old-tasks',
        name: 'settings-delete-tasks',
        value: 'delete-old'
      }));
      label = document.createElement('label');
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'settings-delete-old-tasks';
      label.textContent = 'Delete completed tasks after ';
      optionContainer.appendChild(label);
      optionContainer.appendChild((0,_utility_dom__WEBPACK_IMPORTED_MODULE_13__.createFormControl)({
        type: 'number',
        id: 'settings-delete-after',
        name: 'settings-delete-after',
        value: '14',
        classList: ['form-input-inline', 'form-input-count'],
        required: true,
        min: 0
      }));
      label = document.createElement('label');
      label.id = 'settings-delete-after-label';
      label.classList.add('form-input-label-inline');
      label.htmlFor = 'settings-delete-after';
      label.textContent = ' days';
      optionContainer.appendChild(label);
      container.appendChild(optionContainer);
      parent.appendChild(container);
      var privates = privateMembers.get(this);
      privates.modalStack = modalStack;
      var controls = privates.controls;
      controls.saveLocal = parent.querySelector('#settings-save-local');
      controls.saveNever = parent.querySelector('#settings-save-never');
      controls.dateFormat = parent.querySelector('#settings-date-format');
      controls.deleteOld = parent.querySelector('#settings-delete-old-tasks');
      controls.deleteAfter = parent.querySelector('#settings-delete-after');
      controls.deleteAfterLabel = parent.querySelector('#settings-delete-after-label');
      initFormValues(this);
      addListeners(this);
    }
  }, {
    key: "confirm",
    value: function confirm() {
      var _privateMembers$get2 = privateMembers.get(this),
          callbacks = _privateMembers$get2.callbacks,
          controls = _privateMembers$get2.controls,
          settings = _privateMembers$get2.settings;

      if (!controls.saveLocal.disabled) {
        settings.storageMethod = controls.saveLocal.checked ? 'local' : 'none';
      }

      settings.setDateFormat(controls.dateFormat.value);

      if (controls.deleteOld.checked) {
        settings.deleteAfter = Number(controls.deleteAfter.value);
      } else {
        settings.deleteAfter = null;
      }

      if (callbacks.confirm) callbacks.confirm(settings);
    }
  }, {
    key: "cancel",
    value: function cancel() {
      var _privateMembers$get3 = privateMembers.get(this),
          callbacks = _privateMembers$get3.callbacks;

      if (callbacks.cancel) callbacks.cancel();
    }
  }, {
    key: "validate",
    value: function validate() {
      var privates = privateMembers.get(this);
      var controls = privates.controls,
          modalStack = privates.modalStack;

      if (controls.deleteOld.checked) {
        if (!controls.deleteAfter.reportValidity()) return false;
      } // Ask for confirmation when disabling local storage


      if (privates.confirmNoStorage && !controls.saveNever.disabled && controls.saveNever.checked) {
        var modal = new _confirmModal__WEBPACK_IMPORTED_MODULE_11__["default"]('Are you sure you want to disable local storage? Your data will not be saved in the browser and will be lost after you leave this page.', {
          confirm: function confirm() {
            privates.confirmNoStorage = false; // Close settings modal
            // Using setTimeout will let us wait for the confirm modal to close

            setTimeout(function () {
              return modalStack.confirmModal();
            });
          },
          cancel: function cancel() {
            controls.saveLocal.checked = true;
          }
        });
        modalStack.showModal(modal);
        return false;
      }

      return true;
    }
  }]);

  return SettingsModal;
}();

/* harmony default export */ __webpack_exports__["default"] = (SettingsModal);

/***/ }),

/***/ "./src/modules/popupMenu.js":
/*!**********************************!*\
  !*** ./src/modules/popupMenu.js ***!
  \**********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_7__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }










/**
 * Defines the [PopupMenu]{@link module:popupMenu~PopupMenu} class.
 * @module popupMenu
 */

/**
 * Object holding private members for the
 * [PopupMenu]{@link module:popupMenu~PopupMenu} class.
 * @typedef {Object} module:popupMenu~PopupMenu~privates
 * @property {HTMLElement} parent The parent element in the DOM under which the
 *   popup menu should be inserted.
 * @property {module:popupMenu~PopupMenu~menuItem[]} menuItems An array of
 *   objects specifying the items in the menu.
 * @property {number} [activeItem] Holds the index of the active (focused) menu
 *   item, if any.
 * @property {HTMLElement} [container] The container element holding the menu.
 *   Will be null when the menu is hidden.
 * @property {HTMLElement} [overlay] The element that will overlay the
 *   background of the menu. Will be null when the menu is hidden.
 * @property {module:popupMenu~PopupMenu~selectionCallback} [callback] Holds
 *   the function to be invoked when the user selects a menu item. This will be
 *   null when the menu is closed.
 * @property {Function} eventListener An event listener to monitor
 *   document-wide mouse and keyboard events. Needs to be stored so that it can
 *   be later removed.
 * @property {number} [scrollTimeout] An identifier for a timeout used to
 *   debounce scroll events for better performance.
 * @property {HTMLElement} [scrollTarget] An element to monitor for scroll
 *   events. If the element is scrolled, then the popup menu will be closed.
 */

/**
 * Holds private data for the [PopupMenu]{@link module:popupMenu~PopupMenu}
 * class.
 * @type {WeakMap}
 * @see module:popupMenu~PopupMenu~privates
 */
var privateMembers = new WeakMap();
/**
 * Position the popup menu at a particular location.
 * @param {module:popupMenu~PopupMenu} instance The class instance on which to
 *   apply the function.
 * @param {module:popupMenu~PopupMenu~position} [position={}] An object
 *   specifying the position in the document at which to place the menu.
 */

function positionMenu(instance) {
  var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _privateMembers$get = privateMembers.get(instance),
      container = _privateMembers$get.container;

  var width = container.offsetWidth;
  var height = container.offsetHeight;
  var left = 0;
  var top = 0;

  if (position.referenceElement) {
    var rect = position.referenceElement.getBoundingClientRect();
    left = rect.left;
    top = rect.top + rect.height;
  } else {
    if ('left' in position) left = position.left;
    if ('top' in position) top = position.top;
  }

  var MARGIN = 4;
  var bodyWidth = document.body.offsetWidth;
  var bodyHeight = document.body.offsetHeight;
  if (left + width + MARGIN > bodyWidth) left = bodyWidth - (width + MARGIN);
  if (top + height + MARGIN > bodyHeight) top = bodyHeight - (height + MARGIN);
  if (left < 0) left = 0;
  if (top < 0) top = 0;
  container.style.left = "".concat(left, "px");
  container.style.top = "".concat(top, "px");
}
/**
 * Select an item in the menu.
 * @param {module:popupMenu~PopupMenu} instance The class instance on which to
 *   apply the function.
 * @param {number} index The index of the menu item.
 */


function selectItem(instance, index) {
  var privates = privateMembers.get(instance);
  privates.callback(privates.menuItems[index].id, index);
  instance.close();
}
/**
 * Get the list item HTML element for a menu item.
 * @param {module:popupMenu~PopupMenu} instance The class instance on which to
 *   apply the function.
 * @param {number} index The index of the menu item to find.
 * @returns {?HTMLElement} The list item element if it exists, or null if it
 *   does not.
 */


function getItem(instance, index) {
  var selector = ".popup-menu-item[data-index=\"".concat(index, "\"]");
  return privateMembers.get(instance).container.querySelector(selector);
}
/**
 * Focus an item in the menu.
 * @param {module:popupMenu~PopupMenu} instance The class instance on which to
 *   apply the function.
 * @param {?number} index The index of the menu item to focus. If set to null,
 *   then no focus will be set and any existing focus is cleared.
 */


function focusItem(instance, index) {
  var privates = privateMembers.get(instance);
  if (index === privates.activeItem) return;

  if (privates.activeItem !== null) {
    var item = getItem(instance, privates.activeItem);
    if (item) item.classList.remove('active');
    privates.activeItem = null;
  }

  if (typeof index === 'number') {
    var _item = getItem(instance, index);

    if (_item) {
      privates.activeItem = index;

      _item.classList.add('active');
    }
  }
}
/**
 * Handle a mouse or keyboard event.
 * @param {module:popupMenu~PopupMenu} instance The class instance on which to
 *   apply the function.
 * @param {Event} event An object describing the event that occurred.
 */


function handleEvent(instance, event) {
  var privates = privateMembers.get(instance);

  switch (event.type) {
    case 'mousedown':
      // Close popup if mouse was clicked outside
      if (!privates.container.contains(event.target)) instance.close();
      break;

    case 'keydown':
      {
        var preventDefault = true;

        switch (event.key) {
          case 'Escape':
          case 'Esc':
          case 'Tab':
            instance.close();
            break;

          case 'Enter':
          case ' ':
          case 'Spacebar':
            if (privates.activeItem !== null) {
              selectItem(instance, privates.activeItem);
            }

            break;

          case 'ArrowUp':
          case 'Up':
            {
              var active = privates.activeItem;
              var itemCount = privates.menuItems.length;
              var index = null;
              if (active !== null) index = active > 0 ? active - 1 : itemCount - 1;else if (itemCount > 0) index = itemCount - 1;
              focusItem(instance, index);
              break;
            }

          case 'ArrowDown':
          case 'Down':
            {
              var _active = privates.activeItem;
              var _itemCount = privates.menuItems.length;
              var _index = null;
              if (_active !== null) _index = _active < _itemCount - 1 ? _active + 1 : 0;else if (_itemCount > 0) _index = 0;
              focusItem(instance, _index);
              break;
            }

          default:
            preventDefault = false;
            break;
        }

        if (preventDefault) event.preventDefault();
        break;
      }

    case 'scroll':
      {
        if (privates.scrollTimeout) clearTimeout(privates.scrollTimeout);
        privates.scrollTimeout = setTimeout(function () {
          privates.scrollTimeout = null;
          if (event.target.contains(privates.scrollTarget)) instance.close();
        }, 100);
        break;
      }

    default:
      break;
  }
}
/**
 * A popup menu.
 */


var PopupMenu = /*#__PURE__*/function () {
  /**
   * An object holding configuration options for the popup menu.
   * @typedef {Object} module:popupMenu~PopupMenu~options
   * @property {HTMLElement} [parent=document.body] The parent element in the
   *   DOM under which the popup should be inserted.
   * @property {module:popupMenu~PopupMenu~menuItem[]} [menuItems] An array of
   *   objects specifying the items in the menu.
   * @property {HTMLElement} [closeIfScrolled] If provided, the popup menu will
   *   be closed when the given element or one of its ancestors is scrolled.
   */

  /**
   * A menu item in the popup.
   * @typedef {Object} module:popupMenu~PopupMenu~menuItem
   * @property {string} label The text label that will be displayed in the
   *   menu.
   * @property {string} id An identifier for the menu item. This will be passed
   *   to callbacks.
   * @property {Object} [icon] An object specifying information about an icon
   *   to display next to the menu item.
   * @property {string} icon.source The source URL for the icon.
   * @property {number} [icon.width] The width of the icon in pixels.
   * @property {number} [icon.height] The height of the icon in pixels.
   */

  /**
   * An object describing how the popup should be positioned.
   * @typedef {Object} module:popupMenu~PopupMenu~position
   * @property {number} [left=0] The position of the left side of the popup, in
   *   pixels, relative to the left edge of the document. This property is
   *   ignored if the referenceElement property is set.
   * @property {number} [top=0] The position of the top of the popup, in
   *   pixels, relative to the top of the document. This property is ignored if
   *   the referenceElement property is set.
   * @property {HTMLElement} [referenceElement] An element in the DOM whose
   *   position is to be used for determining the position of the popup. If
   *   given, the popup will be positioned just underneath the element.
   */

  /**
   * A callback function that will be invoked when the user selects a menu
   * item.
   * @callback module:popupMenu~PopupMenu~selectionCallback
   * @param itemId The identifier of the menu item that was selected.
   * @param index The index of the menu item that was selected.
   */

  /**
   * Create a popup menu.
   * @param {module:popupMenu~PopupMenu~options} [options={}] An object holding
   *   additional options for the popup menu.
   */
  function PopupMenu() {
    var _this = this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PopupMenu);

    var privates = {
      parent: options.parent || document.body,
      menuItems: options.menuItems || [],
      activeItem: null,
      container: null,
      overlay: null,
      callback: null,
      eventListener: function eventListener(e) {
        return handleEvent(_this, e);
      },
      scrollTimeout: null,
      scrollTarget: options.closeIfScrolled || null
    };
    privateMembers.set(this, privates);
  }
  /**
   * Determine whether or not the popup menu is currently open.
   * @returns {boolean} True if the popup menu is open, or false if it is
   *   closed.
   */


  _createClass(PopupMenu, [{
    key: "isOpen",
    value: function isOpen() {
      return privateMembers.get(this).container !== null;
    }
    /**
     * Open the popup menu at a particular position.
     * @param {module:popupMenu~PopupMenu~selectionCallback} callback A callback
     *   function that will be invoked when the user chooses a menu item.
     * @param {module:popupMenu~PopupMenu~position} [position] An object
     *   specifying the position in the document at which to place the menu. If
     *   not given, the upper-left corner of the document will be used.
     */

  }, {
    key: "open",
    value: function open(callback, position) {
      var _this2 = this;

      var privates = privateMembers.get(this);
      if (privates.container) this.close();
      if (privates.menuItems.length === 0) return;
      var overlay = document.createElement('div');
      overlay.classList.add('popup-menu-overlay');
      privates.parent.appendChild(overlay);
      privates.overlay = overlay;
      var menu = document.createElement('div');
      menu.classList.add('popup-menu');
      var list = document.createElement('ul');
      menu.appendChild(list);
      privates.menuItems.forEach(function (item, index) {
        var listItem = document.createElement('li');
        listItem.classList.add('popup-menu-item');
        listItem.dataset.index = index.toString();
        list.appendChild(listItem);

        if (item.icon) {
          var icon = new Image();
          icon.src = item.icon.source;
          icon.alt = '';
          icon.classList.add('popup-menu-item-icon');
          if (item.icon.width != null) icon.width = item.icon.width;
          if (item.icon.height != null) icon.height = item.icon.height;
          listItem.appendChild(icon);
        }

        var label = document.createElement('div');
        label.classList.add('popup-menu-item-label');
        label.textContent = item.label;
        listItem.appendChild(label);
        listItem.addEventListener('click', function () {
          return selectItem(_this2, index);
        });
        listItem.addEventListener('mousemove', function () {
          return focusItem(_this2, index);
        });
      });
      menu.addEventListener('mouseleave', function () {
        return focusItem(_this2, null);
      });
      privates.container = menu;
      privates.parent.appendChild(menu);
      privates.callback = callback;
      positionMenu(this, position);
      document.addEventListener('mousedown', privates.eventListener);
      document.addEventListener('keydown', privates.eventListener);

      if (privates.scrollTarget) {
        document.addEventListener('scroll', privates.eventListener, true);
      }
    }
    /**
     * Close the popup menu if it is open.
     */

  }, {
    key: "close",
    value: function close() {
      var privates = privateMembers.get(this);

      if (privates.container) {
        privates.parent.removeChild(privates.container);
        privates.parent.removeChild(privates.overlay);
        privates.activeItem = null;
        privates.container = null;
        privates.overlay = null;
        privates.callback = null;
        document.removeEventListener('mousedown', privates.eventListener);
        document.removeEventListener('keydown', privates.eventListener);

        if (privates.scrollTarget) {
          document.removeEventListener('scroll', privates.eventListener, true);
        }
      }
    }
    /**
     * Toggle the state of the popup: if the menu is closed, it will be opened.
     * If the menu is open, it will be closed.
     * @param {module:popupMenu~PopupMenu~selectionCallback} callback A callback
     *   function that will be invoked when the user chooses a menu item.
     * @param {module:popupMenu~PopupMenu~position} [position] An object
     *   specifying the position in the document at which to place the menu. If
     *   not given, the upper-left corner of the document will be used.
     */

  }, {
    key: "toggle",
    value: function toggle(callback, position) {
      if (this.isOpen()) this.close();else this.open(callback, position);
    }
    /**
     * Set the menu items that will be shown the next time the popup menu is
     * opened. If the popup menu is currently open, the displayed items will not
     * be altered until the menu is reopened.
     * @param {module:popupMenu~PopupMenu~menuItem[]} menuItems The array of menu
     *   items.
     */

  }, {
    key: "setMenuItems",
    value: function setMenuItems(menuItems) {
      privateMembers.get(this).menuItems = menuItems;
    }
  }]);

  return PopupMenu;
}();

/* harmony default export */ __webpack_exports__["default"] = (PopupMenu);

/***/ }),

/***/ "./src/modules/project.js":
/*!********************************!*\
  !*** ./src/modules/project.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_3__);





function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Defines the [Project]{@link module:project~Project} class.
 * @module project
 */

/**
 * Holds information about a user project.
 */
var Project = /*#__PURE__*/function () {
  /**
   * Create a project.
   * @param {string} name The name of the project.
   * @param {Object} [options={}] An object holding additional project options.
   * @param {string} [options.description] A description for the project.
   */
  function Project(name) {
    var _options$description;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Project);

    /**
     * The name of the project.
     * @type {string}
     */
    this.name = name;
    /**
     * A description for the project.
     * @type {?string}
     */

    this.description = (_options$description = options.description) !== null && _options$description !== void 0 ? _options$description : null;
  }
  /**
   * Create a project from a JSON object.
   * @param {Object} data The JSON object holding the serialized data.
   * @returns {module:project~Project} A new project converted from the JSON
   *   data.
   */


  _createClass(Project, null, [{
    key: "fromJson",
    value: function fromJson(data) {
      return new Project(data.name, {
        description: data.description
      });
    }
  }]);

  return Project;
}();

/* harmony default export */ __webpack_exports__["default"] = (Project);

/***/ }),

/***/ "./src/modules/projectList.js":
/*!************************************!*\
  !*** ./src/modules/projectList.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var lodash_uniqWith__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/uniqWith */ "./node_modules/lodash/uniqWith.js");
/* harmony import */ var lodash_uniqWith__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_uniqWith__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/isEmpty */ "./node_modules/lodash/isEmpty.js");
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var lodash_sortedIndexBy__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/sortedIndexBy */ "./node_modules/lodash/sortedIndexBy.js");
/* harmony import */ var lodash_sortedIndexBy__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_sortedIndexBy__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.find-index.js */ "./node_modules/core-js/modules/es.array.find-index.js");
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var _project__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./project */ "./src/modules/project.js");
/* harmony import */ var _utility_data__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./utility/data */ "./src/modules/utility/data.js");











function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }














/**
 * Defines the [ProjectList]{@link module:projectList~ProjectList} class.
 * @module projectList
 */




/**
 * Object holding private members for the
 * [ProjectList]{@link module:projectList~ProjectList} class.
 * @typedef {Object} module:projectList~ProjectList~privates
 * @property {module:projectList~ProjectList~projectWrapper[]} projects An
 *   array of projects. Each element in the array is a wrapper that holds the
 *   project along with its unique identifier.
 * @property {module:projectList~ProjectList~eventEmitter} Holds the event
 *   emitter which dispatches events to attached listeners.
 */

/**
 * Holds private data for the
 * [ProjectList]{@link module:projectList~ProjectList} class.
 * @type {WeakMap}
 * @see module:projectList~ProjectList~privates
 */

var privateMembers = new WeakMap();
/**
 * Get a project's index in the project list.
 * @param {module:projectList~ProjectList} instance The class instance on which
 *   to apply the function.
 * @param {string} id The identifier for the project to look up.
 * @returns {number} The index of the project, or -1 if not found.
 */

function findIndex(instance, id) {
  return privateMembers.get(instance).projects.findIndex(function (entry) {
    return entry.id === id;
  });
}
/**
 * Holds a list of projects.
 */


var ProjectList = /*#__PURE__*/function () {
  /**
   * Wrapper object holding a project along with its UUID.
   * @typedef {Object} module:projectList~ProjectList~projectWrapper
   * @property {string} id The unique identifier for the project.
   * @property {module:project~Project} project The project instance.
   */

  /**
   * Event that is fired when a project is added to the project list.
   * @event module:projectList~ProjectList~addProject
   * @type {Object}
   * @property {string} type The event type: 'add-project'.
   * @property {string} id The unique identifier of the newly-added project.
   * @property {module:project~Project} project A copy of the newly-added
   *   project.
   */

  /**
   * Event that is fired when a project in the list is modified.
   * @event module:projectList~ProjectList~updateProject
   * @type {Object}
   * @property {string} type The event type: 'update-project'.
   * @property {string} id The unique identifier for the updated project.
   * @property {module:project~Project} project A copy of the updated project.
   */

  /**
   * Event that is fired when a project in the list is deleted.
   * @event module:projectList~ProjectList~deleteProject
   * @type {Object}
   * @property {string} type The event type: 'delete-project'.
   * @property {string} id The unique identifier for the deleted project.
   * @property {module:project~Project} project A copy of the deleted project.
   */

  /**
   * An object holding information about the status of a data import.
   * @typedef {Object} module:projectList~ProjectList~importStatus
   * @property {Object} projects An object holding information about the number
   *   of projects that were imported.
   * @property {number} projects.added The number of new projects that were
   *   added to the project list.
   * @property {number} projects.updated The number of existing projects in the
   *   project list that were updated.
   * @property {number} projects.failed The number of projects that failed to
   *   import.
   * @property {number} projects.total The total number of projects that were
   *   processed.
   * @property {string[]} errors An array of error messages describing any
   *   errors that occurred during the import.
   */

  /**
   * Create a project list.
   */
  function ProjectList() {
    _classCallCheck(this, ProjectList);

    var privates = {
      projects: [],
      eventEmitter: new (events__WEBPACK_IMPORTED_MODULE_22___default())()
    };
    privateMembers.set(this, privates);
  }
  /**
   * Get a project in the project list. This method only returns a copy of the
   * project, not an actual reference to the project itself. To modify a
   * project in the list, use the
   * [updateProject]{@link module:projectList~ProjectList#updateProject}
   * method.
   * @param {string} id The unique identifier of the project to retrieve.
   * @returns {?module:project~Project} The requested project, or undefined if
   *   it could not be found.
   */


  _createClass(ProjectList, [{
    key: "getProject",
    value: function getProject(id) {
      var index = findIndex(this, id);
      if (index < 0) return undefined;
      return lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(privateMembers.get(this).projects[index].project);
    }
    /**
     * Update a project in the project list.
     * @param {string} id The unique identifier of the project to replace.
     * @param {module:project~Project} project The new project to associate with
     *   the given identifier.
     * @returns {boolean} Returns true if the project was replaced successfully,
     *   or false if the given identifier is invalid.
     * @fires module:projectList~ProjectList~updateProject
     */

  }, {
    key: "updateProject",
    value: function updateProject(id, project) {
      var index = findIndex(this, id);
      if (index < 0) return false;
      var privates = privateMembers.get(this);
      var wrapper = privates.projects[index];
      var needSort = project.name !== wrapper.project.name;
      wrapper.project = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(project);

      if (needSort) {
        privates.projects.splice(index, 1);

        var insertAt = lodash_sortedIndexBy__WEBPACK_IMPORTED_MODULE_8___default()(privates.projects, wrapper, function (elem) {
          return elem.project.name.toLowerCase();
        });

        privates.projects.splice(insertAt, 0, wrapper);
      }

      privates.eventEmitter.emit('update-project', {
        type: 'update-project',
        id: id,
        project: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(project)
      });
      return true;
    }
    /**
     * Add or update a project. If a project with the given identifier exists,
     * then it is replaced with the given project. Otherwise, the project is
     * added to the list as a new project. If the given identifier is not a valid
     * UUID, then the method returns false and nothing happens.
     * @param {string} id The unique identifier of the project.
     * @param {module:project~Project} project The project that should be added
     *   or with which an existing project should be replaced.
     * @returns {boolean} True if the project was successfully added or updated,
     *   or false if the given identifier is not a valid UUID.
     * @fires module:projectList~ProjectList~addProject
     * @fires module:projectList~ProjectList~updateProject
     */

  }, {
    key: "addOrUpdateProject",
    value: function addOrUpdateProject(id, project) {
      if (!(0,_utility_data__WEBPACK_IMPORTED_MODULE_24__.isUuidValid)(id)) return false;

      if (!this.updateProject(id, project)) {
        var privates = privateMembers.get(this);
        var value = {
          id: id,
          project: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(project)
        }; // Maintain sort order on insertion

        var index = lodash_sortedIndexBy__WEBPACK_IMPORTED_MODULE_8___default()(privates.projects, value, function (elem) {
          return elem.project.name.toLowerCase();
        });

        privates.projects.splice(index, 0, value);
        privates.eventEmitter.emit('add-project', {
          type: 'add-project',
          id: id,
          project: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(project)
        });
      }

      return true;
    }
    /**
     * Add a project to the list. In order to prevent unintentional external
     * modification of the project, a deep copy is made, and the original object
     * is not kept.
     * @param {module:project~Project} project The project to add.
     * @returns {string} The identifier of the newly-added project.
     * @fires module:projectList~ProjectList~addProject
     */

  }, {
    key: "addProject",
    value: function addProject(project) {
      // Generate UUID (loop in case of collision)
      var id;

      do {
        id = (0,uuid__WEBPACK_IMPORTED_MODULE_25__["default"])();
      } while (this.hasProject(id));

      this.addOrUpdateProject(id, project);
      return id;
    }
    /**
     * Remove a project from the project list.
     * @param {string} id The identifier of the project to remove.
     * @returns {boolean} Returns true if the project was successfully removed,
     *   or false if an invalid identifier was given.
     * @fires module:projectList~ProjectList~deleteProject
     */

  }, {
    key: "deleteProject",
    value: function deleteProject(id) {
      var index = findIndex(this, id);
      if (index < 0) return false;
      var privates = privateMembers.get(this);
      var project = privates.projects[index].project;
      privates.projects.splice(index, 1);
      privates.eventEmitter.emit('delete-project', {
        type: 'delete-project',
        id: id,
        project: project
      });
      return true;
    }
    /**
     * Delete all projects from the project list.
     * @fires module:projectList~ProjectList~deleteProject
     */

  }, {
    key: "deleteAll",
    value: function deleteAll() {
      var privates = privateMembers.get(this);

      var projects = _toConsumableArray(privates.projects);

      privates.projects.length = 0;
      projects.forEach(function (_ref) {
        var id = _ref.id,
            project = _ref.project;
        privates.eventEmitter.emit('delete-project', {
          type: 'delete-project',
          id: id,
          project: project
        });
      });
    }
    /**
     * Determines whether a project with the given identifier exists within the
     * project list.
     * @param {string} id The unique identifier of the project to look for.
     * @returns {boolean} True if the project exists, and false otherwise.
     */

  }, {
    key: "hasProject",
    value: function hasProject(id) {
      return findIndex(this, id) >= 0;
    }
    /**
     * Execute the provided function on each project in the list. Note that the
     * project instance passed to the callback function is only a copy of the
     * project in the list.
     * @param {Function} callback The function to execute on each project. The
     *   function will be passed a
     *   [wrapper]{@link module:projectList~ProjectList~projectWrapper}
     *   containing the project and its identifier. The function can also
     *   optionally accept the index of the project in the list as its second
     *   argument.
     */

  }, {
    key: "forEach",
    value: function forEach(callback) {
      privateMembers.get(this).projects.forEach(function (project, index) {
        var copy = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(project);

        callback(copy, index);
      });
    }
    /**
     * Add an event listener to the project list.
     * @param {string} type The type of event to listen for.
     * @param {Function} listener A callback function to be invoked when the
     *   event is triggered.
     */

  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      privateMembers.get(this).eventEmitter.on(type, listener);
    }
    /**
     * Convert data to an object suitable for serialization.
     * @returns {Object} An object representing serializable data for the class.
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var projects = [];
      privateMembers.get(this).projects.forEach(function (_ref2) {
        var id = _ref2.id,
            project = _ref2.project;
        projects.push({
          name: project.name,
          id: id,
          description: project.description
        });
      });
      return projects;
    }
    /**
     * Import projects from a JSON object.
     * @param {Object} data The serialized JSON object to import.
     * @returns {module:projectList~ProjectList~importStatus} An object holding
     *   information about the status of the import.
     * @fires module:projectList~ProjectList~addProject
     * @fires module:projectList~ProjectList~updateProject
     */

  }, {
    key: "importFromJson",
    value: function importFromJson(data) {
      var _this = this;

      var counts = {
        added: 0,
        updated: 0,
        failed: 0,
        total: 0
      };
      var errors = [];

      if (!Array.isArray(data)) {
        errors.push('Error: Expected "projects" property to be an array.');
        return {
          projects: counts,
          errors: errors
        };
      }

      data.forEach(function (_ref3) {
        var name = _ref3.name,
            id = _ref3.id,
            description = _ref3.description;

        var handleError = function handleError(errorType, value, opts) {
          if (value == null) return;
          var msgPrefix = "Warning: Project \"".concat(name, "\"");
          var msg;

          switch (errorType) {
            case 'bad-type':
              msg = "Expected type \"".concat(opts.expectedType, "\" for property \"").concat(opts.valueName, "\" (received \"").concat((0,_utility_data__WEBPACK_IMPORTED_MODULE_24__.getJsonType)(value), "\").");
              break;

            case 'bad-id':
              msg = "Expected a version 4 UUID for property \"".concat(opts.valueName, "\" (received \"").concat(value, "\").");
              break;

            default:
              msg = "Encountered unrecognized error \"".concat(errorType, "\" for property \"").concat(opts.valueName, "\".");
              break;
          }

          errors.push("".concat(msgPrefix, ": ").concat(msg));
        };

        if (name == null) {
          errors.push('Error: Project must have a name.');
          counts.failed += 1;
        } else if (typeof name !== 'string') {
          errors.push("Error: Expected type \"string\" for project name (received \"".concat((0,_utility_data__WEBPACK_IMPORTED_MODULE_24__.getJsonType)(name), "\")."));
          counts.failed += 1;
        } else if (name.length === 0) {
          errors.push('Error: Project name must not be empty.');
          counts.failed += 1;
        } else {
          var projectOptions = {};
          if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_24__.validateValue)(description, {
            valueName: 'description',
            expectedType: 'string',
            errorCallback: handleError
          })) projectOptions.description = description;
          var newId = null;
          if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_24__.validateValue)(id, {
            valueName: 'id',
            expectedType: 'string',
            requireUuid: true,
            errorCallback: handleError
          })) newId = id;
          if (newId && _this.hasProject(newId)) counts.updated += 1;else counts.added += 1;
          var project = new _project__WEBPACK_IMPORTED_MODULE_23__["default"](name, projectOptions);
          if (newId) _this.addOrUpdateProject(newId, project);else _this.addProject(project);
        }
      });
      counts.total = counts.added + counts.updated + counts.failed;
      return {
        projects: counts,
        errors: errors
      };
    }
    /**
     * Import projects from parsed CSV data.
     * @param {string[][]} data An array of string arrays. Each member of the
     *   outer array represents a single project, and each member of each inner
     *   array is a data field for that particular project. The first member of
     *   the outer array should be a header holding field names. Duplicate
     *   projects are ignored, as are unrelated fields.
     * @returns {module:taskList~TaskList~importStatus} An object holding
     *   information about the status of the import.
     * @fires module:projectList~ProjectList~addProject
     * @fires module:projectList~ProjectList~updateProject
     */

  }, {
    key: "importFromCsv",
    value: function importFromCsv(data) {
      var columns = [];

      if (data.length > 0) {
        var header = data[0];
        header.forEach(function (field, index) {
          switch (field.toLowerCase()) {
            case 'project name':
            case 'project-name':
              columns.push({
                name: 'name',
                index: index
              });
              break;

            case 'project uuid':
            case 'project-uuid':
              columns.push({
                name: 'id',
                index: index
              });
              break;

            case 'project description':
            case 'project-description':
              columns.push({
                name: 'description',
                index: index
              });
              break;

            default:
              break;
          }
        });
      }

      var entries = [];

      if (columns.length > 0) {
        data.forEach(function (csvRecord, csvIndex) {
          if (csvIndex === 0) return;
          var entry = {};
          columns.forEach(function (_ref4) {
            var name = _ref4.name,
                index = _ref4.index;

            if (csvRecord.length > index && csvRecord[index].length > 0) {
              entry[name] = csvRecord[index];
            }
          });
          if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default()(entry)) entries.push(entry);
        });
      }

      var isEntryEqual = function isEntryEqual(left, right) {
        if (left.id != null || right.id != null) return left.id === right.id;
        return left.name === right.name && left.description === right.description;
      };

      return this.importFromJson(lodash_uniqWith__WEBPACK_IMPORTED_MODULE_6___default()(entries, isEntryEqual));
    }
  }]);

  return ProjectList;
}();

/* harmony default export */ __webpack_exports__["default"] = (ProjectList);

/***/ }),

/***/ "./src/modules/recurringDate.js":
/*!**************************************!*\
  !*** ./src/modules/recurringDate.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lodash/uniq */ "./node_modules/lodash/uniq.js");
/* harmony import */ var lodash_uniq__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(lodash_uniq__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lodash/isEqual */ "./node_modules/lodash/isEqual.js");
/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.find-index.js */ "./node_modules/core-js/modules/es.array.find-index.js");
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.number.is-integer.js */ "./node_modules/core-js/modules/es.number.is-integer.js");
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var ordinal__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ordinal */ "./node_modules/ordinal/index.js");
/* harmony import */ var ordinal__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(ordinal__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/startOfDay/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/add/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/startOfMonth/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/getDaysInMonth/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/nextDay/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isBefore/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isWeekend/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/previousDay/index.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./utility/dates */ "./src/modules/utility/dates.js");















function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }












/**
 * Starting from the given date, find the next date landing on one of the given
 * days of the week.
 * @param {Date} date The initial date to start from.
 * @param {number[]} daysOfWeek An array of desired weekdays. Each day is a
 *   value from 0-6, with Sunday being 0.
 * @returns {Date} The first date on or after the given date that matches one
 *   of the given weekdays.
 */

function nextDayOfWeek(date, daysOfWeek) {
  var result = (0,date_fns__WEBPACK_IMPORTED_MODULE_24__["default"])(date);
  if (daysOfWeek.length === 0) return result;
  var currentDay = result.getDay();
  var daysToAdd = daysOfWeek.map(function (day) {
    return day >= currentDay ? day - currentDay : day + 7 - currentDay;
  }).reduce(function (min, current) {
    return current < min ? current : min;
  });
  if (daysToAdd > 0) result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
    days: daysToAdd
  });
  return result;
}
/**
 * Starting from the given date, find the next date with the indicated day of
 * the month.
 * @param {Date} date The initial date to start from.
 * @param {number} dayOfMonth The desired day of the month, from 1-31.
 * @returns {Date} The first date on or after the given date that matches the
 *   day of the month.
 */


function nextDayOfMonth(date, dayOfMonth) {
  var currentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_26__["default"])(date);
  var nextMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_26__["default"])((0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(currentMonth, {
    months: 1
  }));
  var result = date.getDate() <= dayOfMonth ? currentMonth : nextMonth;
  var daysInMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_27__["default"])(result);
  result.setDate(Math.min(dayOfMonth, daysInMonth));
  return result;
}
/**
 * Starting from the given date, find the next date belonging to the indicated
 * week and weekday of the month.
 * @param {Date} date The initial date to start from.
 * @param {number} weekNumber The week of the month, from 1-5.
 * @param {number} weekDay The day of the week, from 0-6 with Sunday being 0.
 * @returns {Date} The first date on or after the given date that matches the
 *   week and day of the month.
 */


function nextWeekOfMonth(date, weekNumber, weekDay) {
  var currentMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_26__["default"])(date);
  var nextMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_26__["default"])((0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(currentMonth, {
    months: 1
  }));

  var findDay = function findDay(month) {
    var daysInMonth = (0,date_fns__WEBPACK_IMPORTED_MODULE_27__["default"])(month);
    var result = month;
    if (result.getDay() !== weekDay) result = (0,date_fns__WEBPACK_IMPORTED_MODULE_28__["default"])(result, weekDay);
    var daysToAdd = (weekNumber - 1) * 7;

    if (result.getDate() + daysToAdd > daysInMonth) {
      daysToAdd = Math.floor((daysInMonth - result.getDate()) / 7) * 7;
    }

    if (weekNumber > 1) result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
      days: daysToAdd
    });
    return result;
  };

  var result = findDay(currentMonth);
  if ((0,date_fns__WEBPACK_IMPORTED_MODULE_29__["default"])(result, date)) result = findDay(nextMonth);
  return result;
}
/**
 * Starting from the given date, find the next date belonging to the given
 * month and day of the year.
 * @param {Date} date The initial date to start from.
 * @param {number} month The desired month, from 0-11 with January being 0.
 * @param {number} dayOfMonth The desired day of the month, from 1-31.
 * @returns {Date} The first date on or after the given date that matches the
 *   month and day of the year.
 */


function nextDayOfYear(date, month, dayOfMonth) {
  var dateOfCurrentYear = new Date(date.getFullYear(), month, 1);
  dateOfCurrentYear.setDate(Math.min(dayOfMonth, (0,date_fns__WEBPACK_IMPORTED_MODULE_27__["default"])(dateOfCurrentYear)));
  var dateOfNextYear = new Date(date.getFullYear() + 1, month, 1);
  dateOfNextYear.setDate(Math.min(dayOfMonth, (0,date_fns__WEBPACK_IMPORTED_MODULE_27__["default"])(dateOfNextYear)));
  var result = dateOfCurrentYear;
  if ((0,date_fns__WEBPACK_IMPORTED_MODULE_29__["default"])(result, date)) result = dateOfNextYear;
  return result;
}
/**
 * Represents a recurring date.
 */


var RecurringDate = /*#__PURE__*/function () {
  /**
   * Create a recurring date.
   * @param {string} intervalUnit The unit of time (e.g. 'week') in which the
   *   repetition interval is measured. Valid options are 'day', 'week',
   *   'month', and 'year'.
   * @param {Object} options An object holding configuration options for the
   *   recurrence.
   * @param {number} [options.intervalLength=1] The length of the repetition
   *   interval.
   * @param {Date} [options.startDate] Indicates the earliest date that the
   *   next occurrence can happen. Any occurrences that would fall before this
   *   date are skipped.
   * @param {boolean} [options.baseOnCompletion=false] If this is true, then
   *   the next occurrence should be calculated from the task's completion
   *   date. Otherwise, the occurrence should be calculated from the task's due
   *   date.
   * @param {number} [options.weekNumber] The number of the week within a month
   *   in which the recurring date should occur. Used in conjunction with
   *   daysOfWeek. A value of 1 indicates the first occurrence of a day within
   *   the month, 2 indicates the second occurrence, and so on. If this is set
   *   to 5, then the 4th or 5th occurrence of the day may be used, depending
   *   on how many such days are in a particular month.
   * @param {number[]} [options.daysOfWeek] An array holding the days of the
   *   week on which the recurring date should occur. Each day is an integer
   *   from 0-6, where 0 represents Sunday, 1 represents Monday, and so on.
   * @param {number} [options.month] The month in the year on which the
   *   recurring date should occur, represented as a number from 0 to 11.
   * @param {number} [options.dayOfMonth] The day of the month on which the
   *   recurring date should occur, represented as a number from 1 to 31.
   * @param {string} [options.onWeekend=no-change] Specifies what happens when
   *   the next recurrence falls on a weekend. If set to 'no-change', then the
   *   date is unaffected. If set to 'previous-weekday' or 'next-weekday', then
   *   the previous or next weekday is used instead. If set to
   *   'nearest-weekday', then the closest weekday is used instead.
   * @param {Date} [options.endDate] Indicates the date after which the
   *   repetition should stop.
   * @param {number} [options.maxCount] Indicates the maximum number of
   *   repetitions before the recurrence should stop.
   */
  function RecurringDate(intervalUnit) {
    var _options$intervalLeng, _options$baseOnComple, _options$weekNumber, _options$month, _options$dayOfMonth, _options$maxCount;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, RecurringDate);

    /**
     * The unit of time in which the repetition interval is measured.
     * @type {string}
     */
    this.intervalUnit = intervalUnit;
    /**
     * The length of the repetition interval.
     * @type {number}
     */

    this.intervalLength = (_options$intervalLeng = options.intervalLength) !== null && _options$intervalLeng !== void 0 ? _options$intervalLeng : 1;
    /**
     * Indicates the earliest date that the next occurrence can happen. Any
     * occurrences that would fall before this date are skipped.
     * @type {?Date}
     */

    this.startDate = options.startDate || null;
    /**
     * If this is true, then the next occurrence should be calculated from the
     * task's completion date. Otherwise, the occurrence should be calculated
     * from the task's due date.
     * @type {boolean}
     */

    this.baseOnCompletion = (_options$baseOnComple = options.baseOnCompletion) !== null && _options$baseOnComple !== void 0 ? _options$baseOnComple : false;
    /**
     * The number of the week within a month in which the recurring date should
     * occur. Used in conjunction with daysOfWeek. A value of 1 indicates the
     * first occurrence of a day within the month, 2 indicates the second
     * occurrence, and so on. If this is set to 5, then the 4th or 5th
     * occurrence of the day may be used, depending on how many such days are
     * in a particular month.
     * @type {?number}
     */

    this.weekNumber = (_options$weekNumber = options.weekNumber) !== null && _options$weekNumber !== void 0 ? _options$weekNumber : null;
    /**
     * An array holding the days of the week on which the recurring date should
     * occur. Each day is an integer from 0-6, where 0 represents Sunday, 1
     * represents Monday, and so on.
     * @type {?number[]}
     */

    this.daysOfWeek = options.daysOfWeek || null;
    /**
     * The month in the year on which the recurring date should occur,
     * represented as a number between 0 and 11.
     * @type {?number}
     */

    this.month = (_options$month = options.month) !== null && _options$month !== void 0 ? _options$month : null;
    /**
     * The day of the month on which the recurring date should occur,
     * represented as a number between 1 and 31.
     * @type {?number}
     */

    this.dayOfMonth = (_options$dayOfMonth = options.dayOfMonth) !== null && _options$dayOfMonth !== void 0 ? _options$dayOfMonth : null;
    /**
     * Specifies what happens when the next recurrence occurs on a weekend. If
     * set to 'no-change', then the date is unaffected. If set to
     * 'previous-weekday' or 'next-weekday', then the previous or next weekday
     * is used instead. If set to 'nearest-weekday', then the closest weekday
     * is used instead.
     * @type {string}
     */

    this.onWeekend = options.onWeekend || 'no-change';
    /**
    * Indicates the date after which the repetition should stop, if any.
    * @type {?Date}
    */

    this.endDate = options.endDate || null;
    /**
     * Indicates the maximum number of repetitions before the recurrence should
     * stop, if ever.
     * @type {?number}
     */

    this.maxCount = (_options$maxCount = options.maxCount) !== null && _options$maxCount !== void 0 ? _options$maxCount : null;
  }
  /**
   * Get the next occurrence of the recurring date.
   * @param {Date} [baseDate] The base date from which the next occurrence
   *   should be calculated. If not given, then the present day is used.
   * @returns {?Date} The date on which the recurrence will next occur, or null
   *   if the recurrence has ended.
   */


  _createClass(RecurringDate, [{
    key: "getNextOccurrence",
    value: function getNextOccurrence(baseDate) {
      if (typeof this.maxCount === 'number' && this.maxCount < 1) return null;
      var reference = (0,date_fns__WEBPACK_IMPORTED_MODULE_24__["default"])(baseDate || new Date());
      var startDate = reference;

      if (this.startDate && (0,date_fns__WEBPACK_IMPORTED_MODULE_29__["default"])(reference, this.startDate)) {
        startDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_24__["default"])(this.startDate);
      }

      if (this.onWeekend === 'previous-weekday' && (0,date_fns__WEBPACK_IMPORTED_MODULE_30__["default"])(startDate)) {
        // Move starting date to following Monday
        startDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_28__["default"])(startDate, 1);
      } else if (this.onWeekend === 'nearest-weekday' && startDate.getDay() === 6) {
        // Move starting date to Sunday
        startDate = (0,date_fns__WEBPACK_IMPORTED_MODULE_28__["default"])(startDate, 0);
      }

      var isBeforeStart = function isBeforeStart(date) {
        return startDate && (0,date_fns__WEBPACK_IMPORTED_MODULE_29__["default"])(date, startDate);
      };

      var result = reference;

      switch (this.intervalUnit) {
        case 'day':
          result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
            days: this.intervalLength
          });
          if (isBeforeStart(result)) result = startDate;
          break;

        case 'month':
          if (this.dayOfMonth || this.weekNumber) {
            result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
              months: this.intervalLength,
              days: -14
            });

            if (this.dayOfMonth) {
              result = nextDayOfMonth(result, this.dayOfMonth);

              if (isBeforeStart(result)) {
                result = nextDayOfMonth(startDate, this.dayOfMonth);
              }
            } else if (this.weekNumber) {
              var weekDay = 0;

              if (this.daysOfWeek && this.daysOfWeek.length > 0) {
                var _this$daysOfWeek = _slicedToArray(this.daysOfWeek, 1);

                weekDay = _this$daysOfWeek[0];
              }

              result = nextWeekOfMonth(result, this.weekNumber, weekDay);

              if (isBeforeStart(result)) {
                result = nextWeekOfMonth(startDate, this.weekNumber, weekDay);
              }
            }
          } else {
            result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
              months: this.intervalLength
            });

            if (isBeforeStart(result)) {
              result = nextDayOfMonth(startDate, reference.getDate());
            }
          }

          break;

        case 'year':
          if (typeof this.month === 'number') {
            result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
              years: this.intervalLength,
              months: -6
            });
            result = nextDayOfYear(result, this.month, this.dayOfMonth || 1);

            if (isBeforeStart(result)) {
              result = nextDayOfYear(startDate, this.month, this.dayOfMonth || 1);
            }
          } else {
            result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
              years: this.intervalLength
            });

            if (isBeforeStart(result)) {
              result = nextDayOfYear(startDate, reference.getMonth(), reference.getDate());
            }
          }

          break;

        case 'week':
          if (this.daysOfWeek && this.daysOfWeek.length > 0) {
            // Check for occurrences remaining for the current week
            if (this.daysOfWeek.findIndex(function (day) {
              return day > result.getDay();
            }) !== -1) {
              result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
                days: 1
              });
              result = nextDayOfWeek(result, this.daysOfWeek);
            } else {
              // Done with current week, start at following Sunday
              result = (0,date_fns__WEBPACK_IMPORTED_MODULE_28__["default"])(result, 0);

              if (this.intervalLength > 1) {
                result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
                  weeks: this.intervalLength - 1
                });
              }

              result = nextDayOfWeek(result, this.daysOfWeek);
            }

            if (isBeforeStart(result)) {
              result = nextDayOfWeek(startDate, this.daysOfWeek);
            }
          } else {
            result = (0,date_fns__WEBPACK_IMPORTED_MODULE_25__["default"])(result, {
              weeks: this.intervalLength
            });

            if (isBeforeStart(result)) {
              result = nextDayOfWeek(startDate, [reference.getDay()]);
            }
          }

          break;

        default:
          break;
      }

      if (this.onWeekend !== 'no-change' && (0,date_fns__WEBPACK_IMPORTED_MODULE_30__["default"])(result)) {
        var forward;

        switch (this.onWeekend) {
          case 'previous-weekday':
            forward = false;
            break;

          case 'next-weekday':
            forward = true;
            break;

          case 'nearest-weekday':
            forward = result.getDay() === 0;
            break;

          default:
            forward = true;
            break;
        }

        if (forward) result = (0,date_fns__WEBPACK_IMPORTED_MODULE_28__["default"])(result, 1); // Next Monday
        else result = (0,date_fns__WEBPACK_IMPORTED_MODULE_31__["default"])(result, 5); // Previous Friday
      }

      if (this.endDate && (0,date_fns__WEBPACK_IMPORTED_MODULE_29__["default"])(this.endDate, result)) return null;
      return result;
    }
    /**
     * Advance the recurrence to the next date. This will update the remaining
     * repetition count if needed.
     */

  }, {
    key: "advance",
    value: function advance() {
      if (typeof this.maxCount === 'number' && this.maxCount > 0) {
        this.maxCount -= 1;
      }
    }
    /**
     * Determine whether or not the recurrence was created with the default
     * options.
     * @returns {boolean} True if the recurring date is a default recurrence, and
     *   false otherwise.
     */

  }, {
    key: "isDefault",
    value: function isDefault() {
      var _this$startDate, _def$startDate, _this$endDate, _def$endDate;

      var def = new RecurringDate(this.intervalUnit);
      if (this.intervalLength !== def.intervalLength) return false;
      if (((_this$startDate = this.startDate) === null || _this$startDate === void 0 ? void 0 : _this$startDate.getTime()) !== ((_def$startDate = def.startDate) === null || _def$startDate === void 0 ? void 0 : _def$startDate.getTime())) return false;
      if (this.baseOnCompletion !== def.baseOnCompletion) return false;
      if (this.weekNumber !== def.weekNumber) return false;
      if (!lodash_isEqual__WEBPACK_IMPORTED_MODULE_13___default()(this.daysOfWeek, def.daysOfWeek)) return false;
      if (this.month !== def.month) return false;
      if (this.dayOfMonth !== def.dayOfMonth) return false;
      if (this.onWeekend !== def.onWeekend) return false;
      if (((_this$endDate = this.endDate) === null || _this$endDate === void 0 ? void 0 : _this$endDate.getTime()) !== ((_def$endDate = def.endDate) === null || _def$endDate === void 0 ? void 0 : _def$endDate.getTime())) return false;
      if (this.maxCount !== def.maxCount) return false;
      return true;
    }
    /**
     * Get a string representation of the recurring date.
     * @returns {string} A string representation of the recurring date.
     */

  }, {
    key: "toString",
    value: function toString() {
      var _this$daysOfWeek2;

      var length = this.intervalLength;
      var strValue = '';

      switch (this.intervalUnit) {
        case 'day':
          strValue = length === 1 ? 'Daily' : "Every ".concat(length, " days");
          break;

        case 'week':
          strValue = length === 1 ? 'Weekly' : "Every ".concat(length, " weeks");

          if (this.daysOfWeek && this.daysOfWeek.length > 0) {
            strValue += ' on ';

            if (lodash_uniq__WEBPACK_IMPORTED_MODULE_12___default()(this.daysOfWeek).length === 7) {
              strValue += 'all days';
            } else {
              this.daysOfWeek.forEach(function (day, index) {
                if (index > 0) strValue += ', ';
                strValue += (0,_utility_dates__WEBPACK_IMPORTED_MODULE_23__.getWeekdayName)(day);
              });
            }
          }

          break;

        case 'month':
          strValue = length === 1 ? 'Monthly' : "Every ".concat(length, " months");

          if (this.dayOfMonth) {
            strValue += " on the ".concat(ordinal__WEBPACK_IMPORTED_MODULE_22___default()(this.dayOfMonth));
          } else if (this.weekNumber && ((_this$daysOfWeek2 = this.daysOfWeek) === null || _this$daysOfWeek2 === void 0 ? void 0 : _this$daysOfWeek2.length) === 1) {
            var weekStr;
            if (this.weekNumber < 5) weekStr = ordinal__WEBPACK_IMPORTED_MODULE_22___default()(this.weekNumber);else weekStr = 'last';
            var dayStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_23__.getWeekdayName)(this.daysOfWeek[0]);
            strValue += " on the ".concat(weekStr, " ").concat(dayStr);
          }

          break;

        case 'year':
          strValue = length === 1 ? 'Annually' : "Every ".concat(length, " years");

          if (Number.isInteger(this.month) && this.dayOfMonth) {
            var monthStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_23__.getMonthName)(this.month);

            var _dayStr = ordinal__WEBPACK_IMPORTED_MODULE_22___default()(this.dayOfMonth);

            strValue += " on ".concat(monthStr, " ").concat(_dayStr);
          }

          break;

        default:
          break;
      }

      return strValue;
    }
    /**
     * Like [toString]{@link module:recurringDate~RecurringDate#toString}, but
     * more verbose, including all details of the recurrence.
     * @param {string} dateFormatStr The format to use for dates.
     * @returns {string} A string representation of the recurring date.
     */

  }, {
    key: "toStringVerbose",
    value: function toStringVerbose(dateFormatStr) {
      var strValue = this.toString();

      if (this.startDate) {
        var dateStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_23__.formatDate)(this.startDate, dateFormatStr);
        strValue += ", from ".concat(dateStr);
      }

      if (this.endDate) {
        var _dateStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_23__.formatDate)(this.endDate, dateFormatStr);

        strValue += ", until ".concat(_dateStr);
      } else if (this.maxCount) {
        if (this.maxCount === 1) strValue += ', 1 time';else strValue += ", ".concat(this.maxCount, " times");
      }

      if (this.baseOnCompletion) {
        strValue += ', based on completion date';
      }

      if (this.onWeekend !== 'no-change') {
        strValue += ', ';

        switch (this.onWeekend) {
          case 'previous-weekday':
            strValue += 'previous weekday';
            break;

          case 'next-weekday':
            strValue += 'next weekday';
            break;

          case 'nearest-weekday':
            strValue += 'nearest weekday';
            break;

          default:
            break;
        }
      }

      return strValue;
    }
    /**
     * Create a recurring date from a JSON object.
     * @param {Object} data The JSON object holding the serialized data.
     * @returns {module:recurringDate~RecurringDate} A new recurring date
     *   converted from the JSON data.
     */

  }], [{
    key: "fromJson",
    value: function fromJson(data) {
      var convertDate = function convertDate(date) {
        return date ? (0,_utility_dates__WEBPACK_IMPORTED_MODULE_23__.parseIsoDateTime)(date) : null;
      };

      return new RecurringDate(data.intervalUnit, {
        intervalLength: data.intervalLength,
        startDate: convertDate(data.startDate),
        baseOnCompletion: data.baseOnCompletion,
        weekNumber: data.weekNumber,
        daysOfWeek: data.daysOfWeek,
        month: data.month,
        dayOfMonth: data.dayOfMonth,
        onWeekend: data.onWeekend,
        endDate: convertDate(data.endDate),
        maxCount: data.maxCount
      });
    }
  }]);

  return RecurringDate;
}();

/* harmony default export */ __webpack_exports__["default"] = (RecurringDate);

/***/ }),

/***/ "./src/modules/settings.js":
/*!*********************************!*\
  !*** ./src/modules/settings.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.map.js */ "./node_modules/core-js/modules/es.map.js");
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.string.starts-with.js */ "./node_modules/core-js/modules/es.string.starts-with.js");
/* harmony import */ var core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _utility_data__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./utility/data */ "./src/modules/utility/data.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utility/dates */ "./src/modules/utility/dates.js");










function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }













/**
 * Defines the [Settings]{@link module:settings~Settings} class.
 * @module settings
 */



/**
 * Object holding private members for the
 * [Settings]{@link module:settings~Settings} class.
 * @typedef {Object} module:settings~Settings~privates
 * @property {string} storageMethod The method for storing data: 'none' (no
 *   storage) or 'local' (local storage in the browser).
 * @property {module:settings~Settings~dateFormat} dateFormat The format to use
 *   for calendar dates.
 * @property {?number} deleteAfter Determines how many days after a task is
 *   completed before the task will be automatically deleted. If set to null,
 *   completed tasks will never be deleted automatically.
 * @property {Map} filterGroups A map associating the name of a filter group to
 *   a [filterOptions]{@link module:settings~Settings~filterOptions} object.
 * @property {EventEmitter} eventEmitter Holds the event emitter which
 *   dispatches events to attached event listeners.
 */

/**
 * Holds private data for the [Settings]{@link module:settings~Settings} class.
 * @type {WeakMap}
 * @see module:settings~Settings~privates
 */

var privateMembers = new WeakMap();
/**
 * Holds user app settings.
 */

var Settings = /*#__PURE__*/function () {
  /**
   * Holds information about the pattern to use for formatting and parsing
   * calendar dates.
   * @typedef {Object} module:settings~Settings~dateFormat
   * @property {string} outputPattern The date format string used for
   *   formatting dates for output.
   * @property {string[]} inputPatterns An array of date format strings used
   *   for parsing dates. Each pattern will be tried in sequence until a valid
   *   match is made.
   * @property {string} visualPattern A visual representation of the date
   *   format suitable for displaying to the user.
   * @property {string} type The type of date format. Valid values are 'local',
   *   'iso', 'month-day-year', 'day-month-year', and 'year-month-day'.
   */

  /**
   * Holds options for displaying a task filter.
   * @typedef {Object} module:settings~Settings~filterOptions
   * @property {string} groupBy The field to group the tasks by: 'default',
   *   'due-date', 'priority', 'project', or 'none'. The default depends on the
   *   type of filter.
   * @property {string} sortBy The primary field to sort the tasks by: 'name',
   *   'due-date', 'create-date', 'priority', or 'project'.
   * @property {boolean} sortDescending Indicates whether to sort in descending
   *   order rather than ascending order.
   * @property {boolean} showCompleted Indicates whether to include completed
   *   tasks in the results.
   */

  /**
   * Event that is fired when a setting is modified.
   * @event module:settings~Settings~updateSetting
   * @type {Object}
   * @property {string} type The event type: 'update-setting'.
   * @property {string} name The name of the setting. This is the same as the
   *   name of the corresponding instance property, except for filter group
   *   settings, which have the form 'filterGroups.group-name', where
   *   'group-name' is the name of the filter group.
   * @property {*} value The new value of the setting.
   */

  /**
   * An object holding information about the status of a data import.
   * @typedef {Object} module:settings~Settings~importStatus
   * @property {string[]} errors An array of error messages describing any
   *   errors that occurred during the import.
   */

  /**
   * Create an object holding the default settings.
   */
  function Settings() {
    _classCallCheck(this, Settings);

    var privates = {
      storageMethod: null,
      dateFormat: {},
      deleteAfter: null,
      filterGroups: new Map(),
      eventEmitter: new (events__WEBPACK_IMPORTED_MODULE_20___default())()
    };
    privateMembers.set(this, privates);
    this.resetToDefault();
  }
  /**
   * Get the value of a setting. Although each setting can be retrieved
   * directly using other class methods and properties, this method can make
   * storage and serialization easier.
   * @param {string} name The name of the setting. This is the same as the name
   *   of the corresponding instance property, except for filter group
   *   settings, which have the form 'filterGroups.group-name', where
   *   'group-name' is the name of the filter group.
   * @returns {*} The value of the setting. For filter group settings, this is
   *   a [filterOptions]{@link module:settings~Settings~filterOptions} object.
   *   For date format settings, this is a
   *   [dateFormat]{@link module:settings~Settings~dateFormat} object.
   */


  _createClass(Settings, [{
    key: "getSetting",
    value: function getSetting(name) {
      switch (name) {
        case 'storageMethod':
          return this.storageMethod;

        case 'dateFormat':
          return this.dateFormat;

        case 'deleteAfter':
          return this.deleteAfter;

        default:
          if (name.startsWith('filterGroups.')) {
            var group = name.substring('filterGroups.'.length);
            return this.getFilterOptions(group);
          }

          return null;
      }
    }
    /**
     * Set the value of a setting. Although each setting can be set directly
     * using other class methods and properties, this method can make storage and
     * deserialization easier.
     * @param {string} name The name of the setting. This is the same as the name
     *   of the corresponding instance property, except for filter group
     *   settings, which have the form 'filterGroups.group-name', where
     *   'group-name' is the name of the filter group.
     * @param {*} value The value of the setting. For filter group settings, this
     *   should be a
     *   [filterOptions]{@link module:settings~Settings~filterOptions} object.
     *   For date format settings, this can be either a
     *   [dateFormat]{@link module:settings~Settings~dateFormat} object or a
     *   string specifying the name of the format to use.
     * @fires module:settings~Settings~updateSetting
     */

  }, {
    key: "setSetting",
    value: function setSetting(name, value) {
      var validSetting = true;

      switch (name) {
        case 'storageMethod':
          this.storageMethod = value;
          break;

        case 'dateFormat':
          this.setDateFormat(value);
          break;

        case 'deleteAfter':
          this.deleteAfter = value;
          break;

        default:
          if (name.startsWith('filterGroups.')) {
            var group = name.substring('filterGroups.'.length);
            this.setFilterOptions(group, value);
          } else {
            validSetting = false;
          }

          break;
      }

      if (validSetting) {
        privateMembers.get(this).eventEmitter.emit('update-setting', {
          type: 'update-setting',
          name: name,
          value: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8___default()(value)
        });
      }
    }
    /**
     * Execute the provided function for each available setting.
     * @param {Function} callback The function to execute for each setting. The
     *   function will be passed the name of each setting along with its value.
     */

  }, {
    key: "forEach",
    value: function forEach(callback) {
      var _this = this;

      var privates = privateMembers.get(this);
      var settingList = ['storageMethod', 'dateFormat', 'deleteAfter'];

      var groupKeys = _toConsumableArray(privates.filterGroups.keys()).map(function (key) {
        return "filterGroups.".concat(key);
      });

      settingList.push.apply(settingList, _toConsumableArray(groupKeys));
      settingList.forEach(function (setting) {
        callback(setting, _this.getSetting(setting));
      });
    }
    /**
     * The method for storing data: 'none' (no storage) or 'local' (local storage
     * in the browser).
     * @type {string}
     */

  }, {
    key: "storageMethod",
    get: function get() {
      return privateMembers.get(this).storageMethod;
    },
    set: function set(method) {
      if (method !== 'none' && method !== 'local') {
        throw new RangeError("Unrecognized storage method: \"".concat(method, "\""));
      }

      var privates = privateMembers.get(this);
      privates.storageMethod = method;
      privates.eventEmitter.emit('update-setting', {
        type: 'update-setting',
        name: 'storageMethod',
        value: method
      });
    }
    /**
     * An object holding information about the format to use for calendar dates.
     * @type {module:settings~Settings~dateFormat}
     * @readonly
     */

  }, {
    key: "dateFormat",
    get: function get() {
      return lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8___default()(privateMembers.get(this).dateFormat);
    }
    /**
     * Determines how many days after a task is completed before the task will be
     * automatically deleted. If set to null, completed tasks will never be
     * deleted automatically.
     * @type {?number}
     */

  }, {
    key: "deleteAfter",
    get: function get() {
      return privateMembers.get(this).deleteAfter;
    },
    set: function set(days) {
      var privates = privateMembers.get(this);
      privates.deleteAfter = days;
      privates.eventEmitter.emit('update-setting', {
        type: 'update-setting',
        name: 'deleteAfter',
        value: days
      });
    }
    /**
     * Get an object holding options for displaying task filters belonging to a
     * particular filter group.
     * @param {string} filterGroup The filter group whose options are to be
     *   retrieved.
     * @returns {?module:settings~Settings~filterOptions} An object holding the
     *   filter options, or null if the filter group was not found.
     */

  }, {
    key: "getFilterOptions",
    value: function getFilterOptions(filterGroup) {
      var opts = privateMembers.get(this).filterGroups.get(filterGroup);
      return opts ? lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8___default()(opts) : null;
    }
    /**
     * Set options for displaying task filters belonging to a particular filter
     * group.
     * @param {string} filterGroup The filter group whose options are to be
     *   changed.
     * @param {module:settings~Settings~filterOptions} [options={}] An object
     *   specifying the filter options to set. Any unspecified options will
     *   retain their prior values, or will be set to default values if they were
     *   not previously set.
     * @fires module:settings~Settings~updateSetting
     */

  }, {
    key: "setFilterOptions",
    value: function setFilterOptions(filterGroup) {
      var _ref, _options$groupBy, _ref2, _options$sortBy, _ref3, _options$sortDescendi, _ref4, _options$showComplete;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var privates = privateMembers.get(this);
      var filterGroups = privates.filterGroups;
      var oldOptions = filterGroups.get(filterGroup);
      var newOptions = {
        groupBy: (_ref = (_options$groupBy = options.groupBy) !== null && _options$groupBy !== void 0 ? _options$groupBy : oldOptions === null || oldOptions === void 0 ? void 0 : oldOptions.groupBy) !== null && _ref !== void 0 ? _ref : 'default',
        sortBy: (_ref2 = (_options$sortBy = options.sortBy) !== null && _options$sortBy !== void 0 ? _options$sortBy : oldOptions === null || oldOptions === void 0 ? void 0 : oldOptions.sortBy) !== null && _ref2 !== void 0 ? _ref2 : 'create-date',
        sortDescending: (_ref3 = (_options$sortDescendi = options.sortDescending) !== null && _options$sortDescendi !== void 0 ? _options$sortDescendi : oldOptions === null || oldOptions === void 0 ? void 0 : oldOptions.sortDescending) !== null && _ref3 !== void 0 ? _ref3 : false,
        showCompleted: (_ref4 = (_options$showComplete = options.showCompleted) !== null && _options$showComplete !== void 0 ? _options$showComplete : oldOptions === null || oldOptions === void 0 ? void 0 : oldOptions.showCompleted) !== null && _ref4 !== void 0 ? _ref4 : false
      };
      filterGroups.set(filterGroup, newOptions);
      privates.eventEmitter.emit('update-setting', {
        type: 'update-setting',
        name: "filterGroups.".concat(filterGroup),
        value: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8___default()(newOptions)
      });
    }
    /**
     * Reset all settings to their default values.
     * @fires module:settings~Settings~updateSetting
     */

  }, {
    key: "resetToDefault",
    value: function resetToDefault() {
      var _this2 = this;

      this.storageMethod = 'local';
      this.setDateFormat('local');
      this.deleteAfter = 14;
      var filterOptions = {
        groupBy: 'default',
        sortBy: 'create-date',
        sortDescending: false,
        showCompleted: false
      };
      ['default', 'dates', 'projects', 'priorities'].forEach(function (group) {
        _this2.setFilterOptions(group, filterOptions);
      });
    }
    /**
     * Set the pattern used for formatting and parsing dates.
     * @param {string|module:settings~Settings~dateFormat} [format=local] The
     *   type of date format to use. This can either be a string specifying the
     *   format type ('local', 'iso', 'month-day-year', 'day-month-year', or
     *   'year-month-day'), or it can be a full
     *   [dateFormat]{@link module:settings~Settings~dateFormat} object.
     * @fires module:settings~Settings~updateSetting
     */

  }, {
    key: "setDateFormat",
    value: function setDateFormat() {
      var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'local';
      var privates = privateMembers.get(this);

      if (typeof format === 'string') {
        privates.dateFormat = Settings.lookupDateFormat(format);
      } else {
        privates.dateFormat = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8___default()(format);
      }

      privates.eventEmitter.emit('update-setting', {
        type: 'update-setting',
        name: 'dateFormat',
        value: this.dateFormat
      });
    }
    /**
     * Retrieve formatting information for a particular date format.
     * @param {string} [type=local] The type of date format to lookup: 'local',
     *   'iso', 'month-day-year', 'day-month-year', or 'year-month-day'.
     * @returns {module:settings~Settings~dateFormat} An object holding
     *   information about the date format.
     */

  }, {
    key: "addEventListener",
    value:
    /**
     * Add an event listener to settings instance.
     * @param {string} type The type of event to listen for.
     * @param {Function} listener A callback function to be invoked when the
     *   event is triggered.
     */
    function addEventListener(type, listener) {
      privateMembers.get(this).eventEmitter.on(type, listener);
    }
    /**
     * Convert data to an object suitable for serialization.
     * @returns {Object} An object representing serializable data for the class.
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var result = {
        storageMethod: this.storageMethod,
        dateFormat: this.dateFormat,
        deleteAfter: this.deleteAfter,
        filterGroups: {}
      };
      privateMembers.get(this).filterGroups.forEach(function (options, group) {
        result.filterGroups[group] = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_8___default()(options);
      });
      return result;
    }
    /**
     * Import settings from a JSON object.
     * @param {Object} data The serialized JSON object to import.
     * @returns {module:settings~Settings~importStatus} An object holding
     *   information about the status of the import.
     * @fires module:settings~Settings~updateSetting
     */

  }, {
    key: "importFromJson",
    value: function importFromJson(data) {
      var _this3 = this;

      var errors = [];

      var handleError = function handleError(errorType, value, options) {
        if (value == null) return;

        switch (errorType) {
          case 'bad-type':
            errors.push("Error: Expected type \"".concat(options.expectedType, "\" for setting \"").concat(options.valueName, "\" (received \"").concat((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.getJsonType)(value), "\")."));
            break;

          case 'unknown-value':
            errors.push("Error: Unrecognized value \"".concat(value, "\" for setting \"").concat(options.valueName, "\"."));
            break;

          case 'not-integer':
            errors.push("Error: Value for setting \"".concat(options.valueName, "\" must be an integer (received \"").concat(value, "\")."));
            break;

          case 'too-low':
            errors.push("Error: Value for setting \"".concat(options.valueName, "\" cannot be below \"").concat(options.min, "\" (received \"").concat(value, "\")."));
            break;

          case 'too-high':
            errors.push("Error: Value for setting \"".concat(options.valueName, "\" cannot be above \"").concat(options.max, "\" (received \"").concat(value, "\")."));
            break;

          default:
            errors.push("Error: Encountered unrecognized error \"".concat(errorType, "\" for setting \"").concat(options.valueName, "\"."));
            break;
        }
      };

      if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.validateValue)(data.storageMethod, {
        valueName: 'storageMethod',
        expectedType: 'string',
        expectedValues: ['none', 'local'],
        errorCallback: handleError
      })) this.storageMethod = data.storageMethod;

      if (data.dateFormat != null) {
        if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.validateValue)(data.dateFormat.type, {
          valueName: 'dateFormat.type',
          expectedType: 'string',
          expectedValues: ['local', 'iso', 'month-day-year', 'day-month-year', 'year-month-day'],
          errorCallback: handleError
        })) this.setDateFormat(data.dateFormat.type);
      }

      if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.validateValue)(data.deleteAfter, {
        valueName: 'deleteAfter',
        expectedType: 'number',
        requireInteger: true,
        min: 0,
        errorCallback: handleError
      })) this.deleteAfter = data.deleteAfter;

      if (data.filterGroups != null) {
        var processGroup = function processGroup(name) {
          var filterOptions = data.filterGroups[name];

          if (filterOptions != null) {
            var newOptions = {};
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.validateValue)(filterOptions.groupBy, {
              valueName: "filterGroups.".concat(name, ".groupBy"),
              expectedType: 'string',
              expectedValues: ['default', 'due-date', 'priority', 'project', 'none'],
              errorCallback: handleError
            })) newOptions.groupBy = filterOptions.groupBy;
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.validateValue)(filterOptions.sortBy, {
              valueName: "filterGroups.".concat(name, ".sortBy"),
              expectedType: 'string',
              expectedValues: ['name', 'due-date', 'create-date', 'priority', 'project'],
              errorCallback: handleError
            })) newOptions.sortBy = filterOptions.sortBy;
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.validateValue)(filterOptions.sortDescending, {
              valueName: "filterGroups.".concat(name, ".sortDescending"),
              expectedType: 'boolean',
              errorCallback: handleError
            })) newOptions.sortDescending = filterOptions.sortDescending;
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_21__.validateValue)(filterOptions.showCompleted, {
              valueName: "filterGroups.".concat(name, ".showCompleted"),
              expectedType: 'boolean',
              errorCallback: handleError
            })) newOptions.showCompleted = filterOptions.showCompleted;

            _this3.setFilterOptions(name, newOptions);
          }
        };

        processGroup('default');
        processGroup('dates');
        processGroup('projects');
        processGroup('priorities');
      }

      return {
        errors: errors
      };
    }
  }], [{
    key: "lookupDateFormat",
    value: function lookupDateFormat() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'local';

      switch (type) {
        case 'iso':
          return {
            outputPattern: 'yyyy-MM-dd',
            inputPatterns: ['yyyy-MM-dd'],
            visualPattern: 'YYYY-MM-DD',
            type: type
          };

        case 'month-day-year':
          return {
            outputPattern: 'MM/dd/yyyy',
            inputPatterns: ['MM/dd/yy', 'MM/dd/yyyy'],
            visualPattern: 'MM/DD/YYYY',
            type: type
          };

        case 'day-month-year':
          return {
            outputPattern: 'dd/MM/yyyy',
            inputPatterns: ['dd/MM/yy', 'dd/MM/yyyy'],
            visualPattern: 'DD/MM/YYYY',
            type: type
          };

        case 'year-month-day':
          return {
            outputPattern: 'yyyy/MM/dd',
            inputPatterns: ['yy/MM/dd', 'yyyy/MM/dd'],
            visualPattern: 'YYYY/MM/DD',
            type: type
          };

        case 'local':
        default:
          {
            var formatOpts = {
              tokenStyle: 'internal',
              fullYear: false,
              padMonths: true,
              padDays: true
            };
            var inputPatterns = [(0,_utility_dates__WEBPACK_IMPORTED_MODULE_22__.getDateFormat)(null, formatOpts)];
            formatOpts.fullYear = true;
            var outputPattern = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_22__.getDateFormat)(null, formatOpts);
            inputPatterns.push(outputPattern);
            formatOpts.tokenStyle = 'visual';
            var visualPattern = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_22__.getDateFormat)(null, formatOpts);
            return {
              outputPattern: outputPattern,
              inputPatterns: inputPatterns,
              visualPattern: visualPattern,
              type: 'local'
            };
          }
      }
    }
  }]);

  return Settings;
}();

/* harmony default export */ __webpack_exports__["default"] = (Settings);

/***/ }),

/***/ "./src/modules/task.js":
/*!*****************************!*\
  !*** ./src/modules/task.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _recurringDate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./recurringDate */ "./src/modules/recurringDate.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utility/dates */ "./src/modules/utility/dates.js");





function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Defines the [Task]{@link module:task~Task} class.
 * @module task
 */


/**
 * Represents a task.
 */

var Task = /*#__PURE__*/function () {
  /**
   * Create a task.
   * @param {string} name The name of the task.
   * @param {Object} [options={}] An object specifying additional options for
   *   the task.
   * @param {Date} [options.dueDate] The date when the task is due, if any.
   * @param {Date} [options.creationDate] The date the task was created. If not
   *   given, then the present date is used.
   * @param {Date} [options.completionDate] The date when the task was
   *   completed, if any.
   * @param {number|string} [options.priority=0] The priority of the task. For
   *   numeric values, a larger value indicates a higher priority, with 0
   *   representing medium priority, positive values representing higher-than-
   *   medium priority, and negative values representing lower-than-medium
   *   priority. For string values, possible settings are 'very-low', 'low',
   *   'medium', 'high', and 'very-high'.
   * @param {string} [options.description] A description for the task.
   * @param {module:recurringDate~RecurringDate} [options.recurringDate] A
   *   recurring date for the task, if any.
   * @param {string} [options.project] The identifier of the project to which
   *   the task belongs, if any.
   */
  function Task(name) {
    var _options$description;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Task);

    /**
     * The name of the task.
     * @type {string}
     */
    this.name = name;
    /**
     * The date when the task is due, if any.
     * @type {?Date}
     */

    this.dueDate = options.dueDate || null;
    /**
     * The date when the task was created.
     * @type {Date}
     */

    this.creationDate = options.creationDate || new Date();
    /**
     * The date when the task was completed, or null if it is not completed.
     * @type {?Date}
     */

    this.completionDate = options.completionDate || null;
    /**
     * The priority of the task. A larger value indicates a higher priority,
     * with 0 representing medium priority. Positive values are higher than
     * medium, and negative values are lower than medium.
     * @type {number}
     */

    this.priority = 0;

    if (typeof options.priority === 'number') {
      this.priority = options.priority;
    } else if (typeof options.priority === 'string') {
      this.priorityString = options.priority;
    }
    /**
     * An optional description of the task.
     * @type {?string}
     */


    this.description = (_options$description = options.description) !== null && _options$description !== void 0 ? _options$description : null;
    /**
     * A recurring date for the task, if any.
     * @type {?module:recurringDate~RecurringDate}
     */

    this.recurringDate = options.recurringDate || null;
    /**
     * The identifier of the project to which this task belongs, if any.
     * @type {?string}
     */

    this.project = options.project || null;
  }
  /**
   * The priority of the task represented as a string value. This corresponds
   * to the numerical [priority]{@link module:task~Task~priority} property,
   * with the following correspondence: 'very-low' = -2, 'low' = -1, 'medium' =
   * 0, 'high' = 1, and 'very-high' = 2.
   * @type {string}
   */


  _createClass(Task, [{
    key: "priorityString",
    get: function get() {
      return Task.convertPriorityToString(this.priority);
    },
    set: function set(priority) {
      this.priority = Task.convertStringToPriority(priority);
    }
    /**
     * Mark the task as completed.
     * @param {Date} [date] The date and time of completion. If not given, then
     *   the present time is used.
     */

  }, {
    key: "markComplete",
    value: function markComplete(date) {
      this.completionDate = date || new Date();
    }
    /**
     * Mark the task as incomplete.
     */

  }, {
    key: "markIncomplete",
    value: function markIncomplete() {
      this.completionDate = null;
    }
    /**
     * Determine whether or not the task has been completed.
     * @returns {boolean} True if the task has been completed and false
     *   otherwise.
     */

  }, {
    key: "isComplete",
    value: function isComplete() {
      return Boolean(this.completionDate);
    }
    /**
     * Get a string representation of the task.
     * @returns {string} A string representation of the task.
     */

  }, {
    key: "toString",
    value: function toString() {
      return this.name ? "Task: ".concat(this.name) : 'Task: (untitled)';
    }
    /**
     * Create a task from a JSON object.
     * @param {Object} data The JSON object holding the serialized data.
     * @returns {module:task~Task} A new task converted from the JSON data.
     */

  }], [{
    key: "fromJson",
    value: function fromJson(data) {
      var convertDate = function convertDate(date) {
        return date ? (0,_utility_dates__WEBPACK_IMPORTED_MODULE_5__.parseIsoDateTime)(date) : null;
      };

      var recurringDate = data.recurringDate ? _recurringDate__WEBPACK_IMPORTED_MODULE_4__["default"].fromJson(data.recurringDate) : null;
      return new Task(data.name, {
        dueDate: convertDate(data.dueDate),
        creationDate: convertDate(data.creationDate),
        completionDate: convertDate(data.completionDate),
        priority: data.priority,
        description: data.description,
        recurringDate: recurringDate,
        project: data.project
      });
    }
    /**
     * Convert a task priority number to a string representation.
     * @param {number} priority The priority value to convert.
     * @returns {string} The string representation of the priority value.
     */

  }, {
    key: "convertPriorityToString",
    value: function convertPriorityToString(priority) {
      switch (priority) {
        case -2:
          return 'very-low';

        case -1:
          return 'low';

        case 0:
          return 'medium';

        case 1:
          return 'high';

        case 2:
          return 'very-high';

        default:
          return 'unknown';
      }
    }
    /**
     * Convert a task priority number to a string representation. Unlike
     * [convertPriorityToString]{@link module:task~Task.convertPriorityToString},
     * this method returns a string that is suitable for display to the user.
     * @param {number} priority The priority value to convert.
     * @returns {string} The string representation of the priority value.
     */

  }, {
    key: "convertPriorityToPrettyString",
    value: function convertPriorityToPrettyString(priority) {
      switch (priority) {
        case -2:
          return 'Very Low';

        case -1:
          return 'Low';

        case 0:
          return 'Medium';

        case 1:
          return 'High';

        case 2:
          return 'Very High';

        default:
          return 'Unknown';
      }
    }
    /**
     * Convert a string representation of a task priority to the standard numeric
     * equivalent.
     * @param {string} priorityStr The string representation of the priority to
     *   convert.
     * @returns {number} The priority value corresponding to the string.
     */

  }, {
    key: "convertStringToPriority",
    value: function convertStringToPriority(priorityStr) {
      switch (priorityStr.toLowerCase()) {
        case 'very-low':
        case 'very low':
          return -2;

        case 'low':
          return -1;

        case 'medium':
          return 0;

        case 'high':
          return 1;

        case 'very-high':
        case 'very high':
          return 2;

        default:
          return 0;
      }
    }
  }]);

  return Task;
}();

/* harmony default export */ __webpack_exports__["default"] = (Task);

/***/ }),

/***/ "./src/modules/taskDisplay.js":
/*!************************************!*\
  !*** ./src/modules/taskDisplay.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isSameDay/index.js");
/* harmony import */ var _images_radio_checked_svg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../images/radio-checked.svg */ "./src/images/radio-checked.svg");
/* harmony import */ var _images_copy_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../images/copy.svg */ "./src/images/copy.svg");
/* harmony import */ var _images_delete_svg__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../images/delete.svg */ "./src/images/delete.svg");
/* harmony import */ var _images_edit_svg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../images/edit.svg */ "./src/images/edit.svg");
/* harmony import */ var _images_more_svg__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../images/more.svg */ "./src/images/more.svg");
/* harmony import */ var _images_project_svg__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../images/project.svg */ "./src/images/project.svg");
/* harmony import */ var _images_radio_unchecked_svg__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../images/radio-unchecked.svg */ "./src/images/radio-unchecked.svg");
/* harmony import */ var _popupMenu__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./popupMenu */ "./src/modules/popupMenu.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./settings */ "./src/modules/settings.js");
/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./task */ "./src/modules/task.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./utility/dates */ "./src/modules/utility/dates.js");
/* harmony import */ var _utility_dom__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./utility/dom */ "./src/modules/utility/dom.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }














/**
 * Defines the [TaskDisplay]{@link module:taskDisplay~TaskDisplay} class.
 * @module taskDisplay
 */













var ICON_WIDTH = 24;
var ICON_HEIGHT = 24;
var STANDARD_MENU_ITEMS = [{
  label: 'Edit Task...',
  id: 'edit',
  icon: {
    source: _images_edit_svg__WEBPACK_IMPORTED_MODULE_15__,
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  }
}, {
  label: 'Clone Task',
  id: 'clone',
  icon: {
    source: _images_copy_svg__WEBPACK_IMPORTED_MODULE_13__,
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  }
}, {
  label: 'Delete Task...',
  id: 'delete',
  icon: {
    source: _images_delete_svg__WEBPACK_IMPORTED_MODULE_14__,
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  }
}];
var PROJECT_MENU_ITEMS = [{
  label: 'Go To Project',
  id: 'go-to-project',
  icon: {
    source: _images_project_svg__WEBPACK_IMPORTED_MODULE_17__,
    width: ICON_WIDTH,
    height: ICON_HEIGHT
  }
}];
/**
 * Object holding private members for the
 * [TaskDisplay]{@link module:taskDisplay~TaskDisplay} class.
 * @typedef {Object} module:taskDisplay~TaskDisplay~privates
 * @property {HTMLElement} container The top-level container holding the
 *   display panel.
 * @property {HTMLElement} content The container holding the panel content.
 * @property {module:taskList~TaskList} tasks The task container.
 * @property {module:projectList~ProjectList} projects The project container.
 * @property {module:taskDisplay~TaskDisplay~taskCallback} [taskCallback] A
 *   callback function that is invoked when the user performs an action on a
 *   task.
 * @property {module:settings~Settings~dateFormat} dateFormat An object holding
 *   information about the format to use for calendar dates.
 * @property {module:popupMenu~PopupMenu} taskMenu The popup menu that is shown
 *   when the user clicks the 'more' button next to a task.
 */

/**
 * Holds private data for the
 * [TaskDisplay]{@link module:taskDisplay~TaskDisplay} class.
 * @type {WeakMap}
 * @see module:taskDisplay~TaskDisplay~privates
 */

var privateMembers = new WeakMap();
/**
 * Returns true if the two tasks belong to the same task group.
 * @param {string} groupBy The type of grouping being done: 'due-date',
 *   'project', 'priority', or 'none'.
 * @param {module:task~Task} task1 The first task to compare.
 * @param {module:task~Task} task2 The second task to compare.
 * @returns {boolean} True if the tasks belong to the same group and false
 *   otherwise.
 */

function isSameGroup(groupBy, task1, task2) {
  switch (groupBy) {
    case 'due-date':
      if (!task1.dueDate && !task2.dueDate) return true;
      if (!task1.dueDate && task2.dueDate) return false;
      if (task1.dueDate && !task2.dueDate) return false;
      return (0,date_fns__WEBPACK_IMPORTED_MODULE_24__["default"])(task1.dueDate, task2.dueDate);

    case 'priority':
      return task1.priority === task2.priority;

    case 'project':
      if (!task1.project && !task2.project) return true;
      if (!task1.project && task2.project) return false;
      if (task1.project && !task2.project) return false;
      return task1.project === task2.project;

    case 'none':
    default:
      return true;
  }
}
/**
 * Empty the display panel.
 * @param {module:taskDisplay~TaskDisplay} instance The class instance on which
 *   to apply the function.
 */


function clear(instance) {
  privateMembers.get(instance).content.innerHTML = '';
}
/**
 * Add a list element and optional heading to the panel for holding tasks.
 * @param {module:taskDisplay~TaskDisplay} instance The class instance on which
 *   to apply the function.
 * @param {string} [label] The text content of the heading, if any.
 * @returns {HTMLElement} The list element where the task items can be
 *   inserted.
 */


function createList(instance, label) {
  var privates = privateMembers.get(instance);

  if (label) {
    var heading = document.createElement('h4');
    heading.classList.add('task-list-heading');
    heading.textContent = label;
    privates.content.appendChild(heading);
  }

  var list = document.createElement('ul');
  list.classList.add('task-list');
  privates.content.appendChild(list);
  return list;
}
/**
 * Add a task entry to a group list.
 * @param {module:taskDisplay~TaskDisplay} instance The class instance on which
 *   to apply the function.
 * @param {HTMLElement} list The list element in which the task information
 *   should be inserted.
 * @param {string} taskId The identifier for the task.
 * @param {module:task~Task} task The task to be added.
 */


function addTask(instance, list, taskId, task) {
  var privates = privateMembers.get(instance);
  var itemElem = document.createElement('li');
  itemElem.classList.add('task-list-item');
  list.appendChild(itemElem);
  var iconSrc = task.isComplete() ? _images_radio_checked_svg__WEBPACK_IMPORTED_MODULE_12__ : _images_radio_unchecked_svg__WEBPACK_IMPORTED_MODULE_18__;
  var iconAlt = task.isComplete() ? 'Mark as incomplete' : 'Mark as complete';
  var checkButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_23__.createImageButton)(iconSrc, {
    altText: iconAlt,
    width: ICON_WIDTH,
    height: ICON_HEIGHT,
    classList: ['task-list-item-checkbox']
  });
  itemElem.appendChild(checkButton);

  if (privates.taskCallback) {
    checkButton.addEventListener('click', function () {
      var type = task.isComplete() ? 'mark-incomplete' : 'mark-complete';
      privates.taskCallback(type, taskId, task);
    });
  }

  var infoContainer = document.createElement('div');
  infoContainer.classList.add('task-list-item-info-container');
  itemElem.appendChild(infoContainer);
  var nameElem = document.createElement('div');
  nameElem.classList.add('task-list-item-name');
  nameElem.textContent = task.name;
  infoContainer.appendChild(nameElem);

  if (task.description) {
    var descElem = document.createElement('div');
    descElem.classList.add('task-list-item-description');
    descElem.textContent = task.description;
    infoContainer.appendChild(descElem);
  }

  var detailsContainer = document.createElement('div');
  infoContainer.appendChild(detailsContainer);

  var addDetail = function addDetail(content, styleClass) {
    if (detailsContainer.hasChildNodes()) {
      var comma = document.createElement('span');
      comma.classList.add('task-list-item-details');
      comma.textContent = ', ';
      detailsContainer.appendChild(comma);
    }

    var detail = document.createElement('span');
    detail.classList.add('task-list-item-details', styleClass);
    detail.textContent = content;
    detailsContainer.appendChild(detail);
  };

  if (task.dueDate) {
    var dateFormat = privates.dateFormat.outputPattern;
    var dateStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_22__.formatDate)(task.dueDate, dateFormat);
    addDetail(dateStr, 'task-list-item-due-date');
  }

  if (task.recurringDate) {
    var recurrenceStr = task.recurringDate.toString();
    addDetail(recurrenceStr, 'task-list-item-recurring-date');
  }

  if (task.project) {
    var project = privates.projects.getProject(task.project);
    addDetail(project.name, 'task-list-item-project');
  }

  var priorityStr = _task__WEBPACK_IMPORTED_MODULE_21__["default"].convertPriorityToPrettyString(task.priority);
  addDetail("".concat(priorityStr, " Priority"), 'task-list-item-priority');
  var buttonContainer = document.createElement('div');
  buttonContainer.classList.add('icon-container');
  itemElem.appendChild(buttonContainer);
  var editButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_23__.createImageButton)(_images_edit_svg__WEBPACK_IMPORTED_MODULE_15__, {
    altText: 'Edit task',
    width: ICON_WIDTH,
    height: ICON_HEIGHT,
    callback: function callback() {
      if (privates.taskCallback) privates.taskCallback('edit', taskId, task);
    }
  });
  buttonContainer.appendChild(editButton);
  var moreButton = (0,_utility_dom__WEBPACK_IMPORTED_MODULE_23__.createImageButton)(_images_more_svg__WEBPACK_IMPORTED_MODULE_16__, {
    altText: 'More actions',
    width: ICON_WIDTH,
    height: ICON_HEIGHT,
    callback: function callback(e) {
      privates.taskMenu.open(function (id) {
        if (privates.taskCallback) {
          privates.taskCallback(id, taskId, task);
        }
      }, {
        referenceElement: e.target
      });
    }
  });
  buttonContainer.appendChild(moreButton);
}
/**
 * Get the heading label for a task group.
 * @param {module:taskDisplay~TaskDisplay} instance The class instance on which
 *   to apply the function.
 * @param {string} groupBy The type of grouping being done: 'due-date',
 *   'project', 'priority', or 'none'.
 * @param {module:task~Task} task A task belonging to the group.
 * @returns {?string} The label for the heading, or null if no grouping is
 *   being done.
 */


function getGroupHeading(instance, groupBy, task) {
  var privates = privateMembers.get(instance);

  switch (groupBy) {
    case 'due-date':
      if (task.dueDate) {
        var format = privates.dateFormat.outputPattern;
        return (0,_utility_dates__WEBPACK_IMPORTED_MODULE_22__.formatDate)(task.dueDate, format);
      }

      return 'No Due Date';

    case 'priority':
      return "".concat(_task__WEBPACK_IMPORTED_MODULE_21__["default"].convertPriorityToPrettyString(task.priority), " Priority");

    case 'project':
      if (task.project) return privates.projects.getProject(task.project).name;
      return 'Uncategorized';

    case 'none':
    default:
      return null;
  }
}
/**
 * A display panel showing a list of tasks.
 */


var TaskDisplay = /*#__PURE__*/function () {
  /**
   * Callback function that is invoked when the user chooses to perform an
   * action on a task.
   * @callback module:taskDisplay~TaskDisplay~taskCallback
   * @param {string} type The type of action that is being performed:
   *   'mark-complete', 'mark-incomplete', 'edit', 'clone', 'delete', or
   *   'go-to-project'.
   * @param {string} id The identifier for the task on which the action is
   *   being performed.
   * @param {module:task~Task} task The task on which the action is being
   *   performed.
   */

  /**
   * An object holding options for creating the task display panel.
   * @typedef {Object} module:taskDisplay~TaskDisplay~options
   * @property {module:taskDisplay~TaskDisplay~taskCallback} [taskCallback] A
   *   callback function that will be invoked when the user performs an action
   *   on a task.
   */

  /**
   * An object holding options for updating the task display panel.
   * @typedef {Object} module:taskDisplay~TaskDisplay~updateOptions
   * @property {Date} [startDate] If provided, tasks with due dates before the
   *   given date will be excluded.
   * @property {Date} [endDate] If provided, tasks with due dates after the
   *   given date will be excluded.
   * @property {boolean} [completed=false] If set to true, then completed tasks
   *   will be included.
   * @property {boolean} [requireDueDate=false] If set to true, then tasks that
   *   do not have a due date will be excluded.
   * @property {string} [project] If provided, then only tasks with the
   *   specified project will be included. This can either be a project
   *   identifier, or the string 'none'.
   * @property {number} [priority] If provided, then only tasks with the given
   *   priority will be included.
   * @property {string} [groupBy=none] The field to group the tasks by:
   *   'due-date', 'priority', 'project', or 'none'.
   * @property {string} [sortBy=create-date] The primary field to sort the
   *   tasks by: 'name', 'due-date', 'create-date', 'priority', or 'project'.
   * @property {boolean} [sortDescending=false] If set to true, then results
   *   will be sorted in descending order.
   * @property {boolean} [caseSensitive=false] If set to true, then sorting for
   *   text-based fields will be case-sensitive.
   * @property {boolean} [missingLast=false] If set to true, then tasks that
   *   are missing a certain field will be sorted at the end of the list, when
   *   sorting by that field.
   * @property {boolean} [resetScroll=true] If set to true (the default), the
   *   panel's scroll position will be reset back to the top. Otherwise the
   *   scroll position will not be changed.
   * @property {module:settings~Settings~dateFormat} [dateFormat] An object
   *   holding information about the calendar date format to use when
   *   displaying dates.
   */

  /**
   * Create a task display.
   * @param {HTMLElement} parent The parent DOM node that will contain the
   *   panel.
   * @param {module:taskList~TaskList} taskList The
   *   [TaskList]{@link module:taskList~TaskList} holding all of the tasks.
   * @param {module:projectList~ProjectList} projectList The
   *   [ProjectList]{@link module:projectList~ProjectList} holding all of the
   *   projects.
   * @param {module:taskDisplay~TaskDisplay~options} [options={}] An object
   *   holding additional options for the display panel.
   */
  function TaskDisplay(parent, taskList, projectList) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, TaskDisplay);

    var panel = document.createElement('div');
    panel.classList.add('task-panel');
    parent.appendChild(panel);
    var content = document.createElement('div');
    content.classList.add('task-panel-content');
    panel.appendChild(content);
    var privates = {
      container: panel,
      content: content,
      tasks: taskList,
      projects: projectList,
      taskCallback: options.taskCallback || null,
      dateFormat: _settings__WEBPACK_IMPORTED_MODULE_20__["default"].lookupDateFormat('iso'),
      taskMenu: null
    };
    privateMembers.set(this, privates);
    privates.taskMenu = new _popupMenu__WEBPACK_IMPORTED_MODULE_19__["default"]({
      closeIfScrolled: panel
    });
  }
  /**
   * Refresh the display panel with a new list of tasks.
   * @param {module:taskDisplay~TaskDisplay~updateOptions} [options={}] An
   *   object holding options for updating the panel.
   */


  _createClass(TaskDisplay, [{
    key: "update",
    value: function update() {
      var _options$dateFormat,
          _options$completed,
          _options$requireDueDa,
          _options$sortDescendi,
          _options$caseSensitiv,
          _options$missingLast,
          _this = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var privates = privateMembers.get(this);
      privates.dateFormat = (_options$dateFormat = options.dateFormat) !== null && _options$dateFormat !== void 0 ? _options$dateFormat : _settings__WEBPACK_IMPORTED_MODULE_20__["default"].lookupDateFormat();
      clear(this);
      var listOptions = {
        projectList: privates.projects,
        startDate: options.startDate || null,
        endDate: options.endDate || null,
        completed: (_options$completed = options.completed) !== null && _options$completed !== void 0 ? _options$completed : false,
        requireDueDate: (_options$requireDueDa = options.requireDueDate) !== null && _options$requireDueDa !== void 0 ? _options$requireDueDa : false,
        project: options.project || null
      };

      if (typeof options.priority === 'number') {
        listOptions.priority = options.priority;
      }

      var groupBy = options.groupBy || 'none';
      var descending = (_options$sortDescendi = options.sortDescending) !== null && _options$sortDescendi !== void 0 ? _options$sortDescendi : false;
      var caseSensitive = (_options$caseSensitiv = options.caseSensitive) !== null && _options$caseSensitiv !== void 0 ? _options$caseSensitiv : false;
      var missingLast = (_options$missingLast = options.missingLast) !== null && _options$missingLast !== void 0 ? _options$missingLast : false;

      var pushSortField = function pushSortField(field) {
        if (!listOptions.sortBy) listOptions.sortBy = [];
        listOptions.sortBy.push({
          field: field,
          descending: descending,
          caseSensitive: caseSensitive,
          missingLast: missingLast
        });
      };

      if (groupBy !== 'none') pushSortField(groupBy);
      if (options.sortBy) pushSortField(options.sortBy);
      if (options.sortBy !== 'create-date') pushSortField('create-date');
      var entries = privates.tasks.entries(listOptions);
      var list = null;
      var prevTask = null;
      entries.forEach(function (entry) {
        if (!prevTask || !isSameGroup(groupBy, entry.task, prevTask)) {
          list = createList(_this, getGroupHeading(_this, groupBy, entry.task));
        }

        addTask(_this, list, entry.id, entry.task);
        prevTask = entry.task;
      });

      if (entries.length === 0) {
        var message = document.createElement('div');
        message.classList.add('task-list-empty');
        message.textContent = 'No Tasks Found';
        privates.content.appendChild(message);
      } // Set menu items for the 'more' button


      if (options.project) {
        privates.taskMenu.setMenuItems(STANDARD_MENU_ITEMS);
      } else {
        var menuItems = [].concat(PROJECT_MENU_ITEMS, STANDARD_MENU_ITEMS);
        privates.taskMenu.setMenuItems(menuItems);
      } // Reset the scroll position


      if (options.resetScroll !== false) {
        privates.container.scrollTop = 0;
        privates.container.scrollLeft = 0;
      }
    }
  }]);

  return TaskDisplay;
}();

/* harmony default export */ __webpack_exports__["default"] = (TaskDisplay);

/***/ }),

/***/ "./src/modules/taskList.js":
/*!*********************************!*\
  !*** ./src/modules/taskList.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lodash/isEmpty */ "./node_modules/lodash/isEmpty.js");
/* harmony import */ var lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var lodash_sortedLastIndex__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lodash/sortedLastIndex */ "./node_modules/lodash/sortedLastIndex.js");
/* harmony import */ var lodash_sortedLastIndex__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(lodash_sortedLastIndex__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var lodash_sortedIndex__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/sortedIndex */ "./node_modules/lodash/sortedIndex.js");
/* harmony import */ var lodash_sortedIndex__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_sortedIndex__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.weak-map.js */ "./node_modules/core-js/modules/es.weak-map.js");
/* harmony import */ var core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_map_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.map.js */ "./node_modules/core-js/modules/es.map.js");
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
/* harmony import */ var core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_sort_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var core_js_modules_web_url_to_json_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! core-js/modules/web.url.to-json.js */ "./node_modules/core-js/modules/web.url.to-json.js");
/* harmony import */ var core_js_modules_web_url_to_json_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_to_json_js__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! core-js/modules/es.number.is-integer.js */ "./node_modules/core-js/modules/es.number.is-integer.js");
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");
/* harmony import */ var core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_split_js__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_33__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isBefore/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isSameDay/index.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! events */ "./node_modules/events/events.js");
/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var _recurringDate__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./recurringDate */ "./src/modules/recurringDate.js");
/* harmony import */ var _task__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./task */ "./src/modules/task.js");
/* harmony import */ var _utility_data__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./utility/data */ "./src/modules/utility/data.js");
/* harmony import */ var _utility_dates__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./utility/dates */ "./src/modules/utility/dates.js");
/* harmony import */ var _utility_storage__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./utility/storage */ "./src/modules/utility/storage.js");












function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

























/**
 * Defines the [TaskList]{@link module:taskList~TaskList} class.
 * @module taskList
 */








/**
 * Object holding private members for the
 * [TaskList]{@link module:taskList~TaskList} class.
 * @typedef {Object} module:taskList~TaskList~privates
 * @property {Map} tasks Holds a map associating UUIDs to tasks.
 * @property {Map} tasksByDueDate Holds a map associating ISO date strings to
 *   arrays of [taskWrapper]{@link module:taskList~TaskList~taskWrapper}
 *   objects based on the due dates of the tasks. Tasks with no due date are
 *   assigned to the array associated with the string 'none'.
 * @property {Map} tasksByProject Holds a map associating project identifiers
 *   to arrays of [taskWrapper]{@link module:taskList~TaskList~taskWrapper}
 *   objects based on the projects associated with the tasks. Tasks not
 *   belonging to any project are assigned to the array associated with the
 *   string 'none'.
 * @property {Map} tasksByPriority Holds a map associating priority numbers to
 *   arrays of [taskWrapper]{@link module:taskList~TaskList~taskWrapper}
 *   objects based on the priorities of the tasks.
 * @property {EventEmitter} eventEmitter Holds the event emitter which
 *   dispatches events to attached event listeners.
 */

/**
 * Holds private data for the [TaskList]{@link module:taskList~TaskList} class.
 * @type {WeakMap}
 * @see module:taskList~TaskList~privates
 */

var privateMembers = new WeakMap();
/**
 * Container holding a list of tasks.
 */

var TaskList = /*#__PURE__*/function () {
  /**
   * Wrapper object holding a task along with its UUID.
   * @typedef {Object} module:taskList~TaskList~taskWrapper
   * @property {string} id The unique identifier for the task.
   * @property {module:task~Task} task The task instance.
   */

  /**
   * Event that is fired when a task is added to the task list.
   * @event module:taskList~TaskList~addTask
   * @type {Object}
   * @property {string} type The event type: 'add-task'.
   * @property {string} id The unique identifier of the newly-added task.
   * @property {module:task~Task} task A copy of the newly-added task.
   */

  /**
   * Event that is fired when a task in the list is modified.
   * @event module:taskList~TaskList~updateTask
   * @type {Object}
   * @property {string} type The event type: 'update-task'.
   * @property {string} id The unique identifier of the updated task.
   * @property {module:task~Task} task A copy of the modified task.
   */

  /**
   * Event that is fired when a task in the list is deleted.
   * @event module:taskList~TaskList~deleteTask
   * @type {Object}
   * @property {string} type The event type: 'delete-task'.
   * @property {string} id The unique identifier for the deleted task.
   * @property {module:task~Task} task A copy of the task that was deleted.
   */

  /**
   * An object specifying options for sorting tasks.
   * @typedef {Object} module:taskList~TaskList~sortOptions
   * @property {string} field The field to sort by. Can be one of 'name',
   *   'due-date', 'create-date', 'priority', or 'project'.
   * @property {boolean} [descending=false] If set to true, then the tasks will
   *   be sorted in descending order, rather than in ascending order.
   * @property {boolean} [caseSensitive=false] If set to true, then the sorting
   *   will be case-sensitive (only applies to text-based fields).
   * @property {boolean} [missingLast=false] If set to true, then tasks that do
   *   not have the specified field will be sorted at the end (or at the
   *   beginning if descending is true). Otherwise, tasks that are missing the
   *   specified field are sorted at the beginning (or end if descending).
   */

  /**
   * An object holding information about the status of a data import.
   * @typedef {Object} module:taskList~TaskList~importStatus
   * @property {Object} tasks An object holding information about the number of
   *   tasks that were imported.
   * @property {number} tasks.added The number of new tasks that were added to
   *   the task list.
   * @property {number} tasks.updated The number of existing tasks in the task
   *   list that were updated.
   * @property {number} tasks.failed The number of tasks that failed to import.
   * @property {number} tasks.total The total number of tasks that were
   *   processed.
   * @property {Object} [projects] An object holding information about the
   *   number of projects that were imported. This is not used for JSON
   *   imports.
   * @property {number} projects.added The number of new projects that were
   *   added to the project list.
   * @property {number} projects.updated The number of existing projects in the
   *   project list that were updated.
   * @property {number} projects.failed The number of projects that failed to
   *   import.
   * @property {number} projects.total The total number of projects that were
   *   processed.
   * @property {string[]} errors An array of error messages describing any
   *   errors that occurred during the import.
   */

  /**
   * Create a task list.
   */
  function TaskList() {
    _classCallCheck(this, TaskList);

    var privates = {
      tasks: new Map(),
      tasksByDueDate: new Map(),
      tasksByProject: new Map(),
      tasksByPriority: new Map(),
      eventEmitter: new (events__WEBPACK_IMPORTED_MODULE_34___default())()
    };
    privateMembers.set(this, privates);
  }
  /**
   * Get a task in the task list. This method only returns a copy of the task,
   * not an actual reference to the task itself. To modify a task in the list,
   * use the [updateTask]{@link module:taskList~TaskList#updateTask} method.
   * @param {string} id The unique identifier of the task to retrieve.
   * @returns {?module:task~Task} The requested task, or undefined if it could
   *   not be found.
   */


  _createClass(TaskList, [{
    key: "getTask",
    value: function getTask(id) {
      var task = privateMembers.get(this).tasks.get(id);
      if (task) return lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task);
      return undefined;
    }
    /**
     * Update a task in the task list.
     * @param {string} id The unique identifier of the task to replace.
     * @param {module:task~Task} task The new task to associate with the given
     *   identifier.
     * @returns {boolean} Returns true if the task was replaced successfully. If
     *   the given id is invalid, returns false.
     * @fires module:taskList~TaskList~updateTask
     */

  }, {
    key: "updateTask",
    value: function updateTask(id, task) {
      var privates = privateMembers.get(this);
      var oldTask = privates.tasks.get(id);
      if (!oldTask) return false;

      var copy = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task);

      privates.tasks.set(id, copy);

      var updateIndex = function updateIndex(map, oldKey, newKey) {
        if (oldKey === newKey) {
          var entry = (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.findInMapArray)(map, newKey, function (elem) {
            return elem.id === id;
          });
          entry.task = copy;
        } else {
          (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.removeFromMapArrayBy)(map, oldKey, function (elem) {
            return elem.id === id;
          });
          (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.addToMapArray)(map, newKey, {
            id: id,
            task: copy
          });
        }
      };

      var oldKey = 'none';
      var newKey = 'none';
      if (oldTask.dueDate) oldKey = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.formatIsoDate)(oldTask.dueDate);
      if (copy.dueDate) newKey = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.formatIsoDate)(copy.dueDate);
      updateIndex(privates.tasksByDueDate, oldKey, newKey);
      oldKey = oldTask.project || 'none';
      newKey = copy.project || 'none';
      updateIndex(privates.tasksByProject, oldKey, newKey);
      oldKey = oldTask.priority;
      newKey = copy.priority;
      updateIndex(privates.tasksByPriority, oldKey, newKey);
      privates.eventEmitter.emit('update-task', {
        type: 'update-task',
        id: id,
        task: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task)
      });
      return true;
    }
    /**
     * Add or update a task. If a task with the given identifier exists, then it
     * is replaced with the given task. Otherwise, the task is added to the list
     * as a new task. If the given identifier is not a valid UUID, then the
     * method returns false and nothing happens.
     * @param {string} id The unique identifier of the task.
     * @param {module:task~Task} task The task that should be added or with which
     *   an existing task should be replaced.
     * @returns {boolean} True if the task was successfully added or updated, or
     *   false if the given identifier is not a valid UUID.
     * @fires module:taskList~TaskList~addTask
     * @fires module:taskList~TaskList~updateTask
     */

  }, {
    key: "addOrUpdateTask",
    value: function addOrUpdateTask(id, task) {
      if (!(0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.isUuidValid)(id)) return false;

      if (!this.updateTask(id, task)) {
        var privates = privateMembers.get(this); // Add task to task map

        var copy = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task);

        privates.tasks.set(id, copy); // Add task to lookup maps

        var wrapper = {
          id: id,
          task: copy
        };
        var dateStr = 'none';
        if (task.dueDate) dateStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.formatIsoDate)(task.dueDate);
        var projectStr = task.project || 'none';
        var priority = task.priority;
        (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.addToMapArray)(privates.tasksByDueDate, dateStr, _objectSpread({}, wrapper));
        (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.addToMapArray)(privates.tasksByProject, projectStr, _objectSpread({}, wrapper));
        (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.addToMapArray)(privates.tasksByPriority, priority, _objectSpread({}, wrapper));
        privates.eventEmitter.emit('add-task', {
          type: 'add-task',
          id: id,
          task: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task)
        });
      }

      return true;
    }
    /**
     * Adds a task to the task list and returns its unique identifier. In order
     * to prevent unintentional external modification of the task, a deep copy is
     * made, and the original object is not kept.
     * @param {module:task~Task} task The task to be added.
     * @returns {string} The identifier of the newly-added task.
     * @fires module:taskList~TaskList~addTask
     */

  }, {
    key: "addTask",
    value: function addTask(task) {
      var privates = privateMembers.get(this); // Generate UUID (loop just in case there's a collision)

      var id;

      do {
        id = (0,uuid__WEBPACK_IMPORTED_MODULE_40__["default"])();
      } while (privates.tasks.has(id));

      this.addOrUpdateTask(id, task);
      return id;
    }
    /**
     * Determines whether a task with the given identifier exists within the task
     * list.
     * @param {string} id The unique identifier of the task to look for.
     * @returns {boolean} True if the task exists, and false otherwise.
     */

  }, {
    key: "hasTask",
    value: function hasTask(id) {
      return privateMembers.get(this).tasks.has(id);
    }
    /**
     * Remove a task from the task list.
     * @param {string} id The unique identifier of the task to remove.
     * @returns {boolean} Returns true if the task was found and removed
     *   successfully. Otherwise, if the given id was not found, returns false.
     * @fires module:taskList~TaskList~deleteTask
     */

  }, {
    key: "deleteTask",
    value: function deleteTask(id) {
      var privates = privateMembers.get(this);
      var task = privates.tasks.get(id);
      if (!task) return false;
      var dateStr = 'none';
      if (task.dueDate) dateStr = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.formatIsoDate)(task.dueDate);
      var projectStr = task.project || 'none';
      var priority = task.priority;
      privates.tasks.delete(id);
      (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.removeFromMapArrayBy)(privates.tasksByDueDate, dateStr, function (elem) {
        return elem.id === id;
      });
      (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.removeFromMapArrayBy)(privates.tasksByProject, projectStr, function (elem) {
        return elem.id === id;
      });
      (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.removeFromMapArrayBy)(privates.tasksByPriority, priority, function (elem) {
        return elem.id === id;
      });
      privates.eventEmitter.emit('delete-task', {
        type: 'delete-task',
        id: id,
        task: task
      });
      return true;
    }
    /**
     * Delete all tasks in the task list.
     * @fires module:taskList~TaskList~deleteTask
     */

  }, {
    key: "deleteAll",
    value: function deleteAll() {
      var privates = privateMembers.get(this); // Save task information in order to emit delete events later

      var tasks = [];
      privates.tasks.forEach(function (task, id) {
        return tasks.push({
          id: id,
          task: task
        });
      });
      privates.tasks.clear();
      privates.tasksByDueDate.clear();
      privates.tasksByProject.clear();
      privates.tasksByPriority.clear();
      tasks.forEach(function (_ref) {
        var id = _ref.id,
            task = _ref.task;
        privates.eventEmitter.emit('delete-task', {
          type: 'delete-task',
          id: id,
          task: task
        });
      });
    }
    /**
     * For each task belonging to a given project, remove the task from that
     * project. Afterward, there will be no tasks assigned to the project.
     * @param {string} projectId The unique identifier of the project to clear.
     * @fires module:taskList~TaskList~updateTask
     */

  }, {
    key: "clearProject",
    value: function clearProject(projectId) {
      var privates = privateMembers.get(this);
      var map = privates.tasksByProject;
      var tasks = map.get(projectId);
      if (!tasks) return; // Save modified tasks in order to emit events later

      var updatedTasks = [];
      tasks.forEach(function (entry) {
        var task = entry.task;
        task.project = null;
        (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.addToMapArray)(map, 'none', entry);
        updatedTasks.push(entry);
      });
      map.delete(projectId);
      updatedTasks.forEach(function (_ref2) {
        var id = _ref2.id,
            task = _ref2.task;
        privates.eventEmitter.emit('update-task', {
          type: 'update-task',
          id: id,
          task: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task)
        });
      });
    }
    /**
     * Execute the provided function on each task in the list. Note that the task
     * instance passed to the callback function is only a copy of the task in the
     * list.
     * @param {Function} callback The function to execute on each task. The
     *   function will be passed a
     *   [wrapper]{@link module:taskList~TaskList~taskWrapper} containing the
     *   task and its identifier.
     */

  }, {
    key: "forEach",
    value: function forEach(callback) {
      privateMembers.get(this).tasks.forEach(function (task, id) {
        var copy = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task);

        callback({
          id: id,
          task: copy
        });
      });
    }
    /**
     * Get an array of [taskWrapper]{@link module:taskList~TaskList~taskWrapper}
     * objects filtered and sorted according to the given options.
     * @param {Object} [options={}] An object holding options to control which
     *   tasks to include in the Iterator.
     * @param {module:projectList~ProjectList} [options.projectList] The project
     *   container. If not provided, then sorting by project will be disabled.
     * @param {Date} [options.startDate] If provided, all tasks with due dates
     *   before the given date will be excluded.
     * @param {Date} [options.endDate] If provided, all tasks with due dates
     *   after the given date will be excluded.
     * @param {boolean} [options.completed=false] If set to true, then tasks that
     *   have been completed will be included. Otherwise they are excluded.
     * @param {boolean} [options.requireDueDate=false] If set to true, then tasks
     *   that do not have a due date will be excluded.
     * @param {string} [options.project] If provided, only tasks belonging to the
     *   specified project will be included. If set to 'none', then only tasks
     *   that do not have a project assigned will be included.
     * @param {number} [options.priority] If provided, only tasks with the
     *   specified priority will be included.
     * @param {module:taskList~TaskList~sortOptions[]} [options.sortBy] An array
     *   of objects specifying the sort order. The first element in the array
     *   determines the primary field on which to sort the tasks, the second
     *   element determines the field used to break ties, the third element
     *   determines the field used to break further ties, and so on.
     * @returns {module:taskList~TaskList~taskWrapper[]} The array of
     *   [taskWrapper]{@link module:taskList~TaskList~taskWrapper} objects.
     */

  }, {
    key: "entries",
    value: function entries() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var privates = privateMembers.get(this);
      var sortBy = options.sortBy || []; // Which index to use: default | due-date | project | priority

      var lookupType = 'default';

      if (options.project) {
        lookupType = 'project';
      } else if (typeof options.priority === 'number') {
        lookupType = 'priority';
      } else if (options.startDate || options.endDate) {
        lookupType = 'due-date';
      }

      var output = [];

      var copyTasks = function copyTasks(map, key) {
        var tasks = map.get(key);
        if (tasks) tasks.forEach(function (task) {
          return output.push(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task));
        });
      };

      switch (lookupType) {
        case 'due-date':
          {
            var dates = _toConsumableArray(privates.tasksByDueDate.keys());

            dates.sort();
            var startKey = null;
            var endKey = null;

            if (options.startDate) {
              startKey = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.formatIsoDate)(options.startDate);
            }

            if (options.endDate) {
              endKey = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.formatIsoDate)(options.endDate);
            }

            var lowIndex = 0;
            var highIndex = dates.length;

            if (startKey) {
              lowIndex = lodash_sortedIndex__WEBPACK_IMPORTED_MODULE_9___default()(dates, startKey);
            }

            if (endKey) {
              highIndex = lodash_sortedLastIndex__WEBPACK_IMPORTED_MODULE_8___default()(dates, endKey);
            } else if (dates.length > 0 && dates[dates.length - 1] === 'none') {
              highIndex -= 1;
            }

            dates.slice(lowIndex, highIndex).forEach(function (key) {
              copyTasks(privates.tasksByDueDate, key);
            });
            copyTasks(privates.tasksByDueDate, 'none');
            break;
          }

        case 'priority':
          {
            copyTasks(privates.tasksByPriority, options.priority);
            break;
          }

        case 'project':
          copyTasks(privates.tasksByProject, options.project);
          break;

        case 'default':
        default:
          privates.tasks.forEach(function (task, id) {
            output.push({
              id: id,
              task: lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task)
            });
          });
          break;
      }

      output = output.filter(function (entry) {
        var task = entry.task;

        if (task.dueDate) {
          if (options.startDate && (0,date_fns__WEBPACK_IMPORTED_MODULE_41__["default"])(task.dueDate, options.startDate)) {
            return false;
          }

          if (options.endDate && (0,date_fns__WEBPACK_IMPORTED_MODULE_41__["default"])(options.endDate, task.dueDate)) {
            return false;
          }
        }

        if (!options.completed && task.isComplete()) return false;
        if (options.requireDueDate && !task.dueDate) return false;

        if (options.project) {
          if (options.project === 'none' && task.project) return false;

          if (options.project !== 'none' && task.project !== options.project) {
            return false;
          }
        }

        if (typeof options.priority === 'number' && task.priority !== options.priority) {
          return false;
        }

        return true;
      });
      output = output.sort(function (a, b) {
        var leftTask = a.task;
        var rightTask = b.task;

        for (var index = 0; index < sortBy.length; index += 1) {
          var _sortBy$index$caseSen, _sortBy$index$descend, _sortBy$index$missing;

          var caseSensitive = (_sortBy$index$caseSen = sortBy[index].caseSensitive) !== null && _sortBy$index$caseSen !== void 0 ? _sortBy$index$caseSen : false;
          var descending = (_sortBy$index$descend = sortBy[index].descending) !== null && _sortBy$index$descend !== void 0 ? _sortBy$index$descend : false;
          var missingLast = (_sortBy$index$missing = sortBy[index].missingLast) !== null && _sortBy$index$missing !== void 0 ? _sortBy$index$missing : false;
          var LESS = descending ? 1 : -1;
          var MORE = descending ? -1 : 1;

          switch (sortBy[index].field) {
            case 'name':
              {
                var leftName = leftTask.name;
                var rightName = rightTask.name;

                if (!caseSensitive) {
                  leftName = leftName.toLowerCase();
                  rightName = rightName.toLowerCase();
                }

                if (leftName < rightName) return LESS;
                if (leftName > rightName) return MORE;
                break;
              }

            case 'due-date':
              {
                var leftDate = leftTask.dueDate;
                var rightDate = rightTask.dueDate;
                if (!leftDate && rightDate) return missingLast ? MORE : LESS;
                if (leftDate && !rightDate) return missingLast ? LESS : MORE;

                if (leftDate && rightDate && !(0,date_fns__WEBPACK_IMPORTED_MODULE_42__["default"])(leftDate, rightDate)) {
                  return (0,date_fns__WEBPACK_IMPORTED_MODULE_41__["default"])(leftDate, rightDate) ? LESS : MORE;
                }

                break;
              }

            case 'create-date':
              if ((0,date_fns__WEBPACK_IMPORTED_MODULE_41__["default"])(leftTask.creationDate, rightTask.creationDate)) {
                return LESS;
              }

              if ((0,date_fns__WEBPACK_IMPORTED_MODULE_41__["default"])(rightTask.creationDate, leftTask.creationDate)) {
                return MORE;
              }

              break;

            case 'priority':
              if (leftTask.priority > rightTask.priority) return LESS;
              if (leftTask.priority < rightTask.priority) return MORE;
              break;

            case 'project':
              {
                var leftProj = leftTask.project;
                var rightProj = rightTask.project;
                if (!leftProj && rightProj) return missingLast ? MORE : LESS;
                if (leftProj && !rightProj) return missingLast ? LESS : MORE;

                if (leftProj && rightProj) {
                  var projectList = options.projectList;
                  if (!projectList) break;
                  var _leftName = projectList.getProject(leftProj).name;
                  var _rightName = projectList.getProject(rightProj).name;

                  if (!caseSensitive) {
                    _leftName = _leftName.toLowerCase();
                    _rightName = _rightName.toLowerCase();
                  }

                  if (_leftName < _rightName) return LESS;
                  if (_leftName > _rightName) return MORE;
                }

                break;
              }

            default:
              return 0;
          }
        }

        return 0;
      });
      return output;
    }
    /**
     * Add an event listener to the task list.
     * @param {string} type The type of event to listen for.
     * @param {Function} listener A callback function to be invoked when the
     *   event is triggered.
     */

  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      privateMembers.get(this).eventEmitter.on(type, listener);
    }
    /**
     * Convert data to an object suitable for serialization.
     * @returns {Object} An object representing serializable data for the class.
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var tasks = [];
      privateMembers.get(this).tasks.forEach(function (task, id) {
        var copy = lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_10___default()(task);

        copy.id = id;
        tasks.push(copy);
      });
      return tasks;
    }
    /**
     * Convert data to a string in CSV (comma-separated values) format.
     * @param {Object} [options={}] An object holding additional options.
     * @param {string} [options.newlineSequence] The character sequence to use
     *   for newlines. If not given, then a carriage return/line feed pair (CRLF)
     *   is used, as suggested by the
     *   [RFC 4180]{@link https://datatracker.ietf.org/doc/html/rfc4180}
     *   specification.
     * @param {module:projectList~ProjectList} [options.projectList] The project
     *   container. If not provided, then no project information besides the
     *   project identifier will be included in the CSV fields.
     * @returns {string} The task data in CSV format.
     */

  }, {
    key: "toCsv",
    value: function toCsv() {
      var _options$newlineSeque;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var projectFields = [];
      if (options.projectList) projectFields.push('Project Name');
      projectFields.push('Project UUID');
      if (options.projectList) projectFields.push('Project Description');
      var header = ['Name', 'UUID', 'Due Date', 'Date Added', 'Date Completed', 'Priority', 'Description'].concat(projectFields, ['Recurrence Interval Unit', 'Recurrence Interval Length', 'Recurrence Start Date', 'Recurrence Based on Completion?', 'Recurrence Week Number', 'Recurrence Week Days', 'Recurrence Month', 'Recurrence Day', 'Recurrence Weekend Behavior', 'Recurrence End Date', 'Recurrence Max Count']);
      var newlineSequence = (_options$newlineSeque = options.newlineSequence) !== null && _options$newlineSeque !== void 0 ? _options$newlineSeque : '\r\n';
      var csvOptions = {
        newlineSequence: newlineSequence
      };

      var convertDate = function convertDate(date) {
        var _date$toJSON;

        return (_date$toJSON = date === null || date === void 0 ? void 0 : date.toJSON()) !== null && _date$toJSON !== void 0 ? _date$toJSON : '';
      };

      var lines = [(0,_utility_storage__WEBPACK_IMPORTED_MODULE_39__.arrayToCsvRecord)(header, csvOptions)];
      privateMembers.get(this).tasks.forEach(function (task, id) {
        var _task$description, _recurringDate$interv, _recurringDate$baseOn, _recurringDate$weekNu, _recurringDate$weekNu2, _recurringDate$dayOfM, _recurringDate$dayOfM2, _recurringDate$maxCou, _recurringDate$maxCou2;

        var fields = [task.name, id, convertDate(task.dueDate), convertDate(task.creationDate), convertDate(task.completionDate), _task__WEBPACK_IMPORTED_MODULE_36__["default"].convertPriorityToPrettyString(task.priority), (_task$description = task.description) !== null && _task$description !== void 0 ? _task$description : ''];

        if (options.projectList) {
          var _project$name, _project, _task$project, _project$description, _project2;

          var project = null;

          if (task.project) {
            project = options.projectList.getProject(task.project);
          }

          fields.push((_project$name = (_project = project) === null || _project === void 0 ? void 0 : _project.name) !== null && _project$name !== void 0 ? _project$name : '', (_task$project = task.project) !== null && _task$project !== void 0 ? _task$project : '', (_project$description = (_project2 = project) === null || _project2 === void 0 ? void 0 : _project2.description) !== null && _project$description !== void 0 ? _project$description : '');
        } else {
          var _task$project2;

          fields.push((_task$project2 = task.project) !== null && _task$project2 !== void 0 ? _task$project2 : '');
        }

        var recurringDate = task.recurringDate;
        var intervalUnit = '';

        switch (recurringDate === null || recurringDate === void 0 ? void 0 : recurringDate.intervalUnit) {
          case 'day':
            intervalUnit = 'Day';
            break;

          case 'week':
            intervalUnit = 'Week';
            break;

          case 'month':
            intervalUnit = 'Month';
            break;

          case 'year':
            intervalUnit = 'Year';
            break;

          default:
            break;
        }

        var daysOfWeek = '';

        if (recurringDate !== null && recurringDate !== void 0 && recurringDate.daysOfWeek) {
          daysOfWeek = recurringDate.daysOfWeek.map(_utility_dates__WEBPACK_IMPORTED_MODULE_38__.getWeekdayName).join(', ');
        }

        var month = '';

        if (Number.isInteger(recurringDate === null || recurringDate === void 0 ? void 0 : recurringDate.month)) {
          month = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.getMonthName)(recurringDate.month);
        }

        var onWeekend = '';

        switch (recurringDate === null || recurringDate === void 0 ? void 0 : recurringDate.onWeekend) {
          case 'no-change':
            onWeekend = 'No Change';
            break;

          case 'previous-weekday':
            onWeekend = 'Use Previous Weekday';
            break;

          case 'next-weekday':
            onWeekend = 'Use Next Weekday';
            break;

          case 'nearest-weekday':
            onWeekend = 'Use Nearest Weekday';
            break;

          default:
            break;
        }

        fields.push(intervalUnit, (_recurringDate$interv = recurringDate === null || recurringDate === void 0 ? void 0 : recurringDate.intervalLength.toString()) !== null && _recurringDate$interv !== void 0 ? _recurringDate$interv : '', convertDate(recurringDate === null || recurringDate === void 0 ? void 0 : recurringDate.startDate), (_recurringDate$baseOn = recurringDate === null || recurringDate === void 0 ? void 0 : recurringDate.baseOnCompletion.toString()) !== null && _recurringDate$baseOn !== void 0 ? _recurringDate$baseOn : '', (_recurringDate$weekNu = recurringDate === null || recurringDate === void 0 ? void 0 : (_recurringDate$weekNu2 = recurringDate.weekNumber) === null || _recurringDate$weekNu2 === void 0 ? void 0 : _recurringDate$weekNu2.toString()) !== null && _recurringDate$weekNu !== void 0 ? _recurringDate$weekNu : '', daysOfWeek, month, (_recurringDate$dayOfM = recurringDate === null || recurringDate === void 0 ? void 0 : (_recurringDate$dayOfM2 = recurringDate.dayOfMonth) === null || _recurringDate$dayOfM2 === void 0 ? void 0 : _recurringDate$dayOfM2.toString()) !== null && _recurringDate$dayOfM !== void 0 ? _recurringDate$dayOfM : '', onWeekend, convertDate(recurringDate === null || recurringDate === void 0 ? void 0 : recurringDate.endDate), (_recurringDate$maxCou = recurringDate === null || recurringDate === void 0 ? void 0 : (_recurringDate$maxCou2 = recurringDate.maxCount) === null || _recurringDate$maxCou2 === void 0 ? void 0 : _recurringDate$maxCou2.toString()) !== null && _recurringDate$maxCou !== void 0 ? _recurringDate$maxCou : '');
        lines.push((0,_utility_storage__WEBPACK_IMPORTED_MODULE_39__.arrayToCsvRecord)(fields, csvOptions));
      });
      lines.push('');
      return lines.join(newlineSequence);
    }
    /**
     * Import tasks from a JSON object.
     * @param {Object} data The serialized JSON object to import.
     * @param {Object} [options={}] An object holding additional options for the
     *   import.
     * @param {module:projectList~ProjectList} [options.projectList] The project
     *   container. If not provided, then full validation will not be performed
     *   on project identifiers.
     * @returns {module:taskList~TaskList~importStatus} An object holding
     *   information about the status of the import.
     * @fires module:taskList~TaskList~addTask
     * @fires module:taskList~TaskList~updateTask
     */

  }, {
    key: "importFromJson",
    value: function importFromJson(data) {
      var _this = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var counts = {
        added: 0,
        updated: 0,
        failed: 0,
        total: 0
      };
      var errors = [];

      if (!Array.isArray(data)) {
        errors.push('Error: Expected "tasks" property to be an array.');
        return {
          tasks: counts,
          errors: errors
        };
      }

      data.forEach(function (task) {
        var handleError = function handleError(errorType, value, opts) {
          if (value == null) return;
          var msgPrefix = "Warning: Task \"".concat(task.name, "\"");
          var msg;

          switch (errorType) {
            case 'bad-type':
              if (opts.allowConversion && typeof value === 'string') {
                msg = "Expected type \"".concat(opts.expectedType, "\" for property \"").concat(opts.valueName, "\" (conversion from type \"string\" failed).");
              } else {
                msg = "Expected type \"".concat(opts.expectedType, "\" for property \"").concat(opts.valueName, "\" (received \"").concat((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.getJsonType)(value), "\").");
              }

              break;

            case 'unknown-value':
              msg = "Unrecognized value \"".concat(value, "\" for property \"").concat(opts.valueName, "\".");
              break;

            case 'not-integer':
              msg = "Value for property \"".concat(opts.valueName, "\" must be an integer (received \"").concat(value, "\").");
              break;

            case 'too-low':
              msg = "Value for property \"".concat(opts.valueName, "\" cannot be below \"").concat(opts.min, "\" (received \"").concat(value, "\").");
              break;

            case 'too-high':
              msg = "Value for property \"".concat(opts.valueName, "\" cannot be above \"").concat(opts.max, "\" (received \"").concat(value, "\").");
              break;

            case 'bad-date':
              msg = "Expected a date in ISO format for property \"".concat(opts.valueName, "\" (received \"").concat(value, "\").");
              break;

            case 'bad-id':
              msg = "Expected a version 4 UUID for property \"".concat(opts.valueName, "\" (received \"").concat(value, "\").");
              break;

            case 'failed-predicate':
              if (opts.valueName === 'project') {
                msg = "Unrecognized project identifier \"".concat(value, "\" for property \"").concat(opts.valueName, "\".");
              } else {
                msg = "Failed custom validation for property \"".concat(opts.valueName, ".");
              }

              break;

            default:
              msg = "Encountered unrecognized error \"".concat(errorType, "\" for property \"").concat(opts.valueName, "\".");
              break;
          }

          errors.push("".concat(msgPrefix, ": ").concat(msg));
        };

        if (task.name == null) {
          errors.push('Error: Task must have a name.');
          counts.failed += 1;
        } else if (typeof task.name !== 'string') {
          errors.push("Error: Expected type \"string\" for task name (received \"".concat((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.getJsonType)(task.name), "\")."));
          counts.failed += 1;
        } else if (task.name.length === 0) {
          errors.push('Error: Task name must not be empty.');
          counts.failed += 1;
        } else {
          var taskOptions = {};
          var newId = null;
          if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.id, {
            valueName: 'id',
            expectedType: 'string',
            requireUuid: true,
            errorCallback: handleError
          })) newId = task.id;
          (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.dueDate, {
            valueName: 'dueDate',
            expectedType: 'date',
            allowConversion: true,
            successCallback: function successCallback(value) {
              taskOptions.dueDate = value;
            },
            errorCallback: handleError
          });
          (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.creationDate, {
            valueName: 'creationDate',
            expectedType: 'date',
            allowConversion: true,
            successCallback: function successCallback(value) {
              taskOptions.creationDate = value;
            },
            errorCallback: handleError
          });
          (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.completionDate, {
            valueName: 'completionDate',
            expectedType: 'date',
            allowConversion: true,
            successCallback: function successCallback(value) {
              taskOptions.completionDate = value;
            },
            errorCallback: handleError
          });

          if (task.priority != null) {
            var setPriority = function setPriority(value) {
              taskOptions.priority = value;
            };

            if (typeof task.priority === 'string') {
              (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.priority, {
                valueName: 'priority',
                expectedValues: ['very-low', 'low', 'medium', 'high', 'very-high'],
                successCallback: setPriority,
                errorCallback: handleError
              });
            } else {
              (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.priority, {
                valueName: 'priority',
                expectedType: 'number',
                requireInteger: true,
                successCallback: setPriority,
                errorCallback: handleError
              });
            }
          }

          if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.description, {
            valueName: 'description',
            expectedType: 'string',
            errorCallback: handleError
          })) taskOptions.description = task.description;

          if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.recurringDate, {
            valueName: 'recurringDate',
            expectedType: 'object',
            errorCallback: handleError
          }) && (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.recurringDate.intervalUnit, {
            valueName: 'recurringDate.intervalUnit',
            expectedType: 'string',
            expectedValues: ['day', 'week', 'month', 'year'],
            errorCallback: handleError
          })) {
            var recurringDate = task.recurringDate;
            var recOptions = {};
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.intervalLength, {
              valueName: 'recurringDate.intervalLength',
              expectedType: 'number',
              requireInteger: true,
              min: 1,
              errorCallback: handleError
            })) recOptions.intervalLength = recurringDate.intervalLength;
            (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.startDate, {
              valueName: 'recurringDate.startDate',
              expectedType: 'date',
              allowConversion: true,
              successCallback: function successCallback(value) {
                recOptions.startDate = value;
              },
              errorCallback: handleError
            });
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.baseOnCompletion, {
              valueName: 'recurringDate.baseOnCompletion',
              expectedType: 'boolean',
              errorCallback: handleError
            })) recOptions.baseOnCompletion = recurringDate.baseOnCompletion;
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.weekNumber, {
              valueName: 'recurringDate.weekNumber',
              expectedType: 'number',
              requireInteger: true,
              min: 1,
              max: 5,
              errorCallback: handleError
            })) recOptions.weekNumber = recurringDate.weekNumber;

            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.daysOfWeek, {
              valueName: 'recurringDate.daysOfWeek',
              expectedType: 'array',
              errorCallback: handleError
            })) {
              var daysOfWeek = [];
              recurringDate.daysOfWeek.forEach(function (value, index) {
                if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(value, {
                  valueName: "recurringDate.daysOfWeek[".concat(index, "]"),
                  expectedType: 'number',
                  requireInteger: true,
                  min: 0,
                  max: 6,
                  errorCallback: handleError
                })) daysOfWeek.push(value);
              });
              recOptions.daysOfWeek = daysOfWeek;
            }

            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.month, {
              valueName: 'recurringDate.month',
              expectedType: 'number',
              requireInteger: true,
              min: 0,
              max: 11,
              errorCallback: handleError
            })) recOptions.month = recurringDate.month;
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.dayOfMonth, {
              valueName: 'recurringDate.dayOfMonth',
              expectedType: 'number',
              requireInteger: true,
              min: 1,
              max: 31,
              errorCallback: handleError
            })) recOptions.dayOfMonth = recurringDate.dayOfMonth;
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.onWeekend, {
              valueName: 'recurringDate.onWeekend',
              expectedType: 'string',
              expectedValues: ['no-change', 'previous-weekday', 'next-weekday', 'nearest-weekday'],
              errorCallback: handleError
            })) recOptions.onWeekend = recurringDate.onWeekend;
            (0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.endDate, {
              valueName: 'recurringDate.endDate',
              expectedType: 'date',
              allowConversion: true,
              successCallback: function successCallback(value) {
                recOptions.endDate = value;
              },
              errorCallback: handleError
            });
            if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(recurringDate.maxCount, {
              valueName: 'recurringDate.maxCount',
              expectedType: 'number',
              requireInteger: true,
              min: 0,
              errorCallback: handleError
            })) recOptions.maxCount = recurringDate.maxCount;
            var recurrence = new _recurringDate__WEBPACK_IMPORTED_MODULE_35__["default"](task.recurringDate.intervalUnit, recOptions);
            taskOptions.recurringDate = recurrence;
          }

          if ((0,_utility_data__WEBPACK_IMPORTED_MODULE_37__.validateValue)(task.project, {
            valueName: 'project',
            expectedType: 'string',
            requireUuid: true,
            customPredicate: function customPredicate(value) {
              var projectList = options.projectList;
              return !projectList || projectList.hasProject(value);
            },
            errorCallback: handleError
          })) taskOptions.project = task.project;
          if (newId && _this.hasTask(newId)) counts.updated += 1;else counts.added += 1;
          var newTask = new _task__WEBPACK_IMPORTED_MODULE_36__["default"](task.name, taskOptions);
          if (newId) _this.addOrUpdateTask(newId, newTask);else _this.addTask(newTask);
        }
      });
      counts.total = counts.added + counts.updated + counts.failed;
      return {
        tasks: counts,
        errors: errors
      };
    }
    /**
     * Import tasks from parsed CSV data.
     * @param {string[][]} data An array of string arrays. Each member of the
     *   outer array represents a single task, and each member of each inner
     *   array is a data field for that particular task. The first member of the
     *   outer array should be a header holding field names.
     * @param {Object} [options={}] An object holding additional options for the
     *   import.
     * @param {module:projectList~ProjectList} [options.projectList] The project
     *   container. If not provided, then full validation will not be performed
     *   on project identifiers.
     * @returns {module:taskList~TaskList~importStatus} An object holding
     *   information about the status of the import.
     * @fires module:taskList~TaskList~addTask
     * @fires module:taskList~TaskList~updateTask
     */

  }, {
    key: "importFromCsv",
    value: function importFromCsv(data) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var header = data.length > 0 ? data[0] : [];
      var entries = [];
      data.forEach(function (csvRecord, csvIndex) {
        if (csvIndex === 0) return;
        var entry = {};
        var recurringDate = {};
        csvRecord.forEach(function (value, index) {
          if (index >= header.length || value.length === 0) return;

          switch (header[index].toLowerCase()) {
            case 'name':
              entry.name = value;
              break;

            case 'uuid':
              entry.id = value;
              break;

            case 'due date':
            case 'due-date':
              entry.dueDate = value;
              break;

            case 'date added':
            case 'date-added':
              entry.creationDate = value;
              break;

            case 'date completed':
            case 'date-completed':
              entry.completionDate = value;
              break;

            case 'priority':
              entry.priority = _task__WEBPACK_IMPORTED_MODULE_36__["default"].convertStringToPriority(value);
              break;

            case 'description':
              entry.description = value;
              break;

            case 'project uuid':
            case 'project-uuid':
              entry.project = value;
              break;

            case 'recurrence interval unit':
            case 'recurrence-interval-unit':
              recurringDate.intervalUnit = value.toLowerCase();
              break;

            case 'recurrence interval length':
            case 'recurrence-interval-length':
              recurringDate.intervalLength = Number(value);
              break;

            case 'recurrence start date':
            case 'recurrence-start-date':
              recurringDate.startDate = value;
              break;

            case 'recurrence based on completion?':
            case 'recurrence based on completion':
            case 'recurrence-based-on-completion':
              recurringDate.baseOnCompletion = value.toLowerCase() === 'true';
              break;

            case 'recurrence week number':
            case 'recurrence-week-number':
              recurringDate.weekNumber = Number(value);
              break;

            case 'recurrence week days':
            case 'recurrence-week-days':
              recurringDate.daysOfWeek = value.split(',').map(function (day) {
                return (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.getWeekdayIndex)(day.trim());
              }).filter(function (day) {
                return day != null;
              });
              break;

            case 'recurrence month':
            case 'recurrence-month':
              recurringDate.month = (0,_utility_dates__WEBPACK_IMPORTED_MODULE_38__.getMonthIndex)(value);
              break;

            case 'recurrence day':
            case 'recurrence-day':
              recurringDate.dayOfMonth = Number(value);
              break;

            case 'recurrence weekend behavior':
            case 'recurrence-weekend-behavior':
              {
                var behavior = null;

                switch (value.toLowerCase()) {
                  case 'no change':
                  case 'no-change':
                    behavior = 'no-change';
                    break;

                  case 'use previous weekday':
                  case 'previous weekday':
                  case 'previous-weekday':
                    behavior = 'previous-weekday';
                    break;

                  case 'use next weekday':
                  case 'next weekday':
                  case 'next-weekday':
                    behavior = 'next-weekday';
                    break;

                  case 'use nearest weekday':
                  case 'nearest weekday':
                  case 'nearest-weekday':
                    behavior = 'nearest-weekday';
                    break;

                  default:
                    break;
                }

                recurringDate.onWeekend = behavior;
                break;
              }

            case 'recurrence end date':
            case 'recurrence-end-date':
              recurringDate.endDate = value;
              break;

            case 'recurrence max count':
            case 'recurrence-max-count':
              recurringDate.maxCount = Number(value);
              break;

            default:
              break;
          }
        });
        if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default()(recurringDate)) entry.recurringDate = recurringDate;
        if (!lodash_isEmpty__WEBPACK_IMPORTED_MODULE_7___default()(entry)) entries.push(entry);
      });
      return this.importFromJson(entries, options);
    }
  }]);

  return TaskList;
}();

/* harmony default export */ __webpack_exports__["default"] = (TaskList);

/***/ }),

/***/ "./src/modules/utility/data.js":
/*!*************************************!*\
  !*** ./src/modules/utility/data.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addToMapArray": function() { return /* binding */ addToMapArray; },
/* harmony export */   "compareVersions": function() { return /* binding */ compareVersions; },
/* harmony export */   "findInMapArray": function() { return /* binding */ findInMapArray; },
/* harmony export */   "getJsonType": function() { return /* binding */ getJsonType; },
/* harmony export */   "isUuidValid": function() { return /* binding */ isUuidValid; },
/* harmony export */   "removeFromMapArray": function() { return /* binding */ removeFromMapArray; },
/* harmony export */   "removeFromMapArrayBy": function() { return /* binding */ removeFromMapArrayBy; },
/* harmony export */   "validateValue": function() { return /* binding */ validateValue; }
/* harmony export */ });
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
/* harmony import */ var core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.find-index.js */ "./node_modules/core-js/modules/es.array.find-index.js");
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.number.is-finite.js */ "./node_modules/core-js/modules/es.number.is-finite.js");
/* harmony import */ var core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_finite_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.is-integer.js */ "./node_modules/core-js/modules/es.number.is-integer.js");
/* harmony import */ var core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_is_integer_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/validate.js");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! uuid */ "./node_modules/uuid/dist/esm-browser/version.js");
/* harmony import */ var _dates__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./dates */ "./src/modules/utility/dates.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




















/**
 * Defines functions for manipulating data.
 * @module data
 */


/**
 * Add a value to an array belonging to a Map having array values. If the given
 * key does not exist in the map, then a new array will be inserted at that
 * key.
 * @param {Map} map The map of arrays.
 * @param {*} key The key corresponding to the array in which the value is to
 *   be inserted.
 * @param {*} value The value to insert into the array.
 */

function addToMapArray(map, key, value) {
  var arr = map.get(key);

  if (!arr) {
    arr = [];
    map.set(key, arr);
  }

  arr.push(value);
}
/**
 * Compare two semantic version strings. The version strings should be
 * formatted according to the [Semantic Versioning 2.0.0](https://semver.org/)
 * specifications. Pre-release information and build metadata are ignored.
 * @param {string} v1 The first version string to compare.
 * @param {string} v2 The second version string to compare.
 * @returns {number} If v1 has a lower version number than v2 (that is, v1 is
 *   an older version), then a value less than 0 is returned. If v1 has higher
 *   version number than v2 (that is, v1 is a newer version), then a value
 *   greater than 0 is returned. Otherwise, if both v1 and v2 are equivalent
 *   versions, then 0 is returned.
 * @throws {RangeError} If either string is not a valid semantic version.
 */


function compareVersions(v1, v2) {
  var splitVersion = function splitVersion(version) {
    var components = version.match(/^([0-9]+)(\.([0-9]+)(\.([0-9]+))?)?/);

    if (!components) {
      throw new RangeError("Invalid semantic version \"".concat(version, "\""));
    }

    var major = Number(components[1]);
    var minor = components[3] != null ? Number(components[3]) : 0;
    var patch = components[5] != null ? Number(components[5]) : 0;
    return {
      major: major,
      minor: minor,
      patch: patch
    };
  };

  var leftVer = splitVersion(v1);
  var rightVer = splitVersion(v2);

  if (leftVer.major !== rightVer.major) {
    return leftVer.major < rightVer.major ? -1 : 1;
  }

  if (leftVer.minor !== rightVer.minor) {
    return leftVer.minor < rightVer.minor ? -1 : 1;
  }

  if (leftVer.patch !== rightVer.patch) {
    return leftVer.patch < rightVer.patch ? -1 : 1;
  }

  return 0;
}
/**
 * Find a value in an array belonging to a Map having array values. The first
 * value in the appropriate array for which the predicate returns true is
 * returned.
 * @param {Map} map The map of arrays.
 * @param {*} key The key corresponding to the array in which the element is to
 *   be found.
 * @param {Function} predicate The predicate function that will be used to find
 *   the array element. The function will be invoked for each element in the
 *   array associated with the given key. When invoked, the function will be
 *   passed the array element, the index of the element in the array, and the
 *   array itself, in that order, as arguments.
 * @return {*} The matching value, or undefined if not found.
 */


function findInMapArray(map, key, predicate) {
  var arr = map.get(key);
  if (!arr) return undefined;
  return arr.find(predicate);
}
/**
 * Remove a value from an array belonging to a Map having array values. This
 * function is similar to
 * [removeFromMapArray]{@link module:data~removeFromMapArray}, except that it
 * takes a predicate function instead of a value. The first value in the array
 * for which the predicate returns true is removed.
 * @param {Map} map The map of arrays.
 * @param {*} key The key corresponding to the array from which the value is to
 *   be removed.
 * @param {Function} predicate The predicate function that will be used to find
 *   a matching array element. The function will be invoked for each element in
 *   the array associated with the given key. When invoked, the function will
 *   be passed the array element, the index of the element in the array, and
 *   the array itself, in that order, as arguments.
 * @returns {boolean} Returns true if a value was successfully removed, or
 *   false if a matching array element could not be found.
 */


function removeFromMapArrayBy(map, key, predicate) {
  var arr = map.get(key);
  if (!arr) return false;
  var index = arr.findIndex(predicate);
  if (index < 0) return false;
  arr.splice(index, 1);
  if (arr.length === 0) map.delete(key);
  return true;
}
/**
 * Remove a value from an array belonging to a Map having array values.
 * @param {Map} map The map of arrays.
 * @param {*} key The key corresponding to the array from which the value is to
 *   be removed.
 * @param {*} value The value to remove from the array.
 * @returns {boolean} Returns true if the value was successfully removed, or
 *   false if a matching array element could not be found.
 */


function removeFromMapArray(map, key, value) {
  return removeFromMapArrayBy(map, key, function (elem) {
    return elem === value;
  });
}
/**
 * Get the type of a JSON value: 'object', 'array', 'string', 'number',
 * 'boolean', or 'null'. Types that are not supported in JSON, such as
 * functions or undefined, will return 'null'.
 * @param {*} value The value whose type is to be checked.
 * @returns {string} A string representation of the value's type.
 */


function getJsonType(value) {
  if (value == null) return 'null';

  switch (_typeof(value)) {
    case 'object':
      return Array.isArray(value) ? 'array' : 'object';

    case 'string':
    case 'number':
    case 'boolean':
      return _typeof(value);

    default:
      return 'null';
  }
}
/**
 * Determine whether a string is a valid version 4 UUID.
 * @param {string} id The string to test.
 * @returns {boolean} True if the UUID is valid, and false otherwise.
 */


function isUuidValid(id) {
  return typeof id === 'string' && (0,uuid__WEBPACK_IMPORTED_MODULE_19__["default"])(id) && (0,uuid__WEBPACK_IMPORTED_MODULE_20__["default"])(id) === 4;
}
/**
 * A callback function that will be invoked when a value passes validation.
 * @callback module:data~validationSuccess
 * @param {*} value The value that passed validation. If the allowConversion
 *   option was set, then this will be the converted value.
 * @param {Object} options An object specifying additional information.
 * @param {string} [options.valueName] The name for the data field that the
 *   value corresponds to.
 */

/**
 * A callback function that will be invoked when a value fails validation.
 * @callback module:data~validationError
 * @param {string} errorType A string specifying the type of error that
 *   occurred: 'bad-type' indicates a type error, 'unknown-value' indicates an
 *   unrecognized value, 'not-integer' indicates a value that is not an
 *   integer, 'too-low' indicates a value below the minimum, 'too-high'
 *   indicates a value above the maximum, 'bad-date' indicates an invalid date,
 *   'bad-id' indicates an invalid UUID, and 'failed-predicate' indicates that
 *   the value was rejected by the custom predicate function.
 * @param {*} value The value that failed validation.
 * @param {Object} options An object specifying the criteria that were used to
 *   validate the value.
 * @param {string} [options.valueName] The name for the data field that the
 *   value corresponds to.
 * @param {string} [options.expectedType] The expected type of the value.
 * @param {boolean} [options.allowConversion] Indicates whether conversion from
 *   string was allowed.
 * @param {string[]} [options.expectedValues] An array of acceptable strings
 *   that the value should have matched.
 * @param {boolean} [options.requireUuid] Indicates whether a UUID was
 *   required.
 * @param {boolean} [options.requireInteger] Indicates whether an integer was
 *   required.
 * @param {number} [options.min] The minimum acceptable value.
 * @param {number} [options.max] The maximum acceptable value.
 * @param {Function} [options.customPredicate] The custom predicate function
 *   that was used for validation.
 */

/**
 * An object specifying options for validating a value.
 * @typedef {Object} module:data~validationOptions
 * @property {string} [valueName] An optional name for the data field that the
 *   value is read from or being assigned to. This is passed to the callback
 *   functions but is otherwise ignored.
 * @property {string} [expectedType] The type that the value should have. This
 *   can be one of 'object', 'array', 'string', 'number', 'boolean', 'null', or
 *   'date'.
 * @property {boolean} [allowConversion=false] This property is used in
 *   conjunction with expectedType. If this is set to true, then the value is
 *   allowed to have string type as long as it can be converted to the expected
 *   type. Objects and arrays cannot be converted from string.
 * @property {string[]} [expectedValues] For string values, this property
 *   specifies an optional list of acceptable values. Values that do match an
 *   item in the given array will fail validation.
 * @property {boolean} [requireUuid=false] For string values, if this property
 *   is set to true, then the string must contain a UUID.
 * @property {boolean} [requireInteger=false] For values of number type, if
 *   this property is set to true, then the number must be an integer.
 * @property {number} [min] For numeric values, this property specifies the
 *   minimum acceptable value.
 * @property {number} [max] For numeric values, this property specifies the
 *   maximum acceptable value.
 * @property {Function} [customPredicate] A predicate function that can perform
 *   custom validation. If the value passes all other constraints, then it is
 *   passed to this function. The function should return true or false to
 *   indicate whether the value passes validation.
 * @property {module:data~validationSuccess} [successCallback] A callback
 *   function that will be invoked if the value passes validation.
 * @property {module:data~validationError} [errorCallback] A callback
 *   function that will be invoked if the value fails validation.
 */

/**
 * Validate a value according to a set of criteria.
 * @param {*} value The value to check.
 * @param {module:data~validationOptions} [options={}] An object specifying
 *   validation options.
 * @returns {boolean} True if the value passes validation, and false otherwise.
 */


function validateValue(value) {
  var _options$successCallb, _options$valueName2;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var fail = function fail(errorType) {
    var _options$errorCallbac, _options$valueName, _options$expectedType, _options$min, _options$max;

    (_options$errorCallbac = options.errorCallback) === null || _options$errorCallbac === void 0 ? void 0 : _options$errorCallbac.call(options, errorType, value, {
      valueName: (_options$valueName = options.valueName) !== null && _options$valueName !== void 0 ? _options$valueName : null,
      expectedType: (_options$expectedType = options.expectedType) !== null && _options$expectedType !== void 0 ? _options$expectedType : null,
      allowConversion: options.allowConversion || false,
      expectedValues: options.expectedValues || null,
      requireUuid: options.requireUuid || false,
      requireInteger: options.requireInteger || false,
      min: (_options$min = options.min) !== null && _options$min !== void 0 ? _options$min : null,
      max: (_options$max = options.max) !== null && _options$max !== void 0 ? _options$max : null,
      customPredicate: options.customPredicate || null
    });
  };

  var allowConversion = options.allowConversion || false;
  var convertedValue = value;

  if (options.expectedType) {
    if (options.expectedType !== 'null' && value == null) {
      fail('bad-type');
      return false;
    }

    switch (options.expectedType) {
      case 'string':
        if (typeof value !== 'string') {
          fail('bad-type');
          return false;
        }

        break;

      case 'number':
        if (typeof value !== 'number') {
          if (!allowConversion || typeof value !== 'string') {
            fail('bad-type');
            return false;
          }

          convertedValue = Number(value);
        }

        if (!Number.isFinite(convertedValue)) {
          fail('bad-type');
          return false;
        }

        break;

      case 'boolean':
        if (typeof value !== 'boolean') {
          if (!allowConversion || typeof value !== 'string') {
            fail('bad-type');
            return false;
          }

          switch (value.toLowerCase()) {
            case 'true':
              convertedValue = true;
              break;

            case 'false':
              convertedValue = false;
              break;

            default:
              fail('bad-type');
              return false;
          }
        }

        break;

      case 'null':
        if (value != null) {
          fail('bad-type');
          return false;
        }

        break;

      case 'date':
        if (!(value instanceof Date)) {
          if (!allowConversion || typeof value !== 'string') {
            fail('bad-type');
            return false;
          }

          convertedValue = (0,_dates__WEBPACK_IMPORTED_MODULE_18__.parseIsoDateTime)(value);
        }

        if (!(0,_dates__WEBPACK_IMPORTED_MODULE_18__.isDateValid)(convertedValue)) {
          fail('bad-date');
          return false;
        }

        break;

      default:
        if (getJsonType(value) !== options.expectedType) {
          fail('bad-type');
          return false;
        }

        break;
    }
  }

  if (typeof convertedValue === 'string') {
    if (options.expectedValues && !options.expectedValues.includes(convertedValue)) {
      fail('unknown-value');
      return false;
    }

    if (options.requireUuid && !isUuidValid(convertedValue)) {
      fail('bad-id');
      return false;
    }
  }

  if (typeof convertedValue === 'number') {
    if (options.requireInteger && !Number.isInteger(convertedValue)) {
      fail('not-integer');
      return false;
    }

    if (options.min != null && convertedValue < options.min) {
      fail('too-low');
      return false;
    }

    if (options.max != null && convertedValue > options.max) {
      fail('too-high');
      return false;
    }
  }

  if (options.customPredicate) {
    if (!options.customPredicate(convertedValue)) {
      fail('failed-predicate');
      return false;
    }
  }

  (_options$successCallb = options.successCallback) === null || _options$successCallb === void 0 ? void 0 : _options$successCallb.call(options, convertedValue, {
    valueName: (_options$valueName2 = options.valueName) !== null && _options$valueName2 !== void 0 ? _options$valueName2 : null
  });
  return true;
}



/***/ }),

/***/ "./src/modules/utility/dates.js":
/*!**************************************!*\
  !*** ./src/modules/utility/dates.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatDate": function() { return /* binding */ formatDate; },
/* harmony export */   "formatIsoDate": function() { return /* binding */ formatIsoDate; },
/* harmony export */   "formatIsoDateTime": function() { return /* binding */ formatIsoDateTime; },
/* harmony export */   "getDateFormat": function() { return /* binding */ getDateFormat; },
/* harmony export */   "getDaysInMonth": function() { return /* binding */ getDaysInMonth; },
/* harmony export */   "getMonthIndex": function() { return /* binding */ getMonthIndex; },
/* harmony export */   "getMonthName": function() { return /* binding */ getMonthName; },
/* harmony export */   "getWeekdayIndex": function() { return /* binding */ getWeekdayIndex; },
/* harmony export */   "getWeekdayName": function() { return /* binding */ getWeekdayName; },
/* harmony export */   "isDateValid": function() { return /* binding */ isDateValid; },
/* harmony export */   "parseDate": function() { return /* binding */ parseDate; },
/* harmony export */   "parseIsoDateTime": function() { return /* binding */ parseIsoDateTime; }
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_string_repeat_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.string.repeat.js */ "./node_modules/core-js/modules/es.string.repeat.js");
/* harmony import */ var core_js_modules_es_string_repeat_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_repeat_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.array.find-index.js */ "./node_modules/core-js/modules/es.array.find-index.js");
/* harmony import */ var core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_find_index_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/format/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/formatISO/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/parse/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/isValid/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/esm/parseISO/index.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





















/**
 * Defines utility functions for handling dates and times.
 * @module dates
 */

var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
var MONTHS = [{
  name: 'January',
  maxDays: 31
}, {
  name: 'February',
  maxDays: 29
}, {
  name: 'March',
  maxDays: 31
}, {
  name: 'April',
  maxDays: 30
}, {
  name: 'May',
  maxDays: 31
}, {
  name: 'June',
  maxDays: 30
}, {
  name: 'July',
  maxDays: 31
}, {
  name: 'August',
  maxDays: 31
}, {
  name: 'September',
  maxDays: 30
}, {
  name: 'October',
  maxDays: 31
}, {
  name: 'November',
  maxDays: 30
}, {
  name: 'December',
  maxDays: 31
}];
/**
 * Retrieve the date format for a given locale, or for the default locale.
 * For example, the format string for en-US should look like M/d/yy.
 * @param {string} [locale] The locale whose date format is to be retrieved.
 *   If not given, then the browser's default locale is used.
 * @param {Object} [options={}] An object with formatting options.
 * @param {string} [options.dateStyle=short] The date formatting style:
 *   'short', 'medium', 'long', 'full', or 'none'.
 * @param {string} [options.timeStyle=none] The time formatting style: 'short',
 *   'medium', 'long', 'full', or 'none'.
 * @param {string} [options.tokenStyle=internal] The type of format tokens to
 *   use. Valid values are 'internal' and 'visual'. If set to 'internal' (the
 *   default), then the function uses the same format tokens that the
 *   [date-fns]{@link https://date-fns.org/} library uses. If set to 'visual',
 *   then more human-readable tokens are used: for example, a human-readable
 *   format string might look like 'YYYY-MM-DD hh:mm:ss' or
 *   'MM/DD/YYYY hh:mm a'.
 * @param {boolean|string} [options.fullYear=auto] Indicates whether or not to
 *   use a full four-digit year instead of a two-digit abbreviation. If set to
 *   'auto', then the local default is used.
 * @param {boolean|string} [options.padMonths=auto] Indicates whether or not to
 *   pad single-digit months with a leading zero. If set to 'auto', then the
 *   local default is used.
 * @param {boolean|string} [options.padDays=auto] Indicates whether or not to
 *   pad single-digit days with a leading zero. If set to 'auto', then the
 *   local default is used.
 * @param {boolean|string} [options.padHours=auto] Indicates whether or not to
 *   pad single-digit hours with a leading zero. If set to 'auto', then the
 *   local default is used.
 * @param {boolean|string} [options.padMinutes=auto] Indicates whether or not
 *   to pad single-digit minutes with a leading zero. If set to 'auto', then
 *   the local default is used.
 * @param {boolean|string} [options.padSeconds=auto] Indicates whether or not
 *   to pad single-digit seconds with a leading zero. If set to 'auto', then
 *   the local default is used.
 * @param {number|string} [options.hourSystem=auto] Indicates whether to use a
 *   12- or 24-hour clock. Valid values are 12 for a 12-hour clock, 24 for a
 *   24-hour clock, or the string 'auto' to use the local default.
 * @returns The date format string.
 */

function getDateFormat(locale) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var REFERENCE_DATE = new Date(2020, 0, 1, 14, 5, 5);
  var formatterOptions = {};
  var dateStyle = options.dateStyle || 'short';
  var timeStyle = options.timeStyle || 'none';

  if (dateStyle !== 'none') {
    formatterOptions.dateStyle = dateStyle;
  }

  if (timeStyle !== 'none') {
    formatterOptions.timeStyle = timeStyle;
  }

  if (options.hourSystem && options.hourSystem !== 'auto') {
    formatterOptions.hour12 = options.hourSystem === 12;
  }

  var formatter = new Intl.DateTimeFormat(locale || [], formatterOptions);
  var parts; // Fallback if browser doesn't support formatToParts - use en-US

  if (!('formatToParts' in formatter)) {
    var dateParts = [{
      type: 'month',
      value: '1'
    }, {
      type: 'literal',
      value: '/'
    }, {
      type: 'day',
      value: '1'
    }, {
      type: 'literal',
      value: '/'
    }, {
      type: 'year',
      value: '20'
    }];
    var timeParts = [{
      type: 'hour',
      value: '2'
    }, {
      type: 'literal',
      value: ':'
    }, {
      type: 'minute',
      value: '05'
    }];

    if (formatter.resolvedOptions().hour12) {
      timeParts = timeParts.concat([{
        type: 'literal',
        value: ' '
      }, {
        type: 'dayPeriod',
        value: 'am'
      }]);
    }

    var hasDate = dateStyle !== 'none';
    var hasTime = timeStyle !== 'none';

    if (hasDate && hasTime) {
      parts = [].concat(dateParts, [{
        type: 'literal',
        value: ' '
      }], _toConsumableArray(timeParts));
    } else if (hasTime) {
      parts = timeParts;
    } else {
      parts = dateParts;
    }
  } else {
    // Browser supports formatToParts
    parts = formatter.formatToParts(REFERENCE_DATE);
  }

  return parts.map(function (_ref) {
    var type = _ref.type,
        value = _ref.value;
    var token = '';
    var count = 1;

    switch (type) {
      case 'literal':
        if (options.tokenStyle !== 'visual' && /[A-Za-z]/.test(value)) {
          token = "'".concat(value.replace(/'/g, "''"), "'");
        } else {
          token = value;
        }

        break;

      case 'day':
        token = options.tokenStyle === 'visual' ? 'D' : 'd';

        if (options.padDays === true) {
          count = 2;
        } else if (options.padDays === false) {
          count = 1;
        } else {
          count = value.length;
        }

        break;

      case 'era':
        token = 'G';
        break;

      case 'month':
        token = 'M';

        if (value.length > 3) {
          count = 4;
        } else if (value.length === 3) {
          count = 3;
        } else if (options.padMonths === true) {
          count = 2;
        } else if (options.padMonths === false) {
          count = 1;
        } else {
          count = value.length;
        }

        break;

      case 'relatedYear':
      case 'year':
        token = options.tokenStyle === 'visual' ? 'Y' : 'y';

        if (options.fullYear === true) {
          count = 4;
        } else if (options.fullYear === false) {
          count = 2;
        } else {
          count = value.length;
        }

        break;

      case 'dayPeriod':
        token = 'a';
        break;

      case 'fractionalSecond':
        token = 'S';
        count = value.length;
        break;

      case 'hour':
        if (options.tokenStyle === 'visual') {
          token = 'h';
        } else {
          token = formatter.resolvedOptions().hour12 ? 'h' : 'H';
        }

        if (options.padHours === true) {
          count = 2;
        } else if (options.padHours === false) {
          count = 1;
        } else {
          count = value.length;
        }

        break;

      case 'minute':
        token = 'm';

        if (options.padMinutes === true) {
          count = 2;
        } else if (options.padMinutes === false) {
          count = 1;
        } else {
          count = value.length;
        }

        break;

      case 'second':
        token = 's';

        if (options.padSeconds === true) {
          count = 2;
        } else if (options.padSeconds === false) {
          count = 1;
        } else {
          count = value.length;
        }

        break;

      case 'weekday':
        token = 'e';
        count = 4;
        break;

      default:
        break;
    }

    return token.repeat(count);
  }).join('');
}
/**
 * Format a date into a string representation according to a given pattern.
 * @param {Date} date The date to be formatted.
 * @param {string} [format] The format string to use as a pattern. If not
 *   given, then the format from the browser's default locale is used. The
 *   format tokens are the same as used by the
 *   [date-fns]{@link https://date-fns.org/} library, as specified in the
 *   documentation for the
 *   [format function]{@link https://date-fns.org/v2.28.0/docs/format}.
 * @returns {string} The formatted date string.
 */


function formatDate(date, format) {
  return (0,date_fns__WEBPACK_IMPORTED_MODULE_19__["default"])(date, format !== null && format !== void 0 ? format : getDateFormat());
}
/**
 * Format a date into a string representation in ISO 8601 format. The returned
 * date string will not include a time component. To include the time and time
 * zone, use [formatIsoDateTime]{@link module:dates~formatIsoDateTime}
 * instead.
 * @param {Date} date The date to be formatted.
 * @returns {string} The formatted date string.
 */


function formatIsoDate(date) {
  return (0,date_fns__WEBPACK_IMPORTED_MODULE_20__["default"])(date, {
    representation: 'date'
  });
}
/**
 * Format a date and time into a string representation in ISO 8601 format. The
 * returned date string will include the time and time zone.
 * @param {Date} date The date to be formatted.
 * @returns {string} The formatted date string.
 */


function formatIsoDateTime(date) {
  return (0,date_fns__WEBPACK_IMPORTED_MODULE_20__["default"])(date);
}
/**
 * Parse a date from a string according to a pattern or sequence of patterns.
 * @param {string} dateString The string to parse.
 * @param {string|string[]} [format] The format string or sequence of format
 *   strings to use as patterns. If an array is given, then each string in the
 *   array is attempted to be used as a pattern until a match is found. If no
 *   pattern is given, then the format from the browser's default locale is
 *   used. The format tokens are the same as used by the
 *   [date-fns]{@link https://date-fns.org/} library, as specified in the
 *   documentation for the
 *   [format function]{@link https://date-fns.org/v2.28.0/docs/format}.
 * @returns {Date} The parsed date, or null if the string does not match the
 *   pattern.
 */


function parseDate(dateString, format) {
  var patterns;
  if (typeof format === 'string') patterns = [format];else if (Array.isArray(format) && format.length > 0) patterns = format;else patterns = [getDateFormat()];
  var today = new Date();

  for (var i = 0; i < patterns.length; i += 1) {
    var result = (0,date_fns__WEBPACK_IMPORTED_MODULE_21__["default"])(dateString, patterns[i], today);
    if ((0,date_fns__WEBPACK_IMPORTED_MODULE_22__["default"])(result)) return result;
  }

  return null;
}
/**
 * Parse a date from an ISO 8601 string representation.
 * @param {string} dateString The string to parse.
 * @returns {Date} The parsed date, or null if the string does not match the
 *   pattern.
 */


function parseIsoDateTime(dateString) {
  var result = (0,date_fns__WEBPACK_IMPORTED_MODULE_23__["default"])(dateString);
  return (0,date_fns__WEBPACK_IMPORTED_MODULE_22__["default"])(result) ? result : null;
}
/**
 * Determine whether a Date object holds a valid date.
 * @param {Date} date The date to check.
 * @returns {boolean} True if the date is valid (it is a Date object holding a
 *   valid date), and false otherwise.
 */


function isDateValid(date) {
  return date instanceof Date && (0,date_fns__WEBPACK_IMPORTED_MODULE_22__["default"])(date);
}
/**
 * Get the name of a day of the week.
 * @param {number} dayIndex The index of the weekday as an integer from 0 to 6,
 *   with 0 representing Sunday, 1 representing Monday, and so on.
 * @returns {string} The English name of the weekday.
 */


function getWeekdayName(dayIndex) {
  return WEEKDAYS[dayIndex] || 'Unknown';
}
/**
 * Get the index of the day of a week, with Sunday corresponding to 0.
 * @param {string} day The name of the weekday.
 * @returns {?number} The index of the weekday as an integer from 0 to 6, with
 *   0 representing Sunday, 1 representing Monday, and so on. If the weekday is
 *   not recognized, null is returned.
 */


function getWeekdayIndex(day) {
  var dayLower = day.toLowerCase();
  var index = WEEKDAYS.findIndex(function (elem) {
    return elem.toLowerCase() === dayLower;
  });
  if (index < 0) return null;
  return index;
}
/**
 * Get the name of a month.
 * @param {number} monthIndex The index of the month as an integer from 0 to
 *   11, with 0 representing January, 1 representing February, and so on.
 * @returns {string} The English name of the month.
 */


function getMonthName(monthIndex) {
  var _MONTHS$monthIndex;

  return ((_MONTHS$monthIndex = MONTHS[monthIndex]) === null || _MONTHS$monthIndex === void 0 ? void 0 : _MONTHS$monthIndex.name) || 'Unknown';
}
/**
 * Get the index of a month of the year, with January corresponding to 0.
 * @param {string} month The name of the month.
 * @returns {?number} The index of the month as an integer from 0 to 11, with 0
 *   representing January, 1 representing February, and so on. If the month is
 *   not recognized, null is returned.
 */


function getMonthIndex(month) {
  var monthLower = month.toLowerCase();
  var index = MONTHS.findIndex(function (elem) {
    return elem.name.toLowerCase() === monthLower;
  });
  if (index < 0) return null;
  return index;
}
/**
 * Get the (maximum) number of days in a particular month.
 * @param {number} monthIndex The index of the month as an integer from 0 to
 *   11, with 0 representing January, 1 representing February, and so on.
 * @returns {number} The maximum number of days in the month. For example, the
 *   value returned for February will be 29, not 28. Returns a value of 0 if
 *   an invalid index is given.
 */


function getDaysInMonth(monthIndex) {
  var _MONTHS$monthIndex$ma, _MONTHS$monthIndex2;

  return (_MONTHS$monthIndex$ma = (_MONTHS$monthIndex2 = MONTHS[monthIndex]) === null || _MONTHS$monthIndex2 === void 0 ? void 0 : _MONTHS$monthIndex2.maxDays) !== null && _MONTHS$monthIndex$ma !== void 0 ? _MONTHS$monthIndex$ma : 0;
}



/***/ }),

/***/ "./src/modules/utility/dom.js":
/*!************************************!*\
  !*** ./src/modules/utility/dom.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDateInputField": function() { return /* binding */ createDateInputField; },
/* harmony export */   "createFormControl": function() { return /* binding */ createFormControl; },
/* harmony export */   "createImageButton": function() { return /* binding */ createImageButton; },
/* harmony export */   "createParagraphs": function() { return /* binding */ createParagraphs; },
/* harmony export */   "createToggleButton": function() { return /* binding */ createToggleButton; }
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");
/* harmony import */ var core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_test_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");
/* harmony import */ var core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_error_cause_js__WEBPACK_IMPORTED_MODULE_15__);

















function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Defines functions for manipulating the DOM.
 * @module dom
 */

/**
 * Specifies options for creating input controls in a form.
 * @typedef {Object} module:dom~formControlOptions
 * @property {string} [type=text] The type of input. For most text or numeric
 *   forms of input, this value is used as the 'type' attribute on an 'input'
 *   element. Setting this to 'select' indicates that a 'select' element should
 *   be created. Setting this to 'textarea' indicates that a 'textarea' element
 *   should be created.
 * @property {string} [id] The identifier for the input element.
 * @property {string} [name] The name of the input element, used in form
 *   submission and for grouping radio buttons.
 * @property {string} [title] The title of the input element, usually displayed
 *   by the browser as a tooltip.
 * @property {string} [value] The initial value of the input element, or a
 *   value identifying a checkbox or radio button option. This property is
 *   ignored for the 'select' input type.
 * @property {string} [placeholder] A hint string used as a placeholder for
 *   text-based input elements.
 * @property {string[]} [classList=[]] An array of class names to apply to the
 *   input element.
 * @property {boolean} [checked=false] If true, indicates that the control
 *   should be checked by default. This applies only to the 'checkbox' and
 *   'radio' input types.
 * @property {boolean} [required=false] If true, indicates that the control
 *   is a required field.
 * @property {string} [pattern] Specifies a regular expression that the input
 *   control's value should match in order to be considered valid.
 * @property {number|string} [min] Sets the minimum acceptable value for a
 *   numeric input field.
 * @property {number|string} [max] Sets the maximum acceptable value for a
 *   numeric input field.
 * @property {number|string} [step] Sets the acceptable increments for values
 *   in a numeric input field. This can be a number or the string 'any'.
 * @property {number} [minLength] Sets the minimum acceptable length for an
 *   input field.
 * @property {number} [maxLength] Sets the maximum acceptable length for an
 *   input field.
 * @property {string|string[]} [accept] Sets the acceptable file types for a
 *   file input field. Can be a string containing a comma-separated list of
 *   file extensions and/or media types, or an array of strings each specifying
 *   one file extension or media type.
 * @property {Object} [label] An object specifying information about the label
 *   for the input element.
 * @property {string} [label.value] The text content of the label that should
 *   be displayed on the page.
 * @property {string} [label.placement=auto] Determines whether the label
 *   should be placed before or after the input control. Valid values are
 *   'before', 'after', and 'auto' (the default). If set to 'auto', then the
 *   label is placed after the element if the input type is 'radio' or
 *   'checkbox', and before the element in all other cases.
 * @property {string[]} [label.classList=[]] An array of class names to apply
 *   to the label element.
 * @property {Object} [size] An object containing size information for the
 *   input element. This is only used for the 'textarea' input type.
 * @property {number} [size.rows] The number of rows that a textarea should
 *   have.
 * @property {number} [size.cols] The number of columns that a textarea should
 *   have.
 * @property {Object} [container] An object containing information about the
 *   container holding the input element and its label.
 * @property {string} [container.id] The identifier for the container.
 * @property {string[]} [container.classList=[]] An array of class names to
 *   apply to the container.
 * @property {boolean} [container.inline=false] If set to true, indicates that
 *   the container should be an inline element rather than a block element.
 * @property {Object[]} [menuItems] An array of objects containing information
 *   about options for a select control. This property is ignored unless the
 *   input type is 'select'.
 * @property {string} [menuItems.value] The form value identifying the item.
 * @property {string} menuItems.label The label that will be displayed for
 *   the item.
 * @property {boolean} [menuItems.selected=false] If true, indicates that the
 *   item should be selected by default.
 */

/**
 * Create an input control in a form, optionally including a label.
 * @param {module:dom~formControlOptions} [options={}] An object specifying
 *   options for the input element.
 * @returns {HTMLElement} The container holding the input element and its
 *   label. If no label and no container id were specified, then the form
 *   element is not placed in a container and is instead returned directly.
 */
function createFormControl() {
  var _options$type, _input$classList;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var type = ((_options$type = options.type) === null || _options$type === void 0 ? void 0 : _options$type.toLowerCase()) || 'text';
  var container = null;

  if (options.label || options.container) {
    var _options$container, _options$container2, _options$container3;

    var containerTag = (_options$container = options.container) !== null && _options$container !== void 0 && _options$container.inline ? 'span' : 'div';
    container = document.createElement(containerTag);
    if ((_options$container2 = options.container) !== null && _options$container2 !== void 0 && _options$container2.id) container.id = options.container.id;

    if ((_options$container3 = options.container) !== null && _options$container3 !== void 0 && _options$container3.classList) {
      var _container$classList;

      (_container$classList = container.classList).add.apply(_container$classList, _toConsumableArray(options.container.classList));
    }
  }

  var label = null;

  if (options.label) {
    label = document.createElement('label');
    label.textContent = options.label.value || '';

    if (options.label.classList) {
      var _label$classList;

      (_label$classList = label.classList).add.apply(_label$classList, _toConsumableArray(options.label.classList));
    }

    if (options.id) label.htmlFor = options.id;
  }

  var input = null;

  switch (type) {
    case 'select':
      input = document.createElement('select');

      if (options.menuItems) {
        options.menuItems.forEach(function (item) {
          var opt = document.createElement('option');
          if (item.value) opt.value = item.value;

          if (item.selected) {
            opt.defaultSelected = true;
            opt.selected = true;
          }

          opt.textContent = item.label;
          input.appendChild(opt);
        });
      }

      break;

    case 'textarea':
      input = document.createElement('textarea');
      input.textContent = options.value || '';

      if (options.size) {
        if (options.size.rows) input.rows = options.size.rows;
        if (options.size.cols) input.cols = options.size.cols;
      }

      break;

    default:
      input = document.createElement('input');
      input.type = type;

      if (options.value) {
        input.defaultValue = options.value;
        input.value = options.value;
      }

      if (options.pattern) input.pattern = options.pattern;
      if (options.min != null) input.min = options.min;
      if (options.max != null) input.max = options.max;
      if (options.step != null) input.step = options.step;
      break;
  }

  if (options.id) input.id = options.id;
  if (options.name) input.name = options.name;
  if (options.title) input.title = options.title;
  if (options.classList) (_input$classList = input.classList).add.apply(_input$classList, _toConsumableArray(options.classList));
  if (options.required) input.required = true;

  if (type !== 'select' && options.minLength != null) {
    input.minLength = options.minLength;
  }

  if (type !== 'select' && options.maxLength != null) {
    input.maxLength = options.maxLength;
  }

  if (type === 'file' && options.accept) {
    if (Array.isArray(options.accept)) input.accept = options.accept.join(',');else input.accept = options.accept;
  }

  var checkable = type === 'checkbox' || type === 'radio';

  if (checkable && options.checked) {
    input.defaultChecked = true;
    input.checked = true;
  }

  if (options.placeholder && !checkable && type !== 'select') {
    input.placeholder = options.placeholder;
  }

  if (label) {
    var placement = options.label.placement || 'auto';
    if (placement === 'auto') placement = checkable ? 'after' : 'before';

    if (placement === 'after') {
      container.appendChild(input);
      container.appendChild(label);
    } else {
      container.appendChild(label);
      container.appendChild(input);
    }

    return container;
  }

  if (container) {
    container.appendChild(input);
    return container;
  }

  return input;
}
/**
 * Specifies options for creating a date input field in a form.
 * @typedef {Object} module:dom~dateInputOptions
 * @property {string} [id] The identifier for the text input element.
 * @property {string} [name] The name of the text input element.
 * @property {string} [title] The title of the text input element, usually
 *   displayed by the browser as a tooltip.
 * @property {string} [value] The initial value of the text input element.
 * @property {string} [placeholder] A hint string used as a placeholder for the
 *   text input element.
 * @property {string[]} [classList=[]] An array of class names to apply to the
 *   text input element.
 * @property {boolean} [required=false] If true, indicates that the input
 *   control is a required field.
 * @property {string} [pattern] Specifies a regular expression that the input
 *   control's value should match in order to be considered valid.
 * @property {number} [minLength] Sets the minimum acceptable length for the
 *   text input field.
 * @property {number} [maxLength] Sets the maximum acceptable length for the
 *   text input field.
 * @property {Object} [label] An object specifying information about the label
 *   for the input field.
 * @property {string} [label.value] The text content of the label that should
 *   be displayed on the page.
 * @property {string[]} [label.classList=[]] An array of class names to apply
 *   to the label element.
 * @property {Object} [container] An object containing information about the
 *   container holding the input field.
 * @property {string} [container.id] The identifier for the container.
 * @property {string[]} [container.classList=[]] An array of class names to
 *   apply to the container.
 * @property {boolean} [container.inline=false] If set to true, indicates that
 *   the container should be an inline element rather than a block element.
 * @property {Object} [button] An object containing information about the
 *   button element.
 * @property {string} [button.id] The identifier for the button.
 * @property {string} [button.name] The form name for the button.
 * @property {string} [button.title] The title for the button, usually
 *   displayed by the browser as a tooltip.
 * @property {string} [button.label=Choose...] The label to be displayed in the
 *   button.
 * @property {string[]} [button.classList] An array of class names to apply to
 *   the button element.
 * @property {Function} [button.callback] A callback function to be invoked
 *   when the button is clicked or activated. The function will be passed a
 *   reference to the text input element as an argument.
 */

/**
 * Create an input field for entering dates. This will create a text input
 * control together with a button that can invoke a callback allowing for the
 * caller to open a date picker.
 * @param {module:dom~dateInputOptions} [options={}] An object specifying
 *   options for the input field.
 * @returns {HTMLElement} The container holding the input elements and label.
 */


function createDateInputField() {
  var _options$container4, _options$container5, _options$container6, _options$id, _options$name, _options$title, _options$value, _options$placeholder, _options$required, _options$pattern, _options$minLength, _options$maxLength, _options$button, _options$button2, _options$button3, _options$button4, _options$button5, _options$button6;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var containerTag = (_options$container4 = options.container) !== null && _options$container4 !== void 0 && _options$container4.inline ? 'span' : 'div';
  var container = document.createElement(containerTag);
  if ((_options$container5 = options.container) !== null && _options$container5 !== void 0 && _options$container5.id) container.id = options.container.id;

  if ((_options$container6 = options.container) !== null && _options$container6 !== void 0 && _options$container6.classList) {
    var _container$classList2;

    (_container$classList2 = container.classList).add.apply(_container$classList2, _toConsumableArray(options.container.classList));
  }

  if (options.label) {
    var label = document.createElement('label');
    if (options.id) label.htmlFor = options.id;

    if (options.label.classList) {
      var _label$classList2;

      (_label$classList2 = label.classList).add.apply(_label$classList2, _toConsumableArray(options.label.classList));
    }

    label.textContent = options.label.value || '';
    container.appendChild(label);
  }

  container.appendChild(createFormControl({
    type: 'text',
    id: (_options$id = options.id) !== null && _options$id !== void 0 ? _options$id : null,
    name: (_options$name = options.name) !== null && _options$name !== void 0 ? _options$name : null,
    title: (_options$title = options.title) !== null && _options$title !== void 0 ? _options$title : null,
    value: (_options$value = options.value) !== null && _options$value !== void 0 ? _options$value : null,
    placeholder: (_options$placeholder = options.placeholder) !== null && _options$placeholder !== void 0 ? _options$placeholder : null,
    classList: options.classList || null,
    required: (_options$required = options.required) !== null && _options$required !== void 0 ? _options$required : false,
    pattern: (_options$pattern = options.pattern) !== null && _options$pattern !== void 0 ? _options$pattern : null,
    minLength: (_options$minLength = options.minLength) !== null && _options$minLength !== void 0 ? _options$minLength : null,
    maxLength: (_options$maxLength = options.maxLength) !== null && _options$maxLength !== void 0 ? _options$maxLength : null
  }));
  var button = document.createElement('button');
  if ((_options$button = options.button) !== null && _options$button !== void 0 && _options$button.id) button.id = options.button.id;
  if ((_options$button2 = options.button) !== null && _options$button2 !== void 0 && _options$button2.name) button.name = options.button.name;
  if ((_options$button3 = options.button) !== null && _options$button3 !== void 0 && _options$button3.title) button.title = options.button.title;

  if ((_options$button4 = options.button) !== null && _options$button4 !== void 0 && _options$button4.classList) {
    var _button$classList;

    (_button$classList = button.classList).add.apply(_button$classList, _toConsumableArray(options.button.classList));
  }

  button.textContent = ((_options$button5 = options.button) === null || _options$button5 === void 0 ? void 0 : _options$button5.label) || 'Choose...';

  if ((_options$button6 = options.button) !== null && _options$button6 !== void 0 && _options$button6.callback) {
    var input = container.querySelector('input');
    button.addEventListener('click', function () {
      return options.button.callback(input);
    });
  }

  container.appendChild(button);
  return container;
}
/**
 * Specifies options for creating an image button.
 * @typedef {Object} module:dom~imageButtonOptions
 * @property {string} [id] The identifier for the button.
 * @property {string} [title] The title of the button, usually displayed by the
 *   browser as a tooltip.
 * @property {string[]} [classList] An array of class names to apply to the
 *   button.
 * @property {string} [altText] The alternative text description of the image,
 *   used for accessibility purposes or as a fallback. If not provided, then an
 *   empty alt attribute is used.
 * @property {number} [width] The intrinsic width of the image in pixels.
 * @property {number} [height] The intrinsic height of the image in pixels.
 * @property {string} [imgId] The identifier for the image.
 * @property {string[]} [imgClassList] An array of class names to apply to the
 *   image.
 * @property {Function} [callback] A callback function that will be invoked
 *   the button is clicked. The function will receive the standard Event object
 *   as an argument when invoked.
 */

/**
 * Create a button element containing an image.
 * @param {string} source The source URL of the image to display.
 * @param {module:dom~imageButtonOptions} [options={}] An object holding
 *   configuration options controlling the button creation.
 * @returns {HTMLElement} The newly-created button element.
 */


function createImageButton(source) {
  var _button$classList2, _options$altText, _imageElem$classList;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var button = document.createElement('button');
  if (options.id) button.id = options.id;
  if (options.title) button.title = options.title;
  if (options.classList) (_button$classList2 = button.classList).add.apply(_button$classList2, _toConsumableArray(options.classList));
  var imageElem = new Image();
  imageElem.src = source;
  imageElem.alt = (_options$altText = options.altText) !== null && _options$altText !== void 0 ? _options$altText : '';
  if (options.width != null) imageElem.width = options.width;
  if (options.height != null) imageElem.height = options.height;
  if (options.imgId) imageElem.id = options.imgId;
  if (options.imgClassList) (_imageElem$classList = imageElem.classList).add.apply(_imageElem$classList, _toConsumableArray(options.imgClassList));
  button.appendChild(imageElem);
  if (options.callback) button.addEventListener('click', options.callback);
  return button;
}
/**
 * Create a button that can be toggled on and off.
 * @param {string} label The button label.
 * @param {Object} [options={}] An object holding configuration options
 *   controlling the button creation.
 * @param {string} [options.id] The identifier for the button.
 * @param {string} [options.name] The form name for the button.
 * @param {string} [options.title] The title of the button, usually displayed
 *   by the browser as a tooltip.
 * @param {string} [options.value] The form value associated with the button.
 * @param {boolean} [options.defaultActive=false] Sets the initial state of the
 *   button. If set to true, then the button will be active (on) by default.
 * @param {string[]} [options.classList] An array of class names to apply to
 *   the button. If not specified, the button will receive the 'toggle-button'
 *   class.
 * @param {string} [options.activeClass=active] The CSS class to apply when
 *   the button is active (on).
 * @returns {HTMLElement} The newly-created button element.
 */


function createToggleButton(label) {
  var _button$classList3;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var button = document.createElement('button');
  if (options.id) button.id = options.id;
  if (options.name) button.name = options.name;
  if (options.title) button.title = options.title;
  if (options.value) button.value = options.value;
  if (options.classList) (_button$classList3 = button.classList).add.apply(_button$classList3, _toConsumableArray(options.classList));else button.classList.add('toggle-button');
  button.textContent = label;
  var activeClass = options.activeClass || 'active';
  if (options.defaultActive) button.classList.add(activeClass);
  button.addEventListener('click', function () {
    return button.classList.toggle(activeClass);
  });
  return button;
}
/**
 * Describes a paragraph fragment.
 * @typedef {Object|string} module:dom~paragraphFragment
 * @property {string} [content] The text content that is to be displayed in the
 *   paragraph.
 * @property {string} [url] If provided, the fragment will be a hyperlink
 *   pointing to the given URL.
 * @property {string} [target] If a URL was provided, this property determines
 *   the value of the "target" attribute for the anchor tag. That is, it
 *   determines where to display the linked URL.
 */

/**
 * Describes a paragraph element and its content.
 * @typedef {Object|string|string[]} module:dom~paragraph
 * @property {module:dom~paragraphFragment|module:dom~paragraphFragment[]} [content]
 *   The content of the paragraph.
 * @property {string} [id] The identifier for the paragraph element.
 * @property {string[]} [classList=[]] An array of class names to apply to the
 *   paragraph element.
 */

/**
 * Specifies options for creating paragraphs.
 * @typedef {Object} module:dom~paragraphOptions
 * @property {string[]} [classList=[]] An array of class names to apply to each
 *   paragraph element.
 * @property {Object} [container] An object containing information about the
 *   container holding the paragraphs.
 * @property {string} [container.id] The identifier for the container.
 * @property {string[]} [container.classList=[]] An array of class names to
 *   apply to the container.
 */

/**
 * Create a series of paragraph elements.
 * @param {module:dom~paragraph|module:dom~paragraph[]} paragraphs Describes
 *   the paragraph or paragraphs to be created.
 * @param {module:dom~paragraphOptions} [options={}] An object holding
 *   configuration options controlling the paragraph creation.
 * @returns {HTMLElement} A container holding the newly-created paragraph
 *   elements.
 */


function createParagraphs(paragraphs) {
  var _options$container7, _options$container8;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var container = document.createElement('div');
  if (options !== null && options !== void 0 && (_options$container7 = options.container) !== null && _options$container7 !== void 0 && _options$container7.id) container.id = options.container.id;

  if (options !== null && options !== void 0 && (_options$container8 = options.container) !== null && _options$container8 !== void 0 && _options$container8.classList) {
    var _container$classList3;

    (_container$classList3 = container.classList).add.apply(_container$classList3, _toConsumableArray(options.container.classList));
  }

  var pArray = Array.isArray(paragraphs) ? paragraphs : [paragraphs];
  pArray.forEach(function (paragraph) {
    var _pElem$classList;

    var pElem = document.createElement('p');
    if (options !== null && options !== void 0 && options.classList) (_pElem$classList = pElem.classList).add.apply(_pElem$classList, _toConsumableArray(options.classList));
    var fragments = null;

    if (Array.isArray(paragraph)) {
      // Convert array of strings to array of fragment objects
      fragments = paragraph.map(function (fragment) {
        return {
          content: fragment
        };
      });
    } else if (typeof paragraph === 'string') {
      fragments = [{
        content: paragraph
      }];
    } else if (paragraph.content == null) {
      fragments = [];
    } else if (Array.isArray(paragraph.content)) {
      fragments = paragraph.content.map(function (fragment) {
        if (typeof fragment === 'string') return {
          content: fragment
        };
        return fragment;
      });
    } else {
      var _pElem$classList2;

      // The paragraph is an object
      if (paragraph.id) pElem.id = paragraph.id;
      if (paragraph.classList) (_pElem$classList2 = pElem.classList).add.apply(_pElem$classList2, _toConsumableArray(paragraph.classList));

      if (typeof paragraph.content === 'string') {
        fragments = [{
          content: paragraph.content
        }];
      } else {
        fragments = [paragraph.content];
      }
    }

    fragments.forEach(function (fragment) {
      var node = null;

      if (fragment.url != null) {
        var _fragment$content;

        node = document.createElement('a');
        node.textContent = (_fragment$content = fragment.content) !== null && _fragment$content !== void 0 ? _fragment$content : '';
        node.href = fragment.url;
        if (fragment.target != null) node.target = fragment.target;
      } else {
        var _fragment$content2;

        node = document.createTextNode((_fragment$content2 = fragment.content) !== null && _fragment$content2 !== void 0 ? _fragment$content2 : '');
      }

      pElem.appendChild(node);
    });
    container.appendChild(pElem);
  });
  return container;
}



/***/ }),

/***/ "./src/modules/utility/storage.js":
/*!****************************************!*\
  !*** ./src/modules/utility/storage.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "arrayToCsvRecord": function() { return /* binding */ arrayToCsvRecord; },
/* harmony export */   "clearData": function() { return /* binding */ clearData; },
/* harmony export */   "forEachDataItem": function() { return /* binding */ forEachDataItem; },
/* harmony export */   "generateFile": function() { return /* binding */ generateFile; },
/* harmony export */   "getFileExtension": function() { return /* binding */ getFileExtension; },
/* harmony export */   "isLocalStorageSupported": function() { return /* binding */ isLocalStorageSupported; },
/* harmony export */   "parseCsv": function() { return /* binding */ parseCsv; },
/* harmony export */   "readFile": function() { return /* binding */ readFile; },
/* harmony export */   "removeData": function() { return /* binding */ removeData; },
/* harmony export */   "retrieveData": function() { return /* binding */ retrieveData; },
/* harmony export */   "storeData": function() { return /* binding */ storeData; }
/* harmony export */ });
/* harmony import */ var core_js_modules_web_dom_exception_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/web.dom-exception.constructor.js */ "./node_modules/core-js/modules/web.dom-exception.constructor.js");
/* harmony import */ var core_js_modules_web_dom_exception_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_exception_constructor_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-exception.stack.js */ "./node_modules/core-js/modules/web.dom-exception.stack.js");
/* harmony import */ var core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_exception_stack_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_exception_to_string_tag_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-exception.to-string-tag.js */ "./node_modules/core-js/modules/web.dom-exception.to-string-tag.js");
/* harmony import */ var core_js_modules_web_dom_exception_to_string_tag_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_exception_to_string_tag_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.json.stringify.js */ "./node_modules/core-js/modules/es.json.stringify.js");
/* harmony import */ var core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_json_stringify_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.string.starts-with.js */ "./node_modules/core-js/modules/es.string.starts-with.js");
/* harmony import */ var core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_starts_with_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_web_url_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/web.url.js */ "./node_modules/core-js/modules/web.url.js");
/* harmony import */ var core_js_modules_web_url_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/web.url-search-params.js */ "./node_modules/core-js/modules/web.url-search-params.js");
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
/* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_16__);


















/**
 * Defines storage-related utility functions.
 * @module storage
 */
var storageSupported = null;
/**
 * Determine whether or not local storage is supported and enabled in the
 * browser. The check is only performed once: subsequent calls will immediately
 * return the same value.
 * @returns {boolean} True if local storage is supported and enabled, and false
 *   otherwise.
 */

function isLocalStorageSupported() {
  if (storageSupported !== null) return storageSupported;
  var storage;

  try {
    storage = window.localStorage;
    var testItem = '__storage-test';
    storage.setItem(testItem, testItem);
    storage.removeItem(testItem);
    storageSupported = true;
  } catch (e) {
    storageSupported = e instanceof DOMException && (e.code === 22 || e.code === 1014 || e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && storage && storage.length !== 0;
  }

  return storageSupported;
}
/**
 * Store data in the browser's local storage, if available. This function will
 * associate the given key with the given value in storage. The value is first
 * converted to JSON format before being stored.
 * @param {?string} prefix A prefix to use for the key name to avoid clashes
 *   with other web apps hosted on the same origin. If given, the actual key
 *   used will have the form 'prefix.key'.
 * @param {string} key The key to create or update.
 * @param {*} value The value to be associated with the key.
 * @returns {boolean} True if the data was successfully stored, and false
 *   otherwise. Possible reasons for returning false include local storage
 *   being unsupported or disabled, or storage limits being exceeded.
 */


function storeData(prefix, key, value) {
  if (!isLocalStorageSupported()) return false;
  var fullKey = prefix ? "".concat(prefix, ".").concat(key) : key;

  try {
    window.localStorage.setItem(fullKey, JSON.stringify(value));
    return true;
  } catch (_unused) {
    return false;
  }
}
/**
 * Retrieve data from the browser's local storage, if available. This function
 * will return the data associated with the given key. The data is converted
 * from JSON format and the resulting value or object is used as the return
 * value. If the key does not exist or if local storage is not available, null
 * is returned.
 * @param {?string} prefix The prefix for the key name whose value is to be
 *   retrieved.
 * @param {string} key The key whose value is to be retrieved.
 * @returns {*} The data associated with the key, or null if not found.
 */


function retrieveData(prefix, key) {
  if (!isLocalStorageSupported()) return null;
  var fullKey = prefix ? "".concat(prefix, ".").concat(key) : key;

  try {
    return JSON.parse(window.localStorage.getItem(fullKey));
  } catch (_unused2) {
    return null;
  }
}
/**
 * Remove data from the browser's local storage. If it exists, the given key
 * and its associated data will be removed from storage.
 * @param {?string} prefix The prefix for the key to be removed.
 * @param {string} key The key to be removed.
 * @returns {boolean} True if the key was found and removed. If the key was not
 *   found or if local storage is unavailable, returns false.
 */


function removeData(prefix, key) {
  if (!isLocalStorageSupported()) return false;
  window.localStorage.removeItem(prefix ? "".concat(prefix, ".").concat(key) : key);
  return true;
}
/**
 * Execute the provided function on each item in the browser's local storage
 * area, or on each item having a given prefix.
 * @param {?string} prefix The prefix for the keys to iterate over. If not
 *   given, then all items will be iterated over.
 * @param {Function} callback A callback function that will be called for each
 *   matching storage item. The function will be passed the key (by default
 *   without the prefix), the value (unless using the noValue option), and the
 *   index.
 * @param {Object} [options={}] An object holding additional options for the
 *   callback function.
 * @param {boolean} [options.includePrefix] If set to true, then the callback
 *   function will receive the full key, with the prefix included.
 * @param {boolean} [options.noValue] If set to true, then only the key and
 *   index for the data item will be passed to the callback function. By not
 *   retrieving and deserializing every value, this can save time if the caller
 *   does not need every value.
 */


function forEachDataItem(prefix, callback) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (isLocalStorageSupported()) {
    var storage = window.localStorage;

    for (var i = 0; i < storage.length; i += 1) {
      var key = storage.key(i);

      if (!prefix || key.startsWith("".concat(prefix, "."))) {
        var localKey = prefix && !options.includePrefix ? key.substring(prefix.length + 1) : key;
        var value = options.noValue ? null : retrieveData(null, key);
        if (value) callback(localKey, value, i);else callback(localKey, i);
      }
    }
  }
}
/**
 * Clear all data from the browser's local storage. If local storage is
 * unsupported or disabled, nothing happens.
 * @param {?string} prefix The prefix for the keys to be removed. If not given,
 *   then everything stored in local storage will be removed.
 */


function clearData(prefix) {
  if (isLocalStorageSupported()) {
    var storage = window.localStorage;

    if (prefix) {
      var keys = [];
      forEachDataItem(prefix, function (key) {
        return keys.push(key);
      }, {
        includePrefix: true,
        noValue: true
      });
      keys.forEach(function (key) {
        return removeData(null, key);
      });
    } else {
      storage.clear();
    }
  }
}
/**
 * Generate a text file, and present it to the user as a download.
 * @param {string} content The text data to store in the file.
 * @param {string} filename The default file name.
 * @param {string} [type=text/plain] The Internet media type for the file. For
 *   example, 'application/json' would indicate a JSON file, and 'text/csv'
 *   would indicate a file containing comma-separated values.
 */


function generateFile(content, filename) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text/plain';
  var data = new Blob([content], {
    type: type
  });
  var url = URL.createObjectURL(data);
  var linkElem = document.createElement('a');
  linkElem.href = url;
  linkElem.download = filename;
  linkElem.click();
  setTimeout(function () {
    return URL.revokeObjectURL(url);
  }, 0);
}
/**
 * Read the contents of a text file. The file contents are passed to the
 * specified callback function once the read operation is complete.
 * @param {Blob} file The file to be read.
 * @param {Function} callback The callback function that will receive the file
 *   contents. If an error occurs, the callback function will be invoked with a
 *   null argument instead.
 */


function readFile(file, callback) {
  var reader = new FileReader();
  reader.addEventListener('load', function () {
    return callback(reader.result);
  });
  reader.addEventListener('error', function () {
    return callback(null);
  });
  reader.addEventListener('abort', function () {
    return callback(null);
  });
  reader.readAsText(file);
}
/**
 * Convert an array of strings to comma-separated values (CSV format, as
 * described by the
 * [RFC 4180]{@link https://datatracker.ietf.org/doc/html/rfc4180}
 * specification). This function will create one CSV record, which can then be
 * combined with other records to form a complete CSV file.
 * @param {string[]} data An array of strings specifying the values for the
 *   fields in the record.
 * @param {Object} [options={}] An object specifying options for the
 *   conversion.
 * @param {string} [options.newlineSequence] The character sequence to use for
 *   newlines. If not provided, a carriage return/line feed pair (CRLF) is
 *   used. All newline characters within each field will be replaced by this
 *   sequence.
 * @returns {string} The record in CSV format. The returned string is not
 *   terminated by a newline, but may contain quoted newlines within the field
 *   data.
 */


function arrayToCsvRecord(data) {
  var _options$newlineSeque;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var newlineSequence = (_options$newlineSeque = options.newlineSequence) !== null && _options$newlineSeque !== void 0 ? _options$newlineSeque : '\r\n';
  var fields = [];
  data.forEach(function (value) {
    var needQuotes = false;
    var result = value.replace(/,|"|\r\n|\n|\r/g, function (match) {
      needQuotes = true;

      switch (match) {
        case '"':
          return '""';

        case '\r\n':
        case '\n':
          return newlineSequence;

        default:
          return match;
      }
    });
    fields.push(needQuotes ? "\"".concat(result, "\"") : result);
  });
  return fields.join(',');
}
/**
 * Convert data in comma-separated value (CSV) format into an array of arrays
 * of strings. Each data record is stored as an array of strings within the
 * outer array, with each string corresponding to a field in the record. Any
 * newline sequences (CRLF, LF, or CR) are converted to linefeed (LF)
 * characters.
 * @param {string} data The data in CSV format.
 * @returns {string[][]} An array of string arrays. Each inner array contains
 *   the fields for one record.
 */


function parseCsv(data) {
  var result = [];
  var currentRow = [];
  var currentField = '';

  var commitField = function commitField() {
    currentRow.push(currentField);
    currentField = '';
  };

  var commitRow = function commitRow() {
    result.push(currentRow);
    currentRow = [];
  };

  var quoted = false;

  for (var pos = 0; pos < data.length; pos += 1) {
    switch (data[pos]) {
      case '"':
        if (!quoted) {
          quoted = true;
        } else if (pos + 1 < data.length && data[pos + 1] === '"') {
          // This is a double double quote, so convert it and move to next char
          currentField += '"';
          pos += 1;
        } else {
          // Not a double double quote, so the quoting ends here
          quoted = false;
        }

        break;

      case '\r':
      case '\n':
        // Handle CRLF sequence
        if (data[pos] === '\r' && pos + 1 < data.length && data[pos + 1] === '\n') {
          pos += 1;
        }

        if (quoted) {
          currentField += '\n';
        } else {
          commitField();
          commitRow();
        }

        break;

      case ',':
        if (quoted) currentField += ',';else commitField();
        break;

      default:
        currentField += data[pos];
        break;
    }
  } // Commit last entry if last character was not a newline


  if (data.length > 0) {
    var lastChar = data[data.length - 1];

    if (lastChar !== '\r' && lastChar !== '\n') {
      commitField();
      commitRow();
    }
  }

  return result;
}
/**
 * Extract the extension from a file name. The extension, for the purposes of
 * this function, is considered to be the portion of the filename starting from
 * (and including) the last period in the name and extending to the end of the
 * name. If there is no period in the name, or if the only period is located at
 * the very start of the name (as seen with dotfiles on Unix systems, for
 * example), then the file is considered to have no extension.
 * @param {string} filename The name of the file.
 * @returns {string} The file's extension, including the period. If the file
 *   has no extension, an empty string is returned.
 */


function getFileExtension(filename) {
  var index = filename.lastIndexOf('.');
  return index > 0 ? filename.substring(index) : '';
}



/***/ }),

/***/ "./src/shims/classList.js":
/*!********************************!*\
  !*** ./src/shims/classList.js ***!
  \********************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");

__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");

__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");

__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");

__webpack_require__(/*! core-js/modules/web.dom-exception.constructor.js */ "./node_modules/core-js/modules/web.dom-exception.constructor.js");

__webpack_require__(/*! core-js/modules/web.dom-exception.stack.js */ "./node_modules/core-js/modules/web.dom-exception.stack.js");

__webpack_require__(/*! core-js/modules/web.dom-exception.to-string-tag.js */ "./node_modules/core-js/modules/web.dom-exception.to-string-tag.js");

__webpack_require__(/*! core-js/modules/es.regexp.test.js */ "./node_modules/core-js/modules/es.regexp.test.js");

__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");

__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");

__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");

__webpack_require__(/*! core-js/modules/es.error.cause.js */ "./node_modules/core-js/modules/es.error.cause.js");

__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");

__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");

__webpack_require__(/*! core-js/modules/es.object.define-getter.js */ "./node_modules/core-js/modules/es.object.define-getter.js");

__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");

/*
 * classList.js: Cross-browser full element.classList implementation.
 * 1.2.20171210
 *
 * By Eli Grey, http://eligrey.com
 * License: Dedicated to the public domain.
 *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md
 */

/*global self, document, DOMException */

/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */
if ("document" in self) {
  // Full polyfill for browsers with no classList support
  // Including IE < Edge missing SVGElement.classList
  if (!("classList" in document.createElement("_")) || document.createElementNS && !("classList" in document.createElementNS("http://www.w3.org/2000/svg", "g"))) {
    (function (view) {
      "use strict";

      if (!('Element' in view)) return;

      var classListProp = "classList",
          protoProp = "prototype",
          elemCtrProto = view.Element[protoProp],
          objCtr = Object,
          strTrim = String[protoProp].trim || function () {
        return this.replace(/^\s+|\s+$/g, "");
      },
          arrIndexOf = Array[protoProp].indexOf || function (item) {
        var i = 0,
            len = this.length;

        for (; i < len; i++) {
          if (i in this && this[i] === item) {
            return i;
          }
        }

        return -1;
      } // Vendors: please allow content code to instantiate DOMExceptions
      ,
          DOMEx = function DOMEx(type, message) {
        this.name = type;
        this.code = DOMException[type];
        this.message = message;
      },
          checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {
        if (token === "") {
          throw new DOMEx("SYNTAX_ERR", "The token must not be empty.");
        }

        if (/\s/.test(token)) {
          throw new DOMEx("INVALID_CHARACTER_ERR", "The token must not contain space characters.");
        }

        return arrIndexOf.call(classList, token);
      },
          ClassList = function ClassList(elem) {
        var trimmedClasses = strTrim.call(elem.getAttribute("class") || ""),
            classes = trimmedClasses ? trimmedClasses.split(/\s+/) : [],
            i = 0,
            len = classes.length;

        for (; i < len; i++) {
          this.push(classes[i]);
        }

        this._updateClassName = function () {
          elem.setAttribute("class", this.toString());
        };
      },
          classListProto = ClassList[protoProp] = [],
          classListGetter = function classListGetter() {
        return new ClassList(this);
      }; // Most DOMException implementations don't allow calling DOMException's toString()
      // on non-DOMExceptions. Error's toString() is sufficient here.


      DOMEx[protoProp] = Error[protoProp];

      classListProto.item = function (i) {
        return this[i] || null;
      };

      classListProto.contains = function (token) {
        return ~checkTokenAndGetIndex(this, token + "");
      };

      classListProto.add = function () {
        var tokens = arguments,
            i = 0,
            l = tokens.length,
            token,
            updated = false;

        do {
          token = tokens[i] + "";

          if (!~checkTokenAndGetIndex(this, token)) {
            this.push(token);
            updated = true;
          }
        } while (++i < l);

        if (updated) {
          this._updateClassName();
        }
      };

      classListProto.remove = function () {
        var tokens = arguments,
            i = 0,
            l = tokens.length,
            token,
            updated = false,
            index;

        do {
          token = tokens[i] + "";
          index = checkTokenAndGetIndex(this, token);

          while (~index) {
            this.splice(index, 1);
            updated = true;
            index = checkTokenAndGetIndex(this, token);
          }
        } while (++i < l);

        if (updated) {
          this._updateClassName();
        }
      };

      classListProto.toggle = function (token, force) {
        var result = this.contains(token),
            method = result ? force !== true && "remove" : force !== false && "add";

        if (method) {
          this[method](token);
        }

        if (force === true || force === false) {
          return force;
        } else {
          return !result;
        }
      };

      classListProto.replace = function (token, replacement_token) {
        var index = checkTokenAndGetIndex(token + "");

        if (~index) {
          this.splice(index, 1, replacement_token);

          this._updateClassName();
        }
      };

      classListProto.toString = function () {
        return this.join(" ");
      };

      if (objCtr.defineProperty) {
        var classListPropDesc = {
          get: classListGetter,
          enumerable: true,
          configurable: true
        };

        try {
          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
        } catch (ex) {
          // IE 8 doesn't support enumerable:true
          // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36
          // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected
          if (ex.number === undefined || ex.number === -0x7FF5EC54) {
            classListPropDesc.enumerable = false;
            objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);
          }
        }
      } else if (objCtr[protoProp].__defineGetter__) {
        elemCtrProto.__defineGetter__(classListProp, classListGetter);
      }
    })(self);
  } // There is full or partial native classList support, so just check if we need
  // to normalize the add/remove and toggle APIs.


  (function () {
    "use strict";

    var testElement = document.createElement("_");
    testElement.classList.add("c1", "c2"); // Polyfill for IE 10/11 and Firefox <26, where classList.add and
    // classList.remove exist but support only one argument at a time.

    if (!testElement.classList.contains("c2")) {
      var createMethod = function createMethod(method) {
        var original = DOMTokenList.prototype[method];

        DOMTokenList.prototype[method] = function (token) {
          var i,
              len = arguments.length;

          for (i = 0; i < len; i++) {
            token = arguments[i];
            original.call(this, token);
          }
        };
      };

      createMethod('add');
      createMethod('remove');
    }

    testElement.classList.toggle("c3", false); // Polyfill for IE 10 and Firefox <24, where classList.toggle does not
    // support the second argument.

    if (testElement.classList.contains("c3")) {
      var _toggle = DOMTokenList.prototype.toggle;

      DOMTokenList.prototype.toggle = function (token, force) {
        if (1 in arguments && !this.contains(token) === !force) {
          return force;
        } else {
          return _toggle.call(this, token);
        }
      };
    } // replace() polyfill


    if (!("replace" in document.createElement("_").classList)) {
      DOMTokenList.prototype.replace = function (token, replacement_token) {
        var tokens = this.toString().split(" "),
            index = tokens.indexOf(token + "");

        if (~index) {
          tokens = tokens.slice(index);
          this.remove.apply(this, tokens);
          this.add(replacement_token);
          this.add.apply(this, tokens.slice(1));
        }
      };
    }

    testElement = null;
  })();
}

/***/ }),

/***/ "./node_modules/core-js/internals/a-callable.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/a-callable.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "./node_modules/core-js/internals/a-constructor.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/a-constructor.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

var $TypeError = TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw $TypeError(tryToString(argument) + ' is not a constructor');
};


/***/ }),

/***/ "./node_modules/core-js/internals/a-possible-prototype.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var $String = String;
var $TypeError = TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw $TypeError("Can't set " + $String(argument) + ' as a prototype');
};


/***/ }),

/***/ "./node_modules/core-js/internals/add-to-unscopables.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/internals/advance-string-index.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/advance-string-index.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var charAt = (__webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt);

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-instance.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/an-instance.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");

var $TypeError = TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw $TypeError('Incorrect invocation');
};


/***/ }),

/***/ "./node_modules/core-js/internals/an-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/an-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var $String = String;
var $TypeError = TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw $TypeError($String(argument) + ' is not an object');
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-buffer-non-extensible.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/array-buffer-non-extensible.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = fails(function () {
  if (typeof ArrayBuffer == 'function') {
    var buffer = new ArrayBuffer(8);
    // eslint-disable-next-line es-x/no-object-isextensible, es-x/no-object-defineproperty -- safe
    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
  }
});


/***/ }),

/***/ "./node_modules/core-js/internals/array-for-each.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-for-each.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $forEach = (__webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").forEach);
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");

var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es-x/no-array-prototype-foreach -- safe
} : [].forEach;


/***/ }),

/***/ "./node_modules/core-js/internals/array-from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-from.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

var $Array = Array;

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (;!(step = call(next, iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = lengthOfArrayLike(O);
    result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-includes.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/array-includes.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-iteration.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/array-iteration.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");

var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-method-has-species-support.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-method-is-strict.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/array-method-is-strict.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call -- required for testing
    method.call(null, argument || function () { return 1; }, 1);
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-slice-simple.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/array-slice-simple.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");

var $Array = Array;
var max = Math.max;

module.exports = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = $Array(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-slice.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/array-slice.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis([].slice);


/***/ }),

/***/ "./node_modules/core-js/internals/array-sort.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/array-sort.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arraySlice = __webpack_require__(/*! ../internals/array-slice-simple */ "./node_modules/core-js/internals/array-slice-simple.js");

var floor = Math.floor;

var mergeSort = function (array, comparefn) {
  var length = array.length;
  var middle = floor(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(
    array,
    mergeSort(arraySlice(array, 0, middle), comparefn),
    mergeSort(arraySlice(array, middle), comparefn),
    comparefn
  );
};

var insertionSort = function (array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;

  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++) array[j] = element;
  } return array;
};

var merge = function (array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;

  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = (lindex < llength && rindex < rlength)
      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
      : lindex < llength ? left[lindex++] : right[rindex++];
  } return array;
};

module.exports = mergeSort;


/***/ }),

/***/ "./node_modules/core-js/internals/array-species-constructor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-constructor.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? $Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/internals/array-species-create.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/array-species-create.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arraySpeciesConstructor = __webpack_require__(/*! ../internals/array-species-constructor */ "./node_modules/core-js/internals/array-species-constructor.js");

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/call-with-safe-iteration-closing.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "./node_modules/core-js/internals/iterator-close.js");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/check-correctness-of-iteration.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof-raw.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/classof-raw.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/internals/classof.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/classof.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var $Object = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/clear-error-stack.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/clear-error-stack.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var $Error = Error;
var replace = uncurryThis(''.replace);

var TEST = (function (arg) { return String($Error(arg).stack); })('zxcasd');
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);

module.exports = function (stack, dropEntries) {
  if (IS_V8_OR_CHAKRA_STACK && typeof stack == 'string' && !$Error.prepareStackTrace) {
    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  } return stack;
};


/***/ }),

/***/ "./node_modules/core-js/internals/collection-strong.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/collection-strong.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var defineBuiltIns = __webpack_require__(/*! ../internals/define-built-ins */ "./node_modules/core-js/internals/define-built-ins.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fastKey = (__webpack_require__(/*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js").fastKey);
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    defineBuiltIns(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    defineBuiltIns(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(Prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/collection-weak.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/collection-weak.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var defineBuiltIns = __webpack_require__(/*! ../internals/define-built-ins */ "./node_modules/core-js/internals/define-built-ins.js");
var getWeakData = (__webpack_require__(/*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js").getWeakData);
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var ArrayIterationModule = __webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var splice = uncurryThis([].splice);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function () {
  this.entries = [];
};

var findUncaughtFrozen = function (store, key) {
  return find(store.entries, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.entries.push([key, value]);
  },
  'delete': function (key) {
    var index = findIndex(this.entries, function (it) {
      return it[0] === key;
    });
    if (~index) splice(this.entries, index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: undefined
      });
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var data = getWeakData(anObject(key), true);
      if (data === true) uncaughtFrozenStore(state).set(key, value);
      else data[state.id] = value;
      return that;
    };

    defineBuiltIns(Prototype, {
      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
      'delete': function (key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
        return data && hasOwn(data, state.id) && delete data[state.id];
      },
      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
      // https://tc39.es/ecma262/#sec-weakset.prototype.has
      has: function has(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state).has(key);
        return data && hasOwn(data, state.id);
      }
    });

    defineBuiltIns(Prototype, IS_MAP ? {
      // `WeakMap.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
      get: function get(key) {
        var state = getInternalState(this);
        if (isObject(key)) {
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).get(key);
          return data ? data[state.id] : undefined;
        }
      },
      // `WeakMap.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
      set: function set(key, value) {
        return define(this, key, value);
      }
    } : {
      // `WeakSet.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-weakset.prototype.add
      add: function add(value) {
        return define(this, value, true);
      }
    });

    return Constructor;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/collection.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/collection.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var InternalMetadataModule = __webpack_require__(/*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
    defineBuiltIn(NativePrototype, KEY,
      KEY == 'add' ? function add(value) {
        uncurriedNativeMethod(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  var REPLACE = isForced(
    CONSTRUCTOR_NAME,
    !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    }))
  );

  if (REPLACE) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new -- required for testing
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, NativePrototype);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, constructor: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/copy-constructor-properties.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-is-regexp-logic.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-is-regexp-logic.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};


/***/ }),

/***/ "./node_modules/core-js/internals/correct-prototype-getter.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "./node_modules/core-js/internals/create-iterator-constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var IteratorPrototype = (__webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js").IteratorPrototype);
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-non-enumerable-property.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \**************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property-descriptor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!
  \**********************************************************************/
/***/ (function(module) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/create-property.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/create-property.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-built-in-accessor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/define-built-in-accessor.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "./node_modules/core-js/internals/make-built-in.js");
var defineProperty = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, name, descriptor) {
  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });
  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });
  return defineProperty.f(target, name, descriptor);
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-built-in.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-built-in.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var makeBuiltIn = __webpack_require__(/*! ../internals/make-built-in */ "./node_modules/core-js/internals/make-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");

module.exports = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty(key, value);
  } else {
    if (!options.unsafe) delete O[key];
    else if (O[key]) simple = true;
    if (simple) O[key] = value;
    else definePropertyModule.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-built-ins.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/define-built-ins.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");

module.exports = function (target, src, options) {
  for (var key in src) defineBuiltIn(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-global-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/define-global-property.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/define-iterator.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var FunctionName = __webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "./node_modules/core-js/internals/iterators-core.js");

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/internals/define-well-known-symbol.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/define-well-known-symbol.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var path = __webpack_require__(/*! ../internals/path */ "./node_modules/core-js/internals/path.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/well-known-symbol-wrapped */ "./node_modules/core-js/internals/well-known-symbol-wrapped.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/delete-property-or-throw.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/delete-property-or-throw.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");

var $TypeError = TypeError;

module.exports = function (O, P) {
  if (!delete O[P]) throw $TypeError('Cannot delete property ' + tryToString(P) + ' of ' + tryToString(O));
};


/***/ }),

/***/ "./node_modules/core-js/internals/descriptors.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/descriptors.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/document-create-element.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/document-create-element.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/internals/does-not-exceed-safe-integer.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/internals/does-not-exceed-safe-integer.js ***!
  \************************************************************************/
/***/ (function(module) {

var $TypeError = TypeError;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF; // 2 ** 53 - 1 == 9007199254740991

module.exports = function (it) {
  if (it > MAX_SAFE_INTEGER) throw $TypeError('Maximum allowed index exceeded');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-exception-constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/dom-exception-constants.js ***!
  \*******************************************************************/
/***/ (function(module) {

module.exports = {
  IndexSizeError: { s: 'INDEX_SIZE_ERR', c: 1, m: 1 },
  DOMStringSizeError: { s: 'DOMSTRING_SIZE_ERR', c: 2, m: 0 },
  HierarchyRequestError: { s: 'HIERARCHY_REQUEST_ERR', c: 3, m: 1 },
  WrongDocumentError: { s: 'WRONG_DOCUMENT_ERR', c: 4, m: 1 },
  InvalidCharacterError: { s: 'INVALID_CHARACTER_ERR', c: 5, m: 1 },
  NoDataAllowedError: { s: 'NO_DATA_ALLOWED_ERR', c: 6, m: 0 },
  NoModificationAllowedError: { s: 'NO_MODIFICATION_ALLOWED_ERR', c: 7, m: 1 },
  NotFoundError: { s: 'NOT_FOUND_ERR', c: 8, m: 1 },
  NotSupportedError: { s: 'NOT_SUPPORTED_ERR', c: 9, m: 1 },
  InUseAttributeError: { s: 'INUSE_ATTRIBUTE_ERR', c: 10, m: 1 },
  InvalidStateError: { s: 'INVALID_STATE_ERR', c: 11, m: 1 },
  SyntaxError: { s: 'SYNTAX_ERR', c: 12, m: 1 },
  InvalidModificationError: { s: 'INVALID_MODIFICATION_ERR', c: 13, m: 1 },
  NamespaceError: { s: 'NAMESPACE_ERR', c: 14, m: 1 },
  InvalidAccessError: { s: 'INVALID_ACCESS_ERR', c: 15, m: 1 },
  ValidationError: { s: 'VALIDATION_ERR', c: 16, m: 0 },
  TypeMismatchError: { s: 'TYPE_MISMATCH_ERR', c: 17, m: 1 },
  SecurityError: { s: 'SECURITY_ERR', c: 18, m: 1 },
  NetworkError: { s: 'NETWORK_ERR', c: 19, m: 1 },
  AbortError: { s: 'ABORT_ERR', c: 20, m: 1 },
  URLMismatchError: { s: 'URL_MISMATCH_ERR', c: 21, m: 1 },
  QuotaExceededError: { s: 'QUOTA_EXCEEDED_ERR', c: 22, m: 1 },
  TimeoutError: { s: 'TIMEOUT_ERR', c: 23, m: 1 },
  InvalidNodeTypeError: { s: 'INVALID_NODE_TYPE_ERR', c: 24, m: 1 },
  DataCloneError: { s: 'DATA_CLONE_ERR', c: 25, m: 1 }
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-iterables.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/dom-iterables.js ***!
  \*********************************************************/
/***/ (function(module) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),

/***/ "./node_modules/core-js/internals/dom-token-list-prototype.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/dom-token-list-prototype.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-ff-version.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-ff-version.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var firefox = userAgent.match(/firefox\/(\d+)/i);

module.exports = !!firefox && +firefox[1];


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-browser.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-browser.js ***!
  \*************************************************************/
/***/ (function(module) {

module.exports = typeof window == 'object' && typeof Deno != 'object';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ie-or-edge.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ie-or-edge.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var UA = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /MSIE|Trident/.test(UA);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ios-pebble.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ios-pebble.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-ios.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-ios.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-node.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-node.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = classof(global.process) == 'process';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-is-webos-webkit.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-is-webos-webkit.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

module.exports = /web0s(?!.*chrome)/i.test(userAgent);


/***/ }),

/***/ "./node_modules/core-js/internals/engine-user-agent.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-user-agent.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "./node_modules/core-js/internals/engine-v8-version.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-v8-version.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "./node_modules/core-js/internals/engine-webkit-version.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/engine-webkit-version.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "./node_modules/core-js/internals/engine-user-agent.js");

var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

module.exports = !!webkit && +webkit[1];


/***/ }),

/***/ "./node_modules/core-js/internals/enum-bug-keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!
  \*********************************************************/
/***/ (function(module) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "./node_modules/core-js/internals/error-stack-installable.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/error-stack-installable.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");

module.exports = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es-x/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/error-to-string.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/error-to-string.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var normalizeStringArgument = __webpack_require__(/*! ../internals/normalize-string-argument */ "./node_modules/core-js/internals/normalize-string-argument.js");

var nativeErrorToString = Error.prototype.toString;

var INCORRECT_TO_STRING = fails(function () {
  if (DESCRIPTORS) {
    // Chrome 32- incorrectly call accessor
    // eslint-disable-next-line es-x/no-object-defineproperty -- safe
    var object = create(Object.defineProperty({}, 'name', { get: function () {
      return this === object;
    } }));
    if (nativeErrorToString.call(object) !== 'true') return true;
  }
  // FF10- does not properly handle non-strings
  return nativeErrorToString.call({ message: 1, name: 2 }) !== '2: 1'
    // IE8 does not properly handle defaults
    || nativeErrorToString.call({}) !== 'Error';
});

module.exports = INCORRECT_TO_STRING ? function toString() {
  var O = anObject(this);
  var name = normalizeStringArgument(O.name, 'Error');
  var message = normalizeStringArgument(O.message);
  return !name ? message : !message ? name : name + ': ' + message;
} : nativeErrorToString;


/***/ }),

/***/ "./node_modules/core-js/internals/export.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/export.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    defineBuiltIn(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fails.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/fails.js ***!
  \*************************************************/
/***/ (function(module) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
  \******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(/*! ../modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

module.exports = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = uncurryThis(nativeMethod);
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
        }
        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
      }
      return { done: false };
    });

    defineBuiltIn(String.prototype, KEY, methods[0]);
    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};


/***/ }),

/***/ "./node_modules/core-js/internals/freezing.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/freezing.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-object-isextensible, es-x/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});


/***/ }),

/***/ "./node_modules/core-js/internals/function-apply.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/function-apply.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var call = FunctionPrototype.call;

// eslint-disable-next-line es-x/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),

/***/ "./node_modules/core-js/internals/function-bind-context.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-context.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-bind-native.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-bind-native.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});


/***/ }),

/***/ "./node_modules/core-js/internals/function-call.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-call.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var call = Function.prototype.call;

module.exports = NATIVE_BIND ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-name.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/function-name.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "./node_modules/core-js/internals/function-uncurry-this.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/function-uncurry-this.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_BIND = __webpack_require__(/*! ../internals/function-bind-native */ "./node_modules/core-js/internals/function-bind-native.js");

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = NATIVE_BIND && bind.bind(call, call);

module.exports = NATIVE_BIND ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-built-in.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-built-in.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator-method.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator-method.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-iterator.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/get-iterator.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");

var $TypeError = TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw $TypeError(tryToString(argument) + ' is not iterable');
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-method.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/get-method.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "./node_modules/core-js/internals/get-substitution.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/get-substitution.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");

var floor = Math.floor;
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }
  return replace(replacement, symbols, function (match, ch) {
    var capture;
    switch (charAt(ch, 0)) {
      case '$': return '$';
      case '&': return matched;
      case '`': return stringSlice(str, 0, position);
      case "'": return stringSlice(str, tailPos);
      case '<':
        capture = namedCaptures[stringSlice(ch, 1, -1)];
        break;
      default: // \d\d?
        var n = +ch;
        if (n === 0) return match;
        if (n > m) {
          var f = floor(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
          return match;
        }
        capture = captures[n - 1];
    }
    return capture === undefined ? '' : capture;
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/global.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/global.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es-x/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "./node_modules/core-js/internals/has-own-property.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/has-own-property.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "./node_modules/core-js/internals/hidden-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/hidden-keys.js ***!
  \*******************************************************/
/***/ (function(module) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/host-report-errors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/host-report-errors.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length == 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/html.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/html.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "./node_modules/core-js/internals/ie8-dom-define.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");

// Thanks to IE8 for its funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/internals/indexed-object.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/indexed-object.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

var $Object = Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : $Object(it);
} : $Object;


/***/ }),

/***/ "./node_modules/core-js/internals/inherit-if-required.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/inherit-if-required.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),

/***/ "./node_modules/core-js/internals/inspect-source.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/inspect-source.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "./node_modules/core-js/internals/install-error-cause.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/install-error-cause.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

// `InstallErrorCause` abstract operation
// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
module.exports = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/internal-metadata.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/internal-metadata.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertyNamesExternalModule = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "./node_modules/core-js/internals/object-get-own-property-names-external.js");
var isExtensible = __webpack_require__(/*! ../internals/object-is-extensible */ "./node_modules/core-js/internals/object-is-extensible.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var FREEZING = __webpack_require__(/*! ../internals/freezing */ "./node_modules/core-js/internals/freezing.js");

var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + id++, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA)) setMetadata(it);
  return it;
};

var enable = function () {
  meta.enable = function () { /* empty */ };
  REQUIRED = true;
  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
  var splice = uncurryThis([].splice);
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    getOwnPropertyNamesModule.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice(result, i, 1);
          break;
        }
      } return result;
    };

    $({ target: 'Object', stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};

var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;


/***/ }),

/***/ "./node_modules/core-js/internals/internal-state.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/internal-state.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array-iterator-method.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/is-array-iterator-method.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-array.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/is-array.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es-x/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-callable.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/is-callable.js ***!
  \*******************************************************/
/***/ (function(module) {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-constructor.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/is-constructor.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),

/***/ "./node_modules/core-js/internals/is-forced.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-forced.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "./node_modules/core-js/internals/is-integral-number.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/is-integral-number.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var floor = Math.floor;

// `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es-x/no-number-isinteger -- safe
module.exports = Number.isInteger || function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-pure.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/is-pure.js ***!
  \***************************************************/
/***/ (function(module) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/internals/is-regexp.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-regexp.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),

/***/ "./node_modules/core-js/internals/is-symbol.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/is-symbol.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

var $Object = Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterate.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/iterate.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "./node_modules/core-js/internals/is-array-iterator-method.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "./node_modules/core-js/internals/iterator-close.js");

var $TypeError = TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw $TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterator-close.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterator-close.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators-core.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/iterators-core.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es-x/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  defineBuiltIn(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "./node_modules/core-js/internals/iterators.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/iterators.js ***!
  \*****************************************************/
/***/ (function(module) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/internals/length-of-array-like.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/length-of-array-like.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/make-built-in.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/make-built-in.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").CONFIGURABLE);
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var enforceInternalState = InternalStateModule.enforce;
var getInternalState = InternalStateModule.get;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

var CONFIGURABLE_LENGTH = DESCRIPTORS && !fails(function () {
  return defineProperty(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn = module.exports = function (value, name, options) {
  if (String(name).slice(0, 7) === 'Symbol(') {
    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
    defineProperty(value, 'name', { value: name, configurable: true });
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn(options, 'arity') && value.length !== options.arity) {
    defineProperty(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS) defineProperty(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState(value);
  if (!hasOwn(state, 'source')) {
    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn(function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
}, 'toString');


/***/ }),

/***/ "./node_modules/core-js/internals/math-trunc.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/math-trunc.js ***!
  \******************************************************/
/***/ (function(module) {

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es-x/no-math-trunc -- safe
module.exports = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor : ceil)(n);
};


/***/ }),

/***/ "./node_modules/core-js/internals/microtask.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/microtask.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var macrotask = (__webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set);
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");
var IS_IOS_PEBBLE = __webpack_require__(/*! ../internals/engine-is-ios-pebble */ "./node_modules/core-js/internals/engine-is-ios-pebble.js");
var IS_WEBOS_WEBKIT = __webpack_require__(/*! ../internals/engine-is-webos-webkit */ "./node_modules/core-js/internals/engine-is-webos-webkit.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessage
  // - onreadystatechange
  // - setTimeout
  } else {
    // strange IE + webpack dev server bug - use .bind(global)
    macrotask = bind(macrotask, global);
    notify = function () {
      macrotask(flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),

/***/ "./node_modules/core-js/internals/native-symbol-registry.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol-registry.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

/* eslint-disable es-x/no-symbol -- safe */
module.exports = NATIVE_SYMBOL && !!Symbol['for'] && !!Symbol.keyFor;


/***/ }),

/***/ "./node_modules/core-js/internals/native-symbol.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/native-symbol.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "./node_modules/core-js/internals/native-url.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/native-url.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = !fails(function () {
  // eslint-disable-next-line unicorn/relative-url-style -- required for testing
  var url = new URL('b?a=1&b=2&c=3', 'http://a');
  var searchParams = url.searchParams;
  var result = '';
  url.pathname = 'c%20d';
  searchParams.forEach(function (value, key) {
    searchParams['delete']('b');
    result += key + value;
  });
  return (IS_PURE && !url.toJSON)
    || !searchParams.sort
    || url.href !== 'http://a/c%20d?a=1&c=3'
    || searchParams.get('c') !== '3'
    || String(new URLSearchParams('?a=1')) !== 'a=1'
    || !searchParams[ITERATOR]
    // throws in Edge
    || new URL('https://a@b').username !== 'a'
    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
    // not punycoded in Edge
    || new URL('http://тест').host !== 'xn--e1aybc'
    // not escaped in Chrome 62-
    || new URL('http://a#б').hash !== '#%D0%B1'
    // fails in Chrome 66-
    || result !== 'a1c3'
    // throws in Safari
    || new URL('http://x', undefined).host !== 'x';
});


/***/ }),

/***/ "./node_modules/core-js/internals/native-weak-map.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/native-weak-map.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "./node_modules/core-js/internals/new-promise-capability.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/new-promise-capability.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/core-js/internals/normalize-string-argument.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/normalize-string-argument.js ***!
  \*********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");

module.exports = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/not-a-regexp.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/not-a-regexp.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");

var $TypeError = TypeError;

module.exports = function (it) {
  if (isRegExp(it)) {
    throw $TypeError("The method doesn't accept regular expressions");
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/number-is-finite.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/number-is-finite.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

var globalIsFinite = global.isFinite;

// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
// eslint-disable-next-line es-x/no-number-isfinite -- safe
module.exports = Number.isFinite || function isFinite(it) {
  return typeof it == 'number' && globalIsFinite(it);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-assign.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-assign.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");

// eslint-disable-next-line es-x/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
var concat = uncurryThis([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es-x/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/core-js/internals/object-create.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/object-create.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var definePropertiesModule = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es-x/no-object-create -- safe
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-properties.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-properties.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "./node_modules/core-js/internals/v8-prototype-define-bug.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-define-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-define-property.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(/*! ../internals/v8-prototype-define-bug */ "./node_modules/core-js/internals/v8-prototype-define-bug.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");

var $TypeError = TypeError;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!******************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "./node_modules/core-js/internals/ie8-dom-define.js");

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names-external.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names-external.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es-x/no-object-getownpropertynames -- safe */
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var $getOwnPropertyNames = (__webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f);
var arraySlice = __webpack_require__(/*! ../internals/array-slice-simple */ "./node_modules/core-js/internals/array-slice-simple.js");

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySlice(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && classof(it) == 'Window'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-names.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/internals/object-get-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es-x/no-object-getprototypeof -- safe
module.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-is-extensible.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-is-extensible.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var ARRAY_BUFFER_NON_EXTENSIBLE = __webpack_require__(/*! ../internals/array-buffer-non-extensible */ "./node_modules/core-js/internals/array-buffer-non-extensible.js");

// eslint-disable-next-line es-x/no-object-isextensible -- safe
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { $isExtensible(1); });

// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
module.exports = (FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE) ? function isExtensible(it) {
  if (!isObject(it)) return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == 'ArrayBuffer') return false;
  return $isExtensible ? $isExtensible(it) : true;
} : $isExtensible;


/***/ }),

/***/ "./node_modules/core-js/internals/object-is-prototype-of.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-is-prototype-of.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys-internal.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var indexOf = (__webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").indexOf);
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-keys.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/object-keys.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "./node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "./node_modules/core-js/internals/enum-bug-keys.js");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es-x/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/internals/object-prototype-accessors-forced.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/core-js/internals/object-prototype-accessors-forced.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var WEBKIT = __webpack_require__(/*! ../internals/engine-webkit-version */ "./node_modules/core-js/internals/engine-webkit-version.js");

// Forced replacement object prototype accessors methods
module.exports = IS_PURE || !fails(function () {
  // This feature detection crashes old WebKit
  // https://github.com/zloirock/core-js/issues/232
  if (WEBKIT && WEBKIT < 535) return;
  var key = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call, es-x/no-legacy-object-prototype-accessor-methods -- required for testing
  __defineSetter__.call(null, key, function () { /* empty */ });
  delete global[key];
});


/***/ }),

/***/ "./node_modules/core-js/internals/object-set-prototype-of.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable no-proto -- safe */
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aPossiblePrototype = __webpack_require__(/*! ../internals/a-possible-prototype */ "./node_modules/core-js/internals/a-possible-prototype.js");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es-x/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "./node_modules/core-js/internals/object-to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/object-to-string.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "./node_modules/core-js/internals/ordinary-to-primitive.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var $TypeError = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw $TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/internals/own-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/internals/own-keys.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/internals/path.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/path.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = global;


/***/ }),

/***/ "./node_modules/core-js/internals/perform.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/internals/perform.js ***!
  \***************************************************/
/***/ (function(module) {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/promise-constructor-detection.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/internals/promise-constructor-detection.js ***!
  \*************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "./node_modules/core-js/internals/inspect-source.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var IS_BROWSER = __webpack_require__(/*! ../internals/engine-is-browser */ "./node_modules/core-js/internals/engine-is-browser.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var SPECIES = wellKnownSymbol('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);

var FORCED_PROMISE_CONSTRUCTOR = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#{ catch, finally } in the pure version for preventing prototype pollution
  if (IS_PURE && !(NativePromisePrototype['catch'] && NativePromisePrototype['finally'])) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = new NativePromiseConstructor(function (resolve) { resolve(1); });
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
  if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_PROMISE_REJECTION_EVENT;
});

module.exports = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT,
  SUBCLASSING: SUBCLASSING
};


/***/ }),

/***/ "./node_modules/core-js/internals/promise-native-constructor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/promise-native-constructor.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

module.exports = global.Promise;


/***/ }),

/***/ "./node_modules/core-js/internals/promise-resolve.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/promise-resolve.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var newPromiseCapability = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/core-js/internals/promise-statics-incorrect-iteration.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/core-js/internals/promise-statics-incorrect-iteration.js ***!
  \*******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);

module.exports = FORCED_PROMISE_CONSTRUCTOR || !checkCorrectnessOfIteration(function (iterable) {
  NativePromiseConstructor.all(iterable).then(undefined, function () { /* empty */ });
});


/***/ }),

/***/ "./node_modules/core-js/internals/proxy-accessor.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/internals/proxy-accessor.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);

module.exports = function (Target, Source, key) {
  key in Target || defineProperty(Target, key, {
    configurable: true,
    get: function () { return Source[key]; },
    set: function (it) { Source[key] = it; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/queue.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/internals/queue.js ***!
  \*************************************************/
/***/ (function(module) {

var Queue = function () {
  this.head = null;
  this.tail = null;
};

Queue.prototype = {
  add: function (item) {
    var entry = { item: item, next: null };
    if (this.head) this.tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function () {
    var entry = this.head;
    if (entry) {
      this.head = entry.next;
      if (this.tail === entry) this.tail = null;
      return entry.item;
    }
  }
};

module.exports = Queue;


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-exec-abstract.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec-abstract.js ***!
  \****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "./node_modules/core-js/internals/classof-raw.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

var $TypeError = TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = call(exec, R, S);
    if (result !== null) anObject(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call(regexpExec, R, S);
  throw $TypeError('RegExp#exec called on incompatible receiver');
};


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-exec.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-exec.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var regexpFlags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");
var stickyHelpers = __webpack_require__(/*! ../internals/regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var getInternalState = (__webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js").get);
var UNSUPPORTED_DOT_ALL = __webpack_require__(/*! ../internals/regexp-unsupported-dot-all */ "./node_modules/core-js/internals/regexp-unsupported-dot-all.js");
var UNSUPPORTED_NCG = __webpack_require__(/*! ../internals/regexp-unsupported-ncg */ "./node_modules/core-js/internals/regexp-unsupported-ncg.js");

var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt = uncurryThis(''.charAt);
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call(nativeExec, re1, 'a');
  call(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = call(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = call(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice(match.input, charsAdded);
        match[0] = stringSlice(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      call(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-flags.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-flags.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.unicodeSets) result += 'v';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-get-flags.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-get-flags.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var regExpFlags = __webpack_require__(/*! ../internals/regexp-flags */ "./node_modules/core-js/internals/regexp-flags.js");

var RegExpPrototype = RegExp.prototype;

module.exports = function (R) {
  var flags = R.flags;
  return flags === undefined && !('flags' in RegExpPrototype) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype, R)
    ? call(regExpFlags, R) : flags;
};


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-sticky-helpers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-sticky-helpers.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp = global.RegExp;

var UNSUPPORTED_Y = fails(function () {
  var re = $RegExp('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y || fails(function () {
  return !$RegExp('a', 'y').sticky;
});

var BROKEN_CARET = UNSUPPORTED_Y || fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

module.exports = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y
};


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-unsupported-dot-all.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-unsupported-dot-all.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});


/***/ }),

/***/ "./node_modules/core-js/internals/regexp-unsupported-ncg.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/regexp-unsupported-ncg.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});


/***/ }),

/***/ "./node_modules/core-js/internals/require-object-coercible.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!
  \********************************************************************/
/***/ (function(module) {

var $TypeError = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw $TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-species.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/set-species.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/set-to-string-tag.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn(target, TO_STRING_TAG)) {
    defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-key.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/internals/shared-key.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/internals/shared-store.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/shared-store.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var defineGlobalProperty = __webpack_require__(/*! ../internals/define-global-property */ "./node_modules/core-js/internals/define-global-property.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || defineGlobalProperty(SHARED, {});

module.exports = store;


/***/ }),

/***/ "./node_modules/core-js/internals/shared.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/internals/shared.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "./node_modules/core-js/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.23.1',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.23.1/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});


/***/ }),

/***/ "./node_modules/core-js/internals/species-constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/internals/species-constructor.js ***!
  \***************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var aConstructor = __webpack_require__(/*! ../internals/a-constructor */ "./node_modules/core-js/internals/a-constructor.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-multibyte.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/string-multibyte.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-punycode-to-ascii.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/internals/string-punycode-to-ascii.js ***!
  \********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
var base = 36;
var tMin = 1;
var tMax = 26;
var skew = 38;
var damp = 700;
var initialBias = 72;
var initialN = 128; // 0x80
var delimiter = '-'; // '\x2D'
var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
var baseMinusTMin = base - tMin;

var $RangeError = RangeError;
var exec = uncurryThis(regexSeparators.exec);
var floor = Math.floor;
var fromCharCode = String.fromCharCode;
var charCodeAt = uncurryThis(''.charCodeAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var split = uncurryThis(''.split);
var toLowerCase = uncurryThis(''.toLowerCase);

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 */
var ucs2decode = function (string) {
  var output = [];
  var counter = 0;
  var length = string.length;
  while (counter < length) {
    var value = charCodeAt(string, counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      var extra = charCodeAt(string, counter++);
      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
        push(output, ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        push(output, value);
        counter--;
      }
    } else {
      push(output, value);
    }
  }
  return output;
};

/**
 * Converts a digit/integer into a basic code point.
 */
var digitToBasic = function (digit) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 */
var adapt = function (delta, numPoints, firstTime) {
  var k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  while (delta > baseMinusTMin * tMax >> 1) {
    delta = floor(delta / baseMinusTMin);
    k += base;
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 */
var encode = function (input) {
  var output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  var inputLength = input.length;

  // Initialize the state.
  var n = initialN;
  var delta = 0;
  var bias = initialBias;
  var i, currentValue;

  // Handle the basic code points.
  for (i = 0; i < input.length; i++) {
    currentValue = input[i];
    if (currentValue < 0x80) {
      push(output, fromCharCode(currentValue));
    }
  }

  var basicLength = output.length; // number of basic code points.
  var handledCPCount = basicLength; // number of code points that have been handled;

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    push(output, delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next larger one:
    var m = maxInt;
    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
    var handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      throw $RangeError(OVERFLOW_ERROR);
    }

    delta += (m - n) * handledCPCountPlusOne;
    n = m;

    for (i = 0; i < input.length; i++) {
      currentValue = input[i];
      if (currentValue < n && ++delta > maxInt) {
        throw $RangeError(OVERFLOW_ERROR);
      }
      if (currentValue == n) {
        // Represent delta as a generalized variable-length integer.
        var q = delta;
        var k = base;
        while (true) {
          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
          if (q < t) break;
          var qMinusT = q - t;
          var baseMinusT = base - t;
          push(output, fromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
          q = floor(qMinusT / baseMinusT);
          k += base;
        }

        push(output, fromCharCode(digitToBasic(q)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
        delta = 0;
        handledCPCount++;
      }
    }

    delta++;
    n++;
  }
  return join(output, '');
};

module.exports = function (input) {
  var encoded = [];
  var labels = split(replace(toLowerCase(input), regexSeparators, '\u002E'), '.');
  var i, label;
  for (i = 0; i < labels.length; i++) {
    label = labels[i];
    push(encoded, exec(regexNonASCII, label) ? 'xn--' + encode(label) : label);
  }
  return join(encoded, '.');
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-repeat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/string-repeat.js ***!
  \*********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

var $RangeError = RangeError;

// `String.prototype.repeat` method implementation
// https://tc39.es/ecma262/#sec-string.prototype.repeat
module.exports = function repeat(count) {
  var str = toString(requireObjectCoercible(this));
  var result = '';
  var n = toIntegerOrInfinity(count);
  if (n < 0 || n == Infinity) throw $RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-trim-forced.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim-forced.js ***!
  \**************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var PROPER_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").PROPER);
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]()
      || non[METHOD_NAME]() !== non
      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);
  });
};


/***/ }),

/***/ "./node_modules/core-js/internals/string-trim.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/string-trim.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "./node_modules/core-js/internals/whitespaces.js");

var replace = uncurryThis(''.replace);
var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = toString(requireObjectCoercible($this));
    if (TYPE & 1) string = replace(string, ltrim, '');
    if (TYPE & 2) string = replace(string, rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),

/***/ "./node_modules/core-js/internals/symbol-define-to-primitive.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/internals/symbol-define-to-primitive.js ***!
  \**********************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");

module.exports = function () {
  var Symbol = getBuiltIn('Symbol');
  var SymbolPrototype = Symbol && Symbol.prototype;
  var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
  var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

  if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
    // `Symbol.prototype[@@toPrimitive]` method
    // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
    // eslint-disable-next-line no-unused-vars -- required for .length
    defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function (hint) {
      return call(valueOf, this);
    }, { arity: 1 });
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/task.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/internals/task.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var apply = __webpack_require__(/*! ../internals/function-apply */ "./node_modules/core-js/internals/function-apply.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var html = __webpack_require__(/*! ../internals/html */ "./node_modules/core-js/internals/html.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "./node_modules/core-js/internals/array-slice.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "./node_modules/core-js/internals/document-create-element.js");
var validateArgumentsLength = __webpack_require__(/*! ../internals/validate-arguments-length */ "./node_modules/core-js/internals/validate-arguments-length.js");
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "./node_modules/core-js/internals/engine-is-ios.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var location, defer, channel, port;

try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  location = global.location;
} catch (error) { /* empty */ }

var run = function (id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable(handler) ? handler : Function(handler);
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    location && location.protocol !== 'file:' &&
    !fails(post)
  ) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "./node_modules/core-js/internals/this-number-value.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/this-number-value.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

// `thisNumberValue` abstract operation
// https://tc39.es/ecma262/#sec-thisnumbervalue
module.exports = uncurryThis(1.0.valueOf);


/***/ }),

/***/ "./node_modules/core-js/internals/to-absolute-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-indexed-object.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-integer-or-infinity.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/internals/to-integer-or-infinity.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var trunc = __webpack_require__(/*! ../internals/math-trunc */ "./node_modules/core-js/internals/math-trunc.js");

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-length.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-length.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-object.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-object.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");

var $Object = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return $Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-primitive.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/internals/to-primitive.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "./node_modules/core-js/internals/ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var $TypeError = TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw $TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-property-key.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/internals/to-property-key.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "./node_modules/core-js/internals/to-string-tag-support.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/internals/to-string-tag-support.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "./node_modules/core-js/internals/to-string.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/internals/to-string.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");

var $String = String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};


/***/ }),

/***/ "./node_modules/core-js/internals/try-node-require.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/internals/try-node-require.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");

module.exports = function (name) {
  try {
    // eslint-disable-next-line no-new-func -- safe
    if (IS_NODE) return Function('return require("' + name + '")')();
  } catch (error) { /* empty */ }
};


/***/ }),

/***/ "./node_modules/core-js/internals/try-to-string.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/internals/try-to-string.js ***!
  \*********************************************************/
/***/ (function(module) {

var $String = String;

module.exports = function (argument) {
  try {
    return $String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "./node_modules/core-js/internals/uid.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/internals/uid.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "./node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable es-x/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "./node_modules/core-js/internals/v8-prototype-define-bug.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/internals/v8-prototype-define-bug.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),

/***/ "./node_modules/core-js/internals/validate-arguments-length.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/validate-arguments-length.js ***!
  \*********************************************************************/
/***/ (function(module) {

var $TypeError = TypeError;

module.exports = function (passed, required) {
  if (passed < required) throw $TypeError('Not enough arguments');
  return passed;
};


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol-wrapped.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol-wrapped.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

exports.f = wellKnownSymbol;


/***/ }),

/***/ "./node_modules/core-js/internals/well-known-symbol.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "./node_modules/core-js/internals/use-symbol-as-uid.js");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "./node_modules/core-js/internals/whitespaces.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/internals/whitespaces.js ***!
  \*******************************************************/
/***/ (function(module) {

// a string of all valid unicode whitespaces
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "./node_modules/core-js/internals/wrap-error-constructor-with-cause.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/core-js/internals/wrap-error-constructor-with-cause.js ***!
  \*****************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");
var proxyAccessor = __webpack_require__(/*! ../internals/proxy-accessor */ "./node_modules/core-js/internals/proxy-accessor.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
var normalizeStringArgument = __webpack_require__(/*! ../internals/normalize-string-argument */ "./node_modules/core-js/internals/normalize-string-argument.js");
var installErrorCause = __webpack_require__(/*! ../internals/install-error-cause */ "./node_modules/core-js/internals/install-error-cause.js");
var clearErrorStack = __webpack_require__(/*! ../internals/clear-error-stack */ "./node_modules/core-js/internals/clear-error-stack.js");
var ERROR_STACK_INSTALLABLE = __webpack_require__(/*! ../internals/error-stack-installable */ "./node_modules/core-js/internals/error-stack-installable.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

module.exports = function (FULL_NAME, wrapper, FORCED, IS_AGGREGATE_ERROR) {
  var STACK_TRACE_LIMIT = 'stackTraceLimit';
  var OPTIONS_POSITION = IS_AGGREGATE_ERROR ? 2 : 1;
  var path = FULL_NAME.split('.');
  var ERROR_NAME = path[path.length - 1];
  var OriginalError = getBuiltIn.apply(null, path);

  if (!OriginalError) return;

  var OriginalErrorPrototype = OriginalError.prototype;

  // V8 9.3- bug https://bugs.chromium.org/p/v8/issues/detail?id=12006
  if (!IS_PURE && hasOwn(OriginalErrorPrototype, 'cause')) delete OriginalErrorPrototype.cause;

  if (!FORCED) return OriginalError;

  var BaseError = getBuiltIn('Error');

  var WrappedError = wrapper(function (a, b) {
    var message = normalizeStringArgument(IS_AGGREGATE_ERROR ? b : a, undefined);
    var result = IS_AGGREGATE_ERROR ? new OriginalError(a) : new OriginalError();
    if (message !== undefined) createNonEnumerableProperty(result, 'message', message);
    if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(result, 'stack', clearErrorStack(result.stack, 2));
    if (this && isPrototypeOf(OriginalErrorPrototype, this)) inheritIfRequired(result, this, WrappedError);
    if (arguments.length > OPTIONS_POSITION) installErrorCause(result, arguments[OPTIONS_POSITION]);
    return result;
  });

  WrappedError.prototype = OriginalErrorPrototype;

  if (ERROR_NAME !== 'Error') {
    if (setPrototypeOf) setPrototypeOf(WrappedError, BaseError);
    else copyConstructorProperties(WrappedError, BaseError, { name: true });
  } else if (DESCRIPTORS && STACK_TRACE_LIMIT in OriginalError) {
    proxyAccessor(WrappedError, OriginalError, STACK_TRACE_LIMIT);
    proxyAccessor(WrappedError, OriginalError, 'prepareStackTrace');
  }

  copyConstructorProperties(WrappedError, OriginalError);

  if (!IS_PURE) try {
    // Safari 13- bug: WebAssembly errors does not have a proper `.name`
    if (OriginalErrorPrototype.name !== ERROR_NAME) {
      createNonEnumerableProperty(OriginalErrorPrototype, 'name', ERROR_NAME);
    }
    OriginalErrorPrototype.constructor = WrappedError;
  } catch (error) { /* empty */ }

  return WrappedError;
};


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.concat.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.concat.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var doesNotExceedSafeInteger = __webpack_require__(/*! ../internals/does-not-exceed-safe-integer */ "./node_modules/core-js/internals/does-not-exceed-safe-integer.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, arity: 1, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike(E);
        doesNotExceedSafeInteger(n + len);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        doesNotExceedSafeInteger(n + 1);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.filter.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.filter.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $filter = (__webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").filter);
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

// `Array.prototype.filter` method
// https://tc39.es/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.find-index.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.find-index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $findIndex = (__webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").findIndex);
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.find.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.find.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $find = (__webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").find);
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.from.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.from.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var from = __webpack_require__(/*! ../internals/array-from */ "./node_modules/core-js/internals/array-from.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "./node_modules/core-js/internals/check-correctness-of-iteration.js");

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  // eslint-disable-next-line es-x/no-array-from -- required for testing
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.includes.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.includes.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $includes = (__webpack_require__(/*! ../internals/array-includes */ "./node_modules/core-js/internals/array-includes.js").includes);
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");

// FF99+ bug
var BROKEN_ON_SPARSE = fails(function () {
  return !Array(1).includes();
});

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.iterator.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "./node_modules/core-js/internals/add-to-unscopables.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "./node_modules/core-js/internals/iterators.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.join.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.join.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "./node_modules/core-js/internals/indexed-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");

var un$Join = uncurryThis([].join);

var ES3_STRINGS = IndexedObject != Object;
var STRICT_METHOD = arrayMethodIsStrict('join', ',');

// `Array.prototype.join` method
// https://tc39.es/ecma262/#sec-array.prototype.join
$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
  join: function join(separator) {
    return un$Join(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.map.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $map = (__webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").map);
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.slice.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.slice.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "./node_modules/core-js/internals/is-constructor.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");
var un$Slice = __webpack_require__(/*! ../internals/array-slice */ "./node_modules/core-js/internals/array-slice.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

var SPECIES = wellKnownSymbol('species');
var $Array = Array;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (isConstructor(Constructor) && (Constructor === $Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === $Array || Constructor === undefined) {
        return un$Slice(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? $Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.sort.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.sort.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var deletePropertyOrThrow = __webpack_require__(/*! ../internals/delete-property-or-throw */ "./node_modules/core-js/internals/delete-property-or-throw.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var internalSort = __webpack_require__(/*! ../internals/array-sort */ "./node_modules/core-js/internals/array-sort.js");
var arrayMethodIsStrict = __webpack_require__(/*! ../internals/array-method-is-strict */ "./node_modules/core-js/internals/array-method-is-strict.js");
var FF = __webpack_require__(/*! ../internals/engine-ff-version */ "./node_modules/core-js/internals/engine-ff-version.js");
var IE_OR_EDGE = __webpack_require__(/*! ../internals/engine-is-ie-or-edge */ "./node_modules/core-js/internals/engine-is-ie-or-edge.js");
var V8 = __webpack_require__(/*! ../internals/engine-v8-version */ "./node_modules/core-js/internals/engine-v8-version.js");
var WEBKIT = __webpack_require__(/*! ../internals/engine-webkit-version */ "./node_modules/core-js/internals/engine-webkit-version.js");

var test = [];
var un$Sort = uncurryThis(test.sort);
var push = uncurryThis(test.push);

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var STABLE_SORT = !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 70;
  if (FF && FF > 3) return;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 603;

  var result = '';
  var code, chr, value, index;

  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);

    switch (code) {
      case 66: case 69: case 70: case 72: value = 3; break;
      case 68: case 71: value = 4; break;
      default: value = 2;
    }

    for (index = 0; index < 47; index++) {
      test.push({ k: chr + index, v: value });
    }
  }

  test.sort(function (a, b) { return b.v - a.v; });

  for (index = 0; index < test.length; index++) {
    chr = test[index].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }

  return result !== 'DGBEFHACIJK';
});

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

var getSortCompare = function (comparefn) {
  return function (x, y) {
    if (y === undefined) return -1;
    if (x === undefined) return 1;
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    return toString(x) > toString(y) ? 1 : -1;
  };
};

// `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    if (comparefn !== undefined) aCallable(comparefn);

    var array = toObject(this);

    if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);

    var items = [];
    var arrayLength = lengthOfArrayLike(array);
    var itemsLength, index;

    for (index = 0; index < arrayLength; index++) {
      if (index in array) push(items, array[index]);
    }

    internalSort(items, getSortCompare(comparefn));

    itemsLength = items.length;
    index = 0;

    while (index < itemsLength) array[index] = items[index++];
    while (index < arrayLength) deletePropertyOrThrow(array, index++);

    return array;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.array.splice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.array.splice.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "./node_modules/core-js/internals/to-absolute-index.js");
var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "./node_modules/core-js/internals/length-of-array-like.js");
var doesNotExceedSafeInteger = __webpack_require__(/*! ../internals/does-not-exceed-safe-integer */ "./node_modules/core-js/internals/does-not-exceed-safe-integer.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "./node_modules/core-js/internals/array-species-create.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");
var deletePropertyOrThrow = __webpack_require__(/*! ../internals/delete-property-or-throw */ "./node_modules/core-js/internals/delete-property-or-throw.js");
var arrayMethodHasSpeciesSupport = __webpack_require__(/*! ../internals/array-method-has-species-support */ "./node_modules/core-js/internals/array-method-has-species-support.js");

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

var max = Math.max;
var min = Math.min;

// `Array.prototype.splice` method
// https://tc39.es/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
    }
    doesNotExceedSafeInteger(len + insertCount - actualDeleteCount);
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else deletePropertyOrThrow(O, to);
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) deletePropertyOrThrow(O, k - 1);
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else deletePropertyOrThrow(O, to);
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.error.cause.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.error.cause.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

/* eslint-disable no-unused-vars -- required for functions `.length` */
var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var apply = __webpack_require__(/*! ../internals/function-apply */ "./node_modules/core-js/internals/function-apply.js");
var wrapErrorConstructorWithCause = __webpack_require__(/*! ../internals/wrap-error-constructor-with-cause */ "./node_modules/core-js/internals/wrap-error-constructor-with-cause.js");

var WEB_ASSEMBLY = 'WebAssembly';
var WebAssembly = global[WEB_ASSEMBLY];

var FORCED = Error('e', { cause: 7 }).cause !== 7;

var exportGlobalErrorCauseWrapper = function (ERROR_NAME, wrapper) {
  var O = {};
  O[ERROR_NAME] = wrapErrorConstructorWithCause(ERROR_NAME, wrapper, FORCED);
  $({ global: true, constructor: true, arity: 1, forced: FORCED }, O);
};

var exportWebAssemblyErrorCauseWrapper = function (ERROR_NAME, wrapper) {
  if (WebAssembly && WebAssembly[ERROR_NAME]) {
    var O = {};
    O[ERROR_NAME] = wrapErrorConstructorWithCause(WEB_ASSEMBLY + '.' + ERROR_NAME, wrapper, FORCED);
    $({ target: WEB_ASSEMBLY, stat: true, constructor: true, arity: 1, forced: FORCED }, O);
  }
};

// https://github.com/tc39/proposal-error-cause
exportGlobalErrorCauseWrapper('Error', function (init) {
  return function Error(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('EvalError', function (init) {
  return function EvalError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('RangeError', function (init) {
  return function RangeError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('ReferenceError', function (init) {
  return function ReferenceError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('SyntaxError', function (init) {
  return function SyntaxError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('TypeError', function (init) {
  return function TypeError(message) { return apply(init, this, arguments); };
});
exportGlobalErrorCauseWrapper('URIError', function (init) {
  return function URIError(message) { return apply(init, this, arguments); };
});
exportWebAssemblyErrorCauseWrapper('CompileError', function (init) {
  return function CompileError(message) { return apply(init, this, arguments); };
});
exportWebAssemblyErrorCauseWrapper('LinkError', function (init) {
  return function LinkError(message) { return apply(init, this, arguments); };
});
exportWebAssemblyErrorCauseWrapper('RuntimeError', function (init) {
  return function RuntimeError(message) { return apply(init, this, arguments); };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.function.name.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.function.name.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var FUNCTION_NAME_EXISTS = (__webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").EXISTS);
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);

var FunctionPrototype = Function.prototype;
var functionToString = uncurryThis(FunctionPrototype.toString);
var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
var regExpExec = uncurryThis(nameRE.exec);
var NAME = 'name';

// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return regExpExec(nameRE, functionToString(this))[1];
      } catch (error) {
        return '';
      }
    }
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.json.stringify.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.json.stringify.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var apply = __webpack_require__(/*! ../internals/function-apply */ "./node_modules/core-js/internals/function-apply.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "./node_modules/core-js/internals/is-array.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "./node_modules/core-js/internals/array-slice.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");

var $stringify = getBuiltIn('JSON', 'stringify');
var exec = uncurryThis(/./.exec);
var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var replace = uncurryThis(''.replace);
var numberToString = uncurryThis(1.0.toString);

var tester = /[\uD800-\uDFFF]/g;
var low = /^[\uD800-\uDBFF]$/;
var hi = /^[\uDC00-\uDFFF]$/;

var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function () {
  var symbol = getBuiltIn('Symbol')();
  // MS Edge converts symbol values to JSON as {}
  return $stringify([symbol]) != '[null]'
    // WebKit converts symbol values to JSON as null
    || $stringify({ a: symbol }) != '{}'
    // V8 throws on boxed symbols
    || $stringify(Object(symbol)) != '{}';
});

// https://github.com/tc39/proposal-well-formed-stringify
var ILL_FORMED_UNICODE = fails(function () {
  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
    || $stringify('\uDEAD') !== '"\\udead"';
});

var stringifyWithSymbolsFix = function (it, replacer) {
  var args = arraySlice(arguments);
  var $replacer = replacer;
  if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
  if (!isArray(replacer)) replacer = function (key, value) {
    if (isCallable($replacer)) value = call($replacer, this, key, value);
    if (!isSymbol(value)) return value;
  };
  args[1] = replacer;
  return apply($stringify, null, args);
};

var fixIllFormed = function (match, offset, string) {
  var prev = charAt(string, offset - 1);
  var next = charAt(string, offset + 1);
  if ((exec(low, match) && !exec(hi, next)) || (exec(hi, match) && !exec(low, prev))) {
    return '\\u' + numberToString(charCodeAt(match, 0), 16);
  } return match;
};

if ($stringify) {
  // `JSON.stringify` method
  // https://tc39.es/ecma262/#sec-json.stringify
  $({ target: 'JSON', stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = arraySlice(arguments);
      var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
      return ILL_FORMED_UNICODE && typeof result == 'string' ? replace(result, tester, fixIllFormed) : result;
    }
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.map.constructor.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.map.constructor.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__(/*! ../internals/collection */ "./node_modules/core-js/internals/collection.js");
var collectionStrong = __webpack_require__(/*! ../internals/collection-strong */ "./node_modules/core-js/internals/collection-strong.js");

// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),

/***/ "./node_modules/core-js/modules/es.map.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/es.map.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(/*! ../modules/es.map.constructor */ "./node_modules/core-js/modules/es.map.constructor.js");


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.constructor.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "./node_modules/core-js/internals/is-forced.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "./node_modules/core-js/internals/to-primitive.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var getOwnPropertyNames = (__webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js").f);
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var thisNumberValue = __webpack_require__(/*! ../internals/this-number-value */ "./node_modules/core-js/internals/this-number-value.js");
var trim = (__webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js").trim);

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;
var TypeError = global.TypeError;
var arraySlice = uncurryThis(''.slice);
var charCodeAt = uncurryThis(''.charCodeAt);

// `ToNumeric` abstract operation
// https://tc39.es/ecma262/#sec-tonumeric
var toNumeric = function (value) {
  var primValue = toPrimitive(value, 'number');
  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
};

// `ToNumber` abstract operation
// https://tc39.es/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, 'number');
  var first, third, radix, maxCode, digits, length, index, code;
  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = charCodeAt(it, 0);
    if (first === 43 || first === 45) {
      third = charCodeAt(it, 2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (charCodeAt(it, 1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = arraySlice(it, 2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = charCodeAt(digits, index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.es/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
    var dummy = this;
    // check on 1..constructor(foo) case
    return isPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })
      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +
    // ESNext
    'fromString,range'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  defineBuiltIn(global, NUMBER, NumberWrapper, { constructor: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.is-finite.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.is-finite.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var numberIsFinite = __webpack_require__(/*! ../internals/number-is-finite */ "./node_modules/core-js/internals/number-is-finite.js");

// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
$({ target: 'Number', stat: true }, { isFinite: numberIsFinite });


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.is-integer.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.is-integer.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var isIntegralNumber = __webpack_require__(/*! ../internals/is-integral-number */ "./node_modules/core-js/internals/is-integral-number.js");

// `Number.isInteger` method
// https://tc39.es/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isIntegralNumber
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.number.is-nan.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.number.is-nan.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");

// `Number.isNaN` method
// https://tc39.es/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return number != number;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.assign.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.assign.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var assign = __webpack_require__(/*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js");

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es-x/no-object-assign -- required for testing
$({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.define-getter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.define-getter.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var FORCED = __webpack_require__(/*! ../internals/object-prototype-accessors-forced */ "./node_modules/core-js/internals/object-prototype-accessors-forced.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");

// `Object.prototype.__defineGetter__` method
// https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__
if (DESCRIPTORS) {
  $({ target: 'Object', proto: true, forced: FORCED }, {
    __defineGetter__: function __defineGetter__(P, getter) {
      definePropertyModule.f(toObject(this), P, { get: aCallable(getter), enumerable: true, configurable: true });
    }
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.get-own-property-descriptor.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var nativeGetOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js":
/*!********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.get-own-property-descriptors.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "./node_modules/core-js/internals/create-property.js");

// `Object.getOwnPropertyDescriptors` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
$({ target: 'Object', stat: true, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIndexedObject(object);
    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var keys = ownKeys(O);
    var result = {};
    var index = 0;
    var key, descriptor;
    while (keys.length > index) {
      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
      if (descriptor !== undefined) createProperty(result, key, descriptor);
    }
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.get-own-property-names.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.get-own-property-names.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var getOwnPropertyNames = (__webpack_require__(/*! ../internals/object-get-own-property-names-external */ "./node_modules/core-js/internals/object-get-own-property-names-external.js").f);

// eslint-disable-next-line es-x/no-object-getownpropertynames -- required for testing
var FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: getOwnPropertyNames
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.get-own-property-symbols.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.get-own-property-symbols.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");

// V8 ~ Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FORCED = !NATIVE_SYMBOL || fails(function () { getOwnPropertySymbolsModule.f(1); });

// `Object.getOwnPropertySymbols` method
// https://tc39.es/ecma262/#sec-object.getownpropertysymbols
$({ target: 'Object', stat: true, forced: FORCED }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
    return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.get-prototype-of.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.get-prototype-of.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var nativeGetPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "./node_modules/core-js/internals/object-get-prototype-of.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "./node_modules/core-js/internals/correct-prototype-getter.js");

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});



/***/ }),

/***/ "./node_modules/core-js/modules/es.object.keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.keys.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "./node_modules/core-js/internals/to-object.js");
var nativeKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.object.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "./node_modules/core-js/internals/to-string-tag-support.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var toString = __webpack_require__(/*! ../internals/object-to-string */ "./node_modules/core-js/internals/object-to-string.js");

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  defineBuiltIn(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.all.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.all.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(/*! ../internals/promise-statics-incorrect-iteration */ "./node_modules/core-js/internals/promise-statics-incorrect-iteration.js");

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.catch.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.catch.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR, real: true }, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromiseConstructor)) {
  var method = getBuiltIn('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn(NativePromisePrototype, 'catch', method, { unsafe: true });
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.constructor.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "./node_modules/core-js/internals/engine-is-node.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "./node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "./node_modules/core-js/internals/set-species.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
var task = (__webpack_require__(/*! ../internals/task */ "./node_modules/core-js/internals/task.js").set);
var microtask = __webpack_require__(/*! ../internals/microtask */ "./node_modules/core-js/internals/microtask.js");
var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "./node_modules/core-js/internals/host-report-errors.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var Queue = __webpack_require__(/*! ../internals/queue */ "./node_modules/core-js/internals/queue.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var PromiseConstructorDetection = __webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");

var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var setInternalState = InternalStateModule.set;
var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;
var PromiseConstructor = NativePromiseConstructor;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;

var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var callReaction = function (reaction, state) {
  var value = state.value;
  var ok = state.state == FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;
      else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(TypeError('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call(then, value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };

  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  // `Promise.prototype.then` method
  // https://tc39.es/ecma262/#sec-promise.prototype.then
  Internal.prototype = defineBuiltIn(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable(onRejected) && onRejected;
    reaction.domain = IS_NODE ? process.domain : undefined;
    if (state.state == PENDING) state.reactions.add(reaction);
    else microtask(function () {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });

  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };

  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromiseConstructor) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      defineBuiltIn(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(/*! ../modules/es.promise.constructor */ "./node_modules/core-js/modules/es.promise.constructor.js");
__webpack_require__(/*! ../modules/es.promise.all */ "./node_modules/core-js/modules/es.promise.all.js");
__webpack_require__(/*! ../modules/es.promise.catch */ "./node_modules/core-js/modules/es.promise.catch.js");
__webpack_require__(/*! ../modules/es.promise.race */ "./node_modules/core-js/modules/es.promise.race.js");
__webpack_require__(/*! ../modules/es.promise.reject */ "./node_modules/core-js/modules/es.promise.reject.js");
__webpack_require__(/*! ../modules/es.promise.resolve */ "./node_modules/core-js/modules/es.promise.resolve.js");


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.race.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.race.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "./node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "./node_modules/core-js/internals/iterate.js");
var PROMISE_STATICS_INCORRECT_ITERATION = __webpack_require__(/*! ../internals/promise-statics-incorrect-iteration */ "./node_modules/core-js/internals/promise-statics-incorrect-iteration.js");

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.reject.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.reject.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "./node_modules/core-js/internals/new-promise-capability.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.promise.resolve.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.promise.resolve.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var NativePromiseConstructor = __webpack_require__(/*! ../internals/promise-native-constructor */ "./node_modules/core-js/internals/promise-native-constructor.js");
var FORCED_PROMISE_CONSTRUCTOR = (__webpack_require__(/*! ../internals/promise-constructor-detection */ "./node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR);
var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "./node_modules/core-js/internals/promise-resolve.js");

var PromiseConstructorWrapper = getBuiltIn('Promise');
var CHECK_WRAPPER = IS_PURE && !FORCED_PROMISE_CONSTRUCTOR;

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$({ target: 'Promise', stat: true, forced: IS_PURE || FORCED_PROMISE_CONSTRUCTOR }, {
  resolve: function resolve(x) {
    return promiseResolve(CHECK_WRAPPER && this === PromiseConstructorWrapper ? NativePromiseConstructor : this, x);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.reflect.apply.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.reflect.apply.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var functionApply = __webpack_require__(/*! ../internals/function-apply */ "./node_modules/core-js/internals/function-apply.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "./node_modules/core-js/internals/a-callable.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

// MS Edge argumentsList argument is optional
var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
  // eslint-disable-next-line es-x/no-reflect -- required for testing
  Reflect.apply(function () { /* empty */ });
});

// `Reflect.apply` method
// https://tc39.es/ecma262/#sec-reflect.apply
$({ target: 'Reflect', stat: true, forced: OPTIONAL_ARGUMENTS_LIST }, {
  apply: function apply(target, thisArgument, argumentsList) {
    return functionApply(aCallable(target), thisArgument, anObject(argumentsList));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.reflect.own-keys.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.reflect.own-keys.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "./node_modules/core-js/internals/own-keys.js");

// `Reflect.ownKeys` method
// https://tc39.es/ecma262/#sec-reflect.ownkeys
$({ target: 'Reflect', stat: true }, {
  ownKeys: ownKeys
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.reflect.to-string-tag.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es.reflect.to-string-tag.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");

$({ global: true }, { Reflect: {} });

// Reflect[@@toStringTag] property
// https://tc39.es/ecma262/#sec-reflect-@@tostringtag
setToStringTag(global.Reflect, 'Reflect', true);


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.exec.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.exec.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var exec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.test.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.test.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(/*! ../modules/es.regexp.exec */ "./node_modules/core-js/modules/es.regexp.exec.js");
var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");

var DELEGATES_TO_EXEC = function () {
  var execCalled = false;
  var re = /[ac]/;
  re.exec = function () {
    execCalled = true;
    return /./.exec.apply(this, arguments);
  };
  return re.test('abc') === true && execCalled;
}();

var $TypeError = TypeError;
var un$Test = uncurryThis(/./.test);

// `RegExp.prototype.test` method
// https://tc39.es/ecma262/#sec-regexp.prototype.test
$({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {
  test: function (str) {
    var exec = this.exec;
    if (!isCallable(exec)) return un$Test(this, str);
    var result = call(exec, this, str);
    if (result !== null && !isObject(result)) {
      throw new $TypeError('RegExp exec method returned something other than an Object or null');
    }
    return !!result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.regexp.to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es.regexp.to-string.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var PROPER_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "./node_modules/core-js/internals/function-name.js").PROPER);
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var getRegExpFlags = __webpack_require__(/*! ../internals/regexp-get-flags */ "./node_modules/core-js/internals/regexp-get-flags.js");

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var n$ToString = RegExpPrototype[TO_STRING];

var NOT_GENERIC = fails(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  defineBuiltIn(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var pattern = $toString(R.source);
    var flags = $toString(getRegExpFlags(R));
    return '/' + pattern + '/' + flags;
  }, { unsafe: true });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.includes.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.includes.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var notARegExp = __webpack_require__(/*! ../internals/not-a-regexp */ "./node_modules/core-js/internals/not-a-regexp.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var correctIsRegExpLogic = __webpack_require__(/*! ../internals/correct-is-regexp-logic */ "./node_modules/core-js/internals/correct-is-regexp-logic.js");

var stringIndexOf = uncurryThis(''.indexOf);

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~stringIndexOf(
      toString(requireObjectCoercible(this)),
      toString(notARegExp(searchString)),
      arguments.length > 1 ? arguments[1] : undefined
    );
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var charAt = (__webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").charAt);
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "./node_modules/core-js/internals/define-iterator.js");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.match.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.match.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");

// @@match logic
fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = requireObjectCoercible(this);
      var matcher = regexp == undefined ? undefined : getMethod(regexp, MATCH);
      return matcher ? call(matcher, regexp, O) : new RegExp(regexp)[MATCH](toString(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function (string) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(nativeMatch, rx, S);

      if (res.done) return res.value;

      if (!rx.global) return regExpExec(rx, S);

      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = toString(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.repeat.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.repeat.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var repeat = __webpack_require__(/*! ../internals/string-repeat */ "./node_modules/core-js/internals/string-repeat.js");

// `String.prototype.repeat` method
// https://tc39.es/ecma262/#sec-string.prototype.repeat
$({ target: 'String', proto: true }, {
  repeat: repeat
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.replace.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.replace.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var apply = __webpack_require__(/*! ../internals/function-apply */ "./node_modules/core-js/internals/function-apply.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "./node_modules/core-js/internals/to-integer-or-infinity.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var getSubstitution = __webpack_require__(/*! ../internals/get-substitution */ "./node_modules/core-js/internals/get-substitution.js");
var regExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var REPLACE = wellKnownSymbol('replace');
var max = Math.max;
var min = Math.min;
var concat = uncurryThis([].concat);
var push = uncurryThis([].push);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
})();

// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
  return ''.replace(re, '$<a>') !== '7';
});

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);
      return replacer
        ? call(replacer, searchValue, O, replaceValue)
        : call(nativeReplace, toString(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function (string, replaceValue) {
      var rx = anObject(this);
      var S = toString(string);

      if (
        typeof replaceValue == 'string' &&
        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
        stringIndexOf(replaceValue, '$<') === -1
      ) {
        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
        if (res.done) return res.value;
      }

      var functionalReplace = isCallable(replaceValue);
      if (!functionalReplace) replaceValue = toString(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        push(results, result);
        if (!global) break;

        var matchStr = toString(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = toString(result[0]);
        var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = concat([matched], captures, position, S);
          if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);
          var replacement = toString(apply(replaceValue, undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + stringSlice(S, nextSourcePosition);
    }
  ];
}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.split.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.split.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var apply = __webpack_require__(/*! ../internals/function-apply */ "./node_modules/core-js/internals/function-apply.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var fixRegExpWellKnownSymbolLogic = __webpack_require__(/*! ../internals/fix-regexp-well-known-symbol-logic */ "./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js");
var isRegExp = __webpack_require__(/*! ../internals/is-regexp */ "./node_modules/core-js/internals/is-regexp.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "./node_modules/core-js/internals/species-constructor.js");
var advanceStringIndex = __webpack_require__(/*! ../internals/advance-string-index */ "./node_modules/core-js/internals/advance-string-index.js");
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "./node_modules/core-js/internals/get-method.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice-simple */ "./node_modules/core-js/internals/array-slice-simple.js");
var callRegExpExec = __webpack_require__(/*! ../internals/regexp-exec-abstract */ "./node_modules/core-js/internals/regexp-exec-abstract.js");
var regexpExec = __webpack_require__(/*! ../internals/regexp-exec */ "./node_modules/core-js/internals/regexp-exec.js");
var stickyHelpers = __webpack_require__(/*! ../internals/regexp-sticky-helpers */ "./node_modules/core-js/internals/regexp-sticky-helpers.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var MAX_UINT32 = 0xFFFFFFFF;
var min = Math.min;
var $push = [].push;
var exec = uncurryThis(/./.exec);
var push = uncurryThis($push);
var stringSlice = uncurryThis(''.slice);

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

// @@split logic
fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = toString(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return call(nativeSplit, string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = call(regexpExec, separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          push(output, stringSlice(string, lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !exec(separatorCopy, '')) push(output, '');
      } else push(output, stringSlice(string, lastLastIndex));
      return output.length > lim ? arraySlice(output, 0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
      return splitter
        ? call(splitter, separator, O, limit)
        : call(internalSplit, toString(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (string, limit) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

      if (res.done) return res.value;

      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (UNSUPPORTED_Y ? 'g' : 'y');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          push(A, stringSlice(S, p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            push(A, z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      push(A, stringSlice(S, p));
      return A;
    }
  ];
}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.starts-with.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.starts-with.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var toLength = __webpack_require__(/*! ../internals/to-length */ "./node_modules/core-js/internals/to-length.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var notARegExp = __webpack_require__(/*! ../internals/not-a-regexp */ "./node_modules/core-js/internals/not-a-regexp.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "./node_modules/core-js/internals/require-object-coercible.js");
var correctIsRegExpLogic = __webpack_require__(/*! ../internals/correct-is-regexp-logic */ "./node_modules/core-js/internals/correct-is-regexp-logic.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

// eslint-disable-next-line es-x/no-string-prototype-startswith -- safe
var un$StartsWith = uncurryThis(''.startsWith);
var stringSlice = uncurryThis(''.slice);
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = toString(searchString);
    return un$StartsWith
      ? un$StartsWith(that, search, index)
      : stringSlice(that, index, index + search.length) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.string.trim.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es.string.trim.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var $trim = (__webpack_require__(/*! ../internals/string-trim */ "./node_modules/core-js/internals/string-trim.js").trim);
var forcedStringTrimMethod = __webpack_require__(/*! ../internals/string-trim-forced */ "./node_modules/core-js/internals/string-trim-forced.js");

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.constructor.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.constructor.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "./node_modules/core-js/internals/native-symbol.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "./node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "./node_modules/core-js/internals/to-property-key.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var nativeObjectCreate = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "./node_modules/core-js/internals/object-keys.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "./node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertyNamesExternal = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "./node_modules/core-js/internals/object-get-own-property-names-external.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "./node_modules/core-js/internals/object-get-own-property-symbols.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "./node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js");
var definePropertiesModule = __webpack_require__(/*! ../internals/object-define-properties */ "./node_modules/core-js/internals/object-define-properties.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "./node_modules/core-js/internals/object-property-is-enumerable.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "./node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "./node_modules/core-js/internals/hidden-keys.js");
var uid = __webpack_require__(/*! ../internals/uid */ "./node_modules/core-js/internals/uid.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var wrappedWellKnownSymbolModule = __webpack_require__(/*! ../internals/well-known-symbol-wrapped */ "./node_modules/core-js/internals/well-known-symbol-wrapped.js");
var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");
var defineSymbolToPrimitive = __webpack_require__(/*! ../internals/symbol-define-to-primitive */ "./node_modules/core-js/internals/symbol-define-to-primitive.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var $forEach = (__webpack_require__(/*! ../internals/array-iteration */ "./node_modules/core-js/internals/array-iteration.js").forEach);

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';

var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);

var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var TypeError = global.TypeError;
var QObject = global.QObject;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push = uncurryThis([].push);

var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var WellKnownSymbolsStore = shared('wks');

// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPropertyKey(P);
  anObject(Attributes);
  if (hasOwn(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPropertyKey(V);
  var enumerable = call(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P]
    ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPropertyKey(P);
  if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);
  });
  return result;
};

var $getOwnPropertySymbols = function (O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
      push(result, AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (isPrototypeOf(SymbolPrototype, this)) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);
      if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  SymbolPrototype = $Symbol[PROTOTYPE];

  defineBuiltIn(SymbolPrototype, 'toString', function toString() {
    return getInternalState(this).tag;
  });

  defineBuiltIn($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty(SymbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      defineBuiltIn(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
defineSymbolToPrimitive();

// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.description.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.description.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "./node_modules/core-js/internals/object-is-prototype-of.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "./node_modules/core-js/internals/copy-constructor-properties.js");

var NativeSymbol = global.Symbol;
var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);
    var result = isPrototypeOf(SymbolPrototype, this)
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };

  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  SymbolWrapper.prototype = SymbolPrototype;
  SymbolPrototype.constructor = SymbolWrapper;

  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
  var symbolToString = uncurryThis(SymbolPrototype.toString);
  var symbolValueOf = uncurryThis(SymbolPrototype.valueOf);
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  var replace = uncurryThis(''.replace);
  var stringSlice = uncurryThis(''.slice);

  defineProperty(SymbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = symbolValueOf(this);
      var string = symbolToString(symbol);
      if (hasOwn(EmptyStringDescriptionStore, symbol)) return '';
      var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, constructor: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.for.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.for.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var NATIVE_SYMBOL_REGISTRY = __webpack_require__(/*! ../internals/native-symbol-registry */ "./node_modules/core-js/internals/native-symbol-registry.js");

var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.for` method
// https://tc39.es/ecma262/#sec-symbol.for
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  'for': function (key) {
    var string = toString(key);
    if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = getBuiltIn('Symbol')(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.iterator.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__(/*! ../internals/define-well-known-symbol */ "./node_modules/core-js/internals/define-well-known-symbol.js");

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's split to modules listed below
__webpack_require__(/*! ../modules/es.symbol.constructor */ "./node_modules/core-js/modules/es.symbol.constructor.js");
__webpack_require__(/*! ../modules/es.symbol.for */ "./node_modules/core-js/modules/es.symbol.for.js");
__webpack_require__(/*! ../modules/es.symbol.key-for */ "./node_modules/core-js/modules/es.symbol.key-for.js");
__webpack_require__(/*! ../modules/es.json.stringify */ "./node_modules/core-js/modules/es.json.stringify.js");
__webpack_require__(/*! ../modules/es.object.get-own-property-symbols */ "./node_modules/core-js/modules/es.object.get-own-property-symbols.js");


/***/ }),

/***/ "./node_modules/core-js/modules/es.symbol.key-for.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es.symbol.key-for.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "./node_modules/core-js/internals/is-symbol.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "./node_modules/core-js/internals/try-to-string.js");
var shared = __webpack_require__(/*! ../internals/shared */ "./node_modules/core-js/internals/shared.js");
var NATIVE_SYMBOL_REGISTRY = __webpack_require__(/*! ../internals/native-symbol-registry */ "./node_modules/core-js/internals/native-symbol-registry.js");

var SymbolToStringRegistry = shared('symbol-to-string-registry');

// `Symbol.keyFor` method
// https://tc39.es/ecma262/#sec-symbol.keyfor
$({ target: 'Symbol', stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(tryToString(sym) + ' is not a symbol');
    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es.weak-map.constructor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es.weak-map.constructor.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var defineBuiltIns = __webpack_require__(/*! ../internals/define-built-ins */ "./node_modules/core-js/internals/define-built-ins.js");
var InternalMetadataModule = __webpack_require__(/*! ../internals/internal-metadata */ "./node_modules/core-js/internals/internal-metadata.js");
var collection = __webpack_require__(/*! ../internals/collection */ "./node_modules/core-js/internals/collection.js");
var collectionWeak = __webpack_require__(/*! ../internals/collection-weak */ "./node_modules/core-js/internals/collection-weak.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var isExtensible = __webpack_require__(/*! ../internals/object-is-extensible */ "./node_modules/core-js/internals/object-is-extensible.js");
var enforceInternalState = (__webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js").enforce);
var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "./node_modules/core-js/internals/native-weak-map.js");

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var InternalWeakMap;

var wrapper = function (init) {
  return function WeakMap() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
};

// `WeakMap` constructor
// https://tc39.es/ecma262/#sec-weakmap-constructor
var $WeakMap = collection('WeakMap', wrapper, collectionWeak);

// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
  InternalMetadataModule.enable();
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeDelete = uncurryThis(WeakMapPrototype['delete']);
  var nativeHas = uncurryThis(WeakMapPrototype.has);
  var nativeGet = uncurryThis(WeakMapPrototype.get);
  var nativeSet = uncurryThis(WeakMapPrototype.set);
  defineBuiltIns(WeakMapPrototype, {
    'delete': function (key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeDelete(this, key) || state.frozen['delete'](key);
      } return nativeDelete(this, key);
    },
    has: function has(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas(this, key) || state.frozen.has(key);
      } return nativeHas(this, key);
    },
    get: function get(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
      } return nativeGet(this, key);
    },
    set: function set(key, value) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
      } else nativeSet(this, key, value);
      return this;
    }
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es.weak-map.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es.weak-map.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(/*! ../modules/es.weak-map.constructor */ "./node_modules/core-js/modules/es.weak-map.constructor.js");


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.for-each.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var DOMTokenListPrototype = __webpack_require__(/*! ../internals/dom-token-list-prototype */ "./node_modules/core-js/internals/dom-token-list-prototype.js");
var forEach = __webpack_require__(/*! ../internals/array-for-each */ "./node_modules/core-js/internals/array-for-each.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");

var handlePrototype = function (CollectionPrototype) {
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  if (DOMIterables[COLLECTION_NAME]) {
    handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype);
  }
}

handlePrototype(DOMTokenListPrototype);


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-collections.iterator.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var DOMIterables = __webpack_require__(/*! ../internals/dom-iterables */ "./node_modules/core-js/internals/dom-iterables.js");
var DOMTokenListPrototype = __webpack_require__(/*! ../internals/dom-token-list-prototype */ "./node_modules/core-js/internals/dom-token-list-prototype.js");
var ArrayIteratorMethods = __webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "./node_modules/core-js/internals/create-non-enumerable-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-exception.constructor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-exception.constructor.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var tryNodeRequire = __webpack_require__(/*! ../internals/try-node-require */ "./node_modules/core-js/internals/try-node-require.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var fails = __webpack_require__(/*! ../internals/fails */ "./node_modules/core-js/internals/fails.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "./node_modules/core-js/internals/define-built-in-accessor.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var errorToString = __webpack_require__(/*! ../internals/error-to-string */ "./node_modules/core-js/internals/error-to-string.js");
var normalizeStringArgument = __webpack_require__(/*! ../internals/normalize-string-argument */ "./node_modules/core-js/internals/normalize-string-argument.js");
var DOMExceptionConstants = __webpack_require__(/*! ../internals/dom-exception-constants */ "./node_modules/core-js/internals/dom-exception-constants.js");
var clearErrorStack = __webpack_require__(/*! ../internals/clear-error-stack */ "./node_modules/core-js/internals/clear-error-stack.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var DOM_EXCEPTION = 'DOMException';
var DATA_CLONE_ERR = 'DATA_CLONE_ERR';
var Error = getBuiltIn('Error');
// NodeJS < 17.0 does not expose `DOMException` to global
var NativeDOMException = getBuiltIn(DOM_EXCEPTION) || (function () {
  try {
    // NodeJS < 15.0 does not expose `MessageChannel` to global
    var MessageChannel = getBuiltIn('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel;
    // eslint-disable-next-line es-x/no-weak-map, unicorn/require-post-message-target-origin -- safe
    new MessageChannel().port1.postMessage(new WeakMap());
  } catch (error) {
    if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;
  }
})();
var NativeDOMExceptionPrototype = NativeDOMException && NativeDOMException.prototype;
var ErrorPrototype = Error.prototype;
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(DOM_EXCEPTION);
var HAS_STACK = 'stack' in Error(DOM_EXCEPTION);

var codeFor = function (name) {
  return hasOwn(DOMExceptionConstants, name) && DOMExceptionConstants[name].m ? DOMExceptionConstants[name].c : 0;
};

var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var code = codeFor(name);
  setInternalState(this, {
    type: DOM_EXCEPTION,
    name: name,
    message: message,
    code: code
  });
  if (!DESCRIPTORS) {
    this.name = name;
    this.message = message;
    this.code = code;
  }
  if (HAS_STACK) {
    var error = Error(message);
    error.name = DOM_EXCEPTION;
    defineProperty(this, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  }
};

var DOMExceptionPrototype = $DOMException.prototype = create(ErrorPrototype);

var createGetterDescriptor = function (get) {
  return { enumerable: true, configurable: true, get: get };
};

var getterFor = function (key) {
  return createGetterDescriptor(function () {
    return getInternalState(this)[key];
  });
};

if (DESCRIPTORS) {
  defineBuiltInAccessor(DOMExceptionPrototype, 'code', getterFor('code'));
  defineBuiltInAccessor(DOMExceptionPrototype, 'message', getterFor('message'));
  defineBuiltInAccessor(DOMExceptionPrototype, 'name', getterFor('name'));
}

defineProperty(DOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, $DOMException));

// FF36- DOMException is a function, but can't be constructed
var INCORRECT_CONSTRUCTOR = fails(function () {
  return !(new NativeDOMException() instanceof Error);
});

// Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs
var INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails(function () {
  return ErrorPrototype.toString !== errorToString || String(new NativeDOMException(1, 2)) !== '2: 1';
});

// Deno 1.6.3- DOMException.prototype.code just missed
var INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails(function () {
  return new NativeDOMException(1, 'DataCloneError').code !== 25;
});

// Deno 1.6.3- DOMException constants just missed
var MISSED_CONSTANTS = INCORRECT_CONSTRUCTOR
  || NativeDOMException[DATA_CLONE_ERR] !== 25
  || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;

var FORCED_CONSTRUCTOR = IS_PURE ? INCORRECT_TO_STRING || INCORRECT_CODE || MISSED_CONSTANTS : INCORRECT_CONSTRUCTOR;

// `DOMException` constructor
// https://webidl.spec.whatwg.org/#idl-DOMException
$({ global: true, constructor: true, forced: FORCED_CONSTRUCTOR }, {
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});

var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

if (INCORRECT_TO_STRING && (IS_PURE || NativeDOMException === PolyfilledDOMException)) {
  defineBuiltIn(PolyfilledDOMExceptionPrototype, 'toString', errorToString);
}

if (INCORRECT_CODE && DESCRIPTORS && NativeDOMException === PolyfilledDOMException) {
  defineBuiltInAccessor(PolyfilledDOMExceptionPrototype, 'code', createGetterDescriptor(function () {
    return codeFor(anObject(this).name);
  }));
}

for (var key in DOMExceptionConstants) if (hasOwn(DOMExceptionConstants, key)) {
  var constant = DOMExceptionConstants[key];
  var constantName = constant.s;
  var descriptor = createPropertyDescriptor(6, constant.c);
  if (!hasOwn(PolyfilledDOMException, constantName)) {
    defineProperty(PolyfilledDOMException, constantName, descriptor);
  }
  if (!hasOwn(PolyfilledDOMExceptionPrototype, constantName)) {
    defineProperty(PolyfilledDOMExceptionPrototype, constantName, descriptor);
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-exception.stack.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-exception.stack.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "./node_modules/core-js/internals/object-define-property.js").f);
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "./node_modules/core-js/internals/inherit-if-required.js");
var normalizeStringArgument = __webpack_require__(/*! ../internals/normalize-string-argument */ "./node_modules/core-js/internals/normalize-string-argument.js");
var DOMExceptionConstants = __webpack_require__(/*! ../internals/dom-exception-constants */ "./node_modules/core-js/internals/dom-exception-constants.js");
var clearErrorStack = __webpack_require__(/*! ../internals/clear-error-stack */ "./node_modules/core-js/internals/clear-error-stack.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "./node_modules/core-js/internals/is-pure.js");

var DOM_EXCEPTION = 'DOMException';
var Error = getBuiltIn('Error');
var NativeDOMException = getBuiltIn(DOM_EXCEPTION);

var $DOMException = function DOMException() {
  anInstance(this, DOMExceptionPrototype);
  var argumentsLength = arguments.length;
  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);
  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');
  var that = new NativeDOMException(message, name);
  var error = Error(message);
  error.name = DOM_EXCEPTION;
  defineProperty(that, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));
  inheritIfRequired(that, this, $DOMException);
  return that;
};

var DOMExceptionPrototype = $DOMException.prototype = NativeDOMException.prototype;

var ERROR_HAS_STACK = 'stack' in Error(DOM_EXCEPTION);
var DOM_EXCEPTION_HAS_STACK = 'stack' in new NativeDOMException(1, 2);
var FORCED_CONSTRUCTOR = ERROR_HAS_STACK && !DOM_EXCEPTION_HAS_STACK;

// `DOMException` constructor patch for `.stack` where it's required
// https://webidl.spec.whatwg.org/#es-DOMException-specialness
$({ global: true, constructor: true, forced: IS_PURE || FORCED_CONSTRUCTOR }, { // TODO: fix export logic
  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException
});

var PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);
var PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;

if (PolyfilledDOMExceptionPrototype.constructor !== PolyfilledDOMException) {
  if (!IS_PURE) {
    defineProperty(PolyfilledDOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, PolyfilledDOMException));
  }

  for (var key in DOMExceptionConstants) if (hasOwn(DOMExceptionConstants, key)) {
    var constant = DOMExceptionConstants[key];
    var constantName = constant.s;
    if (!hasOwn(PolyfilledDOMException, constantName)) {
      defineProperty(PolyfilledDOMException, constantName, createPropertyDescriptor(6, constant.c));
    }
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom-exception.to-string-tag.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom-exception.to-string-tag.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "./node_modules/core-js/internals/get-built-in.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");

var DOM_EXCEPTION = 'DOMException';

setToStringTag(getBuiltIn(DOM_EXCEPTION), DOM_EXCEPTION);


/***/ }),

/***/ "./node_modules/core-js/modules/web.url-search-params.constructor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/web.url-search-params.constructor.js ***!
  \***************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__(/*! ../modules/es.array.iterator */ "./node_modules/core-js/modules/es.array.iterator.js");
var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var USE_NATIVE_URL = __webpack_require__(/*! ../internals/native-url */ "./node_modules/core-js/internals/native-url.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var defineBuiltIns = __webpack_require__(/*! ../internals/define-built-ins */ "./node_modules/core-js/internals/define-built-ins.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "./node_modules/core-js/internals/create-iterator-constructor.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "./node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var classof = __webpack_require__(/*! ../internals/classof */ "./node_modules/core-js/internals/classof.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "./node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "./node_modules/core-js/internals/is-object.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var create = __webpack_require__(/*! ../internals/object-create */ "./node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "./node_modules/core-js/internals/create-property-descriptor.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "./node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "./node_modules/core-js/internals/get-iterator-method.js");
var validateArgumentsLength = __webpack_require__(/*! ../internals/validate-arguments-length */ "./node_modules/core-js/internals/validate-arguments-length.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "./node_modules/core-js/internals/well-known-symbol.js");
var arraySort = __webpack_require__(/*! ../internals/array-sort */ "./node_modules/core-js/internals/array-sort.js");

var ITERATOR = wellKnownSymbol('iterator');
var URL_SEARCH_PARAMS = 'URLSearchParams';
var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
var setInternalState = InternalStateModule.set;
var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Avoid NodeJS experimental warning
var safeGetBuiltIn = function (name) {
  if (!DESCRIPTORS) return global[name];
  var descriptor = getOwnPropertyDescriptor(global, name);
  return descriptor && descriptor.value;
};

var nativeFetch = safeGetBuiltIn('fetch');
var NativeRequest = safeGetBuiltIn('Request');
var Headers = safeGetBuiltIn('Headers');
var RequestPrototype = NativeRequest && NativeRequest.prototype;
var HeadersPrototype = Headers && Headers.prototype;
var RegExp = global.RegExp;
var TypeError = global.TypeError;
var decodeURIComponent = global.decodeURIComponent;
var encodeURIComponent = global.encodeURIComponent;
var charAt = uncurryThis(''.charAt);
var join = uncurryThis([].join);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var splice = uncurryThis([].splice);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);

var plus = /\+/g;
var sequences = Array(4);

var percentSequence = function (bytes) {
  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
};

var percentDecode = function (sequence) {
  try {
    return decodeURIComponent(sequence);
  } catch (error) {
    return sequence;
  }
};

var deserialize = function (it) {
  var result = replace(it, plus, ' ');
  var bytes = 4;
  try {
    return decodeURIComponent(result);
  } catch (error) {
    while (bytes) {
      result = replace(result, percentSequence(bytes--), percentDecode);
    }
    return result;
  }
};

var find = /[!'()~]|%20/g;

var replacements = {
  '!': '%21',
  "'": '%27',
  '(': '%28',
  ')': '%29',
  '~': '%7E',
  '%20': '+'
};

var replacer = function (match) {
  return replacements[match];
};

var serialize = function (it) {
  return replace(encodeURIComponent(it), find, replacer);
};

var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
  setInternalState(this, {
    type: URL_SEARCH_PARAMS_ITERATOR,
    iterator: getIterator(getInternalParamsState(params).entries),
    kind: kind
  });
}, 'Iterator', function next() {
  var state = getInternalIteratorState(this);
  var kind = state.kind;
  var step = state.iterator.next();
  var entry = step.value;
  if (!step.done) {
    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
  } return step;
}, true);

var URLSearchParamsState = function (init) {
  this.entries = [];
  this.url = null;

  if (init !== undefined) {
    if (isObject(init)) this.parseObject(init);
    else this.parseQuery(typeof init == 'string' ? charAt(init, 0) === '?' ? stringSlice(init, 1) : init : $toString(init));
  }
};

URLSearchParamsState.prototype = {
  type: URL_SEARCH_PARAMS,
  bindURL: function (url) {
    this.url = url;
    this.update();
  },
  parseObject: function (object) {
    var iteratorMethod = getIteratorMethod(object);
    var iterator, next, step, entryIterator, entryNext, first, second;

    if (iteratorMethod) {
      iterator = getIterator(object, iteratorMethod);
      next = iterator.next;
      while (!(step = call(next, iterator)).done) {
        entryIterator = getIterator(anObject(step.value));
        entryNext = entryIterator.next;
        if (
          (first = call(entryNext, entryIterator)).done ||
          (second = call(entryNext, entryIterator)).done ||
          !call(entryNext, entryIterator).done
        ) throw TypeError('Expected sequence with length 2');
        push(this.entries, { key: $toString(first.value), value: $toString(second.value) });
      }
    } else for (var key in object) if (hasOwn(object, key)) {
      push(this.entries, { key: key, value: $toString(object[key]) });
    }
  },
  parseQuery: function (query) {
    if (query) {
      var attributes = split(query, '&');
      var index = 0;
      var attribute, entry;
      while (index < attributes.length) {
        attribute = attributes[index++];
        if (attribute.length) {
          entry = split(attribute, '=');
          push(this.entries, {
            key: deserialize(shift(entry)),
            value: deserialize(join(entry, '='))
          });
        }
      }
    }
  },
  serialize: function () {
    var entries = this.entries;
    var result = [];
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      push(result, serialize(entry.key) + '=' + serialize(entry.value));
    } return join(result, '&');
  },
  update: function () {
    this.entries.length = 0;
    this.parseQuery(this.url.query);
  },
  updateURL: function () {
    if (this.url) this.url.update();
  }
};

// `URLSearchParams` constructor
// https://url.spec.whatwg.org/#interface-urlsearchparams
var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
  anInstance(this, URLSearchParamsPrototype);
  var init = arguments.length > 0 ? arguments[0] : undefined;
  setInternalState(this, new URLSearchParamsState(init));
};

var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

defineBuiltIns(URLSearchParamsPrototype, {
  // `URLSearchParams.prototype.append` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
  append: function append(name, value) {
    validateArgumentsLength(arguments.length, 2);
    var state = getInternalParamsState(this);
    push(state.entries, { key: $toString(name), value: $toString(value) });
    state.updateURL();
  },
  // `URLSearchParams.prototype.delete` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
  'delete': function (name) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index].key === key) splice(entries, index, 1);
      else index++;
    }
    state.updateURL();
  },
  // `URLSearchParams.prototype.get` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
  get: function get(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) return entries[index].value;
    }
    return null;
  },
  // `URLSearchParams.prototype.getAll` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
  getAll: function getAll(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var result = [];
    var index = 0;
    for (; index < entries.length; index++) {
      if (entries[index].key === key) push(result, entries[index].value);
    }
    return result;
  },
  // `URLSearchParams.prototype.has` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
  has: function has(name) {
    validateArgumentsLength(arguments.length, 1);
    var entries = getInternalParamsState(this).entries;
    var key = $toString(name);
    var index = 0;
    while (index < entries.length) {
      if (entries[index++].key === key) return true;
    }
    return false;
  },
  // `URLSearchParams.prototype.set` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
  set: function set(name, value) {
    validateArgumentsLength(arguments.length, 1);
    var state = getInternalParamsState(this);
    var entries = state.entries;
    var found = false;
    var key = $toString(name);
    var val = $toString(value);
    var index = 0;
    var entry;
    for (; index < entries.length; index++) {
      entry = entries[index];
      if (entry.key === key) {
        if (found) splice(entries, index--, 1);
        else {
          found = true;
          entry.value = val;
        }
      }
    }
    if (!found) push(entries, { key: key, value: val });
    state.updateURL();
  },
  // `URLSearchParams.prototype.sort` method
  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
  sort: function sort() {
    var state = getInternalParamsState(this);
    arraySort(state.entries, function (a, b) {
      return a.key > b.key ? 1 : -1;
    });
    state.updateURL();
  },
  // `URLSearchParams.prototype.forEach` method
  forEach: function forEach(callback /* , thisArg */) {
    var entries = getInternalParamsState(this).entries;
    var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined);
    var index = 0;
    var entry;
    while (index < entries.length) {
      entry = entries[index++];
      boundFunction(entry.value, entry.key, this);
    }
  },
  // `URLSearchParams.prototype.keys` method
  keys: function keys() {
    return new URLSearchParamsIterator(this, 'keys');
  },
  // `URLSearchParams.prototype.values` method
  values: function values() {
    return new URLSearchParamsIterator(this, 'values');
  },
  // `URLSearchParams.prototype.entries` method
  entries: function entries() {
    return new URLSearchParamsIterator(this, 'entries');
  }
}, { enumerable: true });

// `URLSearchParams.prototype[@@iterator]` method
defineBuiltIn(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries, { name: 'entries' });

// `URLSearchParams.prototype.toString` method
// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
defineBuiltIn(URLSearchParamsPrototype, 'toString', function toString() {
  return getInternalParamsState(this).serialize();
}, { enumerable: true });

setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

$({ global: true, constructor: true, forced: !USE_NATIVE_URL }, {
  URLSearchParams: URLSearchParamsConstructor
});

// Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
if (!USE_NATIVE_URL && isCallable(Headers)) {
  var headersHas = uncurryThis(HeadersPrototype.has);
  var headersSet = uncurryThis(HeadersPrototype.set);

  var wrapRequestOptions = function (init) {
    if (isObject(init)) {
      var body = init.body;
      var headers;
      if (classof(body) === URL_SEARCH_PARAMS) {
        headers = init.headers ? new Headers(init.headers) : new Headers();
        if (!headersHas(headers, 'content-type')) {
          headersSet(headers, 'content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
        return create(init, {
          body: createPropertyDescriptor(0, $toString(body)),
          headers: createPropertyDescriptor(0, headers)
        });
      }
    } return init;
  };

  if (isCallable(nativeFetch)) {
    $({ global: true, enumerable: true, dontCallGetSet: true, forced: true }, {
      fetch: function fetch(input /* , init */) {
        return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
      }
    });
  }

  if (isCallable(NativeRequest)) {
    var RequestConstructor = function Request(input /* , init */) {
      anInstance(this, RequestPrototype);
      return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
    };

    RequestPrototype.constructor = RequestConstructor;
    RequestConstructor.prototype = RequestPrototype;

    $({ global: true, constructor: true, dontCallGetSet: true, forced: true }, {
      Request: RequestConstructor
    });
  }
}

module.exports = {
  URLSearchParams: URLSearchParamsConstructor,
  getState: getInternalParamsState
};


/***/ }),

/***/ "./node_modules/core-js/modules/web.url-search-params.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/web.url-search-params.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(/*! ../modules/web.url-search-params.constructor */ "./node_modules/core-js/modules/web.url-search-params.constructor.js");


/***/ }),

/***/ "./node_modules/core-js/modules/web.url.constructor.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/web.url.constructor.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
__webpack_require__(/*! ../modules/es.string.iterator */ "./node_modules/core-js/modules/es.string.iterator.js");
var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "./node_modules/core-js/internals/descriptors.js");
var USE_NATIVE_URL = __webpack_require__(/*! ../internals/native-url */ "./node_modules/core-js/internals/native-url.js");
var global = __webpack_require__(/*! ../internals/global */ "./node_modules/core-js/internals/global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "./node_modules/core-js/internals/function-bind-context.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "./node_modules/core-js/internals/function-uncurry-this.js");
var defineBuiltIn = __webpack_require__(/*! ../internals/define-built-in */ "./node_modules/core-js/internals/define-built-in.js");
var defineBuiltInAccessor = __webpack_require__(/*! ../internals/define-built-in-accessor */ "./node_modules/core-js/internals/define-built-in-accessor.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "./node_modules/core-js/internals/an-instance.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "./node_modules/core-js/internals/has-own-property.js");
var assign = __webpack_require__(/*! ../internals/object-assign */ "./node_modules/core-js/internals/object-assign.js");
var arrayFrom = __webpack_require__(/*! ../internals/array-from */ "./node_modules/core-js/internals/array-from.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice-simple */ "./node_modules/core-js/internals/array-slice-simple.js");
var codeAt = (__webpack_require__(/*! ../internals/string-multibyte */ "./node_modules/core-js/internals/string-multibyte.js").codeAt);
var toASCII = __webpack_require__(/*! ../internals/string-punycode-to-ascii */ "./node_modules/core-js/internals/string-punycode-to-ascii.js");
var $toString = __webpack_require__(/*! ../internals/to-string */ "./node_modules/core-js/internals/to-string.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "./node_modules/core-js/internals/set-to-string-tag.js");
var validateArgumentsLength = __webpack_require__(/*! ../internals/validate-arguments-length */ "./node_modules/core-js/internals/validate-arguments-length.js");
var URLSearchParamsModule = __webpack_require__(/*! ../modules/web.url-search-params.constructor */ "./node_modules/core-js/modules/web.url-search-params.constructor.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "./node_modules/core-js/internals/internal-state.js");

var setInternalState = InternalStateModule.set;
var getInternalURLState = InternalStateModule.getterFor('URL');
var URLSearchParams = URLSearchParamsModule.URLSearchParams;
var getInternalSearchParamsState = URLSearchParamsModule.getState;

var NativeURL = global.URL;
var TypeError = global.TypeError;
var parseInt = global.parseInt;
var floor = Math.floor;
var pow = Math.pow;
var charAt = uncurryThis(''.charAt);
var exec = uncurryThis(/./.exec);
var join = uncurryThis([].join);
var numberToString = uncurryThis(1.0.toString);
var pop = uncurryThis([].pop);
var push = uncurryThis([].push);
var replace = uncurryThis(''.replace);
var shift = uncurryThis([].shift);
var split = uncurryThis(''.split);
var stringSlice = uncurryThis(''.slice);
var toLowerCase = uncurryThis(''.toLowerCase);
var unshift = uncurryThis([].unshift);

var INVALID_AUTHORITY = 'Invalid authority';
var INVALID_SCHEME = 'Invalid scheme';
var INVALID_HOST = 'Invalid host';
var INVALID_PORT = 'Invalid port';

var ALPHA = /[a-z]/i;
// eslint-disable-next-line regexp/no-obscure-range -- safe
var ALPHANUMERIC = /[\d+-.a-z]/i;
var DIGIT = /\d/;
var HEX_START = /^0x/i;
var OCT = /^[0-7]+$/;
var DEC = /^\d+$/;
var HEX = /^[\da-f]+$/i;
/* eslint-disable regexp/no-control-character -- safe */
var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
var TAB_AND_NEW_LINE = /[\t\n\r]/g;
/* eslint-enable regexp/no-control-character -- safe */
var EOF;

// https://url.spec.whatwg.org/#ipv4-number-parser
var parseIPv4 = function (input) {
  var parts = split(input, '.');
  var partsLength, numbers, index, part, radix, number, ipv4;
  if (parts.length && parts[parts.length - 1] == '') {
    parts.length--;
  }
  partsLength = parts.length;
  if (partsLength > 4) return input;
  numbers = [];
  for (index = 0; index < partsLength; index++) {
    part = parts[index];
    if (part == '') return input;
    radix = 10;
    if (part.length > 1 && charAt(part, 0) == '0') {
      radix = exec(HEX_START, part) ? 16 : 8;
      part = stringSlice(part, radix == 8 ? 1 : 2);
    }
    if (part === '') {
      number = 0;
    } else {
      if (!exec(radix == 10 ? DEC : radix == 8 ? OCT : HEX, part)) return input;
      number = parseInt(part, radix);
    }
    push(numbers, number);
  }
  for (index = 0; index < partsLength; index++) {
    number = numbers[index];
    if (index == partsLength - 1) {
      if (number >= pow(256, 5 - partsLength)) return null;
    } else if (number > 255) return null;
  }
  ipv4 = pop(numbers);
  for (index = 0; index < numbers.length; index++) {
    ipv4 += numbers[index] * pow(256, 3 - index);
  }
  return ipv4;
};

// https://url.spec.whatwg.org/#concept-ipv6-parser
// eslint-disable-next-line max-statements -- TODO
var parseIPv6 = function (input) {
  var address = [0, 0, 0, 0, 0, 0, 0, 0];
  var pieceIndex = 0;
  var compress = null;
  var pointer = 0;
  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

  var chr = function () {
    return charAt(input, pointer);
  };

  if (chr() == ':') {
    if (charAt(input, 1) != ':') return;
    pointer += 2;
    pieceIndex++;
    compress = pieceIndex;
  }
  while (chr()) {
    if (pieceIndex == 8) return;
    if (chr() == ':') {
      if (compress !== null) return;
      pointer++;
      pieceIndex++;
      compress = pieceIndex;
      continue;
    }
    value = length = 0;
    while (length < 4 && exec(HEX, chr())) {
      value = value * 16 + parseInt(chr(), 16);
      pointer++;
      length++;
    }
    if (chr() == '.') {
      if (length == 0) return;
      pointer -= length;
      if (pieceIndex > 6) return;
      numbersSeen = 0;
      while (chr()) {
        ipv4Piece = null;
        if (numbersSeen > 0) {
          if (chr() == '.' && numbersSeen < 4) pointer++;
          else return;
        }
        if (!exec(DIGIT, chr())) return;
        while (exec(DIGIT, chr())) {
          number = parseInt(chr(), 10);
          if (ipv4Piece === null) ipv4Piece = number;
          else if (ipv4Piece == 0) return;
          else ipv4Piece = ipv4Piece * 10 + number;
          if (ipv4Piece > 255) return;
          pointer++;
        }
        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
        numbersSeen++;
        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
      }
      if (numbersSeen != 4) return;
      break;
    } else if (chr() == ':') {
      pointer++;
      if (!chr()) return;
    } else if (chr()) return;
    address[pieceIndex++] = value;
  }
  if (compress !== null) {
    swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex != 0 && swaps > 0) {
      swap = address[pieceIndex];
      address[pieceIndex--] = address[compress + swaps - 1];
      address[compress + --swaps] = swap;
    }
  } else if (pieceIndex != 8) return;
  return address;
};

var findLongestZeroSequence = function (ipv6) {
  var maxIndex = null;
  var maxLength = 1;
  var currStart = null;
  var currLength = 0;
  var index = 0;
  for (; index < 8; index++) {
    if (ipv6[index] !== 0) {
      if (currLength > maxLength) {
        maxIndex = currStart;
        maxLength = currLength;
      }
      currStart = null;
      currLength = 0;
    } else {
      if (currStart === null) currStart = index;
      ++currLength;
    }
  }
  if (currLength > maxLength) {
    maxIndex = currStart;
    maxLength = currLength;
  }
  return maxIndex;
};

// https://url.spec.whatwg.org/#host-serializing
var serializeHost = function (host) {
  var result, index, compress, ignore0;
  // ipv4
  if (typeof host == 'number') {
    result = [];
    for (index = 0; index < 4; index++) {
      unshift(result, host % 256);
      host = floor(host / 256);
    } return join(result, '.');
  // ipv6
  } else if (typeof host == 'object') {
    result = '';
    compress = findLongestZeroSequence(host);
    for (index = 0; index < 8; index++) {
      if (ignore0 && host[index] === 0) continue;
      if (ignore0) ignore0 = false;
      if (compress === index) {
        result += index ? ':' : '::';
        ignore0 = true;
      } else {
        result += numberToString(host[index], 16);
        if (index < 7) result += ':';
      }
    }
    return '[' + result + ']';
  } return host;
};

var C0ControlPercentEncodeSet = {};
var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
});
var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
  '#': 1, '?': 1, '{': 1, '}': 1
});
var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
});

var percentEncode = function (chr, set) {
  var code = codeAt(chr, 0);
  return code > 0x20 && code < 0x7F && !hasOwn(set, chr) ? chr : encodeURIComponent(chr);
};

// https://url.spec.whatwg.org/#special-scheme
var specialSchemes = {
  ftp: 21,
  file: null,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

// https://url.spec.whatwg.org/#windows-drive-letter
var isWindowsDriveLetter = function (string, normalized) {
  var second;
  return string.length == 2 && exec(ALPHA, charAt(string, 0))
    && ((second = charAt(string, 1)) == ':' || (!normalized && second == '|'));
};

// https://url.spec.whatwg.org/#start-with-a-windows-drive-letter
var startsWithWindowsDriveLetter = function (string) {
  var third;
  return string.length > 1 && isWindowsDriveLetter(stringSlice(string, 0, 2)) && (
    string.length == 2 ||
    ((third = charAt(string, 2)) === '/' || third === '\\' || third === '?' || third === '#')
  );
};

// https://url.spec.whatwg.org/#single-dot-path-segment
var isSingleDot = function (segment) {
  return segment === '.' || toLowerCase(segment) === '%2e';
};

// https://url.spec.whatwg.org/#double-dot-path-segment
var isDoubleDot = function (segment) {
  segment = toLowerCase(segment);
  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
};

// States:
var SCHEME_START = {};
var SCHEME = {};
var NO_SCHEME = {};
var SPECIAL_RELATIVE_OR_AUTHORITY = {};
var PATH_OR_AUTHORITY = {};
var RELATIVE = {};
var RELATIVE_SLASH = {};
var SPECIAL_AUTHORITY_SLASHES = {};
var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
var AUTHORITY = {};
var HOST = {};
var HOSTNAME = {};
var PORT = {};
var FILE = {};
var FILE_SLASH = {};
var FILE_HOST = {};
var PATH_START = {};
var PATH = {};
var CANNOT_BE_A_BASE_URL_PATH = {};
var QUERY = {};
var FRAGMENT = {};

var URLState = function (url, isBase, base) {
  var urlString = $toString(url);
  var baseState, failure, searchParams;
  if (isBase) {
    failure = this.parse(urlString);
    if (failure) throw TypeError(failure);
    this.searchParams = null;
  } else {
    if (base !== undefined) baseState = new URLState(base, true);
    failure = this.parse(urlString, null, baseState);
    if (failure) throw TypeError(failure);
    searchParams = getInternalSearchParamsState(new URLSearchParams());
    searchParams.bindURL(this);
    this.searchParams = searchParams;
  }
};

URLState.prototype = {
  type: 'URL',
  // https://url.spec.whatwg.org/#url-parsing
  // eslint-disable-next-line max-statements -- TODO
  parse: function (input, stateOverride, base) {
    var url = this;
    var state = stateOverride || SCHEME_START;
    var pointer = 0;
    var buffer = '';
    var seenAt = false;
    var seenBracket = false;
    var seenPasswordToken = false;
    var codePoints, chr, bufferCodePoints, failure;

    input = $toString(input);

    if (!stateOverride) {
      url.scheme = '';
      url.username = '';
      url.password = '';
      url.host = null;
      url.port = null;
      url.path = [];
      url.query = null;
      url.fragment = null;
      url.cannotBeABaseURL = false;
      input = replace(input, LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
    }

    input = replace(input, TAB_AND_NEW_LINE, '');

    codePoints = arrayFrom(input);

    while (pointer <= codePoints.length) {
      chr = codePoints[pointer];
      switch (state) {
        case SCHEME_START:
          if (chr && exec(ALPHA, chr)) {
            buffer += toLowerCase(chr);
            state = SCHEME;
          } else if (!stateOverride) {
            state = NO_SCHEME;
            continue;
          } else return INVALID_SCHEME;
          break;

        case SCHEME:
          if (chr && (exec(ALPHANUMERIC, chr) || chr == '+' || chr == '-' || chr == '.')) {
            buffer += toLowerCase(chr);
          } else if (chr == ':') {
            if (stateOverride && (
              (url.isSpecial() != hasOwn(specialSchemes, buffer)) ||
              (buffer == 'file' && (url.includesCredentials() || url.port !== null)) ||
              (url.scheme == 'file' && !url.host)
            )) return;
            url.scheme = buffer;
            if (stateOverride) {
              if (url.isSpecial() && specialSchemes[url.scheme] == url.port) url.port = null;
              return;
            }
            buffer = '';
            if (url.scheme == 'file') {
              state = FILE;
            } else if (url.isSpecial() && base && base.scheme == url.scheme) {
              state = SPECIAL_RELATIVE_OR_AUTHORITY;
            } else if (url.isSpecial()) {
              state = SPECIAL_AUTHORITY_SLASHES;
            } else if (codePoints[pointer + 1] == '/') {
              state = PATH_OR_AUTHORITY;
              pointer++;
            } else {
              url.cannotBeABaseURL = true;
              push(url.path, '');
              state = CANNOT_BE_A_BASE_URL_PATH;
            }
          } else if (!stateOverride) {
            buffer = '';
            state = NO_SCHEME;
            pointer = 0;
            continue;
          } else return INVALID_SCHEME;
          break;

        case NO_SCHEME:
          if (!base || (base.cannotBeABaseURL && chr != '#')) return INVALID_SCHEME;
          if (base.cannotBeABaseURL && chr == '#') {
            url.scheme = base.scheme;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            url.cannotBeABaseURL = true;
            state = FRAGMENT;
            break;
          }
          state = base.scheme == 'file' ? FILE : RELATIVE;
          continue;

        case SPECIAL_RELATIVE_OR_AUTHORITY:
          if (chr == '/' && codePoints[pointer + 1] == '/') {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
            pointer++;
          } else {
            state = RELATIVE;
            continue;
          } break;

        case PATH_OR_AUTHORITY:
          if (chr == '/') {
            state = AUTHORITY;
            break;
          } else {
            state = PATH;
            continue;
          }

        case RELATIVE:
          url.scheme = base.scheme;
          if (chr == EOF) {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
          } else if (chr == '/' || (chr == '\\' && url.isSpecial())) {
            state = RELATIVE_SLASH;
          } else if (chr == '?') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.query = base.query;
            url.fragment = '';
            state = FRAGMENT;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            url.path = arraySlice(base.path);
            url.path.length--;
            state = PATH;
            continue;
          } break;

        case RELATIVE_SLASH:
          if (url.isSpecial() && (chr == '/' || chr == '\\')) {
            state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          } else if (chr == '/') {
            state = AUTHORITY;
          } else {
            url.username = base.username;
            url.password = base.password;
            url.host = base.host;
            url.port = base.port;
            state = PATH;
            continue;
          } break;

        case SPECIAL_AUTHORITY_SLASHES:
          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
          if (chr != '/' || charAt(buffer, pointer + 1) != '/') continue;
          pointer++;
          break;

        case SPECIAL_AUTHORITY_IGNORE_SLASHES:
          if (chr != '/' && chr != '\\') {
            state = AUTHORITY;
            continue;
          } break;

        case AUTHORITY:
          if (chr == '@') {
            if (seenAt) buffer = '%40' + buffer;
            seenAt = true;
            bufferCodePoints = arrayFrom(buffer);
            for (var i = 0; i < bufferCodePoints.length; i++) {
              var codePoint = bufferCodePoints[i];
              if (codePoint == ':' && !seenPasswordToken) {
                seenPasswordToken = true;
                continue;
              }
              var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
              if (seenPasswordToken) url.password += encodedCodePoints;
              else url.username += encodedCodePoints;
            }
            buffer = '';
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial())
          ) {
            if (seenAt && buffer == '') return INVALID_AUTHORITY;
            pointer -= arrayFrom(buffer).length + 1;
            buffer = '';
            state = HOST;
          } else buffer += chr;
          break;

        case HOST:
        case HOSTNAME:
          if (stateOverride && url.scheme == 'file') {
            state = FILE_HOST;
            continue;
          } else if (chr == ':' && !seenBracket) {
            if (buffer == '') return INVALID_HOST;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PORT;
            if (stateOverride == HOSTNAME) return;
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial())
          ) {
            if (url.isSpecial() && buffer == '') return INVALID_HOST;
            if (stateOverride && buffer == '' && (url.includesCredentials() || url.port !== null)) return;
            failure = url.parseHost(buffer);
            if (failure) return failure;
            buffer = '';
            state = PATH_START;
            if (stateOverride) return;
            continue;
          } else {
            if (chr == '[') seenBracket = true;
            else if (chr == ']') seenBracket = false;
            buffer += chr;
          } break;

        case PORT:
          if (exec(DIGIT, chr)) {
            buffer += chr;
          } else if (
            chr == EOF || chr == '/' || chr == '?' || chr == '#' ||
            (chr == '\\' && url.isSpecial()) ||
            stateOverride
          ) {
            if (buffer != '') {
              var port = parseInt(buffer, 10);
              if (port > 0xFFFF) return INVALID_PORT;
              url.port = (url.isSpecial() && port === specialSchemes[url.scheme]) ? null : port;
              buffer = '';
            }
            if (stateOverride) return;
            state = PATH_START;
            continue;
          } else return INVALID_PORT;
          break;

        case FILE:
          url.scheme = 'file';
          if (chr == '/' || chr == '\\') state = FILE_SLASH;
          else if (base && base.scheme == 'file') {
            if (chr == EOF) {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
            } else if (chr == '?') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.host = base.host;
              url.path = arraySlice(base.path);
              url.query = base.query;
              url.fragment = '';
              state = FRAGMENT;
            } else {
              if (!startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
                url.host = base.host;
                url.path = arraySlice(base.path);
                url.shortenPath();
              }
              state = PATH;
              continue;
            }
          } else {
            state = PATH;
            continue;
          } break;

        case FILE_SLASH:
          if (chr == '/' || chr == '\\') {
            state = FILE_HOST;
            break;
          }
          if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(join(arraySlice(codePoints, pointer), ''))) {
            if (isWindowsDriveLetter(base.path[0], true)) push(url.path, base.path[0]);
            else url.host = base.host;
          }
          state = PATH;
          continue;

        case FILE_HOST:
          if (chr == EOF || chr == '/' || chr == '\\' || chr == '?' || chr == '#') {
            if (!stateOverride && isWindowsDriveLetter(buffer)) {
              state = PATH;
            } else if (buffer == '') {
              url.host = '';
              if (stateOverride) return;
              state = PATH_START;
            } else {
              failure = url.parseHost(buffer);
              if (failure) return failure;
              if (url.host == 'localhost') url.host = '';
              if (stateOverride) return;
              buffer = '';
              state = PATH_START;
            } continue;
          } else buffer += chr;
          break;

        case PATH_START:
          if (url.isSpecial()) {
            state = PATH;
            if (chr != '/' && chr != '\\') continue;
          } else if (!stateOverride && chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            state = PATH;
            if (chr != '/') continue;
          } break;

        case PATH:
          if (
            chr == EOF || chr == '/' ||
            (chr == '\\' && url.isSpecial()) ||
            (!stateOverride && (chr == '?' || chr == '#'))
          ) {
            if (isDoubleDot(buffer)) {
              url.shortenPath();
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else if (isSingleDot(buffer)) {
              if (chr != '/' && !(chr == '\\' && url.isSpecial())) {
                push(url.path, '');
              }
            } else {
              if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                if (url.host) url.host = '';
                buffer = charAt(buffer, 0) + ':'; // normalize windows drive letter
              }
              push(url.path, buffer);
            }
            buffer = '';
            if (url.scheme == 'file' && (chr == EOF || chr == '?' || chr == '#')) {
              while (url.path.length > 1 && url.path[0] === '') {
                shift(url.path);
              }
            }
            if (chr == '?') {
              url.query = '';
              state = QUERY;
            } else if (chr == '#') {
              url.fragment = '';
              state = FRAGMENT;
            }
          } else {
            buffer += percentEncode(chr, pathPercentEncodeSet);
          } break;

        case CANNOT_BE_A_BASE_URL_PATH:
          if (chr == '?') {
            url.query = '';
            state = QUERY;
          } else if (chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            url.path[0] += percentEncode(chr, C0ControlPercentEncodeSet);
          } break;

        case QUERY:
          if (!stateOverride && chr == '#') {
            url.fragment = '';
            state = FRAGMENT;
          } else if (chr != EOF) {
            if (chr == "'" && url.isSpecial()) url.query += '%27';
            else if (chr == '#') url.query += '%23';
            else url.query += percentEncode(chr, C0ControlPercentEncodeSet);
          } break;

        case FRAGMENT:
          if (chr != EOF) url.fragment += percentEncode(chr, fragmentPercentEncodeSet);
          break;
      }

      pointer++;
    }
  },
  // https://url.spec.whatwg.org/#host-parsing
  parseHost: function (input) {
    var result, codePoints, index;
    if (charAt(input, 0) == '[') {
      if (charAt(input, input.length - 1) != ']') return INVALID_HOST;
      result = parseIPv6(stringSlice(input, 1, -1));
      if (!result) return INVALID_HOST;
      this.host = result;
    // opaque host
    } else if (!this.isSpecial()) {
      if (exec(FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT, input)) return INVALID_HOST;
      result = '';
      codePoints = arrayFrom(input);
      for (index = 0; index < codePoints.length; index++) {
        result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
      }
      this.host = result;
    } else {
      input = toASCII(input);
      if (exec(FORBIDDEN_HOST_CODE_POINT, input)) return INVALID_HOST;
      result = parseIPv4(input);
      if (result === null) return INVALID_HOST;
      this.host = result;
    }
  },
  // https://url.spec.whatwg.org/#cannot-have-a-username-password-port
  cannotHaveUsernamePasswordPort: function () {
    return !this.host || this.cannotBeABaseURL || this.scheme == 'file';
  },
  // https://url.spec.whatwg.org/#include-credentials
  includesCredentials: function () {
    return this.username != '' || this.password != '';
  },
  // https://url.spec.whatwg.org/#is-special
  isSpecial: function () {
    return hasOwn(specialSchemes, this.scheme);
  },
  // https://url.spec.whatwg.org/#shorten-a-urls-path
  shortenPath: function () {
    var path = this.path;
    var pathSize = path.length;
    if (pathSize && (this.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
      path.length--;
    }
  },
  // https://url.spec.whatwg.org/#concept-url-serializer
  serialize: function () {
    var url = this;
    var scheme = url.scheme;
    var username = url.username;
    var password = url.password;
    var host = url.host;
    var port = url.port;
    var path = url.path;
    var query = url.query;
    var fragment = url.fragment;
    var output = scheme + ':';
    if (host !== null) {
      output += '//';
      if (url.includesCredentials()) {
        output += username + (password ? ':' + password : '') + '@';
      }
      output += serializeHost(host);
      if (port !== null) output += ':' + port;
    } else if (scheme == 'file') output += '//';
    output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
    if (query !== null) output += '?' + query;
    if (fragment !== null) output += '#' + fragment;
    return output;
  },
  // https://url.spec.whatwg.org/#dom-url-href
  setHref: function (href) {
    var failure = this.parse(href);
    if (failure) throw TypeError(failure);
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-origin
  getOrigin: function () {
    var scheme = this.scheme;
    var port = this.port;
    if (scheme == 'blob') try {
      return new URLConstructor(scheme.path[0]).origin;
    } catch (error) {
      return 'null';
    }
    if (scheme == 'file' || !this.isSpecial()) return 'null';
    return scheme + '://' + serializeHost(this.host) + (port !== null ? ':' + port : '');
  },
  // https://url.spec.whatwg.org/#dom-url-protocol
  getProtocol: function () {
    return this.scheme + ':';
  },
  setProtocol: function (protocol) {
    this.parse($toString(protocol) + ':', SCHEME_START);
  },
  // https://url.spec.whatwg.org/#dom-url-username
  getUsername: function () {
    return this.username;
  },
  setUsername: function (username) {
    var codePoints = arrayFrom($toString(username));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.username = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-password
  getPassword: function () {
    return this.password;
  },
  setPassword: function (password) {
    var codePoints = arrayFrom($toString(password));
    if (this.cannotHaveUsernamePasswordPort()) return;
    this.password = '';
    for (var i = 0; i < codePoints.length; i++) {
      this.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
    }
  },
  // https://url.spec.whatwg.org/#dom-url-host
  getHost: function () {
    var host = this.host;
    var port = this.port;
    return host === null ? ''
      : port === null ? serializeHost(host)
      : serializeHost(host) + ':' + port;
  },
  setHost: function (host) {
    if (this.cannotBeABaseURL) return;
    this.parse(host, HOST);
  },
  // https://url.spec.whatwg.org/#dom-url-hostname
  getHostname: function () {
    var host = this.host;
    return host === null ? '' : serializeHost(host);
  },
  setHostname: function (hostname) {
    if (this.cannotBeABaseURL) return;
    this.parse(hostname, HOSTNAME);
  },
  // https://url.spec.whatwg.org/#dom-url-port
  getPort: function () {
    var port = this.port;
    return port === null ? '' : $toString(port);
  },
  setPort: function (port) {
    if (this.cannotHaveUsernamePasswordPort()) return;
    port = $toString(port);
    if (port == '') this.port = null;
    else this.parse(port, PORT);
  },
  // https://url.spec.whatwg.org/#dom-url-pathname
  getPathname: function () {
    var path = this.path;
    return this.cannotBeABaseURL ? path[0] : path.length ? '/' + join(path, '/') : '';
  },
  setPathname: function (pathname) {
    if (this.cannotBeABaseURL) return;
    this.path = [];
    this.parse(pathname, PATH_START);
  },
  // https://url.spec.whatwg.org/#dom-url-search
  getSearch: function () {
    var query = this.query;
    return query ? '?' + query : '';
  },
  setSearch: function (search) {
    search = $toString(search);
    if (search == '') {
      this.query = null;
    } else {
      if ('?' == charAt(search, 0)) search = stringSlice(search, 1);
      this.query = '';
      this.parse(search, QUERY);
    }
    this.searchParams.update();
  },
  // https://url.spec.whatwg.org/#dom-url-searchparams
  getSearchParams: function () {
    return this.searchParams.facade;
  },
  // https://url.spec.whatwg.org/#dom-url-hash
  getHash: function () {
    var fragment = this.fragment;
    return fragment ? '#' + fragment : '';
  },
  setHash: function (hash) {
    hash = $toString(hash);
    if (hash == '') {
      this.fragment = null;
      return;
    }
    if ('#' == charAt(hash, 0)) hash = stringSlice(hash, 1);
    this.fragment = '';
    this.parse(hash, FRAGMENT);
  },
  update: function () {
    this.query = this.searchParams.serialize() || null;
  }
};

// `URL` constructor
// https://url.spec.whatwg.org/#url-class
var URLConstructor = function URL(url /* , base */) {
  var that = anInstance(this, URLPrototype);
  var base = validateArgumentsLength(arguments.length, 1) > 1 ? arguments[1] : undefined;
  var state = setInternalState(that, new URLState(url, false, base));
  if (!DESCRIPTORS) {
    that.href = state.serialize();
    that.origin = state.getOrigin();
    that.protocol = state.getProtocol();
    that.username = state.getUsername();
    that.password = state.getPassword();
    that.host = state.getHost();
    that.hostname = state.getHostname();
    that.port = state.getPort();
    that.pathname = state.getPathname();
    that.search = state.getSearch();
    that.searchParams = state.getSearchParams();
    that.hash = state.getHash();
  }
};

var URLPrototype = URLConstructor.prototype;

var accessorDescriptor = function (getter, setter) {
  return {
    get: function () {
      return getInternalURLState(this)[getter]();
    },
    set: setter && function (value) {
      return getInternalURLState(this)[setter](value);
    },
    configurable: true,
    enumerable: true
  };
};

if (DESCRIPTORS) {
  // `URL.prototype.href` accessors pair
  // https://url.spec.whatwg.org/#dom-url-href
  defineBuiltInAccessor(URLPrototype, 'href', accessorDescriptor('serialize', 'setHref'));
  // `URL.prototype.origin` getter
  // https://url.spec.whatwg.org/#dom-url-origin
  defineBuiltInAccessor(URLPrototype, 'origin', accessorDescriptor('getOrigin'));
  // `URL.prototype.protocol` accessors pair
  // https://url.spec.whatwg.org/#dom-url-protocol
  defineBuiltInAccessor(URLPrototype, 'protocol', accessorDescriptor('getProtocol', 'setProtocol'));
  // `URL.prototype.username` accessors pair
  // https://url.spec.whatwg.org/#dom-url-username
  defineBuiltInAccessor(URLPrototype, 'username', accessorDescriptor('getUsername', 'setUsername'));
  // `URL.prototype.password` accessors pair
  // https://url.spec.whatwg.org/#dom-url-password
  defineBuiltInAccessor(URLPrototype, 'password', accessorDescriptor('getPassword', 'setPassword'));
  // `URL.prototype.host` accessors pair
  // https://url.spec.whatwg.org/#dom-url-host
  defineBuiltInAccessor(URLPrototype, 'host', accessorDescriptor('getHost', 'setHost'));
  // `URL.prototype.hostname` accessors pair
  // https://url.spec.whatwg.org/#dom-url-hostname
  defineBuiltInAccessor(URLPrototype, 'hostname', accessorDescriptor('getHostname', 'setHostname'));
  // `URL.prototype.port` accessors pair
  // https://url.spec.whatwg.org/#dom-url-port
  defineBuiltInAccessor(URLPrototype, 'port', accessorDescriptor('getPort', 'setPort'));
  // `URL.prototype.pathname` accessors pair
  // https://url.spec.whatwg.org/#dom-url-pathname
  defineBuiltInAccessor(URLPrototype, 'pathname', accessorDescriptor('getPathname', 'setPathname'));
  // `URL.prototype.search` accessors pair
  // https://url.spec.whatwg.org/#dom-url-search
  defineBuiltInAccessor(URLPrototype, 'search', accessorDescriptor('getSearch', 'setSearch'));
  // `URL.prototype.searchParams` getter
  // https://url.spec.whatwg.org/#dom-url-searchparams
  defineBuiltInAccessor(URLPrototype, 'searchParams', accessorDescriptor('getSearchParams'));
  // `URL.prototype.hash` accessors pair
  // https://url.spec.whatwg.org/#dom-url-hash
  defineBuiltInAccessor(URLPrototype, 'hash', accessorDescriptor('getHash', 'setHash'));
}

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
defineBuiltIn(URLPrototype, 'toJSON', function toJSON() {
  return getInternalURLState(this).serialize();
}, { enumerable: true });

// `URL.prototype.toString` method
// https://url.spec.whatwg.org/#URL-stringification-behavior
defineBuiltIn(URLPrototype, 'toString', function toString() {
  return getInternalURLState(this).serialize();
}, { enumerable: true });

if (NativeURL) {
  var nativeCreateObjectURL = NativeURL.createObjectURL;
  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
  // `URL.createObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
  if (nativeCreateObjectURL) defineBuiltIn(URLConstructor, 'createObjectURL', bind(nativeCreateObjectURL, NativeURL));
  // `URL.revokeObjectURL` method
  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
  if (nativeRevokeObjectURL) defineBuiltIn(URLConstructor, 'revokeObjectURL', bind(nativeRevokeObjectURL, NativeURL));
}

setToStringTag(URLConstructor, 'URL');

$({ global: true, constructor: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
  URL: URLConstructor
});


/***/ }),

/***/ "./node_modules/core-js/modules/web.url.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/web.url.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

// TODO: Remove this module from `core-js@4` since it's replaced to module below
__webpack_require__(/*! ../modules/web.url.constructor */ "./node_modules/core-js/modules/web.url.constructor.js");


/***/ }),

/***/ "./node_modules/core-js/modules/web.url.to-json.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/web.url.to-json.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "./node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "./node_modules/core-js/internals/function-call.js");

// `URL.prototype.toJSON` method
// https://url.spec.whatwg.org/#dom-url-tojson
$({ target: 'URL', proto: true, enumerable: true }, {
  toJSON: function toJSON() {
    return call(URL.prototype.toString, this);
  }
});


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles/main.css":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles/main.css ***!
  \*************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
___CSS_LOADER_EXPORT___.push([module.id, "@import url(https://fonts.googleapis.com/css2?family=Carter+One&display=swap);"]);
// Module
___CSS_LOADER_EXPORT___.push([module.id, ":root {\n  --label-font: Verdana, Geneva, Tahoma, sans-serif;\n  --content-font: 'Times New Roman', Times, serif;\n  --header-height: 56px;\n  --footer-height: 44px;\n  --header-color: #0000bb;\n  --side-panel-bg-color: #f4f4f4;\n  --modal-accent-color: #d4d4d4;\n  --input-disabled-color: #707070;\n  --input-disabled-bg-color: #e2e2e2;\n  --item-separator-color: #f0f0f0;\n  --item-selection-color: #f0f0f0;\n  --main-content-width: 800px;\n}\n\n.date-picker-heading {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.date-picker-heading select, .date-picker-heading input {\n  font-size: 16px;\n}\n\n.date-picker-grid {\n  margin: 12px 0;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-gap: 6px;\n  gap: 6px;\n}\n\n.date-picker-day-header, .date-picker-day {\n  width: 40px;\n  height: 40px;\n  line-height: 32px;\n  padding: 4px;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 16px;\n  text-align: center;\n\n  border-radius: 20px;\n}\n\n.date-picker-day-header {\n  font-weight: bold;\n}\n\n.date-picker-day.selected {\n  color: white;\n  background-color: rgb(35, 35, 211);\n  font-weight: bold;\n}\n\n.date-picker-day.today {\n  font-weight: bold;\n  border: 1px solid black;\n}\n\n.date-picker-day.different-month {\n  color: #707070;\n}\n\n.date-picker-day.selected.different-month {\n  color: white;\n  background-color: rgba(35, 35, 211, 0.5);\n}\n\n.filter-menu {\n  margin: 24px;\n}\n\n.filter-group {\n  margin-bottom: 12px;\n}\n\n.filter-group-heading {\n  display: flex;\n  justify-content: space-between;\n  margin-right: 2px;\n}\n\n.filter-group-heading > .icon-container > * + * {\n  margin-left: 4px;\n}\n\n.filter-group-toggle {\n  flex: 1;\n  text-align: left;\n  padding: 8px;\n}\n\n.filter-group-expand-icon {\n  vertical-align: middle;\n}\n\n.filter-group-label {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 16px;\n  font-weight: bold;\n  vertical-align: middle;\n}\n\n.filter-list {\n  padding: 2px;\n}\n\n.filter-item {\n  margin: 4px 0 6px 32px;\n}\n\n.filter-item-selector {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  padding: 8px;\n  border-radius: 4px;\n  outline-offset: 0;\n}\n\n.filter-item-selector:hover, .filter-item.selected .filter-item-selector {\n  background-color: #dadada;\n}\n\n.filter-item-label {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\ninput:focus, select:focus, textarea:focus, button:focus {\n  outline: 1px solid blue;\n}\n\n/* Use :focus-visible if browser supports it */\n\ninput:focus:not(:focus-visible) {\n  outline: none;\n}\n\nselect:focus:not(:focus-visible) {\n  outline: none;\n}\n\ntextarea:focus:not(:focus-visible) {\n  outline: none;\n}\n\nbutton:focus:not(:focus-visible) {\n  outline: none;\n}\n\ninput:invalid, select:invalid, textarea:invalid {\n  outline: 1px solid red;\n}\n\nbutton {\n  background-color: transparent;\n  border-style: none;\n  cursor: pointer;\n}\n\ninput[type=\"radio\"], input[type=\"checkbox\"] {\n  margin: 0 6px;\n}\n\n.toggle-button {\n  padding: 6px;\n\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n\n  font-family: var(--label-font);\n  font-size: 14px;\n\n  color: black;\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 6px;\n\n  transition: color 100ms, background-color 100ms;\n}\n\n.toggle-button.active {\n  color: white;\n  background-color: #2323d3;\n}\n\n.toggle-button.active:disabled {\n  color: #707070;\n  color: var(--input-disabled-color);\n  background-color: #c8c8f4;\n}\n\n.form-input-container {\n  margin: 12px 0 24px;\n}\n\n.form-input-date-container {\n  display: flex;\n  width: 100%;\n}\n\n.form-input-date-container input {\n  flex: auto;\n  margin-right: 6px;\n}\n\n.form-input-date-container-inline input {\n  width: 150px;\n  margin-right: 6px;\n}\n\n.form-input-label {\n  display: block;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\n.form-input-label-inline {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 14px;\n  line-height: normal;\n}\n\n.form-input, .form-select, .form-textarea {\n  width: 100%;\n}\n\n.form-input,\n.form-input-inline,\n.form-select,\n.form-select-inline,\n.form-textarea,\n.form-button {\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 8px;\n\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n\n  font-family: var(--label-font);\n  font-size: 14px;\n}\n\n.form-select {\n  text-overflow: ellipsis;\n}\n\n.form-textarea {\n  width: 100%;\n  resize: vertical;\n  line-height: normal;\n}\n\n.form-button {\n  background-color: white;\n}\n\n.form-button:active {\n  background-color: #f0f0f0;\n}\n\n.form-button-container > .form-button + .form-button {\n  margin-left: 8px;\n}\n\n.form-input-item-container {\n  padding: 8px 0;\n}\n\n.form-input-item-label {\n  padding-left: 8px;\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 14px;\n}\n\n.form-input-inline.form-input-count {\n  width: 90px;\n}\n\n.form-input-hidden {\n  display: none;\n}\n\n.form-weekday-button {\n  margin: 8px 6px 8px 0;\n  border-radius: 10px;\n}\n\n.form-input:disabled,\n.form-input-inline:disabled,\n.form-select:disabled,\n.form-select-inline:disabled,\n.form-textarea:disabled,\n.form-button:disabled,\n.toggle-button:disabled {\n  color: #707070;\n  color: var(--input-disabled-color);\n  background-color: #e2e2e2;\n  background-color: var(--input-disabled-bg-color);\n  border-color: #e2e2e2;\n  border-color: var(--input-disabled-bg-color);\n}\n\n.confirmation-box {\n  display: block;\n  margin-top: 8px;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 100;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n\n.modal-wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 200;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal {\n  width: 400px;\n  max-width: 100vw;\n  max-height: 100vh; /* Fallback for older browsers */\n  max-height: min(600px, 100vh);\n  overflow: auto;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 8px;\n}\n\n.modal-title-bar {\n  background-color: #d4d4d4;\n  background-color: var(--modal-accent-color);\n  width: 100%;\n  padding: 12px;\n  border-bottom: 1px solid black;\n  flex: none;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.modal-title {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.modal-content {\n  width: 100%;\n  overflow: auto;\n  padding: 12px;\n}\n\n.modal-button-container {\n  display: flex;\n  justify-content: flex-end;\n\n  width: 100%;\n  padding: 12px;\n\n  border-top: 1px solid black;\n  background-color: #d4d4d4;\n  background-color: var(--modal-accent-color);\n}\n\n.modal-button-container > * + * {\n  margin-left: 12px;\n}\n\n.modal-button {\n  width: 100px;\n  padding: 6px;\n\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n\n  font-family: var(--label-font);\n  font-size: 16px;\n\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 6px;\n}\n\n.modal-button:focus {\n  font-weight: bold;\n}\n\n.modal-button.modal-okay {\n  color: white;\n  background-color: #2323d3;\n}\n\n.info-modal-content-paragraph {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n.info-modal-content-paragraph + .info-modal-content-paragraph {\n  margin-top: 12px;\n}\n\n.about-modal-paragraph {\n  font-family: 'Times New Roman', Times, serif;\n  font-family: var(--content-font);\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n.about-modal-version {\n  font-weight: bold;\n}\n\n.popup-menu-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 950;\n  background-color: transparent;\n}\n\n.popup-menu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  border: 1px solid black;\n  background-color: white;\n  z-index: 1000;\n  max-width: 100vw;\n  max-height: 100vh;\n  overflow: auto;\n}\n\n.popup-menu-item {\n  padding: 8px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.popup-menu-item + .popup-menu-item {\n  border-top: 1px solid #f0f0f0;\n  border-top: 1px solid var(--item-separator-color);\n}\n\n.popup-menu-item.active {\n  background-color: #f0f0f0;\n  background-color: var(--item-selection-color);\n}\n\n.popup-menu-item-label {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 16px;\n  flex-grow: 1;\n  flex-shrink: 0;\n  margin-left: 8px;\n}\n\n.task-panel {\n  width: 100%;\n  border-top: 1px solid #f0f0f0;\n  border-top: 1px solid var(--item-separator-color);\n  flex: 1;\n  overflow: auto;\n}\n\n.task-panel-content {\n  width: 100%;\n  max-width: 800px;\n  max-width: var(--main-content-width);\n  padding: 12px;\n  margin: auto;\n}\n\n.task-list-heading {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 20px;\n  font-weight: bold;\n  margin-top: 28px;\n  padding: 0 8px;\n}\n\n.task-list-item {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  display: flex;\n  align-items: flex-start;\n  padding: 12px 8px;\n}\n\n.task-list-item + .task-list-item {\n  border-top: 1px solid #f0f0f0;\n  border-top: 1px solid var(--item-separator-color);\n}\n\n.task-list-item:hover {\n  background-color: #f0f0f0;\n  background-color: var(--item-selection-color);\n  border-radius: 8px;\n}\n\n.task-list-item-checkbox {\n  margin: 2px 12px 4px 0;\n}\n\n.task-list-item-info-container {\n  flex: 1;\n}\n\n.task-list-item-name {\n  font-size: 18px;\n  margin: 6px 0;\n}\n\n.task-list-item-description {\n  font-size: 14px;\n  margin: 6px 0;\n  line-height: normal;\n  color: #505050;\n  white-space: pre-wrap;\n}\n\n.task-list-item-details {\n  font-size: 14px;\n}\n\n.task-list-item .icon-container {\n  margin-left: 12px;\n}\n\n.task-list-empty {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 18px;\n  color: #505050;\n  padding: 0 8px;\n}\n\n/* Use alternative box model */\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n\nbody {\n  font-family: 'Times New Roman', Times, serif;\n  font-family: var(--content-font);\n}\n\na, a:visited {\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n#app {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  width: 100vw;\n  height: 100vh;\n}\n\n#header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 56px;\n  height: var(--header-height);\n\n  color: white;\n  background-color: #0000bb;\n  background-color: var(--header-color);\n  padding: 12px;\n}\n\n#middle-container {\n  flex: 1 1 auto;\n  display: flex;\n  height: calc(100% - 56px - 44px);\n  height: calc(100% - var(--header-height) - var(--footer-height));\n}\n\n#side-panel {\n  height: 100%;\n  background-color: #f4f4f4;\n  background-color: var(--side-panel-bg-color);\n  overflow: auto;\n  width: 350px;\n  min-width: 250px;\n  max-width: 500px; /* Fallback for older browsers */\n  max-width: min(100vw, 500px);\n}\n\n#main-panel {\n  flex: 1 1 auto;\n  height: 100%;\n  overflow: auto;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n#main-panel-header {\n  width: 100%;\n  max-width: 800px;\n  max-width: var(--main-content-width);\n  margin: auto;\n  display: flex;\n  justify-content: space-between;\n  padding: 24px 12px;\n}\n\n#main-panel-heading-container {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  flex: 1;\n}\n\n#main-panel-heading {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n#main-panel-subheading {\n  margin-top: 8px;\n  font-size: 16px;\n  white-space: pre-wrap;\n  color: #505050;\n\n  max-height: 64px;\n  overflow: auto;\n  line-height: normal;\n}\n\n#main-panel-header .icon-container {\n  margin-left: 12px;\n}\n\n#footer {\n  color: white;\n  background-color: #2c2c32;\n  font-size: 16px;\n  padding: 12px;\n  height: 44px;\n  height: var(--footer-height);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#footer a {\n  color: inherit;\n}\n\n#footer a:hover {\n  color: #c3c2fd;\n}\n\n.closed {\n  display: none;\n}\n\n.resizer {\n  background-color: #f4f4f4;\n  background-color: var(--side-panel-bg-color);\n  width: 8px;\n  height: 100%;\n  cursor: col-resize;\n}\n\n.resizer.dragging, .resizer:hover {\n  background-color: #9b9b9b;\n}\n\n.icon-container {\n  display: flex;\n}\n\n.icon-container > * + * {\n  margin-left: 4px;\n}\n\n.collapsible {\n  overflow: hidden;\n  transition: height 250ms ease-out;\n}\n\n.title-container {\n  display: flex;\n  align-items: center;\n}\n\n.title-container > * + * {\n  margin-left: 12px;\n}\n\n.title {\n  font-family: 'Carter One', sans-serif;\n  font-size: 24px;\n}\n\n.data-import-results {\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\n  font-family: var(--label-font);\n  font-size: 14px;\n  white-space: pre-wrap;\n  line-height: 1.5;\n}\n\n.data-import-error-list {\n  list-style: disc inside;\n}\n\n@media (max-width: 400px) {\n  .title-container .title {\n    display: none;\n  }\n}\n\n@media (max-height: 500px) {\n  #main-panel-subheading {\n    max-height: 24px;\n  }\n}\n", "",{"version":3,"sources":["webpack://./src/styles/variables.css","webpack://./src/styles/datePicker.css","webpack://./src/styles/filterMenu.css","webpack://./src/styles/form.css","webpack://./src/styles/modal.css","webpack://./src/styles/popupMenu.css","webpack://./src/styles/taskPanel.css","webpack://./src/styles/main.css"],"names":[],"mappings":"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","sourcesContent":[":root {\n  --label-font: Verdana, Geneva, Tahoma, sans-serif;\n  --content-font: 'Times New Roman', Times, serif;\n  --header-height: 56px;\n  --footer-height: 44px;\n  --header-color: #0000bb;\n  --side-panel-bg-color: #f4f4f4;\n  --modal-accent-color: #d4d4d4;\n  --input-disabled-color: #707070;\n  --input-disabled-bg-color: #e2e2e2;\n  --item-separator-color: #f0f0f0;\n  --item-selection-color: #f0f0f0;\n  --main-content-width: 800px;\n}\n",".date-picker-heading {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.date-picker-heading select, .date-picker-heading input {\n  font-size: 16px;\n}\n\n.date-picker-grid {\n  margin: 12px 0;\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  gap: 6px;\n}\n\n.date-picker-day-header, .date-picker-day {\n  width: 40px;\n  height: 40px;\n  line-height: 32px;\n  padding: 4px;\n  font-family: var(--label-font);\n  font-size: 16px;\n  text-align: center;\n\n  border-radius: 20px;\n}\n\n.date-picker-day-header {\n  font-weight: bold;\n}\n\n.date-picker-day.selected {\n  color: white;\n  background-color: rgb(35, 35, 211);\n  font-weight: bold;\n}\n\n.date-picker-day.today {\n  font-weight: bold;\n  border: 1px solid black;\n}\n\n.date-picker-day.different-month {\n  color: #707070;\n}\n\n.date-picker-day.selected.different-month {\n  color: white;\n  background-color: rgba(35, 35, 211, 0.5);\n}\n",".filter-menu {\n  margin: 24px;\n}\n\n.filter-group {\n  margin-bottom: 12px;\n}\n\n.filter-group-heading {\n  display: flex;\n  justify-content: space-between;\n  margin-right: 2px;\n}\n\n.filter-group-heading > .icon-container > * + * {\n  margin-left: 4px;\n}\n\n.filter-group-toggle {\n  flex: 1;\n  text-align: left;\n  padding: 8px;\n}\n\n.filter-group-expand-icon {\n  vertical-align: middle;\n}\n\n.filter-group-label {\n  font-family: var(--label-font);\n  font-size: 16px;\n  font-weight: bold;\n  vertical-align: middle;\n}\n\n.filter-list {\n  padding: 2px;\n}\n\n.filter-item {\n  margin: 4px 0 6px 32px;\n}\n\n.filter-item-selector {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n\n  padding: 8px;\n  border-radius: 4px;\n  outline-offset: 0;\n}\n\n.filter-item-selector:hover, .filter-item.selected .filter-item-selector {\n  background-color: #dadada;\n}\n\n.filter-item-label {\n  font-family: var(--label-font);\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n","input:focus, select:focus, textarea:focus, button:focus {\n  outline: 1px solid blue;\n}\n\n/* Use :focus-visible if browser supports it */\n:is(input, select, textarea, button):focus:not(:focus-visible) {\n  outline: none;\n}\n\ninput:invalid, select:invalid, textarea:invalid {\n  outline: 1px solid red;\n}\n\nbutton {\n  background-color: transparent;\n  border-style: none;\n  cursor: pointer;\n}\n\ninput[type=\"radio\"], input[type=\"checkbox\"] {\n  margin: 0 6px;\n}\n\n.toggle-button {\n  padding: 6px;\n\n  font-family: var(--label-font);\n  font-size: 14px;\n\n  color: black;\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 6px;\n\n  transition: color 100ms, background-color 100ms;\n}\n\n.toggle-button.active {\n  color: white;\n  background-color: #2323d3;\n}\n\n.toggle-button.active:disabled {\n  color: var(--input-disabled-color);\n  background-color: #c8c8f4;\n}\n\n.form-input-container {\n  margin: 12px 0 24px;\n}\n\n.form-input-date-container {\n  display: flex;\n  width: 100%;\n}\n\n.form-input-date-container input {\n  flex: auto;\n  margin-right: 6px;\n}\n\n.form-input-date-container-inline input {\n  width: 150px;\n  margin-right: 6px;\n}\n\n.form-input-label {\n  display: block;\n  font-family: var(--label-font);\n  font-size: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n}\n\n.form-input-label-inline {\n  font-family: var(--label-font);\n  font-size: 14px;\n  line-height: normal;\n}\n\n.form-input, .form-select, .form-textarea {\n  width: 100%;\n}\n\n.form-input,\n.form-input-inline,\n.form-select,\n.form-select-inline,\n.form-textarea,\n.form-button {\n  padding: 8px;\n  border: 1px solid black;\n  border-radius: 8px;\n\n  font-family: var(--label-font);\n  font-size: 14px;\n}\n\n.form-select {\n  text-overflow: ellipsis;\n}\n\n.form-textarea {\n  width: 100%;\n  resize: vertical;\n  line-height: normal;\n}\n\n.form-button {\n  background-color: white;\n}\n\n.form-button:active {\n  background-color: #f0f0f0;\n}\n\n.form-button-container > .form-button + .form-button {\n  margin-left: 8px;\n}\n\n.form-input-item-container {\n  padding: 8px 0;\n}\n\n.form-input-item-label {\n  padding-left: 8px;\n  font-family: var(--label-font);\n  font-size: 14px;\n}\n\n.form-input-inline.form-input-count {\n  width: 90px;\n}\n\n.form-input-hidden {\n  display: none;\n}\n\n.form-weekday-button {\n  margin: 8px 6px 8px 0;\n  border-radius: 10px;\n}\n\n.form-input:disabled,\n.form-input-inline:disabled,\n.form-select:disabled,\n.form-select-inline:disabled,\n.form-textarea:disabled,\n.form-button:disabled,\n.toggle-button:disabled {\n  color: var(--input-disabled-color);\n  background-color: var(--input-disabled-bg-color);\n  border-color: var(--input-disabled-bg-color);\n}\n\n.confirmation-box {\n  display: block;\n  margin-top: 8px;\n}\n",".modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 100;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n\n.modal-wrapper {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 200;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.modal {\n  width: 400px;\n  max-width: 100vw;\n  max-height: 100vh; /* Fallback for older browsers */\n  max-height: min(600px, 100vh);\n  overflow: auto;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 8px;\n}\n\n.modal-title-bar {\n  background-color: var(--modal-accent-color);\n  width: 100%;\n  padding: 12px;\n  border-bottom: 1px solid black;\n  flex: none;\n\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.modal-title {\n  font-family: var(--label-font);\n  font-size: 20px;\n  font-weight: bold;\n}\n\n.modal-content {\n  width: 100%;\n  overflow: auto;\n  padding: 12px;\n}\n\n.modal-button-container {\n  display: flex;\n  justify-content: flex-end;\n\n  width: 100%;\n  padding: 12px;\n\n  border-top: 1px solid black;\n  background-color: var(--modal-accent-color);\n}\n\n.modal-button-container > * + * {\n  margin-left: 12px;\n}\n\n.modal-button {\n  width: 100px;\n  padding: 6px;\n\n  font-family: var(--label-font);\n  font-size: 16px;\n\n  background-color: white;\n  border: 1px solid black;\n  border-radius: 6px;\n}\n\n.modal-button:focus {\n  font-weight: bold;\n}\n\n.modal-button.modal-okay {\n  color: white;\n  background-color: #2323d3;\n}\n\n.info-modal-content-paragraph {\n  font-family: var(--label-font);\n  font-size: 14px;\n  line-height: 1.5;\n}\n\n.info-modal-content-paragraph + .info-modal-content-paragraph {\n  margin-top: 12px;\n}\n\n.about-modal-paragraph {\n  font-family: var(--content-font);\n  font-size: 16px;\n  line-height: 1.5;\n}\n\n.about-modal-version {\n  font-weight: bold;\n}\n",".popup-menu-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 950;\n  background-color: transparent;\n}\n\n.popup-menu {\n  position: absolute;\n  top: 0;\n  left: 0;\n  border: 1px solid black;\n  background-color: white;\n  z-index: 1000;\n  max-width: 100vw;\n  max-height: 100vh;\n  overflow: auto;\n}\n\n.popup-menu-item {\n  padding: 8px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n}\n\n.popup-menu-item + .popup-menu-item {\n  border-top: 1px solid var(--item-separator-color);\n}\n\n.popup-menu-item.active {\n  background-color: var(--item-selection-color);\n}\n\n.popup-menu-item-label {\n  font-family: var(--label-font);\n  font-size: 16px;\n  flex-grow: 1;\n  flex-shrink: 0;\n  margin-left: 8px;\n}\n",".task-panel {\n  width: 100%;\n  border-top: 1px solid var(--item-separator-color);\n  flex: 1;\n  overflow: auto;\n}\n\n.task-panel-content {\n  width: 100%;\n  max-width: var(--main-content-width);\n  padding: 12px;\n  margin: auto;\n}\n\n.task-list-heading {\n  font-family: var(--label-font);\n  font-size: 20px;\n  font-weight: bold;\n  margin-top: 28px;\n  padding: 0 8px;\n}\n\n.task-list-item {\n  font-family: var(--label-font);\n  display: flex;\n  align-items: flex-start;\n  padding: 12px 8px;\n}\n\n.task-list-item + .task-list-item {\n  border-top: 1px solid var(--item-separator-color);\n}\n\n.task-list-item:hover {\n  background-color: var(--item-selection-color);\n  border-radius: 8px;\n}\n\n.task-list-item-checkbox {\n  margin: 2px 12px 4px 0;\n}\n\n.task-list-item-info-container {\n  flex: 1;\n}\n\n.task-list-item-name {\n  font-size: 18px;\n  margin: 6px 0;\n}\n\n.task-list-item-description {\n  font-size: 14px;\n  margin: 6px 0;\n  line-height: normal;\n  color: #505050;\n  white-space: pre-wrap;\n}\n\n.task-list-item-details {\n  font-size: 14px;\n}\n\n.task-list-item .icon-container {\n  margin-left: 12px;\n}\n\n.task-list-empty {\n  font-family: var(--label-font);\n  font-size: 18px;\n  color: #505050;\n  padding: 0 8px;\n}\n","@import url('https://fonts.googleapis.com/css2?family=Carter+One&display=swap');\n\n@import './variables.css';\n@import './datePicker.css';\n@import './filterMenu.css';\n@import './form.css';\n@import './modal.css';\n@import './popupMenu.css';\n@import './taskPanel.css';\n\n/* Use alternative box model */\nhtml {\n  box-sizing: border-box;\n}\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n\nbody {\n  font-family: var(--content-font);\n}\n\na, a:visited {\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n#app {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  width: 100vw;\n  height: 100vh;\n}\n\n#header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: var(--header-height);\n\n  color: white;\n  background-color: var(--header-color);\n  padding: 12px;\n}\n\n#middle-container {\n  flex: 1 1 auto;\n  display: flex;\n  height: calc(100% - var(--header-height) - var(--footer-height));\n}\n\n#side-panel {\n  height: 100%;\n  background-color: var(--side-panel-bg-color);\n  overflow: auto;\n  width: 350px;\n  min-width: 250px;\n  max-width: 500px; /* Fallback for older browsers */\n  max-width: min(100vw, 500px);\n}\n\n#main-panel {\n  flex: 1 1 auto;\n  height: 100%;\n  overflow: auto;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n}\n\n#main-panel-header {\n  width: 100%;\n  max-width: var(--main-content-width);\n  margin: auto;\n  display: flex;\n  justify-content: space-between;\n  padding: 24px 12px;\n}\n\n#main-panel-heading-container {\n  font-family: var(--label-font);\n  flex: 1;\n}\n\n#main-panel-heading {\n  font-size: 24px;\n  font-weight: bold;\n}\n\n#main-panel-subheading {\n  margin-top: 8px;\n  font-size: 16px;\n  white-space: pre-wrap;\n  color: #505050;\n\n  max-height: 64px;\n  overflow: auto;\n  line-height: normal;\n}\n\n#main-panel-header .icon-container {\n  margin-left: 12px;\n}\n\n#footer {\n  color: white;\n  background-color: #2c2c32;\n  font-size: 16px;\n  padding: 12px;\n  height: var(--footer-height);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n#footer a {\n  color: inherit;\n}\n\n#footer a:hover {\n  color: #c3c2fd;\n}\n\n.closed {\n  display: none;\n}\n\n.resizer {\n  background-color: var(--side-panel-bg-color);\n  width: 8px;\n  height: 100%;\n  cursor: col-resize;\n}\n\n.resizer.dragging, .resizer:hover {\n  background-color: #9b9b9b;\n}\n\n.icon-container {\n  display: flex;\n}\n\n.icon-container > * + * {\n  margin-left: 4px;\n}\n\n.collapsible {\n  overflow: hidden;\n  transition: height 250ms ease-out;\n}\n\n.title-container {\n  display: flex;\n  align-items: center;\n}\n\n.title-container > * + * {\n  margin-left: 12px;\n}\n\n.title {\n  font-family: 'Carter One', sans-serif;\n  font-size: 24px;\n}\n\n.data-import-results {\n  font-family: var(--label-font);\n  font-size: 14px;\n  white-space: pre-wrap;\n  line-height: 1.5;\n}\n\n.data-import-error-list {\n  list-style: disc inside;\n}\n\n@media (max-width: 400px) {\n  .title-container .title {\n    display: none;\n  }\n}\n\n@media (max-height: 500px) {\n  #main-panel-subheading {\n    max-height: 24px;\n  }\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles/reset.css":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles/reset.css ***!
  \**************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*\n * Adapted from:\n * http://meyerweb.com/eric/tools/css/reset/\n * v2.0 - 2011-01-26\n */\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video,\ninput, button, select, textarea {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\n\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\n\nbody {\n\tline-height: 1;\n}\n\nol, ul {\n\tlist-style: none;\n}\n\nblockquote, q {\n\tquotes: none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\n\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n", "",{"version":3,"sources":["webpack://./src/styles/reset.css"],"names":[],"mappings":"AAAA;;;;EAIE;;AAEF;;;;;;;;;;;;;;CAcC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;;AACA,gDAAgD;;AAChD;;CAEC,cAAc;AACf;;AACA;CACC,cAAc;AACf;;AACA;CACC,gBAAgB;AACjB;;AACA;CACC,YAAY;AACb;;AACA;;CAEC,WAAW;CACX,aAAa;AACd;;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB","sourcesContent":["/*\n * Adapted from:\n * http://meyerweb.com/eric/tools/css/reset/\n * v2.0 - 2011-01-26\n */\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video,\ninput, button, select, textarea {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ (function(module) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";

      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }

      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }

      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }

      content += cssWithMappingToString(item);

      if (needLayer) {
        content += "}";
      }

      if (item[2]) {
        content += "}";
      }

      if (item[4]) {
        content += "}";
      }

      return content;
    }).join("");
  }; // import a list of modules into the list


  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }

      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }

      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }

      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ (function(module) {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }

  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ addLeadingZeros; }
/* harmony export */ });
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();

  while (output.length < targetLength) {
    output = '0' + output;
  }

  return sign + output;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/assign/index.js":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/assign/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ assign; }
/* harmony export */ });
function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }

  dirtyObject = dirtyObject || {};

  for (var property in dirtyObject) {
    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {
      target[property] = dirtyObject[property];
    }
  }

  return target;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/format/formatters/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/format/formatters/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_getUTCDayOfYear_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../_lib/getUTCDayOfYear/index.js */ "./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js");
/* harmony import */ var _lib_getUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../_lib/getUTCISOWeek/index.js */ "./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js");
/* harmony import */ var _lib_getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../_lib/getUTCISOWeekYear/index.js */ "./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js");
/* harmony import */ var _lib_getUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../_lib/getUTCWeek/index.js */ "./node_modules/date-fns/esm/_lib/getUTCWeek/index.js");
/* harmony import */ var _lib_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_lib/getUTCWeekYear/index.js */ "./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js");
/* harmony import */ var _addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../addLeadingZeros/index.js */ "./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js");
/* harmony import */ var _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lightFormatters/index.js */ "./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js");







var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

var formatters = {
  // Era
  G: function (date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;

    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {
          width: 'abbreviated'
        });
      // A, B

      case 'GGGGG':
        return localize.era(era, {
          width: 'narrow'
        });
      // Anno Domini, Before Christ

      case 'GGGG':
      default:
        return localize.era(era, {
          width: 'wide'
        });
    }
  },
  // Year
  y: function (date, token, localize) {
    // Ordinal number
    if (token === 'yo') {
      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize.ordinalNumber(year, {
        unit: 'year'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].y(date, token);
  },
  // Local week-numbering year
  Y: function (date, token, localize, options) {
    var signedWeekYear = (0,_lib_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(twoDigitYear, 2);
    } // Ordinal number


    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {
        unit: 'year'
      });
    } // Padding


    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(weekYear, token.length);
  },
  // ISO week-numbering year
  R: function (date, token) {
    var isoWeekYear = (0,_lib_getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(date); // Padding

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(isoWeekYear, token.length);
  },
  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token) {
    var year = date.getUTCFullYear();
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(year, token.length);
  },
  // Quarter
  Q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'QQ':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'Qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'QQQ':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'QQQQQ':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'formatting'
        });
      // 1st quarter, 2nd quarter, ...

      case 'QQQQ':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone quarter
  q: function (date, token, localize) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter);
      // 01, 02, 03, 04

      case 'qq':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(quarter, 2);
      // 1st, 2nd, 3rd, 4th

      case 'qo':
        return localize.ordinalNumber(quarter, {
          unit: 'quarter'
        });
      // Q1, Q2, Q3, Q4

      case 'qqq':
        return localize.quarter(quarter, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)

      case 'qqqqq':
        return localize.quarter(quarter, {
          width: 'narrow',
          context: 'standalone'
        });
      // 1st quarter, 2nd quarter, ...

      case 'qqqq':
      default:
        return localize.quarter(quarter, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Month
  M: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      case 'M':
      case 'MM':
        return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].M(date, token);
      // 1st, 2nd, ..., 12th

      case 'Mo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'MMM':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // J, F, ..., D

      case 'MMMMM':
        return localize.month(month, {
          width: 'narrow',
          context: 'formatting'
        });
      // January, February, ..., December

      case 'MMMM':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone month
  L: function (date, token, localize) {
    var month = date.getUTCMonth();

    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1);
      // 01, 02, ..., 12

      case 'LL':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(month + 1, 2);
      // 1st, 2nd, ..., 12th

      case 'Lo':
        return localize.ordinalNumber(month + 1, {
          unit: 'month'
        });
      // Jan, Feb, ..., Dec

      case 'LLL':
        return localize.month(month, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // J, F, ..., D

      case 'LLLLL':
        return localize.month(month, {
          width: 'narrow',
          context: 'standalone'
        });
      // January, February, ..., December

      case 'LLLL':
      default:
        return localize.month(month, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // Local week of year
  w: function (date, token, localize, options) {
    var week = (0,_lib_getUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_4__["default"])(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {
        unit: 'week'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(week, token.length);
  },
  // ISO week of year
  I: function (date, token, localize) {
    var isoWeek = (0,_lib_getUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_5__["default"])(date);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {
        unit: 'week'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(isoWeek, token.length);
  },
  // Day of the month
  d: function (date, token, localize) {
    if (token === 'do') {
      return localize.ordinalNumber(date.getUTCDate(), {
        unit: 'date'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].d(date, token);
  },
  // Day of year
  D: function (date, token, localize) {
    var dayOfYear = (0,_lib_getUTCDayOfYear_index_js__WEBPACK_IMPORTED_MODULE_6__["default"])(date);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {
        unit: 'dayOfYear'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dayOfYear, token.length);
  },
  // Day of week
  E: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();

    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'EEEEE':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'EEEEEE':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Local day of week
  e: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'ee':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(localDayOfWeek, 2);
      // 1st, 2nd, ..., 7th

      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'eee':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'eeeee':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'eeeeee':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'eeee':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek);
      // Padded numerical value

      case 'cc':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(localDayOfWeek, token.length);
      // 1st, 2nd, ..., 7th

      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {
          unit: 'day'
        });

      case 'ccc':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'standalone'
        });
      // T

      case 'ccccc':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'standalone'
        });
      // Tu

      case 'cccccc':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'standalone'
        });
      // Tuesday

      case 'cccc':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'standalone'
        });
    }
  },
  // ISO day of week
  i: function (date, token, localize) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek);
      // 02

      case 'ii':
        return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(isoDayOfWeek, token.length);
      // 2nd

      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {
          unit: 'day'
        });
      // Tue

      case 'iii':
        return localize.day(dayOfWeek, {
          width: 'abbreviated',
          context: 'formatting'
        });
      // T

      case 'iiiii':
        return localize.day(dayOfWeek, {
          width: 'narrow',
          context: 'formatting'
        });
      // Tu

      case 'iiiiii':
        return localize.day(dayOfWeek, {
          width: 'short',
          context: 'formatting'
        });
      // Tuesday

      case 'iiii':
      default:
        return localize.day(dayOfWeek, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM or PM
  a: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        }).toLowerCase();

      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;

    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'abbreviated',
          context: 'formatting'
        });

      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'narrow',
          context: 'formatting'
        });

      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {
          width: 'wide',
          context: 'formatting'
        });
    }
  },
  // Hour [1-12]
  h: function (date, token, localize) {
    if (token === 'ho') {
      var hours = date.getUTCHours() % 12;
      if (hours === 0) hours = 12;
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].h(date, token);
  },
  // Hour [0-23]
  H: function (date, token, localize) {
    if (token === 'Ho') {
      return localize.ordinalNumber(date.getUTCHours(), {
        unit: 'hour'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].H(date, token);
  },
  // Hour [0-11]
  K: function (date, token, localize) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(hours, token.length);
  },
  // Hour [1-24]
  k: function (date, token, localize) {
    var hours = date.getUTCHours();
    if (hours === 0) hours = 24;

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {
        unit: 'hour'
      });
    }

    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(hours, token.length);
  },
  // Minute
  m: function (date, token, localize) {
    if (token === 'mo') {
      return localize.ordinalNumber(date.getUTCMinutes(), {
        unit: 'minute'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].m(date, token);
  },
  // Second
  s: function (date, token, localize) {
    if (token === 'so') {
      return localize.ordinalNumber(date.getUTCSeconds(), {
        unit: 'second'
      });
    }

    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].s(date, token);
  },
  // Fraction of second
  S: function (date, token) {
    return _lightFormatters_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].S(date, token);
  },
  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z';
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`

      case 'XXXX':
      case 'XX':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`

      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      // Hours, minutes and optional seconds without `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`

      case 'xxxx':
      case 'xx':
        // Hours and minutes without `:` delimiter
        return formatTimezone(timezoneOffset);
      // Hours, minutes and optional seconds with `:` delimiter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`

      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimiter

      default:
        return formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (GMT)
  O: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Timezone (specific non-location)
  z: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');
      // Long

      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':');
    }
  },
  // Seconds timestamp
  t: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(timestamp, token.length);
  },
  // Milliseconds timestamp
  T: function (date, token, _localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(timestamp, token.length);
  }
};

function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;

  if (minutes === 0) {
    return sign + String(hours);
  }

  var delimiter = dirtyDelimiter || '';
  return sign + String(hours) + delimiter + (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(minutes, 2);
}

function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Math.abs(offset) / 60, 2);
  }

  return formatTimezone(offset, dirtyDelimiter);
}

function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Math.floor(absOffset / 60), 2);
  var minutes = (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}

/* harmony default export */ __webpack_exports__["default"] = (formatters);

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/format/lightFormatters/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../addLeadingZeros/index.js */ "./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js");

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */

var formatters = {
  // Year
  y: function (date, token) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(token === 'yy' ? year % 100 : year, token.length);
  },
  // Month
  M: function (date, token) {
    var month = date.getUTCMonth();
    return token === 'M' ? String(month + 1) : (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(month + 1, 2);
  },
  // Day of the month
  d: function (date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(date.getUTCDate(), token.length);
  },
  // AM or PM
  a: function (date, token) {
    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
        return dayPeriodEnumValue.toUpperCase();

      case 'aaa':
        return dayPeriodEnumValue;

      case 'aaaaa':
        return dayPeriodEnumValue[0];

      case 'aaaa':
      default:
        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
    }
  },
  // Hour [1-12]
  h: function (date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(date.getUTCHours() % 12 || 12, token.length);
  },
  // Hour [0-23]
  H: function (date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(date.getUTCHours(), token.length);
  },
  // Minute
  m: function (date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(date.getUTCMinutes(), token.length);
  },
  // Second
  s: function (date, token) {
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(date.getUTCSeconds(), token.length);
  },
  // Fraction of second
  S: function (date, token) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return (0,_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(fractionalSeconds, token.length);
  }
};
/* harmony default export */ __webpack_exports__["default"] = (formatters);

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/format/longFormatters/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/format/longFormatters/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function dateLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'P':
      return formatLong.date({
        width: 'short'
      });

    case 'PP':
      return formatLong.date({
        width: 'medium'
      });

    case 'PPP':
      return formatLong.date({
        width: 'long'
      });

    case 'PPPP':
    default:
      return formatLong.date({
        width: 'full'
      });
  }
}

function timeLongFormatter(pattern, formatLong) {
  switch (pattern) {
    case 'p':
      return formatLong.time({
        width: 'short'
      });

    case 'pp':
      return formatLong.time({
        width: 'medium'
      });

    case 'ppp':
      return formatLong.time({
        width: 'long'
      });

    case 'pppp':
    default:
      return formatLong.time({
        width: 'full'
      });
  }
}

function dateTimeLongFormatter(pattern, formatLong) {
  var matchResult = pattern.match(/(P+)(p+)?/) || [];
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong);
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({
        width: 'short'
      });
      break;

    case 'PP':
      dateTimeFormat = formatLong.dateTime({
        width: 'medium'
      });
      break;

    case 'PPP':
      dateTimeFormat = formatLong.dateTime({
        width: 'long'
      });
      break;

    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({
        width: 'full'
      });
      break;
  }

  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
/* harmony default export */ __webpack_exports__["default"] = (longFormatters);

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getTimezoneOffsetInMilliseconds; }
/* harmony export */ });
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  utcDate.setUTCFullYear(date.getFullYear());
  return date.getTime() - utcDate.getTime();
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getUTCDayOfYear; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCDayOfYear(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getUTCISOWeek; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../startOfUTCISOWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js");
/* harmony import */ var _startOfUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../startOfUTCISOWeekYear/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");




var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeek(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var diff = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(date).getTime() - (0,_startOfUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(date).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getUTCISOWeekYear; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../startOfUTCISOWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js");


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCISOWeekYear(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var year = date.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(fourthOfJanuaryOfThisYear);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/getUTCWeek/index.js":
/*!************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/getUTCWeek/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getUTCWeek; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../startOfUTCWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js");
/* harmony import */ var _startOfUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../startOfUTCWeekYear/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");




var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeek(dirtyDate, options) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var diff = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(date, options).getTime() - (0,_startOfUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(date, options).getTime(); // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)

  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getUTCWeekYear; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../startOfUTCWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js");
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function getUTCWeekYear(dirtyDate, dirtyOptions) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var year = date.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/protectedTokens/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/protectedTokens/index.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isProtectedDayOfYearToken": function() { return /* binding */ isProtectedDayOfYearToken; },
/* harmony export */   "isProtectedWeekYearToken": function() { return /* binding */ isProtectedWeekYearToken; },
/* harmony export */   "throwProtectedError": function() { return /* binding */ throwProtectedError; }
/* harmony export */ });
var protectedDayOfYearTokens = ['D', 'DD'];
var protectedWeekYearTokens = ['YY', 'YYYY'];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token, format, input) {
  if (token === 'YYYY') {
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'YY') {
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'D') {
    throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  } else if (token === 'DD') {
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
  }
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/requiredArgs/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ requiredArgs; }
/* harmony export */ });
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/setUTCDay/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/setUTCDay/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ setUTCDay; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate);
  var day = (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDay);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/setUTCISODay/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/setUTCISODay/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ setUTCISODay; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISODay(dirtyDate, dirtyDay) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var day = (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDay);

  if (day % 7 === 0) {
    day = day - 7;
  }

  var weekStartsOn = 1;
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate);
  var currentDay = date.getUTCDay();
  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;
  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ setUTCISOWeek; }
/* harmony export */ });
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _getUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../getUTCISOWeek/index.js */ "./node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCISOWeek(dirtyDate, dirtyISOWeek) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var isoWeek = (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyISOWeek);
  var diff = (0,_getUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(date) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/setUTCWeek/index.js":
/*!************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/setUTCWeek/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ setUTCWeek; }
/* harmony export */ });
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _getUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../getUTCWeek/index.js */ "./node_modules/date-fns/esm/_lib/getUTCWeek/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function setUTCWeek(dirtyDate, dirtyWeek, options) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var week = (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyWeek);
  var diff = (0,_getUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(date, options) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ startOfUTCISOWeek; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");

 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeek(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var weekStartsOn = 1;
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ startOfUTCISOWeekYear; }
/* harmony export */ });
/* harmony import */ var _getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../getUTCISOWeekYear/index.js */ "./node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js");
/* harmony import */ var _startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../startOfUTCISOWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCISOWeekYear(dirtyDate) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var year = (0,_getUTCISOWeekYear_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = (0,_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(fourthOfJanuary);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ startOfUTCWeek; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");


 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeek(dirtyDate, dirtyOptions) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ startOfUTCWeekYear; }
/* harmony export */ });
/* harmony import */ var _getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../getUTCWeekYear/index.js */ "./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js");
/* harmony import */ var _requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../startOfUTCWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js");
/* harmony import */ var _toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");



 // This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376

function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
  (0,_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0,_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(options.firstWeekContainsDate);
  var year = (0,_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = (0,_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(firstWeek, dirtyOptions);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/_lib/toInteger/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/esm/_lib/toInteger/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ toInteger; }
/* harmony export */ });
function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

/***/ }),

/***/ "./node_modules/date-fns/esm/add/index.js":
/*!************************************************!*\
  !*** ./node_modules/date-fns/esm/add/index.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ add; }
/* harmony export */ });
/* harmony import */ var _addDays_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../addDays/index.js */ "./node_modules/date-fns/esm/addDays/index.js");
/* harmony import */ var _addMonths_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../addMonths/index.js */ "./node_modules/date-fns/esm/addMonths/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");






/**
 * @name add
 * @category Common Helpers
 * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.
 *
 * @description
 * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 *
 * | Key            | Description                        |
 * |----------------|------------------------------------|
 * | years          | Amount of years to be added        |
 * | months         | Amount of months to be added       |
 * | weeks          | Amount of weeks to be added        |
 * | days           | Amount of days to be added         |
 * | hours          | Amount of hours to be added        |
 * | minutes        | Amount of minutes to be added      |
 * | seconds        | Amount of seconds to be added      |
 *
 * All values default to 0
 *
 * @returns {Date} the new date with the seconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add the following duration to 1 September 2014, 10:19:50
 * const result = add(new Date(2014, 8, 1, 10, 19, 50), {
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30,
 * })
 * //=> Thu Jun 15 2017 15:29:20
 */
function add(dirtyDate, duration) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  if (!duration || typeof duration !== 'object') return new Date(NaN);
  var years = duration.years ? (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(duration.years) : 0;
  var months = duration.months ? (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(duration.months) : 0;
  var weeks = duration.weeks ? (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(duration.weeks) : 0;
  var days = duration.days ? (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(duration.days) : 0;
  var hours = duration.hours ? (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(duration.hours) : 0;
  var minutes = duration.minutes ? (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(duration.minutes) : 0;
  var seconds = duration.seconds ? (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(duration.seconds) : 0; // Add years and months

  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate);
  var dateWithMonths = months || years ? (0,_addMonths_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(date, months + years * 12) : date; // Add weeks and days

  var dateWithDays = days || weeks ? (0,_addDays_index_js__WEBPACK_IMPORTED_MODULE_4__["default"])(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds

  var minutesToAdd = minutes + hours * 60;
  var secondsToAdd = seconds + minutesToAdd * 60;
  var msToAdd = secondsToAdd * 1000;
  var finalDate = new Date(dateWithDays.getTime() + msToAdd);
  return finalDate;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/addDays/index.js":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/esm/addDays/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ addDays; }
/* harmony export */ });
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} - the new date with the days added
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */

function addDays(dirtyDate, dirtyAmount) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var amount = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyAmount);

  if (isNaN(amount)) {
    return new Date(NaN);
  }

  if (!amount) {
    // If 0 days, no-op to avoid changing times in the hour before end of DST
    return date;
  }

  date.setDate(date.getDate() + amount);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/addMilliseconds/index.js":
/*!************************************************************!*\
  !*** ./node_modules/date-fns/esm/addMilliseconds/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ addMilliseconds; }
/* harmony export */ });
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */

function addMilliseconds(dirtyDate, dirtyAmount) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var timestamp = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate).getTime();
  var amount = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyAmount);
  return new Date(timestamp + amount);
}

/***/ }),

/***/ "./node_modules/date-fns/esm/addMonths/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/esm/addMonths/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ addMonths; }
/* harmony export */ });
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the months added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 */

function addMonths(dirtyDate, dirtyAmount) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var amount = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyAmount);

  if (isNaN(amount)) {
    return new Date(NaN);
  }

  if (!amount) {
    // If 0 months, no-op to avoid changing times in the hour before end of DST
    return date;
  }

  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for
  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
  // want except that dates will wrap around the end of a month, meaning that
  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
  // we'll default to the end of the desired month by adding 1 to the desired
  // month and using a date of 0 to back up one day to the end of the desired
  // month.

  var endOfDesiredMonth = new Date(date.getTime());
  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);
  var daysInMonth = endOfDesiredMonth.getDate();

  if (dayOfMonth >= daysInMonth) {
    // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
  } else {
    // Otherwise, we now know that setting the original day-of-month value won't
    // cause an overflow, so set the desired day-of-month. Note that we can't
    // just set the date of `endOfDesiredMonth` because that object may have had
    // its time changed in the unusual case where where a DST transition was on
    // the last day of the month and its local time was in the hour skipped or
    // repeated next to a DST transition.  So we use `date` instead which is
    // guaranteed to still have the original time.
    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
    return date;
  }
}

/***/ }),

/***/ "./node_modules/date-fns/esm/constants/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/esm/constants/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "daysInWeek": function() { return /* binding */ daysInWeek; },
/* harmony export */   "maxTime": function() { return /* binding */ maxTime; },
/* harmony export */   "millisecondsInHour": function() { return /* binding */ millisecondsInHour; },
/* harmony export */   "millisecondsInMinute": function() { return /* binding */ millisecondsInMinute; },
/* harmony export */   "millisecondsInSecond": function() { return /* binding */ millisecondsInSecond; },
/* harmony export */   "minTime": function() { return /* binding */ minTime; },
/* harmony export */   "minutesInHour": function() { return /* binding */ minutesInHour; },
/* harmony export */   "monthsInQuarter": function() { return /* binding */ monthsInQuarter; },
/* harmony export */   "monthsInYear": function() { return /* binding */ monthsInYear; },
/* harmony export */   "quartersInYear": function() { return /* binding */ quartersInYear; },
/* harmony export */   "secondsInHour": function() { return /* binding */ secondsInHour; },
/* harmony export */   "secondsInMinute": function() { return /* binding */ secondsInMinute; }
/* harmony export */ });
/**
 * Days in 1 week.
 *
 * @name daysInWeek
 * @constant
 * @type {number}
 * @default
 */
var daysInWeek = 7;
/**
 * Maximum allowed time.
 *
 * @name maxTime
 * @constant
 * @type {number}
 * @default
 */

var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;
/**
 * Milliseconds in 1 minute
 *
 * @name millisecondsInMinute
 * @constant
 * @type {number}
 * @default
 */

var millisecondsInMinute = 60000;
/**
 * Milliseconds in 1 hour
 *
 * @name millisecondsInHour
 * @constant
 * @type {number}
 * @default
 */

var millisecondsInHour = 3600000;
/**
 * Milliseconds in 1 second
 *
 * @name millisecondsInSecond
 * @constant
 * @type {number}
 * @default
 */

var millisecondsInSecond = 1000;
/**
 * Minimum allowed time.
 *
 * @name minTime
 * @constant
 * @type {number}
 * @default
 */

var minTime = -maxTime;
/**
 * Minutes in 1 hour
 *
 * @name minutesInHour
 * @constant
 * @type {number}
 * @default
 */

var minutesInHour = 60;
/**
 * Months in 1 quarter
 *
 * @name monthsInQuarter
 * @constant
 * @type {number}
 * @default
 */

var monthsInQuarter = 3;
/**
 * Months in 1 year
 *
 * @name monthsInYear
 * @constant
 * @type {number}
 * @default
 */

var monthsInYear = 12;
/**
 * Quarters in 1 year
 *
 * @name quartersInYear
 * @constant
 * @type {number}
 * @default
 */

var quartersInYear = 4;
/**
 * Seconds in 1 hour
 *
 * @name secondsInHour
 * @constant
 * @type {number}
 * @default
 */

var secondsInHour = 3600;
/**
 * Seconds in 1 minute
 *
 * @name secondsInMinute
 * @constant
 * @type {number}
 * @default
 */

var secondsInMinute = 60;

/***/ }),

/***/ "./node_modules/date-fns/esm/endOfDay/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/esm/endOfDay/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ endOfDay; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the end of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */

function endOfDay(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  date.setHours(23, 59, 59, 999);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/format/index.js":
/*!***************************************************!*\
  !*** ./node_modules/date-fns/esm/format/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ format; }
/* harmony export */ });
/* harmony import */ var _isValid_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../isValid/index.js */ "./node_modules/date-fns/esm/isValid/index.js");
/* harmony import */ var _locale_en_US_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locale/en-US/index.js */ "./node_modules/date-fns/esm/locale/en-US/index.js");
/* harmony import */ var _subMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../subMilliseconds/index.js */ "./node_modules/date-fns/esm/subMilliseconds/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_format_formatters_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../_lib/format/formatters/index.js */ "./node_modules/date-fns/esm/_lib/format/formatters/index.js");
/* harmony import */ var _lib_format_longFormatters_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../_lib/format/longFormatters/index.js */ "./node_modules/date-fns/esm/_lib/format/longFormatters/index.js");
/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../_lib/getTimezoneOffsetInMilliseconds/index.js */ "./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js");
/* harmony import */ var _lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../_lib/protectedTokens/index.js */ "./node_modules/date-fns/esm/_lib/protectedTokens/index.js");
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");









 // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The second argument is now required for the sake of explicitness.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   format(new Date(2016, 0, 1))
 *
 *   // v2.0.0 onward
 *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
 *   ```
 *
 * - New format string API for `format` function
 *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
 *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
 *
 * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
 *
 * @param {Date|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */

function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale = options.locale || _locale_en_US_index_js__WEBPACK_IMPORTED_MODULE_1__["default"];
  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (!locale.localize) {
    throw new RangeError('locale must contain localize property');
  }

  if (!locale.formatLong) {
    throw new RangeError('locale must contain formatLong property');
  }

  var originalDate = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(dirtyDate);

  if (!(0,_isValid_index_js__WEBPACK_IMPORTED_MODULE_4__["default"])(originalDate)) {
    throw new RangeError('Invalid time value');
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


  var timezoneOffset = (0,_lib_getTimezoneOffsetInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_5__["default"])(originalDate);
  var utcDate = (0,_subMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_6__["default"])(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = _lib_format_longFormatters_index_js__WEBPACK_IMPORTED_MODULE_7__["default"][firstCharacter];
      return longFormatter(substring, locale.formatLong, formatterOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp).map(function (substring) {
    // Replace two single quote characters with one single quote character
    if (substring === "''") {
      return "'";
    }

    var firstCharacter = substring[0];

    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }

    var formatter = _lib_format_formatters_index_js__WEBPACK_IMPORTED_MODULE_8__["default"][firstCharacter];

    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_9__.isProtectedWeekYearToken)(substring)) {
        (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_9__.throwProtectedError)(substring, dirtyFormatStr, dirtyDate);
      }

      if (!options.useAdditionalDayOfYearTokens && (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_9__.isProtectedDayOfYearToken)(substring)) {
        (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_9__.throwProtectedError)(substring, dirtyFormatStr, dirtyDate);
      }

      return formatter(utcDate, substring, locale.localize, formatterOptions);
    }

    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
    }

    return substring;
  }).join('');
  return result;
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

/***/ }),

/***/ "./node_modules/date-fns/esm/formatISO/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/esm/formatISO/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ formatISO; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_lib/addLeadingZeros/index.js */ "./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name formatISO
 * @category Common Helpers
 * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).
 *
 * @description
 * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.
 * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.
 * @returns {String} the formatted date string (in local time zone)
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `options.format` must be 'extended' or 'basic'
 * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918T190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, date only:
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52Z'
 */

function formatISO(date, options) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var originalDate = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(date);

  if (isNaN(originalDate.getTime())) {
    throw new RangeError('Invalid time value');
  }

  var format = !(options !== null && options !== void 0 && options.format) ? 'extended' : String(options.format);
  var representation = !(options !== null && options !== void 0 && options.representation) ? 'complete' : String(options.representation);

  if (format !== 'extended' && format !== 'basic') {
    throw new RangeError("format must be 'extended' or 'basic'");
  }

  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {
    throw new RangeError("representation must be 'date', 'time', or 'complete'");
  }

  var result = '';
  var tzOffset = '';
  var dateDelimiter = format === 'extended' ? '-' : '';
  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'

  if (representation !== 'time') {
    var day = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(originalDate.getDate(), 2);
    var month = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(originalDate.getMonth() + 1, 2);
    var year = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.

    result = "".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);
  } // Representation is either 'time' or 'complete'


  if (representation !== 'date') {
    // Add the timezone.
    var offset = originalDate.getTimezoneOffset();

    if (offset !== 0) {
      var absoluteOffset = Math.abs(offset);
      var hourOffset = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Math.floor(absoluteOffset / 60), 2);
      var minuteOffset = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.

      var sign = offset < 0 ? '+' : '-';
      tzOffset = "".concat(sign).concat(hourOffset, ":").concat(minuteOffset);
    } else {
      tzOffset = 'Z';
    }

    var hour = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(originalDate.getHours(), 2);
    var minute = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(originalDate.getMinutes(), 2);
    var second = (0,_lib_addLeadingZeros_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'

    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.

    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.

    result = "".concat(result).concat(separator).concat(time).concat(tzOffset);
  }

  return result;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/getDay/index.js":
/*!***************************************************!*\
  !*** ./node_modules/date-fns/esm/getDay/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getDay; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * const result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */

function getDay(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var day = date.getDay();
  return day;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/getDaysInMonth/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/esm/getDaysInMonth/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ getDaysInMonth; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the given date
 * @returns {Number} the number of days in a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */

function getDaysInMonth(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var year = date.getFullYear();
  var monthIndex = date.getMonth();
  var lastDayOfMonth = new Date(0);
  lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
  lastDayOfMonth.setHours(0, 0, 0, 0);
  return lastDayOfMonth.getDate();
}

/***/ }),

/***/ "./node_modules/date-fns/esm/isBefore/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/esm/isBefore/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isBefore; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date that should be before the other one to return true
 * @param {Date|Number} dateToCompare - the date to compare with
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */

function isBefore(dirtyDate, dirtyDateToCompare) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var dateToCompare = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDateToCompare);
  return date.getTime() < dateToCompare.getTime();
}

/***/ }),

/***/ "./node_modules/date-fns/esm/isDate/index.js":
/*!***************************************************!*\
  !*** ./node_modules/date-fns/esm/isDate/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isDate; }
/* harmony export */ });
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");

/**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {*} value - the value to check
 * @returns {boolean} true if the given value is a date
 * @throws {TypeError} 1 arguments required
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */

function isDate(value) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';
}

/***/ }),

/***/ "./node_modules/date-fns/esm/isSameDay/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/esm/isSameDay/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isSameDay; }
/* harmony export */ });
/* harmony import */ var _startOfDay_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../startOfDay/index.js */ "./node_modules/date-fns/esm/startOfDay/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same day (and year and month)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 * 
 * @example
 * // Are 4 September and 4 October in the same day?
 * var result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 * 
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * var result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */

function isSameDay(dirtyDateLeft, dirtyDateRight) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var dateLeftStartOfDay = (0,_startOfDay_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDateLeft);
  var dateRightStartOfDay = (0,_startOfDay_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDateRight);
  return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();
}

/***/ }),

/***/ "./node_modules/date-fns/esm/isSameMonth/index.js":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/esm/isSameMonth/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isSameMonth; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to check
 * @param {Date|Number} dateRight - the second date to check
 * @returns {Boolean} the dates are in the same month (and year)
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * var result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */

function isSameMonth(dirtyDateLeft, dirtyDateRight) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var dateLeft = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDateLeft);
  var dateRight = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDateRight);
  return dateLeft.getFullYear() === dateRight.getFullYear() && dateLeft.getMonth() === dateRight.getMonth();
}

/***/ }),

/***/ "./node_modules/date-fns/esm/isToday/index.js":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/esm/isToday/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isToday; }
/* harmony export */ });
/* harmony import */ var _isSameDay_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../isSameDay/index.js */ "./node_modules/date-fns/esm/isSameDay/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name isToday
 * @category Day Helpers
 * @summary Is the given date today?
 * @pure false
 *
 * @description
 * Is the given date today?
 *
 * > ⚠️ Please note that this function is not present in the FP submodule as
 * > it uses `Date.now()` internally hence impure and can't be safely curried.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to check
 * @returns {Boolean} the date is today
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // If today is 6 October 2014, is 6 October 14:00:00 today?
 * var result = isToday(new Date(2014, 9, 6, 14, 0))
 * //=> true
 */

function isToday(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  return (0,_isSameDay_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate, Date.now());
}

/***/ }),

/***/ "./node_modules/date-fns/esm/isValid/index.js":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/esm/isValid/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isValid; }
/* harmony export */ });
/* harmony import */ var _isDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../isDate/index.js */ "./node_modules/date-fns/esm/isDate/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Now `isValid` doesn't throw an exception
 *   if the first argument is not an instance of Date.
 *   Instead, argument is converted beforehand using `toDate`.
 *
 *   Examples:
 *
 *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
 *   |---------------------------|---------------|---------------|
 *   | `new Date()`              | `true`        | `true`        |
 *   | `new Date('2016-01-01')`  | `true`        | `true`        |
 *   | `new Date('')`            | `false`       | `false`       |
 *   | `new Date(1488370835081)` | `true`        | `true`        |
 *   | `new Date(NaN)`           | `false`       | `false`       |
 *   | `'2016-01-01'`            | `TypeError`   | `false`       |
 *   | `''`                      | `TypeError`   | `false`       |
 *   | `1488370835081`           | `TypeError`   | `true`        |
 *   | `NaN`                     | `TypeError`   | `false`       |
 *
 *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
 *   that try to coerce arguments to the expected type
 *   (which is also the case with other *date-fns* functions).
 *
 * @param {*} date - the date to check
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */

function isValid(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);

  if (!(0,_isDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate) && typeof dirtyDate !== 'number') {
    return false;
  }

  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate);
  return !isNaN(Number(date));
}

/***/ }),

/***/ "./node_modules/date-fns/esm/isWeekend/index.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/esm/isWeekend/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ isWeekend; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name isWeekend
 * @category Weekday Helpers
 * @summary Does the given date fall on a weekend?
 *
 * @description
 * Does the given date fall on a weekend?
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to check
 * @returns {Boolean} the date falls on a weekend
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Does 5 October 2014 fall on a weekend?
 * const result = isWeekend(new Date(2014, 9, 5))
 * //=> true
 */

function isWeekend(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  var day = date.getDay();
  return day === 0 || day === 6;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ buildFormatLongFn; }
/* harmony export */ });
function buildFormatLongFn(args) {
  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    // TODO: Remove String()
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ buildLocalizeFn; }
/* harmony export */ });
function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!

    return valuesArray[index];
  };
}

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ buildMatchFn; }
/* harmony export */ });
function buildMatchFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    }) : findKey(parsePatterns, function (pattern) {
      return pattern.test(matchedString);
    });
    var value;
    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }

  return undefined;
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }

  return undefined;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ buildMatchPatternFn; }
/* harmony export */ });
function buildMatchPatternFn(args) {
  return function (string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    var rest = string.slice(matchedString.length);
    return {
      value: value,
      rest: rest
    };
  };
}

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

var formatDistance = function (token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];

  if (typeof tokenValue === 'string') {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace('{{count}}', count.toString());
  }

  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
};

/* harmony default export */ __webpack_exports__["default"] = (formatDistance);

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_lib/buildFormatLongFn/index.js */ "./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js");

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: (0,_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: (0,_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: (0,_lib_buildFormatLongFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};
/* harmony default export */ __webpack_exports__["default"] = (formatLong);

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

var formatRelative = function (token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};

/* harmony default export */ __webpack_exports__["default"] = (formatRelative);

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_lib/buildLocalizeFn/index.js */ "./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js");

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
}; // Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.

var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

var ordinalNumber = function (dirtyNumber, _options) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
};

var localize = {
  ordinalNumber: ordinalNumber,
  era: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return quarter - 1;
    }
  }),
  month: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: (0,_lib_buildLocalizeFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};
/* harmony default export */ __webpack_exports__["default"] = (localize);

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_lib/buildMatchFn/index.js */ "./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js");
/* harmony import */ var _lib_buildMatchPatternFn_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_lib/buildMatchPatternFn/index.js */ "./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js");


var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: (0,_lib_buildMatchPatternFn_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: (0,_lib_buildMatchFn_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};
/* harmony default export */ __webpack_exports__["default"] = (match);

/***/ }),

/***/ "./node_modules/date-fns/esm/locale/en-US/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/date-fns/esm/locale/en-US/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_formatDistance_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/formatDistance/index.js */ "./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js");
/* harmony import */ var _lib_formatLong_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/formatLong/index.js */ "./node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js");
/* harmony import */ var _lib_formatRelative_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_lib/formatRelative/index.js */ "./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js");
/* harmony import */ var _lib_localize_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_lib/localize/index.js */ "./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js");
/* harmony import */ var _lib_match_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_lib/match/index.js */ "./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js");






/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale = {
  code: 'en-US',
  formatDistance: _lib_formatDistance_index_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  formatLong: _lib_formatLong_index_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  formatRelative: _lib_formatRelative_index_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  localize: _lib_localize_index_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  match: _lib_match_index_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ __webpack_exports__["default"] = (locale);

/***/ }),

/***/ "./node_modules/date-fns/esm/nextDay/index.js":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/esm/nextDay/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ nextDay; }
/* harmony export */ });
/* harmony import */ var _addDays_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addDays/index.js */ "./node_modules/date-fns/esm/addDays/index.js");
/* harmony import */ var _getDay_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../getDay/index.js */ "./node_modules/date-fns/esm/getDay/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name nextDay
 * @category Weekday Helpers
 * @summary When is the next day of the week?
 *
 * @description
 * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.
 *
 * @param {Date | number} date - the date to check
 * @param {Day} day - day of the week
 * @returns {Date} - the date is the next day of week
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // When is the next Monday after Mar, 20, 2020?
 * const result = nextDay(new Date(2020, 2, 20), 1)
 * //=> Mon Mar 23 2020 00:00:00
 *
 * @example
 * // When is the next Tuesday after Mar, 21, 2020?
 * const result = nextDay(new Date(2020, 2, 21), 2)
 * //=> Tue Mar 24 2020 00:00:00
 */

function nextDay(date, day) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var delta = day - (0,_getDay_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(date);
  if (delta <= 0) delta += 7;
  return (0,_addDays_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(date, delta);
}

/***/ }),

/***/ "./node_modules/date-fns/esm/parse/_lib/parsers/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/date-fns/esm/parse/_lib/parsers/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_lib/getUTCWeekYear/index.js */ "./node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js");
/* harmony import */ var _lib_setUTCDay_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../_lib/setUTCDay/index.js */ "./node_modules/date-fns/esm/_lib/setUTCDay/index.js");
/* harmony import */ var _lib_setUTCISODay_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../_lib/setUTCISODay/index.js */ "./node_modules/date-fns/esm/_lib/setUTCISODay/index.js");
/* harmony import */ var _lib_setUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../_lib/setUTCISOWeek/index.js */ "./node_modules/date-fns/esm/_lib/setUTCISOWeek/index.js");
/* harmony import */ var _lib_setUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../_lib/setUTCWeek/index.js */ "./node_modules/date-fns/esm/_lib/setUTCWeek/index.js");
/* harmony import */ var _lib_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../_lib/startOfUTCISOWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js");
/* harmony import */ var _lib_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_lib/startOfUTCWeek/index.js */ "./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js");







var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE = 60000;
var MILLISECONDS_IN_SECOND = 1000;
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999

};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

function parseNumericPattern(pattern, string, valueCallback) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  }

  var value = parseInt(matchResult[0], 10);
  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  };
}

function parseTimezonePattern(pattern, string) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null;
  } // Input is 'Z'


  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: string.slice(1)
    };
  }

  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * MILLISECONDS_IN_SECOND),
    rest: string.slice(matchResult[0].length)
  };
}

function parseAnyDigitsSigned(string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback);
}

function parseNDigits(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback);
  }
}

function parseNDigitsSigned(n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback);

    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback);

    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback);

    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback);

    default:
      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback);
  }
}

function dayPeriodEnumToHours(enumValue) {
  switch (enumValue) {
    case 'morning':
      return 4;

    case 'evening':
      return 17;

    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12;

    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0;
  }
}

function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0; // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC

  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  var result;

  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }

  return isCommonEra ? result : 1 - result;
}

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; // User for validation

function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */


var parsers = {
  // Era
  G: {
    priority: 140,
    parse: function (string, token, match, _options) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
        // A, B

        case 'GGGGG':
          return match.era(string, {
            width: 'narrow'
          });
        // Anno Domini, Before Christ

        case 'GGGG':
        default:
          return match.era(string, {
            width: 'wide'
          }) || match.era(string, {
            width: 'abbreviated'
          }) || match.era(string, {
            width: 'narrow'
          });
      }
    },
    set: function (date, flags, value, _options) {
      flags.era = value;
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['R', 'u', 't', 'T']
  },
  // Year
  y: {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy'
        };
      };

      switch (token) {
        case 'y':
          return parseNDigits(4, string, valueCallback);

        case 'yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, _options) {
      var currentYear = date.getUTCFullYear();

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date;
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'u', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Local week-numbering year
  Y: {
    priority: 130,
    parse: function (string, token, match, _options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY'
        };
      };

      switch (token) {
        case 'Y':
          return parseNDigits(4, string, valueCallback);

        case 'Yo':
          return match.ordinalNumber(string, {
            unit: 'year',
            valueCallback: valueCallback
          });

        default:
          return parseNDigits(token.length, string, valueCallback);
      }
    },
    validate: function (_date, value, _options) {
      return value.isTwoDigitYear || value.year > 0;
    },
    set: function (date, flags, value, options) {
      var currentYear = (0,_lib_getUTCWeekYear_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(date, options);

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return (0,_lib_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(date, options);
      }

      var year = !('era' in flags) || flags.era === 1 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return (0,_lib_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(date, options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'Q', 'q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week-numbering year
  R: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'R') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (_date, _flags, value, _options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return (0,_lib_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(firstWeekOfYear);
    },
    incompatibleTokens: ['G', 'y', 'Y', 'u', 'Q', 'q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Extended year
  u: {
    priority: 130,
    parse: function (string, token, _match, _options) {
      if (token === 'u') {
        return parseNDigitsSigned(4, string);
      }

      return parseNDigitsSigned(token.length, string);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['G', 'y', 'Y', 'R', 'w', 'I', 'i', 'e', 'c', 't', 'T']
  },
  // Quarter
  Q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'Qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'QQQ':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'QQQQQ':
          return match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // 1st quarter, 2nd quarter, ...

        case 'QQQQ':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone quarter
  q: {
    priority: 120,
    parse: function (string, token, match, _options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq':
          // 01, 02, 03, 04
          return parseNDigits(token.length, string);
        // 1st, 2nd, 3rd, 4th

        case 'qo':
          return match.ordinalNumber(string, {
            unit: 'quarter'
          });
        // Q1, Q2, Q3, Q4

        case 'qqq':
          return match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)

        case 'qqqqq':
          return match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // 1st quarter, 2nd quarter, ...

        case 'qqqq':
        default:
          return match.quarter(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.quarter(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 4;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'Q', 'M', 'L', 'w', 'I', 'd', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Month
  M: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'MM':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Mo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'MMM':
          return match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // J, F, ..., D

        case 'MMMMM':
          return match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // January, February, ..., December

        case 'MMMM':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.month(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'L', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Stand-alone month
  L: {
    priority: 110,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        return value - 1;
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return parseNumericPattern(numericPatterns.month, string, valueCallback);
        // 01, 02, ..., 12

        case 'LL':
          return parseNDigits(2, string, valueCallback);
        // 1st, 2nd, ..., 12th

        case 'Lo':
          return match.ordinalNumber(string, {
            unit: 'month',
            valueCallback: valueCallback
          });
        // Jan, Feb, ..., Dec

        case 'LLL':
          return match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // J, F, ..., D

        case 'LLLLL':
          return match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // January, February, ..., December

        case 'LLLL':
        default:
          return match.month(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.month(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.month(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Local week of year
  w: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, string);

        case 'wo':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return (0,_lib_startOfUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])((0,_lib_setUTCWeek_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(date, value, options), options);
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'i', 't', 'T']
  },
  // ISO week of year
  I: {
    priority: 100,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, string);

        case 'Io':
          return match.ordinalNumber(string, {
            unit: 'week'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 53;
    },
    set: function (date, _flags, value, options) {
      return (0,_lib_startOfUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])((0,_lib_setUTCISOWeek_index_js__WEBPACK_IMPORTED_MODULE_4__["default"])(date, value, options), options);
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'e', 'c', 't', 'T']
  },
  // Day of the month
  d: {
    priority: 90,
    subPriority: 1,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, string);

        case 'do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);
      var month = date.getUTCMonth();

      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH[month];
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'w', 'I', 'D', 'i', 'e', 'c', 't', 'T']
  },
  // Day of year
  D: {
    priority: 90,
    subPriority: 1,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, string);

        case 'Do':
          return match.ordinalNumber(string, {
            unit: 'date'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (date, value, _options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex(year);

      if (isLeapYear) {
        return value >= 1 && value <= 366;
      } else {
        return value >= 1 && value <= 365;
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['Y', 'R', 'q', 'Q', 'M', 'L', 'w', 'I', 'd', 'E', 'i', 'e', 'c', 't', 'T']
  },
  // Day of week
  E: {
    priority: 90,
    parse: function (string, token, match, _options) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'EEEEE':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'EEEEEE':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'EEEE':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = (0,_lib_setUTCDay_index_js__WEBPACK_IMPORTED_MODULE_5__["default"])(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['D', 'i', 'e', 'c', 't', 'T']
  },
  // Local day of week
  e: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'e':
        case 'ee':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'eo':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'eee':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // T

        case 'eeeee':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tu

        case 'eeeeee':
          return match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
        // Tuesday

        case 'eeee':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.day(string, {
            width: 'short',
            context: 'formatting'
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = (0,_lib_setUTCDay_index_js__WEBPACK_IMPORTED_MODULE_5__["default"])(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'c', 't', 'T']
  },
  // Stand-alone local day of week
  c: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
      };

      switch (token) {
        // 3
        case 'c':
        case 'cc':
          // 03
          return parseNDigits(token.length, string, valueCallback);
        // 3rd

        case 'co':
          return match.ordinalNumber(string, {
            unit: 'day',
            valueCallback: valueCallback
          });
        // Tue

        case 'ccc':
          return match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // T

        case 'ccccc':
          return match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tu

        case 'cccccc':
          return match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
        // Tuesday

        case 'cccc':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'standalone'
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'standalone'
          }) || match.day(string, {
            width: 'short',
            context: 'standalone'
          }) || match.day(string, {
            width: 'narrow',
            context: 'standalone'
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 6;
    },
    set: function (date, _flags, value, options) {
      date = (0,_lib_setUTCDay_index_js__WEBPACK_IMPORTED_MODULE_5__["default"])(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'R', 'u', 'q', 'Q', 'M', 'L', 'I', 'd', 'D', 'E', 'i', 'e', 't', 'T']
  },
  // ISO day of week
  i: {
    priority: 90,
    parse: function (string, token, match, _options) {
      var valueCallback = function (value) {
        if (value === 0) {
          return 7;
        }

        return value;
      };

      switch (token) {
        // 2
        case 'i':
        case 'ii':
          // 02
          return parseNDigits(token.length, string);
        // 2nd

        case 'io':
          return match.ordinalNumber(string, {
            unit: 'day'
          });
        // Tue

        case 'iii':
          return match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // T

        case 'iiiii':
          return match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tu

        case 'iiiiii':
          return match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
        // Tuesday

        case 'iiii':
        default:
          return match.day(string, {
            width: 'wide',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'abbreviated',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'short',
            context: 'formatting',
            valueCallback: valueCallback
          }) || match.day(string, {
            width: 'narrow',
            context: 'formatting',
            valueCallback: valueCallback
          });
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 7;
    },
    set: function (date, _flags, value, options) {
      date = (0,_lib_setUTCISODay_index_js__WEBPACK_IMPORTED_MODULE_6__["default"])(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['y', 'Y', 'u', 'q', 'Q', 'M', 'L', 'w', 'd', 'D', 'E', 'e', 'c', 't', 'T']
  },
  // AM or PM
  a: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaaa':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'aaaa':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['b', 'B', 'H', 'k', 't', 'T']
  },
  // AM, PM, midnight
  b: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbbb':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'bbbb':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'B', 'H', 'k', 't', 'T']
  },
  // in the morning, in the afternoon, in the evening, at night
  B: {
    priority: 80,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBBB':
          return match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });

        case 'BBBB':
        default:
          return match.dayPeriod(string, {
            width: 'wide',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'abbreviated',
            context: 'formatting'
          }) || match.dayPeriod(string, {
            width: 'narrow',
            context: 'formatting'
          });
      }
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 't', 'T']
  },
  // Hour [1-12]
  h: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, string);

        case 'ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 12;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['H', 'K', 'k', 't', 'T']
  },
  // Hour [0-23]
  H: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, string);

        case 'Ho':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 23;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCHours(value, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'K', 'k', 't', 'T']
  },
  // Hour [0-11]
  K: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, string);

        case 'Ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 11;
    },
    set: function (date, _flags, value, _options) {
      var isPM = date.getUTCHours() >= 12;

      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }

      return date;
    },
    incompatibleTokens: ['h', 'H', 'k', 't', 'T']
  },
  // Hour [1-24]
  k: {
    priority: 70,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, string);

        case 'ko':
          return match.ordinalNumber(string, {
            unit: 'hour'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 1 && value <= 24;
    },
    set: function (date, _flags, value, _options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date;
    },
    incompatibleTokens: ['a', 'b', 'h', 'H', 'K', 't', 'T']
  },
  // Minute
  m: {
    priority: 60,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, string);

        case 'mo':
          return match.ordinalNumber(string, {
            unit: 'minute'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMinutes(value, 0, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Second
  s: {
    priority: 50,
    parse: function (string, token, match, _options) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, string);

        case 'so':
          return match.ordinalNumber(string, {
            unit: 'second'
          });

        default:
          return parseNDigits(token.length, string);
      }
    },
    validate: function (_date, value, _options) {
      return value >= 0 && value <= 59;
    },
    set: function (date, _flags, value, _options) {
      date.setUTCSeconds(value, 0);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Fraction of second
  S: {
    priority: 30,
    parse: function (string, token, _match, _options) {
      var valueCallback = function (value) {
        return Math.floor(value * Math.pow(10, -token.length + 3));
      };

      return parseNDigits(token.length, string, valueCallback);
    },
    set: function (date, _flags, value, _options) {
      date.setUTCMilliseconds(value);
      return date;
    },
    incompatibleTokens: ['t', 'T']
  },
  // Timezone (ISO-8601. +00:00 is `'Z'`)
  X: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'XXXX':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'XXXXX':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'x']
  },
  // Timezone (ISO-8601)
  x: {
    priority: 10,
    parse: function (string, token, _match, _options) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string);

        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, string);

        case 'xxxx':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string);

        case 'xxxxx':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string);

        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string);
      }
    },
    set: function (date, flags, value, _options) {
      if (flags.timestampIsSet) {
        return date;
      }

      return new Date(date.getTime() - value);
    },
    incompatibleTokens: ['t', 'T', 'X']
  },
  // Seconds timestamp
  t: {
    priority: 40,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value * 1000), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  },
  // Milliseconds timestamp
  T: {
    priority: 20,
    parse: function (string, _token, _match, _options) {
      return parseAnyDigitsSigned(string);
    },
    set: function (_date, _flags, value, _options) {
      return [new Date(value), {
        timestampIsSet: true
      }];
    },
    incompatibleTokens: '*'
  }
};
/* harmony default export */ __webpack_exports__["default"] = (parsers);

/***/ }),

/***/ "./node_modules/date-fns/esm/parse/index.js":
/*!**************************************************!*\
  !*** ./node_modules/date-fns/esm/parse/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ parse; }
/* harmony export */ });
/* harmony import */ var _locale_en_US_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../locale/en-US/index.js */ "./node_modules/date-fns/esm/locale/en-US/index.js");
/* harmony import */ var _subMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../subMilliseconds/index.js */ "./node_modules/date-fns/esm/subMilliseconds/index.js");
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_assign_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../_lib/assign/index.js */ "./node_modules/date-fns/esm/_lib/assign/index.js");
/* harmony import */ var _lib_format_longFormatters_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../_lib/format/longFormatters/index.js */ "./node_modules/date-fns/esm/_lib/format/longFormatters/index.js");
/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../_lib/getTimezoneOffsetInMilliseconds/index.js */ "./node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js");
/* harmony import */ var _lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../_lib/protectedTokens/index.js */ "./node_modules/date-fns/esm/_lib/protectedTokens/index.js");
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _lib_parsers_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_lib/parsers/index.js */ "./node_modules/date-fns/esm/parse/_lib/parsers/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");










var TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps

var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - Old `parse` was renamed to `toDate`.
 *   Now `parse` is a new function which parses a string using a provided format.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward (toDate no longer accepts a string)
 *   toDate(1392098430000) // Unix to timestamp
 *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date
 *   parse('2016-01-01', 'yyyy-MM-dd', new Date())
 *   ```
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|Number} referenceDate - defines values missing from the parsed dateString
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
 *   see: https://git.io/fxCyr
 * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
 *   see: https://git.io/fxCyr
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
 * @throws {RangeError} format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */

function parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(3, arguments);
  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};
  var locale = options.locale || _locale_en_US_index_js__WEBPACK_IMPORTED_MODULE_1__["default"];

  if (!locale.match) {
    throw new RangeError('locale must contain match property');
  }

  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  if (formatString === '') {
    if (dateString === '') {
      return (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(dirtyReferenceDate);
    } else {
      return new Date(NaN);
    }
  }

  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale
  }; // If timezone isn't specified, it will be set to the system timezone

  var setters = [{
    priority: TIMEZONE_UNIT_PRIORITY,
    subPriority: -1,
    set: dateToSystemTimezone,
    index: 0
  }];
  var i;
  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {
    var firstCharacter = substring[0];

    if (firstCharacter === 'p' || firstCharacter === 'P') {
      var longFormatter = _lib_format_longFormatters_index_js__WEBPACK_IMPORTED_MODULE_4__["default"][firstCharacter];
      return longFormatter(substring, locale.formatLong, subFnOptions);
    }

    return substring;
  }).join('').match(formattingTokensRegExp);
  var usedTokens = [];

  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (!options.useAdditionalWeekYearTokens && (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_5__.isProtectedWeekYearToken)(token)) {
      (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_5__.throwProtectedError)(token, formatString, dirtyDateString);
    }

    if (!options.useAdditionalDayOfYearTokens && (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_5__.isProtectedDayOfYearToken)(token)) {
      (0,_lib_protectedTokens_index_js__WEBPACK_IMPORTED_MODULE_5__.throwProtectedError)(token, formatString, dirtyDateString);
    }

    var firstCharacter = token[0];
    var parser = _lib_parsers_index_js__WEBPACK_IMPORTED_MODULE_6__["default"][firstCharacter];

    if (parser) {
      var incompatibleTokens = parser.incompatibleTokens;

      if (Array.isArray(incompatibleTokens)) {
        var incompatibleToken = void 0;

        for (var _i = 0; _i < usedTokens.length; _i++) {
          var usedToken = usedTokens[_i].token;

          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {
            incompatibleToken = usedTokens[_i];
            break;
          }
        }

        if (incompatibleToken) {
          throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        }
      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {
        throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
      }

      usedTokens.push({
        token: firstCharacter,
        fullToken: token
      });
      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);

      if (!parseResult) {
        return new Date(NaN);
      }

      setters.push({
        priority: parser.priority,
        subPriority: parser.subPriority || 0,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length
      });
      dateString = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
      } // Replace two single quote characters with one single quote character


      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString(token);
      } // Cut token from string, or, if string doesn't match the token, return Invalid Date


      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN);
      }
    }
  } // Check if the remaining input contains something other than whitespace


  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN);
  }

  var uniquePrioritySetters = setters.map(function (setter) {
    return setter.priority;
  }).sort(function (a, b) {
    return b - a;
  }).filter(function (priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function (priority) {
    return setters.filter(function (setter) {
      return setter.priority === priority;
    }).sort(function (a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function (setterArray) {
    return setterArray[0];
  });
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_3__["default"])(dirtyReferenceDate);

  if (isNaN(date)) {
    return new Date(NaN);
  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37


  var utcDate = (0,_subMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_7__["default"])(date, (0,_lib_getTimezoneOffsetInMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_8__["default"])(date));
  var flags = {};

  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];

    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {
      return new Date(NaN);
    }

    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)

    if (result[0]) {
      utcDate = result[0];
      (0,_lib_assign_index_js__WEBPACK_IMPORTED_MODULE_9__["default"])(flags, result[1]); // Result is date
    } else {
      utcDate = result;
    }
  }

  return utcDate;
}

function dateToSystemTimezone(date, flags) {
  if (flags.timestampIsSet) {
    return date;
  }

  var convertedDate = new Date(0);
  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());
  return convertedDate;
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

/***/ }),

/***/ "./node_modules/date-fns/esm/parseISO/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/esm/parseISO/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ parseISO; }
/* harmony export */ });
/* harmony import */ var _constants_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants/index.js */ "./node_modules/date-fns/esm/constants/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");



/**
 * @name parseISO
 * @category Common Helpers
 * @summary Parse ISO string
 *
 * @description
 * Parse the given string in ISO 8601 format and return an instance of Date.
 *
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If the argument isn't a string, the function cannot parse the string or
 * the values are invalid, it returns Invalid Date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The previous `parse` implementation was renamed to `parseISO`.
 *
 *   ```javascript
 *   // Before v2.0.0
 *   parse('2016-01-01')
 *
 *   // v2.0.0 onward
 *   parseISO('2016-01-01')
 *   ```
 *
 * - `parseISO` now validates separate date and time values in ISO-8601 strings
 *   and returns `Invalid Date` if the date is invalid.
 *
 *   ```javascript
 *   parseISO('2018-13-32')
 *   //=> Invalid Date
 *   ```
 *
 * - `parseISO` now doesn't fall back to `new Date` constructor
 *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.
 *
 * @param {String} argument - the value to convert
 * @param {Object} [options] - an object with options.
 * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * const result = parseISO('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * const result = parseISO('+02014101', { additionalDigits: 1 })
 * //=> Fri Apr 11 2014 00:00:00
 */

function parseISO(argument, dirtyOptions) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var options = dirtyOptions || {};
  var additionalDigits = options.additionalDigits == null ? 2 : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(options.additionalDigits);

  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError('additionalDigits must be 0, 1 or 2');
  }

  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
    return new Date(NaN);
  }

  var dateStrings = splitDateString(argument);
  var date;

  if (dateStrings.date) {
    var parseYearResult = parseYear(dateStrings.date, additionalDigits);
    date = parseDate(parseYearResult.restDateString, parseYearResult.year);
  }

  if (!date || isNaN(date.getTime())) {
    return new Date(NaN);
  }

  var timestamp = date.getTime();
  var time = 0;
  var offset;

  if (dateStrings.time) {
    time = parseTime(dateStrings.time);

    if (isNaN(time)) {
      return new Date(NaN);
    }
  }

  if (dateStrings.timezone) {
    offset = parseTimezone(dateStrings.timezone);

    if (isNaN(offset)) {
      return new Date(NaN);
    }
  } else {
    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone
    // but we need it to be parsed in our timezone
    // so we use utc values to build date in our timezone.
    // Year values from 0 to 99 map to the years 1900 to 1999
    // so set year explicitly with setFullYear.

    var result = new Date(0);
    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
    return result;
  }

  return new Date(timestamp + time + offset);
}
var patterns = {
  dateTimeDelimiter: /[T ]/,
  timeZoneDelimiter: /[Z ]/i,
  timezone: /([Z+-].*)$/
};
var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;

function splitDateString(dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimiter);
  var timeString; // The regex match should only return at maximum two array elements.
  // [date], [time], or [date, time].

  if (array.length > 2) {
    return dateStrings;
  }

  if (/:/.test(array[0])) {
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];

    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }

  if (timeString) {
    var token = patterns.timezone.exec(timeString);

    if (token) {
      dateStrings.time = timeString.replace(token[1], '');
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }

  return dateStrings;
}

function parseYear(dateString, additionalDigits) {
  var regex = new RegExp('^(?:(\\d{4}|[+-]\\d{' + (4 + additionalDigits) + '})|(\\d{2}|[+-]\\d{' + (2 + additionalDigits) + '})$)');
  var captures = dateString.match(regex); // Invalid ISO-formatted year

  if (!captures) return {
    year: NaN,
    restDateString: ''
  };
  var year = captures[1] ? parseInt(captures[1]) : null;
  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both

  return {
    year: century === null ? year : century * 100,
    restDateString: dateString.slice((captures[1] || captures[2]).length)
  };
}

function parseDate(dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) return new Date(NaN);
  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string

  if (!captures) return new Date(NaN);
  var isWeekDate = !!captures[4];
  var dayOfYear = parseDateUnit(captures[1]);
  var month = parseDateUnit(captures[2]) - 1;
  var day = parseDateUnit(captures[3]);
  var week = parseDateUnit(captures[4]);
  var dayOfWeek = parseDateUnit(captures[5]) - 1;

  if (isWeekDate) {
    if (!validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN);
    }

    return dayOfISOWeekYear(year, week, dayOfWeek);
  } else {
    var date = new Date(0);

    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
      return new Date(NaN);
    }

    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
    return date;
  }
}

function parseDateUnit(value) {
  return value ? parseInt(value) : 1;
}

function parseTime(timeString) {
  var captures = timeString.match(timeRegex);
  if (!captures) return NaN; // Invalid ISO-formatted time

  var hours = parseTimeUnit(captures[1]);
  var minutes = parseTimeUnit(captures[2]);
  var seconds = parseTimeUnit(captures[3]);

  if (!validateTime(hours, minutes, seconds)) {
    return NaN;
  }

  return hours * _constants_index_js__WEBPACK_IMPORTED_MODULE_2__.millisecondsInHour + minutes * _constants_index_js__WEBPACK_IMPORTED_MODULE_2__.millisecondsInMinute + seconds * 1000;
}

function parseTimeUnit(value) {
  return value && parseFloat(value.replace(',', '.')) || 0;
}

function parseTimezone(timezoneString) {
  if (timezoneString === 'Z') return 0;
  var captures = timezoneString.match(timezoneRegex);
  if (!captures) return 0;
  var sign = captures[1] === '+' ? -1 : 1;
  var hours = parseInt(captures[2]);
  var minutes = captures[3] && parseInt(captures[3]) || 0;

  if (!validateTimezone(hours, minutes)) {
    return NaN;
  }

  return sign * (hours * _constants_index_js__WEBPACK_IMPORTED_MODULE_2__.millisecondsInHour + minutes * _constants_index_js__WEBPACK_IMPORTED_MODULE_2__.millisecondsInMinute);
}

function dayOfISOWeekYear(isoWeekYear, week, day) {
  var date = new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date;
} // Validation functions
// February is null to handle the leap year (using ||)


var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

function validateDate(year, month, date) {
  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}

function validateDayOfYearDate(year, dayOfYear) {
  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}

function validateWeekDate(_year, week, day) {
  return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}

function validateTime(hours, minutes, seconds) {
  if (hours === 24) {
    return minutes === 0 && seconds === 0;
  }

  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}

function validateTimezone(_hours, minutes) {
  return minutes >= 0 && minutes <= 59;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/previousDay/index.js":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/esm/previousDay/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ previousDay; }
/* harmony export */ });
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");
/* harmony import */ var _getDay_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../getDay/index.js */ "./node_modules/date-fns/esm/getDay/index.js");
/* harmony import */ var _subDays_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../subDays/index.js */ "./node_modules/date-fns/esm/subDays/index.js");




/**
 * @name previousDay
 * @category Weekday Helpers
 * @summary When is the previous day of the week?
 *
 * @description
 * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.
 *
 * @param {Date | number} date - the date to check
 * @param {number} day - day of the week
 * @returns {Date} - the date is the previous day of week
 * @throws {TypeError} - 2 arguments required
 *
 * @example
 * // When is the previous Monday before Mar, 20, 2020?
 * const result = previousDay(new Date(2020, 2, 20), 1)
 * //=> Mon Mar 16 2020 00:00:00
 *
 * @example
 * // When is the previous Tuesday before Mar, 21, 2020?
 * const result = previousDay(new Date(2020, 2, 21), 2)
 * //=> Tue Mar 17 2020 00:00:00
 */
function previousDay(date, day) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var delta = (0,_getDay_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(date) - day;
  if (delta <= 0) delta += 7;
  return (0,_subDays_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(date, delta);
}

/***/ }),

/***/ "./node_modules/date-fns/esm/startOfDay/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/date-fns/esm/startOfDay/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ startOfDay; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a day
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */

function startOfDay(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  date.setHours(0, 0, 0, 0);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/startOfMonth/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/date-fns/esm/startOfMonth/index.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ startOfMonth; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");


/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @returns {Date} the start of a month
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfMonth(dirtyDate) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyDate);
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/startOfWeek/index.js":
/*!********************************************************!*\
  !*** ./node_modules/date-fns/esm/startOfWeek/index.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ startOfWeek; }
/* harmony export */ });
/* harmony import */ var _toDate_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../toDate/index.js */ "./node_modules/date-fns/esm/toDate/index.js");
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the original date
 * @param {Object} [options] - an object with options.
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @returns {Date} the start of a week
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */

function startOfWeek(dirtyDate, dirtyOptions) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
  }

  var date = (0,_toDate_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate);
  var day = date.getDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date.setDate(date.getDate() - diff);
  date.setHours(0, 0, 0, 0);
  return date;
}

/***/ }),

/***/ "./node_modules/date-fns/esm/subDays/index.js":
/*!****************************************************!*\
  !*** ./node_modules/date-fns/esm/subDays/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ subDays; }
/* harmony export */ });
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _addDays_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addDays/index.js */ "./node_modules/date-fns/esm/addDays/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name subDays
 * @category Day Helpers
 * @summary Subtract the specified number of days from the given date.
 *
 * @description
 * Subtract the specified number of days from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the days subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 10 days from 1 September 2014:
 * const result = subDays(new Date(2014, 8, 1), 10)
 * //=> Fri Aug 22 2014 00:00:00
 */

function subDays(dirtyDate, dirtyAmount) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var amount = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyAmount);
  return (0,_addDays_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate, -amount);
}

/***/ }),

/***/ "./node_modules/date-fns/esm/subMilliseconds/index.js":
/*!************************************************************!*\
  !*** ./node_modules/date-fns/esm/subMilliseconds/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ subMilliseconds; }
/* harmony export */ });
/* harmony import */ var _lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../_lib/toInteger/index.js */ "./node_modules/date-fns/esm/_lib/toInteger/index.js");
/* harmony import */ var _addMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../addMilliseconds/index.js */ "./node_modules/date-fns/esm/addMilliseconds/index.js");
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");



/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */

function subMilliseconds(dirtyDate, dirtyAmount) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(2, arguments);
  var amount = (0,_lib_toInteger_index_js__WEBPACK_IMPORTED_MODULE_1__["default"])(dirtyAmount);
  return (0,_addMilliseconds_index_js__WEBPACK_IMPORTED_MODULE_2__["default"])(dirtyDate, -amount);
}

/***/ }),

/***/ "./node_modules/date-fns/esm/toDate/index.js":
/*!***************************************************!*\
  !*** ./node_modules/date-fns/esm/toDate/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ toDate; }
/* harmony export */ });
/* harmony import */ var _lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../_lib/requiredArgs/index.js */ "./node_modules/date-fns/esm/_lib/requiredArgs/index.js");

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  (0,_lib_requiredArgs_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var hashClear = __webpack_require__(/*! ./_hashClear */ "./node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ "./node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__(/*! ./_hashGet */ "./node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__(/*! ./_hashHas */ "./node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__(/*! ./_hashSet */ "./node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "./node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "./node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "./node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "./node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "./node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ "./node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ "./node_modules/lodash/_setCacheHas.js");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__(/*! ./_stackClear */ "./node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ "./node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__(/*! ./_stackGet */ "./node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__(/*! ./_stackHas */ "./node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__(/*! ./_stackSet */ "./node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/***/ (function(module) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "./node_modules/lodash/_arrayIncludes.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayIncludes.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ "./node_modules/lodash/_baseIndexOf.js");

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;


/***/ }),

/***/ "./node_modules/lodash/_arrayIncludesWith.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash/_arrayIncludesWith.js ***!
  \***************************************************/
/***/ (function(module) {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;


/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "./node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__(/*! ./_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__(/*! ./_baseAssignIn */ "./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__(/*! ./_copySymbols */ "./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__(/*! ./_copySymbolsIn */ "./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__(/*! ./_initCloneArray */ "./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__(/*! ./_initCloneByTag */ "./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__(/*! ./isMap */ "./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__(/*! ./isSet */ "./node_modules/lodash/isSet.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ "./node_modules/lodash/_baseFindIndex.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseFindIndex.js ***!
  \***********************************************/
/***/ (function(module) {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;


/***/ }),

/***/ "./node_modules/lodash/_baseGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "./node_modules/lodash/_baseHasIn.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseHasIn.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),

/***/ "./node_modules/lodash/_baseIndexOf.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIndexOf.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseFindIndex = __webpack_require__(/*! ./_baseFindIndex */ "./node_modules/lodash/_baseFindIndex.js"),
    baseIsNaN = __webpack_require__(/*! ./_baseIsNaN */ "./node_modules/lodash/_baseIsNaN.js"),
    strictIndexOf = __webpack_require__(/*! ./_strictIndexOf */ "./node_modules/lodash/_strictIndexOf.js");

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ "./node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__(/*! ./_equalByTag */ "./node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__(/*! ./_equalObjects */ "./node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMap.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsMap.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMatch.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsMatch.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNaN.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsNaN.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__(/*! ./_isMasked */ "./node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "./node_modules/lodash/_baseIsSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsSet.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_baseIteratee.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseMatches = __webpack_require__(/*! ./_baseMatches */ "./node_modules/lodash/_baseMatches.js"),
    baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ "./node_modules/lodash/_baseMatchesProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    property = __webpack_require__(/*! ./property */ "./node_modules/lodash/property.js");

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "./node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ "./node_modules/lodash/_nativeKeysIn.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_baseMatches.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseMatches.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ "./node_modules/lodash/_baseIsMatch.js"),
    getMatchData = __webpack_require__(/*! ./_getMatchData */ "./node_modules/lodash/_getMatchData.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js");

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),

/***/ "./node_modules/lodash/_baseMatchesProperty.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_baseMatchesProperty.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js"),
    get = __webpack_require__(/*! ./get */ "./node_modules/lodash/get.js"),
    hasIn = __webpack_require__(/*! ./hasIn */ "./node_modules/lodash/hasIn.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),

/***/ "./node_modules/lodash/_baseProperty.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseProperty.js ***!
  \**********************************************/
/***/ (function(module) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),

/***/ "./node_modules/lodash/_basePropertyDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_basePropertyDeep.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseRange.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseRange.js ***!
  \*******************************************/
/***/ (function(module) {

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeMax = Math.max;

/**
 * The base implementation of `_.range` and `_.rangeRight` which doesn't
 * coerce arguments.
 *
 * @private
 * @param {number} start The start of the range.
 * @param {number} end The end of the range.
 * @param {number} step The value to increment or decrement by.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the range of numbers.
 */
function baseRange(start, end, step, fromRight) {
  var index = -1,
      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length);

  while (length--) {
    result[fromRight ? length : ++index] = start;
    start += step;
  }
  return result;
}

module.exports = baseRange;


/***/ }),

/***/ "./node_modules/lodash/_baseSortedIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSortedIndex.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseSortedIndexBy = __webpack_require__(/*! ./_baseSortedIndexBy */ "./node_modules/lodash/_baseSortedIndexBy.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295,
    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

/**
 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
 * performs a binary search of `array` to determine the index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */
function baseSortedIndex(array, value, retHighest) {
  var low = 0,
      high = array == null ? low : array.length;

  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    while (low < high) {
      var mid = (low + high) >>> 1,
          computed = array[mid];

      if (computed !== null && !isSymbol(computed) &&
          (retHighest ? (computed <= value) : (computed < value))) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return high;
  }
  return baseSortedIndexBy(array, value, identity, retHighest);
}

module.exports = baseSortedIndex;


/***/ }),

/***/ "./node_modules/lodash/_baseSortedIndexBy.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash/_baseSortedIndexBy.js ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295,
    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor = Math.floor,
    nativeMin = Math.min;

/**
 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
 * which invokes `iteratee` for `value` and each element of `array` to compute
 * their sort ranking. The iteratee is invoked with one argument; (value).
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} iteratee The iteratee invoked per element.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */
function baseSortedIndexBy(array, value, iteratee, retHighest) {
  var low = 0,
      high = array == null ? 0 : array.length;
  if (high === 0) {
    return 0;
  }

  value = iteratee(value);
  var valIsNaN = value !== value,
      valIsNull = value === null,
      valIsSymbol = isSymbol(value),
      valIsUndefined = value === undefined;

  while (low < high) {
    var mid = nativeFloor((low + high) / 2),
        computed = iteratee(array[mid]),
        othIsDefined = computed !== undefined,
        othIsNull = computed === null,
        othIsReflexive = computed === computed,
        othIsSymbol = isSymbol(computed);

    if (valIsNaN) {
      var setLow = retHighest || othIsReflexive;
    } else if (valIsUndefined) {
      setLow = othIsReflexive && (retHighest || othIsDefined);
    } else if (valIsNull) {
      setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
    } else if (valIsSymbol) {
      setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
    } else if (othIsNull || othIsSymbol) {
      setLow = false;
    } else {
      setLow = retHighest ? (computed <= value) : (computed < value);
    }
    if (setLow) {
      low = mid + 1;
    } else {
      high = mid;
    }
  }
  return nativeMin(high, MAX_ARRAY_INDEX);
}

module.exports = baseSortedIndexBy;


/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "./node_modules/lodash/_baseTrim.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseTrim.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ "./node_modules/lodash/_trimmedEndIndex.js");

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "./node_modules/lodash/_baseUniq.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseUniq.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arrayIncludes = __webpack_require__(/*! ./_arrayIncludes */ "./node_modules/lodash/_arrayIncludes.js"),
    arrayIncludesWith = __webpack_require__(/*! ./_arrayIncludesWith */ "./node_modules/lodash/_arrayIncludesWith.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js"),
    createSet = __webpack_require__(/*! ./_createSet */ "./node_modules/lodash/_createSet.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */
function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  }
  else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);
    if (set) {
      return setToArray(set);
    }
    isCommon = false;
    includes = cacheHas;
    seen = new SetCache;
  }
  else {
    seen = iteratee ? [] : result;
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var seenIndex = seen.length;
      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }
      if (iteratee) {
        seen.push(computed);
      }
      result.push(value);
    }
    else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}

module.exports = baseUniq;


/***/ }),

/***/ "./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ "./node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js");

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneDataView.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_cloneDataView.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ "./node_modules/lodash/_cloneRegExp.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneRegExp.js ***!
  \*********************************************/
/***/ (function(module) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ "./node_modules/lodash/_cloneSymbol.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneSymbol.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js");

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js");

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "./node_modules/lodash/_createRange.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_createRange.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseRange = __webpack_require__(/*! ./_baseRange */ "./node_modules/lodash/_baseRange.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js"),
    toFinite = __webpack_require__(/*! ./toFinite */ "./node_modules/lodash/toFinite.js");

/**
 * Creates a `_.range` or `_.rangeRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new range function.
 */
function createRange(fromRight) {
  return function(start, end, step) {
    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
      end = step = undefined;
    }
    // Ensure the sign of `-0` is preserved.
    start = toFinite(start);
    if (end === undefined) {
      end = start;
      start = 0;
    } else {
      end = toFinite(end);
    }
    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
    return baseRange(start, end, step, fromRight);
  };
}

module.exports = createRange;


/***/ }),

/***/ "./node_modules/lodash/_createSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_createSet.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    noop = __webpack_require__(/*! ./noop */ "./node_modules/lodash/noop.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

module.exports = createSet;


/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__(/*! ./_arraySome */ "./node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ "./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__(/*! ./_mapToArray */ "./node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ "./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "./node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "./node_modules/lodash/_getMatchData.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getMatchData.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "./node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__(/*! ./_getValue */ "./node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var DataView = __webpack_require__(/*! ./_DataView */ "./node_modules/lodash/_DataView.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    Promise = __webpack_require__(/*! ./_Promise */ "./node_modules/lodash/_Promise.js"),
    Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "./node_modules/lodash/_hasPath.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hasPath.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/***/ (function(module) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/***/ (function(module) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js"),
    cloneDataView = __webpack_require__(/*! ./_cloneDataView */ "./node_modules/lodash/_cloneDataView.js"),
    cloneRegExp = __webpack_require__(/*! ./_cloneRegExp */ "./node_modules/lodash/_cloneRegExp.js"),
    cloneSymbol = __webpack_require__(/*! ./_cloneSymbol */ "./node_modules/lodash/_cloneSymbol.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js");

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/***/ (function(module) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/***/ (function(module) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "./node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/***/ (function(module) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "./node_modules/lodash/_isStrictComparable.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash/_isStrictComparable.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ (function(module) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var Hash = __webpack_require__(/*! ./_Hash */ "./node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/***/ (function(module) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ "./node_modules/lodash/_matchesStrictComparable.js":
/*!*********************************************************!*\
  !*** ./node_modules/lodash/_matchesStrictComparable.js ***!
  \*********************************************************/
/***/ (function(module) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var memoize = __webpack_require__(/*! ./memoize */ "./node_modules/lodash/memoize.js");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/***/ (function(module) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ (function(module) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/***/ (function(module) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/***/ (function(module) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ "./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/***/ (function(module) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/***/ (function(module) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/***/ (function(module) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "./node_modules/lodash/_strictIndexOf.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_strictIndexOf.js ***!
  \***********************************************/
/***/ (function(module) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ "./node_modules/lodash/_memoizeCapped.js");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/***/ (function(module) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "./node_modules/lodash/_trimmedEndIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_trimmedEndIndex.js ***!
  \*************************************************/
/***/ (function(module) {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ "./node_modules/lodash/cloneDeep.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/cloneDeep.js ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ (function(module) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "./node_modules/lodash/get.js":
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ "./node_modules/lodash/hasIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/hasIn.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ "./node_modules/lodash/_baseHasIn.js"),
    hasPath = __webpack_require__(/*! ./_hasPath */ "./node_modules/lodash/_hasPath.js");

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/***/ (function(module) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "./node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ (function(module) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__(/*! ./stubFalse */ "./node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ "./node_modules/lodash/isEmpty.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEmpty.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;


/***/ }),

/***/ "./node_modules/lodash/isEqual.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEqual.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;


/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/***/ (function(module) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsMap = __webpack_require__(/*! ./_baseIsMap */ "./node_modules/lodash/_baseIsMap.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ (function(module) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ (function(module) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsSet = __webpack_require__(/*! ./_baseIsSet */ "./node_modules/lodash/_baseIsSet.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "./node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ "./node_modules/lodash/_baseKeysIn.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ "./node_modules/lodash/noop.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/noop.js ***!
  \*************************************/
/***/ (function(module) {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {
  // No operation performed.
}

module.exports = noop;


/***/ }),

/***/ "./node_modules/lodash/property.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/property.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js"),
    basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ "./node_modules/lodash/_basePropertyDeep.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),

/***/ "./node_modules/lodash/range.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/range.js ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var createRange = __webpack_require__(/*! ./_createRange */ "./node_modules/lodash/_createRange.js");

/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */
var range = createRange();

module.exports = range;


/***/ }),

/***/ "./node_modules/lodash/sortedIndex.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/sortedIndex.js ***!
  \********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseSortedIndex = __webpack_require__(/*! ./_baseSortedIndex */ "./node_modules/lodash/_baseSortedIndex.js");

/**
 * Uses a binary search to determine the lowest index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * _.sortedIndex([30, 50], 40);
 * // => 1
 */
function sortedIndex(array, value) {
  return baseSortedIndex(array, value);
}

module.exports = sortedIndex;


/***/ }),

/***/ "./node_modules/lodash/sortedIndexBy.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/sortedIndexBy.js ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseSortedIndexBy = __webpack_require__(/*! ./_baseSortedIndexBy */ "./node_modules/lodash/_baseSortedIndexBy.js");

/**
 * This method is like `_.sortedIndex` except that it accepts `iteratee`
 * which is invoked for `value` and each element of `array` to compute their
 * sort ranking. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * var objects = [{ 'x': 4 }, { 'x': 5 }];
 *
 * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
 * // => 0
 */
function sortedIndexBy(array, value, iteratee) {
  return baseSortedIndexBy(array, value, baseIteratee(iteratee, 2));
}

module.exports = sortedIndexBy;


/***/ }),

/***/ "./node_modules/lodash/sortedLastIndex.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/sortedLastIndex.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseSortedIndex = __webpack_require__(/*! ./_baseSortedIndex */ "./node_modules/lodash/_baseSortedIndex.js");

/**
 * This method is like `_.sortedIndex` except that it returns the highest
 * index at which `value` should be inserted into `array` in order to
 * maintain its sort order.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
 * // => 4
 */
function sortedLastIndex(array, value) {
  return baseSortedIndex(array, value, true);
}

module.exports = sortedLastIndex;


/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/***/ (function(module) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/toFinite.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toFinite.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseTrim = __webpack_require__(/*! ./_baseTrim */ "./node_modules/lodash/_baseTrim.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "./node_modules/lodash/uniq.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/uniq.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseUniq = __webpack_require__(/*! ./_baseUniq */ "./node_modules/lodash/_baseUniq.js");

/**
 * Creates a duplicate-free version of an array, using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons, in which only the first occurrence of each element
 * is kept. The order of result values is determined by the order they occur
 * in the array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniq([2, 1, 2]);
 * // => [2, 1]
 */
function uniq(array) {
  return (array && array.length) ? baseUniq(array) : [];
}

module.exports = uniq;


/***/ }),

/***/ "./node_modules/lodash/uniqWith.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/uniqWith.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var baseUniq = __webpack_require__(/*! ./_baseUniq */ "./node_modules/lodash/_baseUniq.js");

/**
 * This method is like `_.uniq` except that it accepts `comparator` which
 * is invoked to compare elements of `array`. The order of result values is
 * determined by the order they occur in the array.The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.uniqWith(objects, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
 */
function uniqWith(array, comparator) {
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
}

module.exports = uniqWith;


/***/ }),

/***/ "./node_modules/ordinal/index.js":
/*!***************************************!*\
  !*** ./node_modules/ordinal/index.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

var indicator = __webpack_require__(/*! ./indicator */ "./node_modules/ordinal/indicator.js")

function ordinal (i) {
  if (typeof i !== 'number') throw new TypeError('Expected Number, got ' + (typeof i) + ' ' + i)

  if (!Number.isFinite(i)) return i
  return i + indicator(i)
}

ordinal.indicator = indicator
module.exports = ordinal


/***/ }),

/***/ "./node_modules/ordinal/indicator.js":
/*!*******************************************!*\
  !*** ./node_modules/ordinal/indicator.js ***!
  \*******************************************/
/***/ (function(module) {

module.exports = function indicator (i) {
  i = Math.abs(i)
  var cent = i % 100
  if (cent >= 10 && cent <= 20) return 'th'
  var dec = i % 10
  if (dec === 1) return 'st'
  if (dec === 2) return 'nd'
  if (dec === 3) return 'rd'
  return 'th'
}


/***/ }),

/***/ "./src/styles/main.css":
/*!*****************************!*\
  !*** ./src/styles/main.css ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!./main.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles/main.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ __webpack_exports__["default"] = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_main_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./src/styles/reset.css":
/*!******************************!*\
  !*** ./src/styles/reset.css ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/postcss-loader/dist/cjs.js!./reset.css */ "./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./src/styles/reset.css");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ __webpack_exports__["default"] = (_node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_postcss_loader_dist_cjs_js_reset_css__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ (function(module) {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ (function(module) {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ (function(module) {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ (function(module) {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ (function(module) {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/regex.js":
/*!*****************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/regex.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/rng.js":
/*!***************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/rng.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": function() { return /* binding */ rng; }
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/stringify.js":
/*!*********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/stringify.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ __webpack_exports__["default"] = (stringify);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/v4.js":
/*!**************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/v4.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "./node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "./node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ __webpack_exports__["default"] = (v4);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/validate.js":
/*!********************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/validate.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ __webpack_exports__["default"] = (validate);

/***/ }),

/***/ "./node_modules/uuid/dist/esm-browser/version.js":
/*!*******************************************************!*\
  !*** ./node_modules/uuid/dist/esm-browser/version.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "./node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ __webpack_exports__["default"] = (version);

/***/ }),

/***/ "./src/images/add.svg":
/*!****************************!*\
  !*** ./src/images/add.svg ***!
  \****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "e46260f47d4a148fddef.svg";

/***/ }),

/***/ "./src/images/app-options.svg":
/*!************************************!*\
  !*** ./src/images/app-options.svg ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "d3bf607bd40cfc5ff8b8.svg";

/***/ }),

/***/ "./src/images/arrow-down.svg":
/*!***********************************!*\
  !*** ./src/images/arrow-down.svg ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "4960b56f69ee6a33e2df.svg";

/***/ }),

/***/ "./src/images/arrow-left.svg":
/*!***********************************!*\
  !*** ./src/images/arrow-left.svg ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "fa2969b9fad3b0910d82.svg";

/***/ }),

/***/ "./src/images/arrow-right.svg":
/*!************************************!*\
  !*** ./src/images/arrow-right.svg ***!
  \************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "32724bd6f478780198fd.svg";

/***/ }),

/***/ "./src/images/close.svg":
/*!******************************!*\
  !*** ./src/images/close.svg ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "a8412e4938d2a0e05e27.svg";

/***/ }),

/***/ "./src/images/copy.svg":
/*!*****************************!*\
  !*** ./src/images/copy.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "745ff1e9be65b947eba0.svg";

/***/ }),

/***/ "./src/images/delete.svg":
/*!*******************************!*\
  !*** ./src/images/delete.svg ***!
  \*******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "cb3c1341729e15767930.svg";

/***/ }),

/***/ "./src/images/done.svg":
/*!*****************************!*\
  !*** ./src/images/done.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "24181ff26614724660c3.svg";

/***/ }),

/***/ "./src/images/edit.svg":
/*!*****************************!*\
  !*** ./src/images/edit.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "49f75adc8d73036c195b.svg";

/***/ }),

/***/ "./src/images/group.svg":
/*!******************************!*\
  !*** ./src/images/group.svg ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "875650458bca786df6f0.svg";

/***/ }),

/***/ "./src/images/info.svg":
/*!*****************************!*\
  !*** ./src/images/info.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "dd39b9ce180a989c394a.svg";

/***/ }),

/***/ "./src/images/menu.svg":
/*!*****************************!*\
  !*** ./src/images/menu.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "b08a3889d2d57865f447.svg";

/***/ }),

/***/ "./src/images/more.svg":
/*!*****************************!*\
  !*** ./src/images/more.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "8b03ca0ef41885c69c69.svg";

/***/ }),

/***/ "./src/images/order.svg":
/*!******************************!*\
  !*** ./src/images/order.svg ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "3f22fe34229f8d0930ae.svg";

/***/ }),

/***/ "./src/images/project.svg":
/*!********************************!*\
  !*** ./src/images/project.svg ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "899b6f8c66e352af550a.svg";

/***/ }),

/***/ "./src/images/radio-checked.svg":
/*!**************************************!*\
  !*** ./src/images/radio-checked.svg ***!
  \**************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "3007b932409686381cd8.svg";

/***/ }),

/***/ "./src/images/radio-unchecked.svg":
/*!****************************************!*\
  !*** ./src/images/radio-unchecked.svg ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "53e45932c5a13573d9f3.svg";

/***/ }),

/***/ "./src/images/save.svg":
/*!*****************************!*\
  !*** ./src/images/save.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "a4b5b1d78905ebb53209.svg";

/***/ }),

/***/ "./src/images/settings.svg":
/*!*********************************!*\
  !*** ./src/images/settings.svg ***!
  \*********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "5a00a9dee1c011eb8588.svg";

/***/ }),

/***/ "./src/images/sort.svg":
/*!*****************************!*\
  !*** ./src/images/sort.svg ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "7cdc1793f50cc0d817ca.svg";

/***/ }),

/***/ "./src/images/today.svg":
/*!******************************!*\
  !*** ./src/images/today.svg ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
module.exports = __webpack_require__.p + "ed5f89846bd5d39058fd.svg";

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	!function() {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	!function() {
/******/ 		__webpack_require__.nmd = function(module) {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	!function() {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	!function() {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
!function() {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _shims_classList__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shims/classList */ "./src/shims/classList.js");
/* harmony import */ var _shims_classList__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shims_classList__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/app */ "./src/modules/app.js");


var app = new _modules_app__WEBPACK_IMPORTED_MODULE_1__["default"](document.body);
app.run();
}();
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkJBQTZCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwyQkFBMkI7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsdUJBQXVCO0FBQzNDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsSUFBSSxrQkFBa0I7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxJQUFJLGtCQUFrQjs7QUFFdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsSUFBSSw4RUFBOEU7QUFDbEY7QUFDQSxDQUFDOzs7Ozs7Ozs7OztBQ2poQ0Q7QUFDQSxtQkFBTyxDQUFDLDZGQUFnQzs7Ozs7Ozs7Ozs7O0FDRDNCO0FBQ2IsUUFBUSxtQkFBTyxDQUFDLHVFQUFxQjtBQUNyQyxXQUFXLG1CQUFPLENBQUMscUZBQTRCOztBQUUvQztBQUNBO0FBQ0EsSUFBSSw4Q0FBOEM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNWRDtBQUM2RztBQUNqQjtBQUM1Riw4QkFBOEIsbUZBQTJCLENBQUMsNEZBQXFDO0FBQy9GLHdIQUF3SDtBQUN4SDtBQUNBLGlEQUFpRCxzREFBc0Qsb0RBQW9ELDBCQUEwQiwwQkFBMEIsNEJBQTRCLG1DQUFtQyxrQ0FBa0Msb0NBQW9DLHVDQUF1QyxvQ0FBb0Msb0NBQW9DLGdDQUFnQyxHQUFHLDBCQUEwQixrQkFBa0IsbUNBQW1DLHdCQUF3QixHQUFHLDZEQUE2RCxvQkFBb0IsR0FBRyx1QkFBdUIsbUJBQW1CLGtCQUFrQiwwQ0FBMEMsa0JBQWtCLGFBQWEsR0FBRywrQ0FBK0MsZ0JBQWdCLGlCQUFpQixzQkFBc0IsaUJBQWlCLHFEQUFxRCxtQ0FBbUMsb0JBQW9CLHVCQUF1QiwwQkFBMEIsR0FBRyw2QkFBNkIsc0JBQXNCLEdBQUcsK0JBQStCLGlCQUFpQix1Q0FBdUMsc0JBQXNCLEdBQUcsNEJBQTRCLHNCQUFzQiw0QkFBNEIsR0FBRyxzQ0FBc0MsbUJBQW1CLEdBQUcsK0NBQStDLGlCQUFpQiw2Q0FBNkMsR0FBRyxrQkFBa0IsaUJBQWlCLEdBQUcsbUJBQW1CLHdCQUF3QixHQUFHLDJCQUEyQixrQkFBa0IsbUNBQW1DLHNCQUFzQixHQUFHLHFEQUFxRCxxQkFBcUIsR0FBRywwQkFBMEIsWUFBWSxxQkFBcUIsaUJBQWlCLEdBQUcsK0JBQStCLDJCQUEyQixHQUFHLHlCQUF5QixxREFBcUQsbUNBQW1DLG9CQUFvQixzQkFBc0IsMkJBQTJCLEdBQUcsa0JBQWtCLGlCQUFpQixHQUFHLGtCQUFrQiwyQkFBMkIsR0FBRywyQkFBMkIsa0JBQWtCLG1DQUFtQyx3QkFBd0IsZ0JBQWdCLG1CQUFtQix1QkFBdUIsc0JBQXNCLEdBQUcsOEVBQThFLDhCQUE4QixHQUFHLHdCQUF3QixxREFBcUQsbUNBQW1DLG9CQUFvQixxQkFBcUIsNEJBQTRCLHdCQUF3QixHQUFHLDZEQUE2RCw0QkFBNEIsR0FBRyx3RkFBd0Ysa0JBQWtCLEdBQUcsc0NBQXNDLGtCQUFrQixHQUFHLHdDQUF3QyxrQkFBa0IsR0FBRyxzQ0FBc0Msa0JBQWtCLEdBQUcscURBQXFELDJCQUEyQixHQUFHLFlBQVksa0NBQWtDLHVCQUF1QixvQkFBb0IsR0FBRyxxREFBcUQsa0JBQWtCLEdBQUcsb0JBQW9CLGlCQUFpQix1REFBdUQscUNBQXFDLG9CQUFvQixtQkFBbUIsNEJBQTRCLDRCQUE0Qix1QkFBdUIsc0RBQXNELEdBQUcsMkJBQTJCLGlCQUFpQiw4QkFBOEIsR0FBRyxvQ0FBb0MsbUJBQW1CLHVDQUF1Qyw4QkFBOEIsR0FBRywyQkFBMkIsd0JBQXdCLEdBQUcsZ0NBQWdDLGtCQUFrQixnQkFBZ0IsR0FBRyxzQ0FBc0MsZUFBZSxzQkFBc0IsR0FBRyw2Q0FBNkMsaUJBQWlCLHNCQUFzQixHQUFHLHVCQUF1QixtQkFBbUIscURBQXFELG1DQUFtQyxvQkFBb0Isc0JBQXNCLHVCQUF1QixHQUFHLDhCQUE4QixxREFBcUQsbUNBQW1DLG9CQUFvQix3QkFBd0IsR0FBRywrQ0FBK0MsZ0JBQWdCLEdBQUcsMkdBQTJHLGlCQUFpQiw0QkFBNEIsdUJBQXVCLHVEQUF1RCxxQ0FBcUMsb0JBQW9CLEdBQUcsa0JBQWtCLDRCQUE0QixHQUFHLG9CQUFvQixnQkFBZ0IscUJBQXFCLHdCQUF3QixHQUFHLGtCQUFrQiw0QkFBNEIsR0FBRyx5QkFBeUIsOEJBQThCLEdBQUcsMERBQTBELHFCQUFxQixHQUFHLGdDQUFnQyxtQkFBbUIsR0FBRyw0QkFBNEIsc0JBQXNCLHFEQUFxRCxtQ0FBbUMsb0JBQW9CLEdBQUcseUNBQXlDLGdCQUFnQixHQUFHLHdCQUF3QixrQkFBa0IsR0FBRywwQkFBMEIsMEJBQTBCLHdCQUF3QixHQUFHLDJMQUEyTCxtQkFBbUIsdUNBQXVDLDhCQUE4QixxREFBcUQsMEJBQTBCLGlEQUFpRCxHQUFHLHVCQUF1QixtQkFBbUIsb0JBQW9CLEdBQUcsb0JBQW9CLG9CQUFvQixXQUFXLFlBQVksaUJBQWlCLGtCQUFrQixpQkFBaUIseUNBQXlDLEdBQUcsb0JBQW9CLG9CQUFvQixXQUFXLFlBQVksaUJBQWlCLGtCQUFrQixpQkFBaUIsb0JBQW9CLDRCQUE0Qix3QkFBd0IsR0FBRyxZQUFZLGlCQUFpQixxQkFBcUIsdUJBQXVCLG1FQUFtRSxtQkFBbUIsb0JBQW9CLDJCQUEyQix3QkFBd0IsOEJBQThCLDRCQUE0Qix1QkFBdUIsR0FBRyxzQkFBc0IsOEJBQThCLGdEQUFnRCxnQkFBZ0Isa0JBQWtCLG1DQUFtQyxlQUFlLG9CQUFvQixtQ0FBbUMsd0JBQXdCLEdBQUcsa0JBQWtCLHFEQUFxRCxtQ0FBbUMsb0JBQW9CLHNCQUFzQixHQUFHLG9CQUFvQixnQkFBZ0IsbUJBQW1CLGtCQUFrQixHQUFHLDZCQUE2QixrQkFBa0IsOEJBQThCLGtCQUFrQixrQkFBa0Isa0NBQWtDLDhCQUE4QixnREFBZ0QsR0FBRyxxQ0FBcUMsc0JBQXNCLEdBQUcsbUJBQW1CLGlCQUFpQixpQkFBaUIsdURBQXVELHFDQUFxQyxvQkFBb0IsOEJBQThCLDRCQUE0Qix1QkFBdUIsR0FBRyx5QkFBeUIsc0JBQXNCLEdBQUcsOEJBQThCLGlCQUFpQiw4QkFBOEIsR0FBRyxtQ0FBbUMscURBQXFELG1DQUFtQyxvQkFBb0IscUJBQXFCLEdBQUcsbUVBQW1FLHFCQUFxQixHQUFHLDRCQUE0QixpREFBaUQscUNBQXFDLG9CQUFvQixxQkFBcUIsR0FBRywwQkFBMEIsc0JBQXNCLEdBQUcseUJBQXlCLG9CQUFvQixXQUFXLFlBQVksaUJBQWlCLGtCQUFrQixpQkFBaUIsa0NBQWtDLEdBQUcsaUJBQWlCLHVCQUF1QixXQUFXLFlBQVksNEJBQTRCLDRCQUE0QixrQkFBa0IscUJBQXFCLHNCQUFzQixtQkFBbUIsR0FBRyxzQkFBc0IsaUJBQWlCLGtCQUFrQix3QkFBd0Isb0JBQW9CLEdBQUcseUNBQXlDLGtDQUFrQyxzREFBc0QsR0FBRyw2QkFBNkIsOEJBQThCLGtEQUFrRCxHQUFHLDRCQUE0QixxREFBcUQsbUNBQW1DLG9CQUFvQixpQkFBaUIsbUJBQW1CLHFCQUFxQixHQUFHLGlCQUFpQixnQkFBZ0Isa0NBQWtDLHNEQUFzRCxZQUFZLG1CQUFtQixHQUFHLHlCQUF5QixnQkFBZ0IscUJBQXFCLHlDQUF5QyxrQkFBa0IsaUJBQWlCLEdBQUcsd0JBQXdCLHFEQUFxRCxtQ0FBbUMsb0JBQW9CLHNCQUFzQixxQkFBcUIsbUJBQW1CLEdBQUcscUJBQXFCLHFEQUFxRCxtQ0FBbUMsa0JBQWtCLDRCQUE0QixzQkFBc0IsR0FBRyx1Q0FBdUMsa0NBQWtDLHNEQUFzRCxHQUFHLDJCQUEyQiw4QkFBOEIsa0RBQWtELHVCQUF1QixHQUFHLDhCQUE4QiwyQkFBMkIsR0FBRyxvQ0FBb0MsWUFBWSxHQUFHLDBCQUEwQixvQkFBb0Isa0JBQWtCLEdBQUcsaUNBQWlDLG9CQUFvQixrQkFBa0Isd0JBQXdCLG1CQUFtQiwwQkFBMEIsR0FBRyw2QkFBNkIsb0JBQW9CLEdBQUcscUNBQXFDLHNCQUFzQixHQUFHLHNCQUFzQixxREFBcUQsbUNBQW1DLG9CQUFvQixtQkFBbUIsbUJBQW1CLEdBQUcsNkNBQTZDLDJCQUEyQixHQUFHLDRCQUE0Qix3QkFBd0IsR0FBRyxVQUFVLGlEQUFpRCxxQ0FBcUMsR0FBRyxrQkFBa0IsMEJBQTBCLEdBQUcsYUFBYSwrQkFBK0IsR0FBRyxVQUFVLGtCQUFrQiwyQkFBMkIsNEJBQTRCLG1CQUFtQixrQkFBa0IsR0FBRyxhQUFhLGtCQUFrQixtQ0FBbUMsd0JBQXdCLGlCQUFpQixpQ0FBaUMsbUJBQW1CLDhCQUE4QiwwQ0FBMEMsa0JBQWtCLEdBQUcsdUJBQXVCLG1CQUFtQixrQkFBa0IscUNBQXFDLHFFQUFxRSxHQUFHLGlCQUFpQixpQkFBaUIsOEJBQThCLGlEQUFpRCxtQkFBbUIsaUJBQWlCLHFCQUFxQixzQkFBc0Isa0VBQWtFLEdBQUcsaUJBQWlCLG1CQUFtQixpQkFBaUIsbUJBQW1CLG9CQUFvQiwyQkFBMkIsZ0NBQWdDLHdCQUF3QixHQUFHLHdCQUF3QixnQkFBZ0IscUJBQXFCLHlDQUF5QyxpQkFBaUIsa0JBQWtCLG1DQUFtQyx1QkFBdUIsR0FBRyxtQ0FBbUMscURBQXFELG1DQUFtQyxZQUFZLEdBQUcseUJBQXlCLG9CQUFvQixzQkFBc0IsR0FBRyw0QkFBNEIsb0JBQW9CLG9CQUFvQiwwQkFBMEIsbUJBQW1CLHVCQUF1QixtQkFBbUIsd0JBQXdCLEdBQUcsd0NBQXdDLHNCQUFzQixHQUFHLGFBQWEsaUJBQWlCLDhCQUE4QixvQkFBb0Isa0JBQWtCLGlCQUFpQixpQ0FBaUMsb0JBQW9CLDRCQUE0Qix3QkFBd0IsR0FBRyxlQUFlLG1CQUFtQixHQUFHLHFCQUFxQixtQkFBbUIsR0FBRyxhQUFhLGtCQUFrQixHQUFHLGNBQWMsOEJBQThCLGlEQUFpRCxlQUFlLGlCQUFpQix1QkFBdUIsR0FBRyx1Q0FBdUMsOEJBQThCLEdBQUcscUJBQXFCLGtCQUFrQixHQUFHLDZCQUE2QixxQkFBcUIsR0FBRyxrQkFBa0IscUJBQXFCLHNDQUFzQyxHQUFHLHNCQUFzQixrQkFBa0Isd0JBQXdCLEdBQUcsOEJBQThCLHNCQUFzQixHQUFHLFlBQVksMENBQTBDLG9CQUFvQixHQUFHLDBCQUEwQixxREFBcUQsbUNBQW1DLG9CQUFvQiwwQkFBMEIscUJBQXFCLEdBQUcsNkJBQTZCLDRCQUE0QixHQUFHLCtCQUErQiw2QkFBNkIsb0JBQW9CLEtBQUssR0FBRyxnQ0FBZ0MsNEJBQTRCLHVCQUF1QixLQUFLLEdBQUcsU0FBUyxnV0FBZ1csWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxXQUFXLFVBQVUsTUFBTSxLQUFLLFVBQVUsVUFBVSxZQUFZLFdBQVcsWUFBWSxhQUFhLFdBQVcsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksYUFBYSxPQUFPLEtBQUssWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLFlBQVksT0FBTyxNQUFNLFVBQVUsTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksV0FBVyxNQUFNLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLFdBQVcsWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksYUFBYSxZQUFZLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxZQUFZLGFBQWEsYUFBYSxPQUFPLE1BQU0sWUFBWSxPQUFPLGFBQWEsTUFBTSxVQUFVLE1BQU0sS0FBSyxVQUFVLE1BQU0sS0FBSyxVQUFVLE1BQU0sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxPQUFPLEtBQUssVUFBVSxNQUFNLEtBQUssV0FBVyxhQUFhLGFBQWEsWUFBWSxVQUFVLFlBQVksYUFBYSxjQUFjLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxPQUFPLEtBQUssV0FBVyxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsVUFBVSxNQUFNLEtBQUssVUFBVSxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLFdBQVcsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxZQUFZLE9BQU8sS0FBSyxVQUFVLE1BQU0sVUFBVSxVQUFVLFlBQVksY0FBYyxjQUFjLGFBQWEsV0FBVyxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLFdBQVcsT0FBTyxLQUFLLFVBQVUsTUFBTSxLQUFLLFVBQVUsTUFBTSxLQUFLLFlBQVksYUFBYSxPQUFPLFdBQVcsV0FBVyxhQUFhLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFVBQVUsVUFBVSxPQUFPLE1BQU0sVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxPQUFPLEtBQUssVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFdBQVcsVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSx5QkFBeUIsYUFBYSxZQUFZLFVBQVUsWUFBWSxjQUFjLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxVQUFVLFlBQVksWUFBWSxVQUFVLFlBQVksYUFBYSxPQUFPLEtBQUssWUFBWSxhQUFhLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxVQUFVLFVBQVUsTUFBTSxLQUFLLFVBQVUsYUFBYSxXQUFXLFdBQVcsWUFBWSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsV0FBVyxhQUFhLGFBQWEsWUFBWSxZQUFZLGFBQWEsYUFBYSxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssVUFBVSxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sTUFBTSxVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLE9BQU8sS0FBSyxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsV0FBVyxZQUFZLGFBQWEsV0FBVyxPQUFPLEtBQUssVUFBVSxVQUFVLFlBQVksV0FBVyxPQUFPLEtBQUssWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksYUFBYSxXQUFXLFVBQVUsVUFBVSxZQUFZLE9BQU8sTUFBTSxVQUFVLFlBQVksYUFBYSxXQUFXLFVBQVUsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLFdBQVcsVUFBVSxNQUFNLEtBQUssWUFBWSxhQUFhLFdBQVcsWUFBWSxhQUFhLFdBQVcsT0FBTyxLQUFLLFlBQVksYUFBYSxXQUFXLFlBQVksYUFBYSxPQUFPLEtBQUssWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssVUFBVSxNQUFNLEtBQUssVUFBVSxVQUFVLE1BQU0sS0FBSyxVQUFVLFVBQVUsWUFBWSxXQUFXLFlBQVksT0FBTyxLQUFLLFVBQVUsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksYUFBYSxXQUFXLFVBQVUsVUFBVSxPQUFPLGNBQWMsTUFBTSxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxjQUFjLFdBQVcsVUFBVSxNQUFNLEtBQUssVUFBVSxZQUFZLGFBQWEsWUFBWSxjQUFjLFdBQVcsWUFBWSxhQUFhLFdBQVcsTUFBTSxLQUFLLFVBQVUsVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLFdBQVcsVUFBVSxZQUFZLHlCQUF5QixhQUFhLE9BQU8sS0FBSyxVQUFVLFVBQVUsV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLE9BQU8sS0FBSyxVQUFVLFlBQVksYUFBYSxXQUFXLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxNQUFNLEtBQUssVUFBVSxZQUFZLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxZQUFZLFlBQVksV0FBVyxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksV0FBVyxVQUFVLFdBQVcsY0FBYyxXQUFXLFlBQVksYUFBYSxPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUssVUFBVSxNQUFNLEtBQUssWUFBWSxhQUFhLFdBQVcsVUFBVSxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxPQUFPLEtBQUssWUFBWSxPQUFPLEtBQUssWUFBWSxXQUFXLE9BQU8sS0FBSyxZQUFZLGFBQWEsV0FBVyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksT0FBTyxLQUFLLEtBQUssVUFBVSxLQUFLLE1BQU0sS0FBSyxLQUFLLFlBQVksTUFBTSxnQ0FBZ0Msc0RBQXNELG9EQUFvRCwwQkFBMEIsMEJBQTBCLDRCQUE0QixtQ0FBbUMsa0NBQWtDLG9DQUFvQyx1Q0FBdUMsb0NBQW9DLG9DQUFvQyxnQ0FBZ0MsR0FBRywyQkFBMkIsa0JBQWtCLG1DQUFtQyx3QkFBd0IsR0FBRyw2REFBNkQsb0JBQW9CLEdBQUcsdUJBQXVCLG1CQUFtQixrQkFBa0IsMENBQTBDLGFBQWEsR0FBRywrQ0FBK0MsZ0JBQWdCLGlCQUFpQixzQkFBc0IsaUJBQWlCLG1DQUFtQyxvQkFBb0IsdUJBQXVCLDBCQUEwQixHQUFHLDZCQUE2QixzQkFBc0IsR0FBRywrQkFBK0IsaUJBQWlCLHVDQUF1QyxzQkFBc0IsR0FBRyw0QkFBNEIsc0JBQXNCLDRCQUE0QixHQUFHLHNDQUFzQyxtQkFBbUIsR0FBRywrQ0FBK0MsaUJBQWlCLDZDQUE2QyxHQUFHLG1CQUFtQixpQkFBaUIsR0FBRyxtQkFBbUIsd0JBQXdCLEdBQUcsMkJBQTJCLGtCQUFrQixtQ0FBbUMsc0JBQXNCLEdBQUcscURBQXFELHFCQUFxQixHQUFHLDBCQUEwQixZQUFZLHFCQUFxQixpQkFBaUIsR0FBRywrQkFBK0IsMkJBQTJCLEdBQUcseUJBQXlCLG1DQUFtQyxvQkFBb0Isc0JBQXNCLDJCQUEyQixHQUFHLGtCQUFrQixpQkFBaUIsR0FBRyxrQkFBa0IsMkJBQTJCLEdBQUcsMkJBQTJCLGtCQUFrQixtQ0FBbUMsd0JBQXdCLGdCQUFnQixtQkFBbUIsdUJBQXVCLHNCQUFzQixHQUFHLDhFQUE4RSw4QkFBOEIsR0FBRyx3QkFBd0IsbUNBQW1DLG9CQUFvQixxQkFBcUIsNEJBQTRCLHdCQUF3QixHQUFHLDhEQUE4RCw0QkFBNEIsR0FBRyxxSEFBcUgsa0JBQWtCLEdBQUcscURBQXFELDJCQUEyQixHQUFHLFlBQVksa0NBQWtDLHVCQUF1QixvQkFBb0IsR0FBRyxxREFBcUQsa0JBQWtCLEdBQUcsb0JBQW9CLGlCQUFpQixxQ0FBcUMsb0JBQW9CLG1CQUFtQiw0QkFBNEIsNEJBQTRCLHVCQUF1QixzREFBc0QsR0FBRywyQkFBMkIsaUJBQWlCLDhCQUE4QixHQUFHLG9DQUFvQyx1Q0FBdUMsOEJBQThCLEdBQUcsMkJBQTJCLHdCQUF3QixHQUFHLGdDQUFnQyxrQkFBa0IsZ0JBQWdCLEdBQUcsc0NBQXNDLGVBQWUsc0JBQXNCLEdBQUcsNkNBQTZDLGlCQUFpQixzQkFBc0IsR0FBRyx1QkFBdUIsbUJBQW1CLG1DQUFtQyxvQkFBb0Isc0JBQXNCLHVCQUF1QixHQUFHLDhCQUE4QixtQ0FBbUMsb0JBQW9CLHdCQUF3QixHQUFHLCtDQUErQyxnQkFBZ0IsR0FBRywyR0FBMkcsaUJBQWlCLDRCQUE0Qix1QkFBdUIscUNBQXFDLG9CQUFvQixHQUFHLGtCQUFrQiw0QkFBNEIsR0FBRyxvQkFBb0IsZ0JBQWdCLHFCQUFxQix3QkFBd0IsR0FBRyxrQkFBa0IsNEJBQTRCLEdBQUcseUJBQXlCLDhCQUE4QixHQUFHLDBEQUEwRCxxQkFBcUIsR0FBRyxnQ0FBZ0MsbUJBQW1CLEdBQUcsNEJBQTRCLHNCQUFzQixtQ0FBbUMsb0JBQW9CLEdBQUcseUNBQXlDLGdCQUFnQixHQUFHLHdCQUF3QixrQkFBa0IsR0FBRywwQkFBMEIsMEJBQTBCLHdCQUF3QixHQUFHLDJMQUEyTCx1Q0FBdUMscURBQXFELGlEQUFpRCxHQUFHLHVCQUF1QixtQkFBbUIsb0JBQW9CLEdBQUcscUJBQXFCLG9CQUFvQixXQUFXLFlBQVksaUJBQWlCLGtCQUFrQixpQkFBaUIseUNBQXlDLEdBQUcsb0JBQW9CLG9CQUFvQixXQUFXLFlBQVksaUJBQWlCLGtCQUFrQixpQkFBaUIsb0JBQW9CLDRCQUE0Qix3QkFBd0IsR0FBRyxZQUFZLGlCQUFpQixxQkFBcUIsdUJBQXVCLG1FQUFtRSxtQkFBbUIsb0JBQW9CLDJCQUEyQix3QkFBd0IsOEJBQThCLDRCQUE0Qix1QkFBdUIsR0FBRyxzQkFBc0IsZ0RBQWdELGdCQUFnQixrQkFBa0IsbUNBQW1DLGVBQWUsb0JBQW9CLG1DQUFtQyx3QkFBd0IsR0FBRyxrQkFBa0IsbUNBQW1DLG9CQUFvQixzQkFBc0IsR0FBRyxvQkFBb0IsZ0JBQWdCLG1CQUFtQixrQkFBa0IsR0FBRyw2QkFBNkIsa0JBQWtCLDhCQUE4QixrQkFBa0Isa0JBQWtCLGtDQUFrQyxnREFBZ0QsR0FBRyxxQ0FBcUMsc0JBQXNCLEdBQUcsbUJBQW1CLGlCQUFpQixpQkFBaUIscUNBQXFDLG9CQUFvQiw4QkFBOEIsNEJBQTRCLHVCQUF1QixHQUFHLHlCQUF5QixzQkFBc0IsR0FBRyw4QkFBOEIsaUJBQWlCLDhCQUE4QixHQUFHLG1DQUFtQyxtQ0FBbUMsb0JBQW9CLHFCQUFxQixHQUFHLG1FQUFtRSxxQkFBcUIsR0FBRyw0QkFBNEIscUNBQXFDLG9CQUFvQixxQkFBcUIsR0FBRywwQkFBMEIsc0JBQXNCLEdBQUcsMEJBQTBCLG9CQUFvQixXQUFXLFlBQVksaUJBQWlCLGtCQUFrQixpQkFBaUIsa0NBQWtDLEdBQUcsaUJBQWlCLHVCQUF1QixXQUFXLFlBQVksNEJBQTRCLDRCQUE0QixrQkFBa0IscUJBQXFCLHNCQUFzQixtQkFBbUIsR0FBRyxzQkFBc0IsaUJBQWlCLGtCQUFrQix3QkFBd0Isb0JBQW9CLEdBQUcseUNBQXlDLHNEQUFzRCxHQUFHLDZCQUE2QixrREFBa0QsR0FBRyw0QkFBNEIsbUNBQW1DLG9CQUFvQixpQkFBaUIsbUJBQW1CLHFCQUFxQixHQUFHLGtCQUFrQixnQkFBZ0Isc0RBQXNELFlBQVksbUJBQW1CLEdBQUcseUJBQXlCLGdCQUFnQix5Q0FBeUMsa0JBQWtCLGlCQUFpQixHQUFHLHdCQUF3QixtQ0FBbUMsb0JBQW9CLHNCQUFzQixxQkFBcUIsbUJBQW1CLEdBQUcscUJBQXFCLG1DQUFtQyxrQkFBa0IsNEJBQTRCLHNCQUFzQixHQUFHLHVDQUF1QyxzREFBc0QsR0FBRywyQkFBMkIsa0RBQWtELHVCQUF1QixHQUFHLDhCQUE4QiwyQkFBMkIsR0FBRyxvQ0FBb0MsWUFBWSxHQUFHLDBCQUEwQixvQkFBb0Isa0JBQWtCLEdBQUcsaUNBQWlDLG9CQUFvQixrQkFBa0Isd0JBQXdCLG1CQUFtQiwwQkFBMEIsR0FBRyw2QkFBNkIsb0JBQW9CLEdBQUcscUNBQXFDLHNCQUFzQixHQUFHLHNCQUFzQixtQ0FBbUMsb0JBQW9CLG1CQUFtQixtQkFBbUIsR0FBRyxxRkFBcUYsOEJBQThCLDZCQUE2Qiw2QkFBNkIsdUJBQXVCLHdCQUF3Qiw0QkFBNEIsNEJBQTRCLDJDQUEyQywyQkFBMkIsR0FBRywwQkFBMEIsd0JBQXdCLEdBQUcsVUFBVSxxQ0FBcUMsR0FBRyxrQkFBa0IsMEJBQTBCLEdBQUcsYUFBYSwrQkFBK0IsR0FBRyxVQUFVLGtCQUFrQiwyQkFBMkIsNEJBQTRCLG1CQUFtQixrQkFBa0IsR0FBRyxhQUFhLGtCQUFrQixtQ0FBbUMsd0JBQXdCLGlDQUFpQyxtQkFBbUIsMENBQTBDLGtCQUFrQixHQUFHLHVCQUF1QixtQkFBbUIsa0JBQWtCLHFFQUFxRSxHQUFHLGlCQUFpQixpQkFBaUIsaURBQWlELG1CQUFtQixpQkFBaUIscUJBQXFCLHNCQUFzQixrRUFBa0UsR0FBRyxpQkFBaUIsbUJBQW1CLGlCQUFpQixtQkFBbUIsb0JBQW9CLDJCQUEyQixnQ0FBZ0Msd0JBQXdCLEdBQUcsd0JBQXdCLGdCQUFnQix5Q0FBeUMsaUJBQWlCLGtCQUFrQixtQ0FBbUMsdUJBQXVCLEdBQUcsbUNBQW1DLG1DQUFtQyxZQUFZLEdBQUcseUJBQXlCLG9CQUFvQixzQkFBc0IsR0FBRyw0QkFBNEIsb0JBQW9CLG9CQUFvQiwwQkFBMEIsbUJBQW1CLHVCQUF1QixtQkFBbUIsd0JBQXdCLEdBQUcsd0NBQXdDLHNCQUFzQixHQUFHLGFBQWEsaUJBQWlCLDhCQUE4QixvQkFBb0Isa0JBQWtCLGlDQUFpQyxvQkFBb0IsNEJBQTRCLHdCQUF3QixHQUFHLGVBQWUsbUJBQW1CLEdBQUcscUJBQXFCLG1CQUFtQixHQUFHLGFBQWEsa0JBQWtCLEdBQUcsY0FBYyxpREFBaUQsZUFBZSxpQkFBaUIsdUJBQXVCLEdBQUcsdUNBQXVDLDhCQUE4QixHQUFHLHFCQUFxQixrQkFBa0IsR0FBRyw2QkFBNkIscUJBQXFCLEdBQUcsa0JBQWtCLHFCQUFxQixzQ0FBc0MsR0FBRyxzQkFBc0Isa0JBQWtCLHdCQUF3QixHQUFHLDhCQUE4QixzQkFBc0IsR0FBRyxZQUFZLDBDQUEwQyxvQkFBb0IsR0FBRywwQkFBMEIsbUNBQW1DLG9CQUFvQiwwQkFBMEIscUJBQXFCLEdBQUcsNkJBQTZCLDRCQUE0QixHQUFHLCtCQUErQiw2QkFBNkIsb0JBQW9CLEtBQUssR0FBRyxnQ0FBZ0MsNEJBQTRCLHVCQUF1QixLQUFLLEdBQUcscUJBQXFCO0FBQ3J1Z0M7QUFDQSwrREFBZSx1QkFBdUIsRUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNSdkM7QUFDNkc7QUFDakI7QUFDNUYsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHFxQkFBcXFCLGNBQWMsZUFBZSxjQUFjLG9CQUFvQixrQkFBa0IsNkJBQTZCLEdBQUcsbUpBQW1KLG1CQUFtQixHQUFHLFVBQVUsbUJBQW1CLEdBQUcsWUFBWSxxQkFBcUIsR0FBRyxtQkFBbUIsaUJBQWlCLEdBQUcsNkRBQTZELGdCQUFnQixrQkFBa0IsR0FBRyxXQUFXLDhCQUE4QixzQkFBc0IsR0FBRyxTQUFTLDBGQUEwRixNQUFNLGtCQUFrQixVQUFVLFVBQVUsVUFBVSxVQUFVLFVBQVUsWUFBWSxPQUFPLGFBQWEsT0FBTyxVQUFVLE1BQU0sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLE1BQU0sTUFBTSxVQUFVLFVBQVUsTUFBTSxLQUFLLFlBQVksYUFBYSxxcEJBQXFwQixjQUFjLGVBQWUsY0FBYyxvQkFBb0Isa0JBQWtCLDZCQUE2QixHQUFHLCtJQUErSSxtQkFBbUIsR0FBRyxRQUFRLG1CQUFtQixHQUFHLFVBQVUscUJBQXFCLEdBQUcsaUJBQWlCLGlCQUFpQixHQUFHLDJEQUEyRCxnQkFBZ0Isa0JBQWtCLEdBQUcsU0FBUyw4QkFBOEIsc0JBQXNCLEdBQUcscUJBQXFCO0FBQ3Z2RjtBQUNBLCtEQUFlLHVCQUF1QixFQUFDOzs7Ozs7Ozs7Ozs7QUNQMUI7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxREFBcUQ7QUFDckQ7O0FBRUE7QUFDQSxnREFBZ0Q7QUFDaEQ7O0FBRUE7QUFDQSxxRkFBcUY7QUFDckY7O0FBRUE7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsS0FBSzs7O0FBR0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxzQkFBc0IsaUJBQWlCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLHFCQUFxQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLHNGQUFzRixxQkFBcUI7QUFDM0c7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Ysc0RBQXNELHFCQUFxQjtBQUMzRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7O0FDckdhOztBQUViO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RCxjQUFjO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQ3JCZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQ1RlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2RxRTtBQUNKO0FBQ1E7QUFDZDtBQUNRO0FBQ047QUFDSDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQSxXQUFXLG1FQUFpQjtBQUM1QixHQUFHO0FBQ0g7QUFDQTtBQUNBLHlCQUF5Qix3RUFBYyxpQkFBaUI7O0FBRXhELDZFQUE2RTs7QUFFN0U7QUFDQTtBQUNBLGFBQWEscUVBQWU7QUFDNUIsTUFBTTs7O0FBR047QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07OztBQUdOLFdBQVcscUVBQWU7QUFDMUIsR0FBRztBQUNIO0FBQ0E7QUFDQSxzQkFBc0IsMkVBQWlCLFFBQVE7O0FBRS9DLFdBQVcscUVBQWU7QUFDMUIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHFFQUFlO0FBQzFCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUscUVBQWU7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUscUVBQWU7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtRUFBaUI7QUFDaEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLHFFQUFlO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxlQUFlLG9FQUFVOztBQUV6QjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsV0FBVyxxRUFBZTtBQUMxQixHQUFHO0FBQ0g7QUFDQTtBQUNBLGtCQUFrQix1RUFBYTs7QUFFL0I7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBLFdBQVcscUVBQWU7QUFDMUIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsV0FBVyxtRUFBaUI7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQSxvQkFBb0IseUVBQWU7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQSxXQUFXLHFFQUFlO0FBQzFCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlLHFFQUFlO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxxRUFBZTtBQUM5Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUscUVBQWU7QUFDOUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsV0FBVyxtRUFBaUI7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsV0FBVyxtRUFBaUI7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsV0FBVyxxRUFBZTtBQUMxQixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBLFdBQVcscUVBQWU7QUFDMUIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsV0FBVyxtRUFBaUI7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUEsV0FBVyxtRUFBaUI7QUFDNUIsR0FBRztBQUNIO0FBQ0E7QUFDQSxXQUFXLG1FQUFpQjtBQUM1QixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FB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QVE7QUFDbkIsYUFBYSxNQUFNO0FBQ25CLFlBQVksV0FBVztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZixFQUFFLHNFQUFZO0FBQ2QsYUFBYSw0REFBTTtBQUNuQixlQUFlLG1FQUFTOztBQUV4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3BFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFTzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN0SGlDO0FBQ2lCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLGFBQWEsTUFBTTtBQUNuQixZQUFZLFdBQVc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlO0FBQ2YsRUFBRSxzRUFBWTtBQUNkLGFBQWEsNERBQU07QUFDbkI7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOUIwQztBQUNXO0FBQ0s7QUFDbEI7QUFDb0I7QUFDUTtBQUMyQjtBQUM2QjtBQUN6RTtBQUNNLENBQUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0ZBQXNGO0FBQ3RGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxXQUFXO0FBQzVEO0FBQ0EsaURBQWlELFdBQVc7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0U7QUFDcEUsd0JBQXdCLDRDQUE0QztBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxnRkFBZ0Y7O0FBRWhGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHdCQUF3Qix3RUFBYzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHdFQUFjO0FBQzdCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0VBQWM7QUFDM0IsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwyRUFBaUI7QUFDOUIsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsdUNBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsdUNBQXVDOztBQUV2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGFBQWEsd0VBQWMsQ0FBQyxvRUFBVTtBQUN0QyxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGFBQWEsMkVBQWlCLENBQUMsdUVBQWE7QUFDNUMsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxhQUFhLG1FQUFTO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxhQUFhLG1FQUFTO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxhQUFhLG1FQUFTO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGFBQWEsc0VBQVk7QUFDekI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwrREFBZSxPQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOTlDK0I7QUFDSztBQUNsQjtBQUNLO0FBQ3VCO0FBQzJCO0FBQzZCO0FBQ3pFO0FBQ0w7QUFDVztBQUN6RCxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0ZBQXNGO0FBQ3RGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxXQUFXO0FBQzVEO0FBQ0EsaURBQWlELFdBQVc7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9F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Q0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTs7Ozs7V0N6QkE7V0FDQTtXQUNBO1dBQ0EsZUFBZSw0QkFBNEI7V0FDM0MsZUFBZTtXQUNmLGlDQUFpQyxXQUFXO1dBQzVDO1dBQ0E7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx5Q0FBeUMsd0NBQXdDO1dBQ2pGO1dBQ0E7V0FDQTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLEdBQUc7V0FDSDtXQUNBO1dBQ0EsQ0FBQzs7Ozs7V0NQRCw4Q0FBOEM7Ozs7O1dDQTlDO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7V0NOQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOzs7OztXQ0pBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQTtXQUNBOzs7OztXQ2ZBOzs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUVBO0FBRUEsSUFBTTd3QixHQUFHLEdBQUcsSUFBSXNJLG9EQUFKLENBQVE3TCxRQUFRLENBQUNzVSxJQUFqQixDQUFaO0FBQ0EvUSxHQUFHLENBQUNreEIsR0FBSixHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9hcHAuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL2FwcEluZm8uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL2NvbGxhcHNpYmxlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9kYXRlUGlja2VyLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9maWx0ZXJNZW51LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9tb2RhbFN0YWNrLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9tb2RhbHMvYWRkUHJvamVjdE1vZGFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9tb2RhbHMvYWRkVGFza01vZGFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9tb2RhbHMvY29uZmlybU1vZGFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9tb2RhbHMvZGF0YU1vZGFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9tb2RhbHMvZGF0ZVBpY2tlck1vZGFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9tb2RhbHMvZXhwb3J0TW9kYWwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL21vZGFscy9pbmZvTW9kYWwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL21vZGFscy9yZWN1cnJlbmNlTW9kYWwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL21vZGFscy9zZXR0aW5nc01vZGFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9wb3B1cE1lbnUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL3Byb2plY3RMaXN0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9yZWN1cnJpbmdEYXRlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy9zZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vc3JjL21vZHVsZXMvdGFzay5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vc3JjL21vZHVsZXMvdGFza0Rpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL3Rhc2tMaXN0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy91dGlsaXR5L2RhdGEuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL3V0aWxpdHkvZGF0ZXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9tb2R1bGVzL3V0aWxpdHkvZG9tLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvbW9kdWxlcy91dGlsaXR5L3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL3NyYy9zaGltcy9jbGFzc0xpc3QuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWNhbGxhYmxlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2UuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zb3J0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGVhci1lcnJvci1zdGFjay5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3IuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWV4Y2VwdGlvbi1jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZyZWV6aW5nLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaHRtbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLXJlZ2lzdHJ5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vdC1hLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm94eS1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3F1ZXVlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWRlZmluZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS1ub2RlLXJlcXVpcmUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dyYXAtZXJyb3ItY29uc3RydWN0b3Itd2l0aC1jYXVzZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmVycm9yLmNhdXNlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWFwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbGwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5jYXRjaC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5yYWNlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UucmVqZWN0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UucmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Qub3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50ZXN0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmZvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5rZXktZm9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5zdGFjay5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwudG8tanNvbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vc3JjL3N0eWxlcy9tYWluLmNzcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vc3JjL3N0eWxlcy9yZXNldC5jc3MiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3NldFVUQ0RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3NldFVUQ0lTT0RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3NldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTW9udGhzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9lbmRPZkRheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0SVNPL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2dldERheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9nZXREYXlzSW5Nb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0JlZm9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNTYW1lRGF5L2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzU2FtZU1vbnRoL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVG9kYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNWYWxpZC9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1dlZWtlbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbG9jYWxpemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL25leHREYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2UvX2xpYi9wYXJzZXJzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3BhcnNlSVNPL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3ByZXZpb3VzRGF5L2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZk1vbnRoL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1YkRheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3RhY2suanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fV2Vha01hcC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlFYWNoLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlc1dpdGguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TGlrZUtleXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUFzc2lnbkluLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VDbG9uZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTWFwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzTmFOLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1NldC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUl0ZXJhdGVlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUtleXNJbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVJhbmdlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlU29ydGVkSW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTb3J0ZWRJbmRleEJ5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRyaW0uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVVuaXEuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lRGF0YVZpZXcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lUmVnRXhwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVUeXBlZEFycmF5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5QXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlTeW1ib2xzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9sc0luLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVSYW5nZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlU2V0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZXF1YWxBcnJheXMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsT2JqZWN0cy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5c0luLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXBEYXRhLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRWYWx1ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoU2V0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lQnlUYWcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZU9iamVjdC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJdGVyYXRlZUNhbGwuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUNsZWFyLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVHZXQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlSGFzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5cy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5c0luLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19ub2RlVXRpbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlQWRkLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tDbGVhci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrR2V0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0hhcy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmljdEluZGV4T2YuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL190cmltbWVkRW5kSW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmVEZWVwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2VxLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2dldC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9oYXNJbi5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQnVmZmVyLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNFcXVhbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTGVuZ3RoLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTWFwLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1NldC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gva2V5cy5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub29wLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3Byb3BlcnR5LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3JhbmdlLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvcnRlZEluZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3NvcnRlZEluZGV4QnkuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc29ydGVkTGFzdEluZGV4LmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9GaW5pdGUuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdW5pcS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC91bmlxV2l0aC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL29yZGluYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9vcmRpbmFsL2luZGljYXRvci5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vc3JjL3N0eWxlcy9tYWluLmNzcz81ZjY1Iiwid2VicGFjazovL3Rhc2staXQtdXAvLi9zcmMvc3R5bGVzL3Jlc2V0LmNzcz82NjRhIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NC5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92ZXJzaW9uLmpzIiwid2VicGFjazovL3Rhc2staXQtdXAvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly90YXNrLWl0LXVwL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90YXNrLWl0LXVwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Rhc2staXQtdXAvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly90YXNrLWl0LXVwL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vdGFzay1pdC11cC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly90YXNrLWl0LXVwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90YXNrLWl0LXVwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5tb2R1bGUuZXhwb3J0cy5vbmNlID0gb25jZTtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC4xMC54XG5FdmVudEVtaXR0ZXIuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHMgPSB1bmRlZmluZWQ7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9ldmVudHNDb3VudCA9IDA7XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG5cbi8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZVxuLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy5cbnZhciBkZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7XG5cbmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2YgbGlzdGVuZXIpO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEVtaXR0ZXIsICdkZWZhdWx0TWF4TGlzdGVuZXJzJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkZWZhdWx0TWF4TGlzdGVuZXJzO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyB8fCBhcmcgPCAwIHx8IE51bWJlcklzTmFOKGFyZykpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIGFyZyArICcuJyk7XG4gICAgfVxuICAgIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSBhcmc7XG4gIH1cbn0pO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gIGlmICh0aGlzLl9ldmVudHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgdGhpcy5fZXZlbnRzID09PSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuX2V2ZW50cykge1xuICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICB9XG5cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gdGhpcy5fbWF4TGlzdGVuZXJzIHx8IHVuZGVmaW5lZDtcbn07XG5cbi8vIE9idmlvdXNseSBub3QgYWxsIEVtaXR0ZXJzIHNob3VsZCBiZSBsaW1pdGVkIHRvIDEwLiBUaGlzIGZ1bmN0aW9uIGFsbG93c1xuLy8gdGhhdCB0byBiZSBpbmNyZWFzZWQuIFNldCB0byB6ZXJvIGZvciB1bmxpbWl0ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7XG4gIGlmICh0eXBlb2YgbiAhPT0gJ251bWJlcicgfHwgbiA8IDAgfHwgTnVtYmVySXNOYU4obikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBuICsgJy4nKTtcbiAgfVxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuO1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIF9nZXRNYXhMaXN0ZW5lcnModGhhdCkge1xuICBpZiAodGhhdC5fbWF4TGlzdGVuZXJzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzO1xuICByZXR1cm4gdGhhdC5fbWF4TGlzdGVuZXJzO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmdldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIGdldE1heExpc3RlbmVycygpIHtcbiAgcmV0dXJuIF9nZXRNYXhMaXN0ZW5lcnModGhpcyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KHR5cGUpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICB2YXIgZXI7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID4gMClcbiAgICAgIGVyID0gYXJnc1swXTtcbiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLy8gTm90ZTogVGhlIGNvbW1lbnRzIG9uIHRoZSBgdGhyb3dgIGxpbmVzIGFyZSBpbnRlbnRpb25hbCwgdGhleSBzaG93XG4gICAgICAvLyB1cCBpbiBOb2RlJ3Mgb3V0cHV0IGlmIHRoaXMgcmVzdWx0cyBpbiBhbiB1bmhhbmRsZWQgZXhjZXB0aW9uLlxuICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gICAgfVxuICAgIC8vIEF0IGxlYXN0IGdpdmUgc29tZSBraW5kIG9mIGNvbnRleHQgdG8gdGhlIHVzZXJcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTtcbiAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgIHRocm93IGVycjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgfVxuXG4gIHZhciBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJlZmxlY3RBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgUmVmbGVjdEFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0YXJnZXQuX2V2ZW50c0NvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUbyBhdm9pZCByZWN1cnNpb24gaW4gdGhlIGNhc2UgdGhhdCB0eXBlID09PSBcIm5ld0xpc3RlbmVyXCIhIEJlZm9yZVxuICAgIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgICBpZiAoZXZlbnRzLm5ld0xpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9wdGltaXplIHRoZSBjYXNlIG9mIG9uZSBsaXN0ZW5lci4gRG9uJ3QgbmVlZCB0aGUgZXh0cmEgYXJyYXkgb2JqZWN0LlxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50O1xuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgZXhpc3RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LlxuICAgICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPVxuICAgICAgICBwcmVwZW5kID8gW2xpc3RlbmVyLCBleGlzdGluZ10gOiBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC5cbiAgICB9IGVsc2UgaWYgKHByZXBlbmQpIHtcbiAgICAgIGV4aXN0aW5nLnVuc2hpZnQobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIG0gPSBfZ2V0TWF4TGlzdGVuZXJzKHRhcmdldCk7XG4gICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkge1xuICAgICAgZXhpc3Rpbmcud2FybmVkID0gdHJ1ZTtcbiAgICAgIC8vIE5vIGVycm9yIGNvZGUgZm9yIHRoaXMgc2luY2UgaXQgaXMgYSBXYXJuaW5nXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIHZhciB3ID0gbmV3IEVycm9yKCdQb3NzaWJsZSBFdmVudEVtaXR0ZXIgbWVtb3J5IGxlYWsgZGV0ZWN0ZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyBTdHJpbmcodHlwZSkgKyAnIGxpc3RlbmVycyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2luY3JlYXNlIGxpbWl0Jyk7XG4gICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDtcbiAgICAgIHcudHlwZSA9IHR5cGU7XG4gICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfTtcblxuZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7XG4gIGlmICghdGhpcy5maXJlZCkge1xuICAgIHRoaXMudGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHRoaXMudHlwZSwgdGhpcy53cmFwRm4pO1xuICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX29uY2VXcmFwKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIHN0YXRlID0geyBmaXJlZDogZmFsc2UsIHdyYXBGbjogdW5kZWZpbmVkLCB0YXJnZXQ6IHRhcmdldCwgdHlwZTogdHlwZSwgbGlzdGVuZXI6IGxpc3RlbmVyIH07XG4gIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7XG4gIHdyYXBwZWQubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgc3RhdGUud3JhcEZuID0gd3JhcHBlZDtcbiAgcmV0dXJuIHdyYXBwZWQ7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0Lmxpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwb3NpdGlvbiA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHwgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIG9yaWdpbmFsTGlzdGVuZXIgPSBsaXN0W2ldLmxpc3RlbmVyO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uIDwgMClcbiAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKVxuICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9XG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMsIGV2ZW50cywgaTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdFxuICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGV2ZW50cyk7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgICAgIH0gZWxzZSBpZiAobGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTElGTyBvcmRlclxuICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuZnVuY3Rpb24gX2xpc3RlbmVycyh0YXJnZXQsIHR5cGUsIHVud3JhcCkge1xuICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcbiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgIHJldHVybiB1bndyYXAgPyBbZXZsaXN0ZW5lci5saXN0ZW5lciB8fCBldmxpc3RlbmVyXSA6IFtldmxpc3RlbmVyXTtcblxuICByZXR1cm4gdW53cmFwID9cbiAgICB1bndyYXBMaXN0ZW5lcnMoZXZsaXN0ZW5lcikgOiBhcnJheUNsb25lKGV2bGlzdGVuZXIsIGV2bGlzdGVuZXIubGVuZ3RoKTtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbiBsaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCB0cnVlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmF3TGlzdGVuZXJzID0gZnVuY3Rpb24gcmF3TGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5saXN0ZW5lckNvdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJDb3VudCh0eXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbGlzdGVuZXJDb3VudC5jYWxsKGVtaXR0ZXIsIHR5cGUpO1xuICB9XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBsaXN0ZW5lckNvdW50O1xuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7XG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG5cbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG5cbiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSBpZiAoZXZsaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0T3duS2V5cyh0aGlzLl9ldmVudHMpIDogW107XG59O1xuXG5mdW5jdGlvbiBhcnJheUNsb25lKGFyciwgbikge1xuICB2YXIgY29weSA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKDsgaW5kZXggKyAxIDwgbGlzdC5sZW5ndGg7IGluZGV4KyspXG4gICAgbGlzdFtpbmRleF0gPSBsaXN0W2luZGV4ICsgMV07XG4gIGxpc3QucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIG9uY2UoZW1pdHRlciwgbmFtZSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGZ1bmN0aW9uIGVycm9yTGlzdGVuZXIoZXJyKSB7XG4gICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKG5hbWUsIHJlc29sdmVyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVyKCkge1xuICAgICAgaWYgKHR5cGVvZiBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZXJyb3JMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfTtcblxuICAgIGV2ZW50VGFyZ2V0QWdub3N0aWNBZGRMaXN0ZW5lcihlbWl0dGVyLCBuYW1lLCByZXNvbHZlciwgeyBvbmNlOiB0cnVlIH0pO1xuICAgIGlmIChuYW1lICE9PSAnZXJyb3InKSB7XG4gICAgICBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBlcnJvckxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkRXJyb3JIYW5kbGVySWZFdmVudEVtaXR0ZXIoZW1pdHRlciwgaGFuZGxlciwgZmxhZ3MpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsICdlcnJvcicsIGhhbmRsZXIsIGZsYWdzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgbmFtZSwgbGlzdGVuZXIsIGZsYWdzKSB7XG4gIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChmbGFncy5vbmNlKSB7XG4gICAgICBlbWl0dGVyLm9uY2UobmFtZSwgbGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0dGVyLm9uKG5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEV2ZW50VGFyZ2V0IGRvZXMgbm90IGhhdmUgYGVycm9yYCBldmVudCBzZW1hbnRpY3MgbGlrZSBOb2RlXG4gICAgLy8gRXZlbnRFbWl0dGVycywgd2UgZG8gbm90IGxpc3RlbiBmb3IgYGVycm9yYCBldmVudHMgaGVyZS5cbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZnVuY3Rpb24gd3JhcExpc3RlbmVyKGFyZykge1xuICAgICAgLy8gSUUgZG9lcyBub3QgaGF2ZSBidWlsdGluIGB7IG9uY2U6IHRydWUgfWAgc3VwcG9ydCBzbyB3ZVxuICAgICAgLy8gaGF2ZSB0byBkbyBpdCBtYW51YWxseS5cbiAgICAgIGlmIChmbGFncy5vbmNlKSB7XG4gICAgICAgIGVtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCB3cmFwTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgbGlzdGVuZXIoYXJnKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJlbWl0dGVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEV2ZW50RW1pdHRlci4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGVtaXR0ZXIpO1xuICB9XG59XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtBcHBde0BsaW5rIG1vZHVsZTphcHB+QXBwfSBjbGFzcy5cbiAqIEBtb2R1bGUgYXBwXG4gKi9cblxuaW1wb3J0IHtcbiAgYWRkIGFzIGFkZFRvRGF0ZSxcbiAgZW5kT2ZEYXksXG4gIHN0YXJ0T2ZEYXksXG59IGZyb20gJ2RhdGUtZm5zJztcblxuaW1wb3J0ICcuLi9zdHlsZXMvcmVzZXQuY3NzJztcbmltcG9ydCAnLi4vc3R5bGVzL21haW4uY3NzJztcbmltcG9ydCBNZW51SWNvbiBmcm9tICcuLi9pbWFnZXMvbWVudS5zdmcnO1xuaW1wb3J0IEFwcE9wdGlvbnNJY29uIGZyb20gJy4uL2ltYWdlcy9hcHAtb3B0aW9ucy5zdmcnO1xuaW1wb3J0IEFkZEljb24gZnJvbSAnLi4vaW1hZ2VzL2FkZC5zdmcnO1xuaW1wb3J0IERlbGV0ZUljb24gZnJvbSAnLi4vaW1hZ2VzL2RlbGV0ZS5zdmcnO1xuaW1wb3J0IERvbmVJY29uIGZyb20gJy4uL2ltYWdlcy9kb25lLnN2Zyc7XG5pbXBvcnQgRWRpdEljb24gZnJvbSAnLi4vaW1hZ2VzL2VkaXQuc3ZnJztcbmltcG9ydCBHcm91cEljb24gZnJvbSAnLi4vaW1hZ2VzL2dyb3VwLnN2Zyc7XG5pbXBvcnQgTW9yZUljb24gZnJvbSAnLi4vaW1hZ2VzL21vcmUuc3ZnJztcbmltcG9ydCBPcmRlckljb24gZnJvbSAnLi4vaW1hZ2VzL29yZGVyLnN2Zyc7XG5pbXBvcnQgU2F2ZUljb24gZnJvbSAnLi4vaW1hZ2VzL3NhdmUuc3ZnJztcbmltcG9ydCBTZXR0aW5nc0ljb24gZnJvbSAnLi4vaW1hZ2VzL3NldHRpbmdzLnN2Zyc7XG5pbXBvcnQgU29ydEljb24gZnJvbSAnLi4vaW1hZ2VzL3NvcnQuc3ZnJztcbmltcG9ydCBJbmZvSWNvbiBmcm9tICcuLi9pbWFnZXMvaW5mby5zdmcnO1xuXG5pbXBvcnQgQXBwSW5mbyBmcm9tICcuL2FwcEluZm8nO1xuaW1wb3J0IEFkZFByb2plY3RNb2RhbCBmcm9tICcuL21vZGFscy9hZGRQcm9qZWN0TW9kYWwnO1xuaW1wb3J0IEFkZFRhc2tNb2RhbCBmcm9tICcuL21vZGFscy9hZGRUYXNrTW9kYWwnO1xuaW1wb3J0IENvbmZpcm1Nb2RhbCBmcm9tICcuL21vZGFscy9jb25maXJtTW9kYWwnO1xuaW1wb3J0IERhdGFNb2RhbCBmcm9tICcuL21vZGFscy9kYXRhTW9kYWwnO1xuaW1wb3J0IEZpbHRlck1lbnUgZnJvbSAnLi9maWx0ZXJNZW51JztcbmltcG9ydCBJbmZvTW9kYWwgZnJvbSAnLi9tb2RhbHMvaW5mb01vZGFsJztcbmltcG9ydCBNb2RhbFN0YWNrIGZyb20gJy4vbW9kYWxTdGFjayc7XG5pbXBvcnQgUG9wdXBNZW51IGZyb20gJy4vcG9wdXBNZW51JztcbmltcG9ydCBQcm9qZWN0IGZyb20gJy4vcHJvamVjdCc7XG5pbXBvcnQgUHJvamVjdExpc3QgZnJvbSAnLi9wcm9qZWN0TGlzdCc7XG5pbXBvcnQgUmVjdXJyaW5nRGF0ZSBmcm9tICcuL3JlY3VycmluZ0RhdGUnO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IFNldHRpbmdzTW9kYWwgZnJvbSAnLi9tb2RhbHMvc2V0dGluZ3NNb2RhbCc7XG5pbXBvcnQgVGFzayBmcm9tICcuL3Rhc2snO1xuaW1wb3J0IFRhc2tEaXNwbGF5IGZyb20gJy4vdGFza0Rpc3BsYXknO1xuaW1wb3J0IFRhc2tMaXN0IGZyb20gJy4vdGFza0xpc3QnO1xuaW1wb3J0IHsgY29tcGFyZVZlcnNpb25zIH0gZnJvbSAnLi91dGlsaXR5L2RhdGEnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJy4vdXRpbGl0eS9kYXRlcyc7XG5pbXBvcnQgeyBjcmVhdGVJbWFnZUJ1dHRvbiwgY3JlYXRlUGFyYWdyYXBocyB9IGZyb20gJy4vdXRpbGl0eS9kb20nO1xuaW1wb3J0IHtcbiAgY2xlYXJEYXRhLFxuICBmb3JFYWNoRGF0YUl0ZW0sXG4gIGdlbmVyYXRlRmlsZSxcbiAgZ2V0RmlsZUV4dGVuc2lvbixcbiAgcGFyc2VDc3YsXG4gIHJlbW92ZURhdGEsXG4gIHJldHJpZXZlRGF0YSxcbiAgc3RvcmVEYXRhLFxufSBmcm9tICcuL3V0aWxpdHkvc3RvcmFnZSc7XG5cbmNvbnN0IElDT05fV0lEVEggPSAyNDtcbmNvbnN0IElDT05fSEVJR0hUID0gMjQ7XG5jb25zdCBOQVJST1dfTEFZT1VUX0NVVE9GRiA9IDcwMDtcblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZSBbQXBwXXtAbGluayBtb2R1bGU6YXBwfkFwcH0gY2xhc3MuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6YXBwfkFwcH5wcml2YXRlc1xuICogQHByb3BlcnR5IHttb2R1bGU6dGFza0xpc3R+VGFza0xpc3R9IHRhc2tzIEhvbGRzIHRoZSB0YXNrIGNvbnRhaW5lci5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fSBwcm9qZWN0cyBIb2xkcyB0aGUgcHJvamVjdFxuICogICBjb250YWluZXIuXG4gKiBAcHJvcGVydHkge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IG1vZGFsU3RhY2sgVGhlIHN0YWNrIG9mIG1vZGFsXG4gKiAgIGRpYWxvZ3MuXG4gKiBAcHJvcGVydHkge21vZHVsZTpmaWx0ZXJNZW51fkZpbHRlck1lbnV9IGZpbHRlck1lbnUgVGhlIG1lbnUgb2YgdGFzayBmaWx0ZXJzXG4gKiAgIGluIHRoZSBzaWRlIHBhbmVsLlxuICogQHByb3BlcnR5IHttb2R1bGU6ZmlsdGVyTWVudX5GaWx0ZXJNZW51fmZpbHRlckluZm99IGN1cnJlbnRGaWx0ZXIgSG9sZHMgdGhlXG4gKiAgIHRhc2sgZmlsdGVyIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIGRpc3BsYXllZCBpbiB0aGUgbWFpbiBwYW5lbC5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnRhc2tEaXNwbGF5flRhc2tEaXNwbGF5fSB0YXNrRGlzcGxheSBIb2xkcyB0aGUgdGFza1xuICogICBkaXNwbGF5IHBhbmVsLlxuICogQHByb3BlcnR5IHttb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N9IHNldHRpbmdzIEhvbGRzIHVzZXIgYXBwIHNldHRpbmdzLlxuICogQHByb3BlcnR5IHttb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX0gbWFpblBhbmVsTWVudSBUaGUgcG9wdXAgbWVudSB0aGF0IGlzXG4gKiAgIHNob3duIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSAnbW9yZScgYnV0dG9uIGluIHRoZSBtYWluIHBhbmVsLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGVsZW1lbnRzIEFuIG9iamVjdCBob2xkaW5nIHJlZmVyZW5jZXMgdG8gdGhlIHBhZ2VcbiAqICAgZWxlbWVudHMgaW4gdGhlIERPTS5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRzLmFwcENvbnRhaW5lciBIb2xkcyBhIHJlZmVyZW5jZSB0byB0aGVcbiAqICAgY29udGFpbmVyIGVsZW1lbnQgaG9sZGluZyBhbGwgdGhlIGVsZW1lbnRzIGZvciB0aGUgYXBwLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZWxlbWVudHMuc2lkZVBhbmVsIEhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBzaWRlXG4gKiAgIHBhbmVsIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBlbGVtZW50cy5yZXNpemVyIEhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSByZXNpemluZ1xuICogICBiYXIgZm9yIHRoZSBzaWRlIHBhbmVsLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZWxlbWVudHMubWFpblBhbmVsIEhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBtYWluXG4gKiAgIHBhbmVsIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBlbGVtZW50cy5tZW51QnV0dG9uIEhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBtZW51XG4gKiAgIGJ1dHRvbiBpbiB0aGUgaGVhZGVyLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZWxlbWVudHMuYXBwT3B0aW9uc0J1dHRvbiBIb2xkcyBhIHJlZmVyZW5jZSB0byB0aGVcbiAqICAgYXBwIG9wdGlvbnMgYnV0dG9uIGluIHRoZSBoZWFkZXIuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBlbGVtZW50cy5hZGRUYXNrQnV0dG9uIEhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZVxuICogICBidXR0b24gaW4gdGhlIG1haW4gcGFuZWwgdGhhdCBhZGRzIGEgbmV3IHRhc2suXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBlbGVtZW50cy5tYWluUGFuZWxNZW51QnV0dG9uIEhvbGRzIGEgcmVmZXJlbmNlIHRvXG4gKiAgIHRoZSBtYWluIHBhbmVsIG1lbnUgYnV0dG9uLlxuICogQHByb3BlcnR5IHtib29sZWFufSBuYXJyb3dTY3JlZW4gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNjcmVlbiBzaXplIGlzXG4gKiAgIG5hcnJvdy4gVGhpcyBzaG91bGQgYmUgdHJ1ZSB3aGVuIHRoZSB2aWV3cG9ydCB3aWR0aCBpcyBsZXNzIHRoYW4gb3IgZXF1YWxcbiAqICAgdG8gTkFSUk9XX0xBWU9VVF9DVVRPRkYuXG4gKi9cblxuLyoqXG4gKiBIb2xkcyBwcml2YXRlIGRhdGEgZm9yIHRoZSBbQXBwXXtAbGluayBtb2R1bGU6YXBwfkFwcH0gY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOmFwcH5BcHB+cHJpdmF0ZXNcbiAqL1xuY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBhZGRSYW5kb21EYXRhKGluc3RhbmNlLCB0YXNrQ291bnQsIHByb2pDb3VudCkge1xuICBjb25zdCBnZXRSYW5kb20gPSAobWluLCBtYXgpID0+IChcbiAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pXG4gICk7XG4gIGNvbnN0IHBhc3NDaGVjayA9IChwcm9iYWJpbGl0eSkgPT4gTWF0aC5yYW5kb20oKSA8IHByb2JhYmlsaXR5O1xuXG4gIGNvbnN0IHNlbnRlbmNlcyA9IFtcbiAgICAnQ2FsbCBtZSBJc2htYWVsLicsXG4gICAgJ0l0IHdhcyB0aGUgYmVzdCBvZiB0aW1lcywgaXQgd2FzIHRoZSB3b3JzdCBvZiB0aW1lcywgaXQgd2FzIHRoZSBhZ2Ugb2Ygd2lzZG9tLCBpdCB3YXMgdGhlIGFnZSBvZiBmb29saXNobmVzcywgaXQgd2FzIHRoZSBlcG9jaCBvZiBiZWxpZWYsIGl0IHdhcyB0aGUgZXBvY2ggb2YgaW5jcmVkdWxpdHksIGl0IHdhcyB0aGUgc2Vhc29uIG9mIExpZ2h0LCBpdCB3YXMgdGhlIHNlYXNvbiBvZiBEYXJrbmVzcywgaXQgd2FzIHRoZSBzcHJpbmcgb2YgaG9wZSwgaXQgd2FzIHRoZSB3aW50ZXIgb2YgZGVzcGFpci4nLFxuICAgICdJdCBpcyBhIHRydXRoIHVuaXZlcnNhbGx5IGFja25vd2xlZGdlZCwgdGhhdCBhIHNpbmdsZSBtYW4gaW4gcG9zc2Vzc2lvbiBvZiBhIGdvb2QgZm9ydHVuZSwgbXVzdCBiZSBpbiB3YW50IG9mIGEgd2lmZS4nLFxuICAgICdJbiBteSB5b3VuZ2VyIGFuZCBtb3JlIHZ1bG5lcmFibGUgeWVhcnMgbXkgZmF0aGVyIGdhdmUgbWUgc29tZSBhZHZpY2UgdGhhdCBJXFwndmUgYmVlbiB0dXJuaW5nIG92ZXIgaW4gbXkgbWluZCBldmVyIHNpbmNlLicsXG4gICAgJ0l0IHdhcyBhIGJyaWdodCBjb2xkIGRheSBpbiBBcHJpbCwgYW5kIHRoZSBjbG9ja3Mgd2VyZSBzdHJpa2luZyB0aGlydGVlbi4nLFxuICAgICdJdCB3YXMgYSBwbGVhc3VyZSB0byBidXJuLicsXG4gICAgJ0FzIEdyZWdvciBTYW1zYSBhd29rZSBvbmUgbW9ybmluZyBmcm9tIHVuZWFzeSBkcmVhbXMgaGUgZm91bmQgaGltc2VsZiB0cmFuc2Zvcm1lZCBpbiBoaXMgYmVkIGludG8gYW4gZW5vcm1vdXMgaW5zZWN0LicsXG4gICAgJ0ZhciBvdXQgaW4gdGhlIHVuY2hhcnRlZCBiYWNrd2F0ZXJzIG9mIHRoZSB1bmZhc2hpb25hYmxlIGVuZCBvZiB0aGUgd2VzdGVybiBzcGlyYWwgYXJtIG9mIHRoZSBHYWxheHkgbGllcyBhIHNtYWxsLCB1bnJlZ2FyZGVkIHllbGxvdyBzdW4uJyxcbiAgICAnQWxsIGhhcHB5IGZhbWlsaWVzIGFyZSBhbGlrZTsgZWFjaCB1bmhhcHB5IGZhbWlseSBpcyB1bmhhcHB5IGluIGl0cyBvd24gd2F5JyxcbiAgICAnV2hldGhlciBJIHNoYWxsIHR1cm4gb3V0IHRvIGJlIHRoZSBoZXJvIG9mIG15IG93biBsaWZlLCBvciB3aGV0aGVyIHRoYXQgc3RhdGlvbiB3aWxsIGJlIGhlbGQgYnkgYW55Ym9keSBlbHNlLCB0aGVzZSBwYWdlcyBtdXN0IHNob3cuJyxcbiAgXTtcbiAgY29uc3QgcmFuZG9tU2VudGVuY2UgPSAoKSA9PiBzZW50ZW5jZXNbZ2V0UmFuZG9tKDAsIHNlbnRlbmNlcy5sZW5ndGggLSAxKV07XG5cbiAgY29uc3QgcmFuZG9tRGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIGFkZFRvRGF0ZSh0b2RheSwgeyBkYXlzOiBnZXRSYW5kb20oLTUsIDQwKSB9KTtcbiAgfTtcblxuICBjb25zdCByYW5kb21SZWN1cnJlbmNlID0gKCkgPT4ge1xuICAgIGNvbnN0IHJhbmRvbSA9IE1hdGgucmFuZG9tKCk7XG4gICAgbGV0IHVuaXQ7XG4gICAgaWYgKHJhbmRvbSA8IDAuMjUpIHVuaXQgPSAnZGF5JztcbiAgICBlbHNlIGlmIChyYW5kb20gPCAwLjUpIHVuaXQgPSAnd2Vlayc7XG4gICAgZWxzZSBpZiAocmFuZG9tIDwgMC43NSkgdW5pdCA9ICdtb250aCc7XG4gICAgZWxzZSB1bml0ID0gJ3llYXInO1xuXG4gICAgcmV0dXJuIG5ldyBSZWN1cnJpbmdEYXRlKHVuaXQsIHtcbiAgICAgIGludGVydmFsTGVuZ3RoOiBwYXNzQ2hlY2soMC41KSA/IDEgOiBnZXRSYW5kb20oMiwgMTApLFxuICAgICAgc3RhcnREYXRlOiBwYXNzQ2hlY2soMC41KSA/IHJhbmRvbURhdGUoKSA6IG51bGwsXG4gICAgICBiYXNlT25Db21wbGV0aW9uOiBwYXNzQ2hlY2soMC4yNSksXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCBwcm9qZWN0cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2pDb3VudDsgaSArPSAxKSB7XG4gICAgY29uc3QgcHJvamVjdCA9IG5ldyBQcm9qZWN0KGBQcm9qZWN0ICR7aSArIDF9YCwge1xuICAgICAgZGVzY3JpcHRpb246IHBhc3NDaGVjaygwLjUpID8gcmFuZG9tU2VudGVuY2UoKSA6IG51bGwsXG4gICAgfSk7XG4gICAgcHJvamVjdHMucHVzaChwcml2YXRlcy5wcm9qZWN0cy5hZGRQcm9qZWN0KHByb2plY3QpKTtcbiAgfVxuICBjb25zdCByYW5kb21Qcm9qZWN0ID0gKCkgPT4gcHJvamVjdHNbZ2V0UmFuZG9tKDAsIHByb2plY3RzLmxlbmd0aCAtIDEpXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRhc2tDb3VudDsgaSArPSAxKSB7XG4gICAgY29uc3QgdGFzayA9IG5ldyBUYXNrKGBUYXNrICR7aSArIDF9YCwge1xuICAgICAgZHVlRGF0ZTogcGFzc0NoZWNrKDAuNSkgPyByYW5kb21EYXRlKCkgOiBudWxsLFxuICAgICAgY29tcGxldGlvbkRhdGU6IHBhc3NDaGVjaygwLjEpID8gbmV3IERhdGUoKSA6IG51bGwsXG4gICAgICBwcmlvcml0eTogZ2V0UmFuZG9tKC0yLCAyKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBwYXNzQ2hlY2soMC41KSA/IHJhbmRvbVNlbnRlbmNlKCkgOiBudWxsLFxuICAgICAgcmVjdXJyaW5nRGF0ZTogcGFzc0NoZWNrKDAuNSkgPyByYW5kb21SZWN1cnJlbmNlKCkgOiBudWxsLFxuICAgICAgcHJvamVjdDogcGFzc0NoZWNrKDAuNSkgPyByYW5kb21Qcm9qZWN0KCkgOiBudWxsLFxuICAgIH0pO1xuICAgIHByaXZhdGVzLnRhc2tzLmFkZFRhc2sodGFzayk7XG4gIH1cbn1cblxuLyoqXG4gKiBPcGVuIHRoZSBzaWRlIHBhbmVsLCBzbyB0aGF0IHRoZSBmaWx0ZXIgbWVudSBpcyB2aXNpYmxlLlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3BlblNpZGVQYW5lbChpbnN0YW5jZSkge1xuICBjb25zdCB7IGVsZW1lbnRzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBlbGVtZW50cy5zaWRlUGFuZWwuY2xhc3NMaXN0LnJlbW92ZSgnY2xvc2VkJyk7XG4gIGVsZW1lbnRzLnJlc2l6ZXIuY2xhc3NMaXN0LnJlbW92ZSgnY2xvc2VkJyk7XG59XG5cbi8qKlxuICogQ2xvc2UgdGhlIHNpZGUgcGFuZWwsIHNvIHRoYXQgdGhlIGZpbHRlciBtZW51IGlzIGhpZGRlbi5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNsb3NlU2lkZVBhbmVsKGluc3RhbmNlKSB7XG4gIGNvbnN0IHsgZWxlbWVudHMgfSA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGVsZW1lbnRzLnNpZGVQYW5lbC5jbGFzc0xpc3QuYWRkKCdjbG9zZWQnKTtcbiAgZWxlbWVudHMucmVzaXplci5jbGFzc0xpc3QuYWRkKCdjbG9zZWQnKTtcbn1cblxuLyoqXG4gKiBUb2dnbGUgdGhlIHNpZGUgcGFuZWwncyB2aXNpYmlsaXR5LlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9nZ2xlU2lkZVBhbmVsKGluc3RhbmNlKSB7XG4gIGNvbnN0IHsgZWxlbWVudHMgfSA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IGNsb3NlZCA9IGVsZW1lbnRzLnNpZGVQYW5lbC5jbGFzc0xpc3QudG9nZ2xlKCdjbG9zZWQnKTtcbiAgaWYgKGNsb3NlZCkgZWxlbWVudHMucmVzaXplci5jbGFzc0xpc3QuYWRkKCdjbG9zZWQnKTtcbiAgZWxzZSBlbGVtZW50cy5yZXNpemVyLmNsYXNzTGlzdC5yZW1vdmUoJ2Nsb3NlZCcpO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB0aGUgbWVudSBpdGVtcyBpbiB0aGUgcG9wdXAgbWVudSBmb3IgdGhlIG1haW4gcGFuZWwgYmFzZWQgb24gdGhlXG4gKiBzZWxlY3RlZCBmaWx0ZXIuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB1cGRhdGVNYWluUGFuZWxNZW51KGluc3RhbmNlKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgY29uc3QgeyBncm91cCwgZmlsdGVyIH0gPSBwcml2YXRlcy5jdXJyZW50RmlsdGVyO1xuICBjb25zdCBmaWx0ZXJPcHRpb25zID0gcHJpdmF0ZXMuc2V0dGluZ3MuZ2V0RmlsdGVyT3B0aW9ucyhncm91cCk7XG5cbiAgY29uc3QgR1JPVVBfSUNPTiA9ICdjYXRlZ29yeSc7XG4gIGNvbnN0IFNPUlRfSUNPTiA9ICdzb3J0JztcblxuICBjb25zdCBpY29uT3B0aW9ucyA9IChzb3VyY2UpID0+ICh7XG4gICAgc291cmNlLFxuICAgIHdpZHRoOiBJQ09OX1dJRFRILFxuICAgIGhlaWdodDogSUNPTl9IRUlHSFQsXG4gIH0pO1xuXG4gIGNvbnN0IHtcbiAgICBncm91cEJ5LCBzb3J0QnksIHNvcnREZXNjZW5kaW5nLCBzaG93Q29tcGxldGVkLFxuICB9ID0gZmlsdGVyT3B0aW9ucztcbiAgY29uc3Qgb3B0aW9uSXRlbXMgPSBbXG4gICAgeyBsYWJlbDogJ0FkZCBUYXNrLi4uJywgaWQ6ICdhZGQtdGFzaycsIGljb246IGljb25PcHRpb25zKEFkZEljb24pIH0sXG4gICAgeyBsYWJlbDogJ0FkZCBQcm9qZWN0Li4uJywgaWQ6ICdhZGQtcHJvamVjdCcsIGljb246IGljb25PcHRpb25zKEFkZEljb24pIH0sXG4gIF07XG4gIGNvbnN0IGdyb3VwQnlJdGVtcyA9IFtdO1xuICBjb25zdCBzb3J0QnlJdGVtcyA9IFtdO1xuXG4gIGlmIChncm91cCA9PT0gJ3Byb2plY3RzJyAmJiBmaWx0ZXIgIT09ICdub25lJykge1xuICAgIG9wdGlvbkl0ZW1zLnB1c2goe1xuICAgICAgbGFiZWw6ICdFZGl0IFByb2plY3QuLi4nLFxuICAgICAgaWQ6ICdlZGl0LXByb2plY3QnLFxuICAgICAgaWNvbjogaWNvbk9wdGlvbnMoRWRpdEljb24pLFxuICAgIH0pO1xuICAgIG9wdGlvbkl0ZW1zLnB1c2goe1xuICAgICAgbGFiZWw6ICdEZWxldGUgUHJvamVjdC4uLicsXG4gICAgICBpZDogJ2RlbGV0ZS1wcm9qZWN0JyxcbiAgICAgIGljb246IGljb25PcHRpb25zKERlbGV0ZUljb24pLFxuICAgIH0pO1xuICB9XG5cbiAgb3B0aW9uSXRlbXMucHVzaChcbiAgICB7XG4gICAgICBsYWJlbDogc2hvd0NvbXBsZXRlZCA/ICdIaWRlIENvbXBsZXRlZCBUYXNrcycgOiAnU2hvdyBDb21wbGV0ZWQgVGFza3MnLFxuICAgICAgaWQ6IHNob3dDb21wbGV0ZWQgPyAnaGlkZS1jb21wbGV0ZWQnIDogJ3Nob3ctY29tcGxldGVkJyxcbiAgICAgIGljb246IGljb25PcHRpb25zKERvbmVJY29uKSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiBzb3J0RGVzY2VuZGluZyA/ICdTb3J0IEFzY2VuZGluZycgOiAnU29ydCBEZXNjZW5kaW5nJyxcbiAgICAgIGlkOiBzb3J0RGVzY2VuZGluZyA/ICdzb3J0LWFzY2VuZGluZycgOiAnc29ydC1kZXNjZW5kaW5nJyxcbiAgICAgIGljb246IGljb25PcHRpb25zKE9yZGVySWNvbiksXG4gICAgfSxcbiAgKTtcblxuICBpZiAoZ3JvdXBCeSAhPT0gJ2RlZmF1bHQnKSB7XG4gICAgZ3JvdXBCeUl0ZW1zLnB1c2goe1xuICAgICAgbGFiZWw6ICdVc2UgRGVmYXVsdCBHcm91cGluZycsXG4gICAgICBpZDogJ2dyb3VwLWJ5LWRlZmF1bHQnLFxuICAgICAgaWNvbjogaWNvbk9wdGlvbnMoR3JvdXBJY29uKSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChncm91cEJ5ICE9PSAnbm9uZScpIHtcbiAgICBncm91cEJ5SXRlbXMucHVzaCh7XG4gICAgICBsYWJlbDogJ0RvIE5vdCBHcm91cCBUYXNrcycsXG4gICAgICBpZDogJ2dyb3VwLWJ5LW5vbmUnLFxuICAgICAgaWNvbjogaWNvbk9wdGlvbnMoR3JvdXBJY29uKSxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzb3J0QnkgIT09ICdjcmVhdGUtZGF0ZScpIHtcbiAgICBzb3J0QnlJdGVtcy5wdXNoKHtcbiAgICAgIGxhYmVsOiAnU29ydCBieSBEYXRlIEFkZGVkJyxcbiAgICAgIGlkOiAnc29ydC1ieS1jcmVhdGUtZGF0ZScsXG4gICAgICBpY29uOiBpY29uT3B0aW9ucyhTb3J0SWNvbiksXG4gICAgfSk7XG4gIH1cblxuICBpZiAoKGdyb3VwICE9PSAnZGF0ZXMnIHx8IGZpbHRlciAhPT0gJ3Bhc3QtZHVlJykgJiYgZ3JvdXBCeSAhPT0gJ2R1ZS1kYXRlJykge1xuICAgIGdyb3VwQnlJdGVtcy5wdXNoKHtcbiAgICAgIGxhYmVsOiAnR3JvdXAgYnkgRHVlIERhdGUnLFxuICAgICAgaWQ6ICdncm91cC1ieS1kdWUtZGF0ZScsXG4gICAgICBpY29uOiBpY29uT3B0aW9ucyhHcm91cEljb24pLFxuICAgIH0pO1xuICAgIGlmIChzb3J0QnkgIT09ICdkdWUtZGF0ZScpIHtcbiAgICAgIHNvcnRCeUl0ZW1zLnB1c2goe1xuICAgICAgICBsYWJlbDogJ1NvcnQgYnkgRHVlIERhdGUnLFxuICAgICAgICBpZDogJ3NvcnQtYnktZHVlLWRhdGUnLFxuICAgICAgICBpY29uOiBpY29uT3B0aW9ucyhTb3J0SWNvbiksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAoZ3JvdXAgIT09ICdwcm9qZWN0cycgJiYgZ3JvdXBCeSAhPT0gJ3Byb2plY3QnKSB7XG4gICAgZ3JvdXBCeUl0ZW1zLnB1c2goe1xuICAgICAgbGFiZWw6ICdHcm91cCBieSBQcm9qZWN0JyxcbiAgICAgIGlkOiAnZ3JvdXAtYnktcHJvamVjdCcsXG4gICAgICBpY29uOiBpY29uT3B0aW9ucyhHcm91cEljb24pLFxuICAgIH0pO1xuICAgIGlmIChzb3J0QnkgIT09ICdwcm9qZWN0Jykge1xuICAgICAgc29ydEJ5SXRlbXMucHVzaCh7XG4gICAgICAgIGxhYmVsOiAnU29ydCBieSBQcm9qZWN0JyxcbiAgICAgICAgaWQ6ICdzb3J0LWJ5LXByb2plY3QnLFxuICAgICAgICBpY29uOiBpY29uT3B0aW9ucyhTb3J0SWNvbiksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAoZ3JvdXAgIT09ICdwcmlvcml0aWVzJyAmJiBncm91cEJ5ICE9PSAncHJpb3JpdHknKSB7XG4gICAgZ3JvdXBCeUl0ZW1zLnB1c2goe1xuICAgICAgbGFiZWw6ICdHcm91cCBieSBQcmlvcml0eScsXG4gICAgICBpZDogJ2dyb3VwLWJ5LXByaW9yaXR5JyxcbiAgICAgIGljb246IGljb25PcHRpb25zKEdyb3VwSWNvbiksXG4gICAgfSk7XG4gICAgaWYgKHNvcnRCeSAhPT0gJ3ByaW9yaXR5Jykge1xuICAgICAgc29ydEJ5SXRlbXMucHVzaCh7XG4gICAgICAgIGxhYmVsOiAnU29ydCBieSBQcmlvcml0eScsXG4gICAgICAgIGlkOiAnc29ydC1ieS1wcmlvcml0eScsXG4gICAgICAgIGljb246IGljb25PcHRpb25zKFNvcnRJY29uKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lbnVJdGVtcyA9IFsuLi5vcHRpb25JdGVtcywgLi4uZ3JvdXBCeUl0ZW1zLCAuLi5zb3J0QnlJdGVtc107XG4gIHByaXZhdGVzLm1haW5QYW5lbE1lbnUuc2V0TWVudUl0ZW1zKG1lbnVJdGVtcyk7XG59XG5cbi8qKlxuICogVXBkYXRlIHRoZSBoZWFkaW5nIGluIHRoZSBtYWluIHBhbmVsLlxuICogQHBhcmFtIHtzdHJpbmd9IGhlYWRpbmcgVGhlIG5ldyBoZWFkaW5nIHRvIGRpc3BsYXkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N1YmhlYWRpbmddIFRoZSBuZXcgc3ViaGVhZGluZyB0byBkaXNwbGF5LCBpZiBhbnkuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU1haW5IZWFkaW5nKGhlYWRpbmcsIHN1YmhlYWRpbmcpIHtcbiAgY29uc3QgaGVhZGluZ0VsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1wYW5lbC1oZWFkaW5nJyk7XG4gIGNvbnN0IHN1YmhlYWRpbmdFbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21haW4tcGFuZWwtc3ViaGVhZGluZycpO1xuICBoZWFkaW5nRWxlbS50ZXh0Q29udGVudCA9IGhlYWRpbmc7XG4gIGlmIChzdWJoZWFkaW5nKSB7XG4gICAgc3ViaGVhZGluZ0VsZW0udGV4dENvbnRlbnQgPSBzdWJoZWFkaW5nO1xuICAgIHN1YmhlYWRpbmdFbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9IGVsc2Uge1xuICAgIHN1YmhlYWRpbmdFbGVtLnRleHRDb250ZW50ID0gJyc7XG4gICAgc3ViaGVhZGluZ0VsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxufVxuXG4vKipcbiAqIFJlZnJlc2ggdGhlIG1haW4gcGFuZWwuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBbiBvYmplY3QgaG9sZGluZyBvcHRpb25zIGZvciB0aGUgbWFpbiBwYW5lbC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVzZXRTY3JvbGw9dHJ1ZV0gSWYgc2V0IHRvIHRydWUgKHRoZSBkZWZhdWx0KSxcbiAqICAgdGhlbiB0aGUgcGFuZWwncyBzY3JvbGwgcG9zaXRpb24gd2lsbCBiZSByZXNldCBiYWNrIHRvIHRoZSB0b3AuIE90aGVyd2lzZVxuICogICB0aGUgc2Nyb2xsIHBvc2l0aW9uIHdpbGwgbm90IGJlIGNoYW5nZWQuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU1haW5QYW5lbChpbnN0YW5jZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgY29uc3QgeyBncm91cCwgZmlsdGVyIH0gPSBwcml2YXRlcy5jdXJyZW50RmlsdGVyO1xuXG4gIGxldCBoZWFkaW5nID0gbnVsbDtcbiAgbGV0IHN1YmhlYWRpbmcgPSBudWxsO1xuICBjb25zdCBkaXNwbGF5T3B0aW9ucyA9IHtcbiAgICBncm91cEJ5OiAnbm9uZScsXG4gICAgcmVzZXRTY3JvbGw6IG9wdGlvbnMucmVzZXRTY3JvbGwgPz8gdHJ1ZSxcbiAgICBkYXRlRm9ybWF0OiBwcml2YXRlcy5zZXR0aW5ncy5kYXRlRm9ybWF0LFxuICB9O1xuICBsZXQgZmlsdGVyT3B0aW9ucztcbiAgc3dpdGNoIChncm91cCkge1xuICAgIGNhc2UgJ2RhdGVzJzoge1xuICAgICAgZmlsdGVyT3B0aW9ucyA9IHByaXZhdGVzLnNldHRpbmdzLmdldEZpbHRlck9wdGlvbnMoJ2RhdGVzJyk7XG4gICAgICBjb25zdCB0b2RheSA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoKSk7XG4gICAgICBjb25zdCB0b2RheUVuZCA9IGVuZE9mRGF5KHRvZGF5KTtcblxuICAgICAgY29uc3QgZHVyYXRpb24gPSB7fTtcbiAgICAgIHN3aXRjaCAoZmlsdGVyKSB7XG4gICAgICAgIGNhc2UgJ3RvZGF5JzpcbiAgICAgICAgICBoZWFkaW5nID0gJ1RvZGF5JztcbiAgICAgICAgICBzdWJoZWFkaW5nID0gZm9ybWF0RGF0ZSh0b2RheSwgJ2VlZWUsIE1NTU0gZCwgeXl5eScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICBoZWFkaW5nID0gJ1RoaXMgV2Vlayc7XG4gICAgICAgICAgZGlzcGxheU9wdGlvbnMuZ3JvdXBCeSA9ICdkdWUtZGF0ZSc7XG4gICAgICAgICAgZHVyYXRpb24ud2Vla3MgPSAxO1xuICAgICAgICAgIGR1cmF0aW9uLmRheXMgPSAtMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgIGhlYWRpbmcgPSAnVGhpcyBNb250aCc7XG4gICAgICAgICAgZGlzcGxheU9wdGlvbnMuZ3JvdXBCeSA9ICdkdWUtZGF0ZSc7XG4gICAgICAgICAgZHVyYXRpb24ubW9udGhzID0gMTtcbiAgICAgICAgICBkdXJhdGlvbi5kYXlzID0gLTE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Bhc3QtZHVlJzpcbiAgICAgICAgICBoZWFkaW5nID0gJ1Bhc3QgRHVlJztcbiAgICAgICAgICBkdXJhdGlvbi5kYXlzID0gLTE7XG4gICAgICAgICAgZGlzcGxheU9wdGlvbnMucmVxdWlyZUR1ZURhdGUgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGlzcGxheU9wdGlvbnMuZW5kRGF0ZSA9IGFkZFRvRGF0ZSh0b2RheUVuZCwgZHVyYXRpb24pO1xuXG4gICAgICBpZiAoZmlsdGVyICE9PSAndG9kYXknICYmIGZpbHRlciAhPT0gJ3Bhc3QtZHVlJykge1xuICAgICAgICBjb25zdCBkYXRlRm9ybWF0ID0gcHJpdmF0ZXMuc2V0dGluZ3MuZGF0ZUZvcm1hdC5vdXRwdXRQYXR0ZXJuO1xuICAgICAgICBjb25zdCBzdGFydFN0ciA9IGZvcm1hdERhdGUodG9kYXksIGRhdGVGb3JtYXQpO1xuICAgICAgICBjb25zdCBlbmRTdHIgPSBmb3JtYXREYXRlKGRpc3BsYXlPcHRpb25zLmVuZERhdGUsIGRhdGVGb3JtYXQpO1xuICAgICAgICBzdWJoZWFkaW5nID0gYCR7c3RhcnRTdHJ9IHRvICR7ZW5kU3RyfWA7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAncHJvamVjdHMnOlxuICAgICAgZmlsdGVyT3B0aW9ucyA9IHByaXZhdGVzLnNldHRpbmdzLmdldEZpbHRlck9wdGlvbnMoJ3Byb2plY3RzJyk7XG4gICAgICBkaXNwbGF5T3B0aW9ucy5wcm9qZWN0ID0gZmlsdGVyO1xuICAgICAgaWYgKGZpbHRlciA9PT0gJ25vbmUnKSB7XG4gICAgICAgIGhlYWRpbmcgPSAnVW5jYXRlZ29yaXplZCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBwcm9qZWN0ID0gcHJpdmF0ZXMucHJvamVjdHMuZ2V0UHJvamVjdChmaWx0ZXIpO1xuICAgICAgICBoZWFkaW5nID0gcHJvamVjdC5uYW1lO1xuICAgICAgICBzdWJoZWFkaW5nID0gcHJvamVjdC5kZXNjcmlwdGlvbiB8fCBudWxsO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncHJpb3JpdGllcyc6IHtcbiAgICAgIGZpbHRlck9wdGlvbnMgPSBwcml2YXRlcy5zZXR0aW5ncy5nZXRGaWx0ZXJPcHRpb25zKCdwcmlvcml0aWVzJyk7XG4gICAgICBjb25zdCBwcmlvcml0eSA9IFRhc2suY29udmVydFN0cmluZ1RvUHJpb3JpdHkoZmlsdGVyKTtcbiAgICAgIGRpc3BsYXlPcHRpb25zLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICBoZWFkaW5nID0gYCR7VGFzay5jb252ZXJ0UHJpb3JpdHlUb1ByZXR0eVN0cmluZyhwcmlvcml0eSl9IFByaW9yaXR5YDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlICdkZWZhdWx0JzpcbiAgICBkZWZhdWx0OlxuICAgICAgZmlsdGVyT3B0aW9ucyA9IHByaXZhdGVzLnNldHRpbmdzLmdldEZpbHRlck9wdGlvbnMoJ2RlZmF1bHQnKTtcbiAgICAgIGhlYWRpbmcgPSAnQWxsIFRhc2tzJztcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gT3ZlcnJpZGUgZ3JvdXBpbmcgaWYgbmVlZGVkXG4gIGlmIChmaWx0ZXJPcHRpb25zLmdyb3VwQnkgIT09ICdkZWZhdWx0Jykge1xuICAgIGRpc3BsYXlPcHRpb25zLmdyb3VwQnkgPSBmaWx0ZXJPcHRpb25zLmdyb3VwQnk7XG4gIH1cblxuICBkaXNwbGF5T3B0aW9ucy5zb3J0QnkgPSBmaWx0ZXJPcHRpb25zLnNvcnRCeTtcbiAgZGlzcGxheU9wdGlvbnMuY29tcGxldGVkID0gZmlsdGVyT3B0aW9ucy5zaG93Q29tcGxldGVkO1xuICBkaXNwbGF5T3B0aW9ucy5zb3J0RGVzY2VuZGluZyA9IGZpbHRlck9wdGlvbnMuc29ydERlc2NlbmRpbmc7XG5cbiAgdXBkYXRlTWFpbkhlYWRpbmcoaGVhZGluZywgc3ViaGVhZGluZyk7XG4gIHByaXZhdGVzLnRhc2tEaXNwbGF5LnVwZGF0ZShkaXNwbGF5T3B0aW9ucyk7XG5cbiAgdXBkYXRlTWFpblBhbmVsTWVudShpbnN0YW5jZSk7XG59XG5cbi8qKlxuICogUmVmcmVzaCB0aGUgbGlzdCBvZiBwcm9qZWN0cyBpbiB0aGUgZmlsdGVyIG1lbnUuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB1cGRhdGVQcm9qZWN0RmlsdGVycyhpbnN0YW5jZSkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IHNlbGVjdGlvbiA9IHByaXZhdGVzLmZpbHRlck1lbnUuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgcHJpdmF0ZXMuZmlsdGVyTWVudS5yZW1vdmVBbGxGaWx0ZXJzKCdwcm9qZWN0cycpO1xuICBwcml2YXRlcy5maWx0ZXJNZW51LmFkZEZpbHRlcigncHJvamVjdHMnLCAnbm9uZScsICdVbmNhdGVnb3JpemVkJyk7XG4gIHByaXZhdGVzLnByb2plY3RzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgcHJpdmF0ZXMuZmlsdGVyTWVudS5hZGRGaWx0ZXIoJ3Byb2plY3RzJywgZW50cnkuaWQsIGVudHJ5LnByb2plY3QubmFtZSk7XG4gIH0pO1xuXG4gIC8vIFJlc3RvcmUgc2VsZWN0aW9uXG4gIGlmIChzZWxlY3Rpb24uZ3JvdXAgPT09ICdwcm9qZWN0cycpIHtcbiAgICBjb25zdCB7IGZpbHRlciB9ID0gc2VsZWN0aW9uO1xuICAgIGlmIChwcml2YXRlcy5maWx0ZXJNZW51Lmhhc0ZpbHRlcigncHJvamVjdHMnLCBmaWx0ZXIpKSB7XG4gICAgICBwcml2YXRlcy5maWx0ZXJNZW51LnNlbGVjdEZpbHRlcigncHJvamVjdHMnLCBmaWx0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcml2YXRlcy5maWx0ZXJNZW51LnNlbGVjdEZpbHRlcigncHJvamVjdHMnLCAnbm9uZScpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEV4cG9ydCBhcHAgZGF0YSB0byBhIEpTT04gZmlsZS5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBbQXBwXXtAbGluayBtb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2VcbiAqICAgd2hvc2UgZGF0YSBpcyB0byBiZSBleHBvcnRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IGhvbGRpbmcgYWRkaXRpb25hbCBmaWxlIG9wdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubmV3bGluZVNlcXVlbmNlXSBUaGUgY2hhcmFjdGVyIHNlcXVlbmNlIHRvIHVzZSBmb3JcbiAqICAgbmV3bGluZXMuXG4gKi9cbmZ1bmN0aW9uIGV4cG9ydFRvSnNvbihpbnN0YW5jZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBvdXRwdXQgPSBgJHtKU09OLnN0cmluZ2lmeShpbnN0YW5jZSwgbnVsbCwgMil9XFxuYDtcblxuICBpZiAob3B0aW9ucy5uZXdsaW5lU2VxdWVuY2UpIHtcbiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvXFxuL2csIG9wdGlvbnMubmV3bGluZVNlcXVlbmNlKTtcbiAgfVxuXG4gIGdlbmVyYXRlRmlsZShcbiAgICBvdXRwdXQsXG4gICAgJ3Rhc2tzLmpzb24nLFxuICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgKTtcbn1cblxuLyoqXG4gKiBFeHBvcnQgYXBwIGRhdGEgdG8gYSBDU1YgZmlsZS5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBbQXBwXXtAbGluayBtb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2VcbiAqICAgd2hvc2UgZGF0YSBpcyB0byBiZSBleHBvcnRlZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IGhvbGRpbmcgYWRkaXRpb25hbCBmaWxlIG9wdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubmV3bGluZVNlcXVlbmNlXSBUaGUgY2hhcmFjdGVyIHNlcXVlbmNlIHRvIHVzZSBmb3JcbiAqICAgbmV3bGluZXMuXG4gKi9cbmZ1bmN0aW9uIGV4cG9ydFRvQ3N2KGluc3RhbmNlLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyB0YXNrcywgcHJvamVjdHMgfSA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IG91dHB1dCA9IHRhc2tzLnRvQ3N2KHtcbiAgICBuZXdsaW5lU2VxdWVuY2U6IG9wdGlvbnMubmV3bGluZVNlcXVlbmNlID8/ICdcXHJcXG4nLFxuICAgIHByb2plY3RMaXN0OiBwcm9qZWN0cyxcbiAgfSk7XG5cbiAgZ2VuZXJhdGVGaWxlKFxuICAgIG91dHB1dCxcbiAgICAndGFza3MuY3N2JyxcbiAgICAndGV4dC9jc3YnLFxuICApO1xufVxuXG4vKipcbiAqIEltcG9ydCBhcHAgZGF0YSBmcm9tIGEgc3RyaW5nIGluIEpTT04gZm9ybWF0LlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIFtBcHBde0BsaW5rIG1vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBpblxuICogICB3aGljaCB0byBpbXBvcnQgdGhlIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBUaGUgYXBwIGRhdGEgaW4gSlNPTiBmb3JtYXQuXG4gKiBAcmV0dXJucyB7bW9kdWxlOmFwcH5BcHB+aW1wb3J0U3RhdHVzfSBBbiBvYmplY3QgaG9sZGluZyBpbmZvcm1hdGlvbiBhYm91dFxuICogICB0aGUgc3RhdHVzIG9mIHRoZSBpbXBvcnQuXG4gKi9cbmZ1bmN0aW9uIGltcG9ydEZyb21Kc29uKGluc3RhbmNlLCBkYXRhKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgY29uc3QgdGFza0NvdW50cyA9IHtcbiAgICBhZGRlZDogMCxcbiAgICB1cGRhdGVkOiAwLFxuICAgIGZhaWxlZDogMCxcbiAgICB0b3RhbDogMCxcbiAgfTtcbiAgY29uc3QgcHJvamVjdENvdW50cyA9IHsgLi4udGFza0NvdW50cyB9O1xuICBjb25zdCBlcnJvcnMgPSBbXTtcblxuICB0cnkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcCxcbiAgICAgIHNldHRpbmdzLFxuICAgICAgdGFza3MsXG4gICAgICBwcm9qZWN0cyxcbiAgICB9ID0gSlNPTi5wYXJzZShkYXRhKTtcblxuICAgIGlmIChhcHA/Lm5hbWUgIT09IEFwcEluZm8ubmFtZSB8fCBhcHA/LnZlcnNpb24gPT0gbnVsbCkge1xuICAgICAgZXJyb3JzLnB1c2goJ1dhcm5pbmc6IEltcG9ydGVkIGRhdGEgZG9lcyBub3QgZm9sbG93IHRoZSBleHBlY3RlZCBzY2hlbWEuIFRoZSBkYXRhIG1heSBoYXZlIGJlZW4gY3JlYXRlZCBieSBhIGRpZmZlcmVudCBhcHBsaWNhdGlvbiwgb3IgbWF5IGhhdmUgYmVlbiBhbHRlcmVkLicpO1xuICAgIH0gZWxzZSBpZiAoY29tcGFyZVZlcnNpb25zKGFwcC52ZXJzaW9uLCBBcHBJbmZvLnZlcnNpb24pID4gMCkge1xuICAgICAgZXJyb3JzLnB1c2goJ1dhcm5pbmc6IEltcG9ydGVkIGRhdGEgc2VlbXMgdG8gaGF2ZSBiZWVuIGNyZWF0ZWQgYnkgYSBuZXdlciB2ZXJzaW9uIG9mIHRoZSBhcHBsaWNhdGlvbi4gU29tZSBpbmZvcm1hdGlvbiBtaWdodCBub3QgYmUgaW1wb3J0ZWQgb3IgbWlnaHQgYmUgaW1wb3J0ZWQgaW5jb3JyZWN0bHkuJyk7XG4gICAgfVxuXG4gICAgaWYgKHNldHRpbmdzICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHByaXZhdGVzLnNldHRpbmdzLmltcG9ydEZyb21Kc29uKHNldHRpbmdzKTtcbiAgICAgIGVycm9ycy5wdXNoKC4uLnJlc3VsdC5lcnJvcnMpO1xuICAgIH1cblxuICAgIGlmIChwcm9qZWN0cyAhPSBudWxsKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBwcml2YXRlcy5wcm9qZWN0cy5pbXBvcnRGcm9tSnNvbihwcm9qZWN0cyk7XG4gICAgICBPYmplY3QuYXNzaWduKHByb2plY3RDb3VudHMsIHJlc3VsdC5wcm9qZWN0cyk7XG4gICAgICBlcnJvcnMucHVzaCguLi5yZXN1bHQuZXJyb3JzKTtcbiAgICB9XG5cbiAgICBpZiAodGFza3MgIT0gbnVsbCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcHJpdmF0ZXMudGFza3MuaW1wb3J0RnJvbUpzb24odGFza3MsIHtcbiAgICAgICAgcHJvamVjdExpc3Q6IHByaXZhdGVzLnByb2plY3RzLFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuYXNzaWduKHRhc2tDb3VudHMsIHJlc3VsdC50YXNrcyk7XG4gICAgICBlcnJvcnMucHVzaCguLi5yZXN1bHQuZXJyb3JzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2Vzc2Z1bDogdHJ1ZSxcbiAgICAgIGZvcm1hdDogJ2pzb24nLFxuICAgICAgdGFza3M6IHRhc2tDb3VudHMsXG4gICAgICBwcm9qZWN0czogcHJvamVjdENvdW50cyxcbiAgICAgIGVycm9ycyxcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgIGZvcm1hdDogJ2pzb24nLFxuICAgICAgICB0YXNrczogdGFza0NvdW50cyxcbiAgICAgICAgcHJvamVjdHM6IHByb2plY3RDb3VudHMsXG4gICAgICAgIGVycm9yczogW2BGYXRhbCBFcnJvcjogJHtlLm1lc3NhZ2V9YF0sXG4gICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbi8qKlxuICogSW1wb3J0IGFwcCBkYXRhIGZyb20gYSBDU1Ygc3RyaW5nLlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIFtBcHBde0BsaW5rIG1vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBpblxuICogICB3aGljaCB0byBpbXBvcnQgdGhlIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBUaGUgYXBwIGRhdGEgaW4gQ1NWIGZvcm1hdC5cbiAqIEByZXR1cm5zIHttb2R1bGU6YXBwfkFwcH5pbXBvcnRTdGF0dXN9IEFuIG9iamVjdCBob2xkaW5nIGluZm9ybWF0aW9uIGFib3V0XG4gKiAgIHRoZSBzdGF0dXMgb2YgdGhlIGltcG9ydC5cbiAqL1xuZnVuY3Rpb24gaW1wb3J0RnJvbUNzdihpbnN0YW5jZSwgZGF0YSkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IHRhc2tDb3VudHMgPSB7XG4gICAgYWRkZWQ6IDAsXG4gICAgdXBkYXRlZDogMCxcbiAgICBmYWlsZWQ6IDAsXG4gICAgdG90YWw6IDAsXG4gIH07XG4gIGNvbnN0IHByb2plY3RDb3VudHMgPSB7IC4uLnRhc2tDb3VudHMgfTtcbiAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgY29uc3QgcGFyc2VkRGF0YSA9IHBhcnNlQ3N2KGRhdGEpO1xuICBsZXQgcmVzdWx0O1xuXG4gIHJlc3VsdCA9IHByaXZhdGVzLnByb2plY3RzLmltcG9ydEZyb21Dc3YocGFyc2VkRGF0YSk7XG4gIE9iamVjdC5hc3NpZ24ocHJvamVjdENvdW50cywgcmVzdWx0LnByb2plY3RzKTtcbiAgZXJyb3JzLnB1c2goLi4ucmVzdWx0LmVycm9ycyk7XG5cbiAgcmVzdWx0ID0gcHJpdmF0ZXMudGFza3MuaW1wb3J0RnJvbUNzdihcbiAgICBwYXJzZWREYXRhLFxuICAgIHsgcHJvamVjdExpc3Q6IHByaXZhdGVzLnByb2plY3RzIH0sXG4gICk7XG4gIE9iamVjdC5hc3NpZ24odGFza0NvdW50cywgcmVzdWx0LnRhc2tzKTtcbiAgZXJyb3JzLnB1c2goLi4ucmVzdWx0LmVycm9ycyk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdWNjZXNzZnVsOiB0cnVlLFxuICAgIGZvcm1hdDogJ2NzdicsXG4gICAgdGFza3M6IHRhc2tDb3VudHMsXG4gICAgcHJvamVjdHM6IHByb2plY3RDb3VudHMsXG4gICAgZXJyb3JzLFxuICB9O1xufVxuXG4vKipcbiAqIEltcG9ydCBhcHAgZGF0YSBmcm9tIGEgZmlsZS4gVGhpcyBmdW5jdGlvbiB3aWxsIGF0dGVtcHQgdG8gZGV0ZXJtaW5lIHdoZXRoZXJcbiAqIHRoZSBmaWxlIGlzIGluIEpTT04gb3IgQ1NWIGZvcm1hdCwgZmlyc3QgdXNpbmcgdGhlIGZpbGUgZXh0ZW5zaW9uIGFuZCxcbiAqIGZhaWxpbmcgdGhhdCwgYnkgZXhhbWluaW5nIHRoZSBjb250ZW50cy5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBbQXBwXXtAbGluayBtb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgaW5cbiAqICAgd2hpY2ggdG8gaW1wb3J0IHRoZSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgVGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlIGJlaW5nIGltcG9ydGVkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSBUaGUgbmFtZSBvZiB0aGUgZmlsZSBiZWluZyBpbXBvcnRlZC5cbiAqIEByZXR1cm5zIHttb2R1bGU6YXBwfkFwcH5pbXBvcnRTdGF0dXN9IEFuIG9iamVjdCBob2xkaW5nIGluZm9ybWF0aW9uIGFib3V0XG4gKiAgIHRoZSBzdGF0dXMgb2YgdGhlIGltcG9ydC5cbiAqL1xuZnVuY3Rpb24gaW1wb3J0RnJvbUZpbGUoaW5zdGFuY2UsIGNvbnRlbnQsIG5hbWUpIHtcbiAgY29uc3QgZmlsZUV4dCA9IG5hbWUgPyBnZXRGaWxlRXh0ZW5zaW9uKG5hbWUpLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgc3dpdGNoIChmaWxlRXh0KSB7XG4gICAgY2FzZSAnLmpzb24nOiByZXR1cm4gaW1wb3J0RnJvbUpzb24oaW5zdGFuY2UsIGNvbnRlbnQpO1xuICAgIGNhc2UgJy5jc3YnOiByZXR1cm4gaW1wb3J0RnJvbUNzdihpbnN0YW5jZSwgY29udGVudCk7XG4gICAgZGVmYXVsdDoge1xuICAgICAgbGV0IHJlc3VsdCA9IGltcG9ydEZyb21Kc29uKGluc3RhbmNlLCBjb250ZW50KTtcbiAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3NmdWwpIHtcbiAgICAgICAgcmVzdWx0ID0gaW1wb3J0RnJvbUNzdihpbnN0YW5jZSwgY29udGVudCk7XG4gICAgICAgIGlmICghcmVzdWx0LnN1Y2Nlc3NmdWwpIHtcbiAgICAgICAgICBjb25zdCBjb3VudHMgPSB7XG4gICAgICAgICAgICBhZGRlZDogMCxcbiAgICAgICAgICAgIHVwZGF0ZWQ6IDAsXG4gICAgICAgICAgICBmYWlsZWQ6IDAsXG4gICAgICAgICAgICB0b3RhbDogMCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdWNjZXNzZnVsOiBmYWxzZSxcbiAgICAgICAgICAgIGZvcm1hdDogJ3Vua25vd24nLFxuICAgICAgICAgICAgdGFza3M6IHsgLi4uY291bnRzIH0sXG4gICAgICAgICAgICBwcm9qZWN0czogeyAuLi5jb3VudHMgfSxcbiAgICAgICAgICAgIGVycm9yczogWydGYXRhbCBFcnJvcjogVW5hYmxlIHRvIGRldGVybWluZSBmaWxlIGZvcm1hdC4gSW1wb3J0ZWQgZGF0YSBtdXN0IGJlIGluIGVpdGhlciBKU09OIG9yIENTViBmb3JtYXQuJ10sXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEZWxldGUgYWxsIHVzZXIgZGF0YS5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZUFsbERhdGEoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBwcml2YXRlcy5zZXR0aW5ncy5yZXNldFRvRGVmYXVsdCgpO1xuICBwcml2YXRlcy50YXNrcy5kZWxldGVBbGwoKTtcbiAgcHJpdmF0ZXMucHJvamVjdHMuZGVsZXRlQWxsKCk7XG4gIHVwZGF0ZVByb2plY3RGaWx0ZXJzKGluc3RhbmNlKTtcbiAgdXBkYXRlTWFpblBhbmVsKGluc3RhbmNlKTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IGEgbW9kYWwgY29uZmlybWF0aW9uIGRpYWxvZy5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBkaXNwbGF5IHRvIHRoZSB1c2VyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ29uZmlybV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHdoZW4gdGhlXG4gKiAgIHVzZXIgY29uZmlybXMgdGhlIG1vZGFsLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29uQ2FuY2VsXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGludm9rZWQgd2hlbiB0aGUgdXNlclxuICogICBjYW5jZWxzIHRoZSBtb2RhbC5cbiAqL1xuZnVuY3Rpb24gc2hvd0NvbmZpcm1hdGlvbihpbnN0YW5jZSwgbWVzc2FnZSwgb25Db25maXJtLCBvbkNhbmNlbCkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IG1vZGFsID0gbmV3IENvbmZpcm1Nb2RhbChtZXNzYWdlLCB7XG4gICAgY29uZmlybTogb25Db25maXJtIHx8IG51bGwsXG4gICAgY2FuY2VsOiBvbkNhbmNlbCB8fCBudWxsLFxuICB9KTtcbiAgcHJpdmF0ZXMubW9kYWxTdGFjay5zaG93TW9kYWwobW9kYWwpO1xufVxuXG4vKipcbiAqIERpc3BsYXkgdGhlIG1vZGFsIGRpYWxvZyBmb3IgYWRkaW5nIG9yIGVkaXRpbmcgYSB0YXNrLiBBZnRlciB0aGUgdXNlclxuICogY29uZmlybXMgdGhlIGRpYWxvZywgdGhlIHRhc2sgaXMgYWRkZWQgdG8gdGhlIHRhc2sgbGlzdC5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIEFuIG9iamVjdCBob2xkaW5nIG9wdGlvbnMgZm9yIGNyZWF0aW5nIHRoZVxuICogICBtb2RhbC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50YXNrSWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgdGFzayB0byBlZGl0LCBpZlxuICogICBhbnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucHJvamVjdElkXSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGRlZmF1bHQgcHJvamVjdFxuICogICB0aGF0IHRoZSB0YXNrIHNob3VsZCBiZSBhc3NpZ25lZCB0bywgaWYgYW55LiBJZiBhIHRhc2sgaWQgd2FzIGdpdmVuLFxuICogICB0aGVuIHRoaXMgb3B0aW9uIGlzIGlnbm9yZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucHJpb3JpdHk9MF0gVGhlIGRlZmF1bHQgcHJpb3JpdHkgZm9yIHRoZSB0YXNrLiBJZlxuICogICBhIHRhc2sgaWQgd2FzIGdpdmVuLCB0aGVuIHRoaXMgb3B0aW9uIGlzIGlnbm9yZWQuXG4gKi9cbmZ1bmN0aW9uIHNob3dBZGRUYXNrTW9kYWwoaW5zdGFuY2UsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IG1vZGFsID0gbmV3IEFkZFRhc2tNb2RhbChwcml2YXRlcy50YXNrcywgcHJpdmF0ZXMucHJvamVjdHMsIHtcbiAgICB0YXNrSWQ6IG9wdGlvbnMudGFza0lkIHx8IG51bGwsXG4gICAgcHJvamVjdElkOiBvcHRpb25zLnByb2plY3RJZCB8fCBudWxsLFxuICAgIHByaW9yaXR5OiBvcHRpb25zLnByaW9yaXR5ID8/IDAsXG4gICAgZGF0ZUZvcm1hdDogcHJpdmF0ZXMuc2V0dGluZ3MuZGF0ZUZvcm1hdCxcbiAgICBjb25maXJtOiAoKSA9PiB1cGRhdGVNYWluUGFuZWwoaW5zdGFuY2UsIHsgcmVzZXRTY3JvbGw6IGZhbHNlIH0pLFxuICAgIG5ld1Byb2plY3Q6ICgpID0+IHVwZGF0ZVByb2plY3RGaWx0ZXJzKGluc3RhbmNlKSxcbiAgfSk7XG4gIHByaXZhdGVzLm1vZGFsU3RhY2suc2hvd01vZGFsKG1vZGFsKTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IHRoZSBtb2RhbCBkaWFsb2cgZm9yIGFkZGluZyBvciBlZGl0aW5nIGEgcHJvamVjdC4gQWZ0ZXIgdGhlIHVzZXJcbiAqIGNvbmZpcm1zIHRoZSBkaWFsb2csIHRoZSBwcm9qZWN0IGlzIGFkZGVkIHRvIHRoZSBwcm9qZWN0IGxpc3QuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBbiBvYmplY3QgaG9sZGluZyBvcHRpb25zIGZvciBjcmVhdGluZyB0aGVcbiAqICAgbW9kYWwuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucHJvamVjdElkXSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIHByb2plY3QgdG9cbiAqICAgZWRpdCwgaWYgYW55LiBJZiBub3QgZ2l2ZW4sIGEgbmV3IHByb2plY3QgaXMgY3JlYXRlZC5cbiAqL1xuZnVuY3Rpb24gc2hvd0FkZFByb2plY3RNb2RhbChpbnN0YW5jZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBsZXQgcHJvamVjdFRvVXBkYXRlID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMucHJvamVjdElkKSB7XG4gICAgcHJvamVjdFRvVXBkYXRlID0gcHJpdmF0ZXMucHJvamVjdHMuZ2V0UHJvamVjdChvcHRpb25zLnByb2plY3RJZCk7XG4gIH1cblxuICBjb25zdCBtb2RhbCA9IG5ldyBBZGRQcm9qZWN0TW9kYWwoe1xuICAgIGNvbmZpcm06IChwcm9qZWN0KSA9PiB7XG4gICAgICBsZXQgbmV3SWQgPSBudWxsO1xuICAgICAgaWYgKG9wdGlvbnMucHJvamVjdElkKSB7XG4gICAgICAgIHByaXZhdGVzLnByb2plY3RzLnVwZGF0ZVByb2plY3Qob3B0aW9ucy5wcm9qZWN0SWQsIHByb2plY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3SWQgPSBwcml2YXRlcy5wcm9qZWN0cy5hZGRQcm9qZWN0KHByb2plY3QpO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVQcm9qZWN0RmlsdGVycyhpbnN0YW5jZSk7XG4gICAgICBpZiAobmV3SWQpIHByaXZhdGVzLmZpbHRlck1lbnUuc2VsZWN0RmlsdGVyKCdwcm9qZWN0cycsIG5ld0lkKTtcbiAgICB9LFxuICAgIHByb2plY3Q6IHByb2plY3RUb1VwZGF0ZSxcbiAgfSk7XG4gIHByaXZhdGVzLm1vZGFsU3RhY2suc2hvd01vZGFsKG1vZGFsKTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IHRoZSBtb2RhbCBkaWFsb2cgZm9yIG1vZGlmeWluZyB1c2VyIHNldHRpbmdzLlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvd1NldHRpbmdzTW9kYWwoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCBtb2RhbCA9IG5ldyBTZXR0aW5nc01vZGFsKHByaXZhdGVzLnNldHRpbmdzLCB7XG4gICAgY29uZmlybTogKCkgPT4gdXBkYXRlTWFpblBhbmVsKGluc3RhbmNlLCB7IHJlc2V0U2Nyb2xsOiBmYWxzZSB9KSxcbiAgfSk7XG4gIHByaXZhdGVzLm1vZGFsU3RhY2suc2hvd01vZGFsKG1vZGFsKTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IHRoZSBtb2RhbCBkaWFsb2cgZm9yIG1hbmFnaW5nIHVzZXIgZGF0YS5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNob3dEYXRhTW9kYWwoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCBtb2RhbCA9IG5ldyBEYXRhTW9kYWwoe1xuICAgIGltcG9ydERhdGE6IChjb250ZW50LCB7IG5hbWUgfSkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaW1wb3J0RnJvbUZpbGUoaW5zdGFuY2UsIGNvbnRlbnQsIG5hbWUpO1xuICAgICAgaWYgKHJlc3VsdC5wcm9qZWN0cy50b3RhbCA+IDApIHVwZGF0ZVByb2plY3RGaWx0ZXJzKGluc3RhbmNlKTtcbiAgICAgIGlmIChyZXN1bHQudGFza3MudG90YWwgPiAwKSB7XG4gICAgICAgIHVwZGF0ZU1haW5QYW5lbChpbnN0YW5jZSwgeyByZXNldFNjcm9sbDogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnN0IHN0YXR1c01zZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3RhdHVzTXNnLmNsYXNzTGlzdC5hZGQoJ2RhdGEtaW1wb3J0LXJlc3VsdHMnKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzdGF0dXNNc2cpO1xuICAgICAgaWYgKHJlc3VsdC5zdWNjZXNzZnVsKSB7XG4gICAgICAgIHN0YXR1c01zZy50ZXh0Q29udGVudCA9IFtcbiAgICAgICAgICAnRGF0YSBpbXBvcnQgc3VjY2VlZGVkLicsXG4gICAgICAgICAgYFByb2Nlc3NlZCAke3Jlc3VsdC50YXNrcy50b3RhbH0gJHtyZXN1bHQudGFza3MudG90YWwgIT09IDEgPyAndGFza3MnIDogJ3Rhc2snfTogJHtyZXN1bHQudGFza3MuYWRkZWR9IGFkZGVkLCAke3Jlc3VsdC50YXNrcy51cGRhdGVkfSB1cGRhdGVkLCAke3Jlc3VsdC50YXNrcy5mYWlsZWR9IGZhaWxlZC5gLFxuICAgICAgICAgIGBQcm9jZXNzZWQgJHtyZXN1bHQucHJvamVjdHMudG90YWx9ICR7cmVzdWx0LnByb2plY3RzLnRvdGFsICE9PSAxID8gJ3Byb2plY3RzJyA6ICdwcm9qZWN0J306ICR7cmVzdWx0LnByb2plY3RzLmFkZGVkfSBhZGRlZCwgJHtyZXN1bHQucHJvamVjdHMudXBkYXRlZH0gdXBkYXRlZCwgJHtyZXN1bHQucHJvamVjdHMuZmFpbGVkfSBmYWlsZWQuYCxcbiAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXR1c01zZy50ZXh0Q29udGVudCA9ICdEYXRhIGltcG9ydCBmYWlsZWQuJztcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZXJyb3JMaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICAgICAgZXJyb3JMaXN0LmNsYXNzTGlzdC5hZGQoJ2RhdGEtaW1wb3J0LWVycm9yLWxpc3QnKTtcbiAgICAgICAgcmVzdWx0LmVycm9ycy5mb3JFYWNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcbiAgICAgICAgICBsaXN0SXRlbS5jbGFzc0xpc3QuYWRkKCdkYXRhLWltcG9ydC1yZXN1bHRzJyk7XG4gICAgICAgICAgbGlzdEl0ZW0udGV4dENvbnRlbnQgPSBlcnJvcjtcbiAgICAgICAgICBlcnJvckxpc3QuYXBwZW5kQ2hpbGQobGlzdEl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVycm9yTGlzdCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpbmZvTW9kYWwgPSBuZXcgSW5mb01vZGFsKGNvbnRhaW5lciwgeyB0aXRsZTogJ0ltcG9ydCBTdGF0dXMnIH0pO1xuICAgICAgcHJpdmF0ZXMubW9kYWxTdGFjay5zaG93TW9kYWwoaW5mb01vZGFsKTtcbiAgICB9LFxuICAgIGV4cG9ydERhdGE6IChmaWxlVHlwZSwgZmlsZU9wdGlvbnMpID0+IHtcbiAgICAgIGlmIChmaWxlVHlwZSA9PT0gJ2NzdicpIGV4cG9ydFRvQ3N2KGluc3RhbmNlLCBmaWxlT3B0aW9ucyk7XG4gICAgICBlbHNlIGV4cG9ydFRvSnNvbihpbnN0YW5jZSwgZmlsZU9wdGlvbnMpO1xuICAgIH0sXG4gICAgZGVsZXRlQWxsOiAoKSA9PiBkZWxldGVBbGxEYXRhKGluc3RhbmNlKSxcbiAgfSk7XG4gIHByaXZhdGVzLm1vZGFsU3RhY2suc2hvd01vZGFsKG1vZGFsKTtcbn1cblxuLyoqXG4gKiBEaXNwbGF5IHRoZSBtb2RhbCBkaWFsb2cgc2hvd2luZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgYXBwLlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2hvd0Fib3V0TW9kYWwoaW5zdGFuY2UpIHtcbiAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBwYXJhZ3JhcGhzID0gW1xuICAgIHtcbiAgICAgIGNvbnRlbnQ6IGBWZXJzaW9uICR7QXBwSW5mby52ZXJzaW9ufWAsXG4gICAgICBjbGFzc0xpc3Q6IFsnYWJvdXQtbW9kYWwtdmVyc2lvbiddLFxuICAgIH0sXG4gICAge1xuICAgICAgY29udGVudDogW1xuICAgICAgICBgQ29weXJpZ2h0ICR7QXBwSW5mby5jb3B5cmlnaHRZZWFyc30gYCxcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRlbnQ6IEFwcEluZm8uYXV0aG9yLFxuICAgICAgICAgIHVybDogQXBwSW5mby5hdXRob3JXZWJzaXRlLFxuICAgICAgICAgIHRhcmdldDogJ19ibGFuaycsXG4gICAgICAgIH0sXG4gICAgICAgIGAuIExpY2Vuc2U6ICR7QXBwSW5mby5saWNlbnNlfS5gLFxuICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvbnRlbnQ6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbnRlbnQ6ICdWaWV3IGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbicsXG4gICAgICAgICAgdXJsOiAnbGljZW5zZXMuaHRtbCcsXG4gICAgICAgICAgdGFyZ2V0OiAnX2JsYW5rJyxcbiAgICAgICAgfSxcbiAgICAgICAgJy4nLFxuICAgICAgXSxcbiAgICB9LFxuICBdO1xuICBjb250ZW50LmFwcGVuZENoaWxkKGNyZWF0ZVBhcmFncmFwaHMocGFyYWdyYXBocywge1xuICAgIGNsYXNzTGlzdDogWydhYm91dC1tb2RhbC1wYXJhZ3JhcGgnXSxcbiAgfSkpO1xuXG4gIGNvbnN0IG1vZGFsID0gbmV3IEluZm9Nb2RhbChjb250ZW50LCB7IHRpdGxlOiBBcHBJbmZvLm5hbWUgfSk7XG4gIHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSkubW9kYWxTdGFjay5zaG93TW9kYWwobW9kYWwpO1xufVxuXG4vKipcbiAqIFJlc3BvbmQgdG8gYSBzZWxlY3Rpb24gaW4gdGhlIG1haW4gcGFuZWwgbWVudS5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gaXRlbUlkIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgbWVudSBpdGVtIHRoYXQgd2FzIHNlbGVjdGVkLlxuICovXG5mdW5jdGlvbiBoYW5kbGVNYWluUGFuZWxNZW51U2VsZWN0aW9uKGluc3RhbmNlLCBpdGVtSWQpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCB7IGdyb3VwLCBmaWx0ZXIgfSA9IHByaXZhdGVzLmN1cnJlbnRGaWx0ZXI7XG4gIGNvbnN0IGZpbHRlck9wdGlvbnMgPSBwcml2YXRlcy5zZXR0aW5ncy5nZXRGaWx0ZXJPcHRpb25zKGdyb3VwKTtcblxuICBsZXQgbmVlZFBhbmVsVXBkYXRlID0gdHJ1ZTtcbiAgbGV0IG5lZWRGaWx0ZXJPcHRpb25VcGRhdGUgPSB0cnVlO1xuICBzd2l0Y2ggKGl0ZW1JZCkge1xuICAgIGNhc2UgJ2FkZC10YXNrJzoge1xuICAgICAgY29uc3QgbW9kYWxPcHRpb25zID0ge307XG4gICAgICBpZiAoZ3JvdXAgPT09ICdwcm9qZWN0cycgJiYgZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgICAgbW9kYWxPcHRpb25zLnByb2plY3RJZCA9IGZpbHRlcjtcbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXAgPT09ICdwcmlvcml0aWVzJykge1xuICAgICAgICBtb2RhbE9wdGlvbnMucHJpb3JpdHkgPSBUYXNrLmNvbnZlcnRTdHJpbmdUb1ByaW9yaXR5KGZpbHRlcik7XG4gICAgICB9XG4gICAgICBzaG93QWRkVGFza01vZGFsKGluc3RhbmNlLCBtb2RhbE9wdGlvbnMpO1xuICAgICAgbmVlZFBhbmVsVXBkYXRlID0gZmFsc2U7XG4gICAgICBuZWVkRmlsdGVyT3B0aW9uVXBkYXRlID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAnYWRkLXByb2plY3QnOlxuICAgICAgc2hvd0FkZFByb2plY3RNb2RhbChpbnN0YW5jZSk7XG4gICAgICBuZWVkUGFuZWxVcGRhdGUgPSBmYWxzZTtcbiAgICAgIG5lZWRGaWx0ZXJPcHRpb25VcGRhdGUgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2VkaXQtcHJvamVjdCc6XG4gICAgICBzaG93QWRkUHJvamVjdE1vZGFsKGluc3RhbmNlLCB7IHByb2plY3RJZDogZmlsdGVyIH0pO1xuICAgICAgbmVlZEZpbHRlck9wdGlvblVwZGF0ZSA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZGVsZXRlLXByb2plY3QnOiB7XG4gICAgICBjb25zdCBwcm9qZWN0ID0gcHJpdmF0ZXMucHJvamVjdHMuZ2V0UHJvamVjdChmaWx0ZXIpO1xuICAgICAgaWYgKCFwcm9qZWN0KSBicmVhaztcbiAgICAgIHNob3dDb25maXJtYXRpb24oXG4gICAgICAgIGluc3RhbmNlLFxuICAgICAgICBgQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB0aGUgcHJvamVjdCAnJHtwcm9qZWN0Lm5hbWV9Jz9gLFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgcHJpdmF0ZXMudGFza3MuY2xlYXJQcm9qZWN0KGZpbHRlcik7XG4gICAgICAgICAgcHJpdmF0ZXMucHJvamVjdHMuZGVsZXRlUHJvamVjdChmaWx0ZXIpO1xuICAgICAgICAgIHVwZGF0ZVByb2plY3RGaWx0ZXJzKGluc3RhbmNlKTtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICBuZWVkUGFuZWxVcGRhdGUgPSBmYWxzZTtcbiAgICAgIG5lZWRGaWx0ZXJPcHRpb25VcGRhdGUgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlICdzaG93LWNvbXBsZXRlZCc6XG4gICAgICBmaWx0ZXJPcHRpb25zLnNob3dDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaGlkZS1jb21wbGV0ZWQnOlxuICAgICAgZmlsdGVyT3B0aW9ucy5zaG93Q29tcGxldGVkID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzb3J0LWFzY2VuZGluZyc6XG4gICAgICBmaWx0ZXJPcHRpb25zLnNvcnREZXNjZW5kaW5nID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzb3J0LWRlc2NlbmRpbmcnOlxuICAgICAgZmlsdGVyT3B0aW9ucy5zb3J0RGVzY2VuZGluZyA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdncm91cC1ieS1kZWZhdWx0JzpcbiAgICAgIGZpbHRlck9wdGlvbnMuZ3JvdXBCeSA9ICdkZWZhdWx0JztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2dyb3VwLWJ5LW5vbmUnOlxuICAgICAgZmlsdGVyT3B0aW9ucy5ncm91cEJ5ID0gJ25vbmUnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZ3JvdXAtYnktZHVlLWRhdGUnOlxuICAgICAgZmlsdGVyT3B0aW9ucy5ncm91cEJ5ID0gJ2R1ZS1kYXRlJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2dyb3VwLWJ5LXByb2plY3QnOlxuICAgICAgZmlsdGVyT3B0aW9ucy5ncm91cEJ5ID0gJ3Byb2plY3QnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZ3JvdXAtYnktcHJpb3JpdHknOlxuICAgICAgZmlsdGVyT3B0aW9ucy5ncm91cEJ5ID0gJ3ByaW9yaXR5JztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3NvcnQtYnktY3JlYXRlLWRhdGUnOlxuICAgICAgZmlsdGVyT3B0aW9ucy5zb3J0QnkgPSAnY3JlYXRlLWRhdGUnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc29ydC1ieS1kdWUtZGF0ZSc6XG4gICAgICBmaWx0ZXJPcHRpb25zLnNvcnRCeSA9ICdkdWUtZGF0ZSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzb3J0LWJ5LXByb2plY3QnOlxuICAgICAgZmlsdGVyT3B0aW9ucy5zb3J0QnkgPSAncHJvamVjdCc7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdzb3J0LWJ5LXByaW9yaXR5JzpcbiAgICAgIGZpbHRlck9wdGlvbnMuc29ydEJ5ID0gJ3ByaW9yaXR5JztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmIChuZWVkRmlsdGVyT3B0aW9uVXBkYXRlKSB7XG4gICAgcHJpdmF0ZXMuc2V0dGluZ3Muc2V0RmlsdGVyT3B0aW9ucyhncm91cCwgZmlsdGVyT3B0aW9ucyk7XG4gIH1cbiAgaWYgKG5lZWRQYW5lbFVwZGF0ZSkgdXBkYXRlTWFpblBhbmVsKGluc3RhbmNlLCB7IHJlc2V0U2Nyb2xsOiBmYWxzZSB9KTtcbn1cblxuLyoqXG4gKiBDb21wbGV0ZSBhIHRhc2sgaW4gdGhlIHRhc2sgbGlzdC5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSB0YXNrIHRvIGNvbXBsZXRlLlxuICovXG5mdW5jdGlvbiBjb21wbGV0ZVRhc2soaW5zdGFuY2UsIGlkKSB7XG4gIGNvbnN0IHsgdGFza3M6IHRhc2tMaXN0IH0gPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCB0YXNrID0gdGFza0xpc3QuZ2V0VGFzayhpZCk7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cbiAgaWYgKHRhc2sucmVjdXJyaW5nRGF0ZSkge1xuICAgIGxldCBiYXNlRGF0ZSA9IG5vdztcbiAgICBpZiAodGFzay5kdWVEYXRlICYmICF0YXNrLnJlY3VycmluZ0RhdGUuYmFzZU9uQ29tcGxldGlvbikge1xuICAgICAgYmFzZURhdGUgPSB0YXNrLmR1ZURhdGU7XG4gICAgfVxuICAgIGNvbnN0IG5ld0R1ZURhdGUgPSB0YXNrLnJlY3VycmluZ0RhdGUuZ2V0TmV4dE9jY3VycmVuY2UoYmFzZURhdGUpO1xuICAgIGlmICghbmV3RHVlRGF0ZSkge1xuICAgICAgdGFzay5tYXJrQ29tcGxldGUoKTtcbiAgICAgIHRhc2sucmVjdXJyaW5nRGF0ZSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhc2subWFya0luY29tcGxldGUoKTtcbiAgICAgIHRhc2sucmVjdXJyaW5nRGF0ZS5hZHZhbmNlKCk7XG4gICAgICB0YXNrLmR1ZURhdGUgPSBuZXdEdWVEYXRlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0YXNrLm1hcmtDb21wbGV0ZSgpO1xuICB9XG5cbiAgdGFza0xpc3QudXBkYXRlVGFzayhpZCwgdGFzayk7XG59XG5cbi8qKlxuICogUmVzcG9uZCB0byBhbiBhY3Rpb24gdGhhdCB0aGUgdXNlciBwZXJmb3JtZWQgb24gYSB0YXNrLlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIGFjdGlvbiBiZWluZyBwZXJmb3JtZWQ6ICdtYXJrLWNvbXBsZXRlJyxcbiAqICAgJ21hcmstaW5jb21wbGV0ZScsICdlZGl0Jywgb3IgJ2RlbGV0ZScuXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSB0YXNrIGJlaW5nIHVwZGF0ZWQuXG4gKiBAcGFyYW0ge21vZHVsZTp0YXNrflRhc2t9IHRhc2sgVGhlIHRhc2sgYmVpbmcgdXBkYXRlZC5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlVGFza1VwZGF0ZShpbnN0YW5jZSwgdHlwZSwgaWQsIHRhc2spIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBsZXQgbmVlZFVwZGF0ZSA9IHRydWU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ21hcmstY29tcGxldGUnOlxuICAgICAgY29tcGxldGVUYXNrKGluc3RhbmNlLCBpZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtYXJrLWluY29tcGxldGUnOlxuICAgICAgdGFzay5tYXJrSW5jb21wbGV0ZSgpO1xuICAgICAgcHJpdmF0ZXMudGFza3MudXBkYXRlVGFzayhpZCwgdGFzayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlZGl0JzpcbiAgICAgIHNob3dBZGRUYXNrTW9kYWwoaW5zdGFuY2UsIHsgdGFza0lkOiBpZCB9KTtcbiAgICAgIG5lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Nsb25lJzpcbiAgICAgIHByaXZhdGVzLnRhc2tzLmFkZFRhc2sodGFzayk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdkZWxldGUnOlxuICAgICAgc2hvd0NvbmZpcm1hdGlvbihcbiAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgIGBBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSB0YXNrICcke3Rhc2submFtZX0nP2AsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBwcml2YXRlcy50YXNrcy5kZWxldGVUYXNrKGlkKTtcbiAgICAgICAgICB1cGRhdGVNYWluUGFuZWwoaW5zdGFuY2UsIHsgcmVzZXRTY3JvbGw6IGZhbHNlIH0pO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICAgIG5lZWRVcGRhdGUgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2dvLXRvLXByb2plY3QnOlxuICAgICAgcHJpdmF0ZXMuZmlsdGVyTWVudS5zZWxlY3RGaWx0ZXIoJ3Byb2plY3RzJywgdGFzay5wcm9qZWN0IHx8ICdub25lJyk7XG4gICAgICBuZWVkVXBkYXRlID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbmVlZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBpZiAobmVlZFVwZGF0ZSkgdXBkYXRlTWFpblBhbmVsKGluc3RhbmNlLCB7IHJlc2V0U2Nyb2xsOiBmYWxzZSB9KTtcbn1cblxuLyoqXG4gKiBSZXNwb25kIHRvIGEgY2hhbmdlIGluIHRoZSBmaWx0ZXIgbWVudSBzZWxlY3Rpb24uXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IFRoZSBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2V2ZW50Lmdyb3VwSWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZ3JvdXAgY29udGFpbmluZyB0aGVcbiAqICAgZmlsdGVyIHRoYXQgd2FzIHNlbGVjdGVkLCBpZiBhbnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2V2ZW50LmZpbHRlcklkXSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGZpbHRlciB0aGF0IHdhc1xuICogICBzZWxlY3RlZCwgaWYgYW55LlxuICogQHBhcmFtIHtzdHJpbmd9IFtldmVudC5maWx0ZXJMYWJlbF0gVGhlIGRpc3BsYXllZCBsYWJlbCBmb3IgdGhlIHNlbGVjdGVkXG4gKiAgIGZpbHRlciwgaWYgYW55LlxuICovXG5mdW5jdGlvbiBoYW5kbGVGaWx0ZXJDaGFuZ2UoaW5zdGFuY2UsIGV2ZW50KSB7XG4gIGlmICghZXZlbnQuZ3JvdXBJZCB8fCAhZXZlbnQuZmlsdGVySWQpIHJldHVybjtcblxuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIHByaXZhdGVzLmN1cnJlbnRGaWx0ZXIuZ3JvdXAgPSBldmVudC5ncm91cElkO1xuICBwcml2YXRlcy5jdXJyZW50RmlsdGVyLmZpbHRlciA9IGV2ZW50LmZpbHRlcklkO1xuXG4gIHVwZGF0ZU1haW5QYW5lbChpbnN0YW5jZSk7XG59XG5cbi8qKlxuICogUmVzcG9uZCB0byBhIHNlbGVjdGlvbiBpbiB0aGUgQXBwIE9wdGlvbnMgbWVudS5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gaXRlbUlkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBtZW51IGl0ZW0gdGhhdCB3YXMgc2VsZWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUFwcE1lbnVTZWxlY3Rpb24oaW5zdGFuY2UsIGl0ZW1JZCkge1xuICBzd2l0Y2ggKGl0ZW1JZCkge1xuICAgIGNhc2UgJ3NldHRpbmdzJzpcbiAgICAgIHNob3dTZXR0aW5nc01vZGFsKGluc3RhbmNlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgc2hvd0RhdGFNb2RhbChpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdhYm91dCc6XG4gICAgICBzaG93QWJvdXRNb2RhbChpbnN0YW5jZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuLyoqXG4gKiBNYWtlIHN1cmUgYXBwIGluZm9ybWF0aW9uIGFuZCBzZXR0aW5ncyBhcmUgc3RvcmVkIGluIGxvY2FsIHN0b3JhZ2UgaWZcbiAqIG5lZWRlZC5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGluaXRpYWxpemVTdG9yYWdlKGluc3RhbmNlKSB7XG4gIHN0b3JlRGF0YShBcHBJbmZvLnN0b3JhZ2VQcmVmaXgsICdhcHAudmVyc2lvbicsIEFwcEluZm8udmVyc2lvbik7XG5cbiAgY29uc3Qgc3RvcmFnZU1ldGhvZCA9IHJldHJpZXZlRGF0YShcbiAgICBBcHBJbmZvLnN0b3JhZ2VQcmVmaXgsXG4gICAgJ3NldHRpbmcuc3RvcmFnZU1ldGhvZCcsXG4gICk7XG4gIGlmIChzdG9yYWdlTWV0aG9kICYmIHN0b3JhZ2VNZXRob2QgIT09ICdsb2NhbCcpIHJldHVybjtcblxuICAvLyBTdG9yZSBhbnkgc2V0dGluZ3MgdGhhdCBhcmUgbm90IGFscmVhZHkgaW4gbG9jYWwgc3RvcmFnZVxuICBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpLnNldHRpbmdzLmZvckVhY2goKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgY29uc3Qga2V5ID0gYHNldHRpbmcuJHtuYW1lfWA7XG4gICAgaWYgKCFyZXRyaWV2ZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCBrZXkpKSB7XG4gICAgICBzdG9yZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIExvYWQgYWxsIGl0ZW1zIGZyb20gbG9jYWwgc3RvcmFnZSBpbnRvIHRoZSBhcHAuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBsb2FkQWxsU3RvcmFnZURhdGEoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuXG4gIGZvckVhY2hEYXRhSXRlbShBcHBJbmZvLnN0b3JhZ2VQcmVmaXgsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgY29uc3QgZG90SW5kZXggPSBrZXkuaW5kZXhPZignLicpO1xuICAgIGNvbnN0IHR5cGUgPSBrZXkuc3Vic3RyaW5nKDAsIGRvdEluZGV4KTtcbiAgICBjb25zdCBpZCA9IGtleS5zdWJzdHJpbmcoZG90SW5kZXggKyAxKTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAndGFzayc6XG4gICAgICAgIHByaXZhdGVzLnRhc2tzLmFkZE9yVXBkYXRlVGFzayhpZCwgVGFzay5mcm9tSnNvbih2YWx1ZSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3Byb2plY3QnOlxuICAgICAgICBwcml2YXRlcy5wcm9qZWN0cy5hZGRPclVwZGF0ZVByb2plY3QoaWQsIFByb2plY3QuZnJvbUpzb24odmFsdWUpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZXR0aW5nJzpcbiAgICAgICAgcHJpdmF0ZXMuc2V0dGluZ3Muc2V0U2V0dGluZyhpZCwgdmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU3RvcmUgYWxsIHVzZXIgZGF0YSBpbiBsb2NhbCBzdG9yYWdlLlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gc3RvcmVBbGxEYXRhKGluc3RhbmNlKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBzdG9yZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCAnYXBwLnZlcnNpb24nLCBBcHBJbmZvLnZlcnNpb24pO1xuXG4gIGlmIChwcml2YXRlcy5zZXR0aW5ncy5zdG9yYWdlTWV0aG9kID09PSAnbG9jYWwnKSB7XG4gICAgcHJpdmF0ZXMudGFza3MuZm9yRWFjaCgoeyBpZCwgdGFzayB9KSA9PiB7XG4gICAgICBzdG9yZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCBgdGFzay4ke2lkfWAsIHRhc2spO1xuICAgIH0pO1xuXG4gICAgcHJpdmF0ZXMucHJvamVjdHMuZm9yRWFjaCgoeyBpZCwgcHJvamVjdCB9KSA9PiB7XG4gICAgICBzdG9yZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCBgcHJvamVjdC4ke2lkfWAsIHByb2plY3QpO1xuICAgIH0pO1xuXG4gICAgcHJpdmF0ZXMuc2V0dGluZ3MuZm9yRWFjaCgobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIHN0b3JlRGF0YShBcHBJbmZvLnN0b3JhZ2VQcmVmaXgsIGBzZXR0aW5nLiR7bmFtZX1gLCB2YWx1ZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc3RvcmVEYXRhKEFwcEluZm8uc3RvcmFnZVByZWZpeCwgJ3NldHRpbmcuc3RvcmFnZU1ldGhvZCcsICdub25lJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBVcGRhdGUgbG9jYWwgc3RvcmFnZSBhZnRlciBkYXRhIGhhcyBiZWVuIGNoYW5nZWQuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgZGF0YSB0aGF0IHdhcyBjaGFuZ2VkOiAnc2V0dGluZycsICd0YXNrJyxcbiAqICAgb3IgJ3Byb2plY3QnLlxuICogQHBhcmFtIHtPYmplY3R9IGV2ZW50RGF0YSBUaGUgZXZlbnQgb2JqZWN0IHNwZWNpZnlpbmcgdGhlIGRhdGEgdGhhdCB3YXNcbiAqICAgY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlU3RvcmFnZShpbnN0YW5jZSwgdHlwZSwgZXZlbnREYXRhKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICAvLyBJZiBzdG9yYWdlIG1ldGhvZCBpcyBjaGFuZ2luZywgd2UgbmVlZCB0byBkZWxldGUgb3IgcmVzdG9yZSBldmVyeXRoaW5nXG4gIGlmICh0eXBlID09PSAnc2V0dGluZycgJiYgZXZlbnREYXRhLm5hbWUgPT09ICdzdG9yYWdlTWV0aG9kJykge1xuICAgIGlmIChldmVudERhdGEudmFsdWUgIT09ICdsb2NhbCcpIGNsZWFyRGF0YShBcHBJbmZvLnN0b3JhZ2VQcmVmaXgpO1xuICAgIHN0b3JlQWxsRGF0YShpbnN0YW5jZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHByaXZhdGVzLnNldHRpbmdzLnN0b3JhZ2VNZXRob2QgIT09ICdsb2NhbCcpIHJldHVybjtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd0YXNrJzoge1xuICAgICAgY29uc3QgeyB0eXBlOiBldmVudFR5cGUsIGlkLCB0YXNrIH0gPSBldmVudERhdGE7XG4gICAgICBjb25zdCBrZXkgPSBgdGFzay4ke2lkfWA7XG4gICAgICBzd2l0Y2ggKGV2ZW50VHlwZSkge1xuICAgICAgICBjYXNlICdhZGQtdGFzayc6XG4gICAgICAgIGNhc2UgJ3VwZGF0ZS10YXNrJzpcbiAgICAgICAgICBzdG9yZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCBrZXksIHRhc2spO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkZWxldGUtdGFzayc6XG4gICAgICAgICAgcmVtb3ZlRGF0YShBcHBJbmZvLnN0b3JhZ2VQcmVmaXgsIGtleSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSAncHJvamVjdCc6IHtcbiAgICAgIGNvbnN0IHsgdHlwZTogZXZlbnRUeXBlLCBpZCwgcHJvamVjdCB9ID0gZXZlbnREYXRhO1xuICAgICAgY29uc3Qga2V5ID0gYHByb2plY3QuJHtpZH1gO1xuICAgICAgc3dpdGNoIChldmVudFR5cGUpIHtcbiAgICAgICAgY2FzZSAnYWRkLXByb2plY3QnOlxuICAgICAgICBjYXNlICd1cGRhdGUtcHJvamVjdCc6XG4gICAgICAgICAgc3RvcmVEYXRhKEFwcEluZm8uc3RvcmFnZVByZWZpeCwga2V5LCBwcm9qZWN0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGVsZXRlLXByb2plY3QnOlxuICAgICAgICAgIHJlbW92ZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCBrZXkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgJ3NldHRpbmcnOiB7XG4gICAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBldmVudERhdGE7XG4gICAgICBzdG9yZURhdGEoQXBwSW5mby5zdG9yYWdlUHJlZml4LCBgc2V0dGluZy4ke25hbWV9YCwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSB0aGUgYXBwJ3MgdGFzayBmaWx0ZXIgbWVudS5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZXMgb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVGaWx0ZXJNZW51KGluc3RhbmNlKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBjb25zdCBmaWx0ZXJHcm91cHMgPSBbXG4gICAgeyBpZDogJ2RlZmF1bHQnLCBsYWJlbDogbnVsbCB9LFxuICAgIHsgaWQ6ICdkYXRlcycsIGxhYmVsOiAnRGF0ZXMnIH0sXG4gICAgeyBpZDogJ3Byb2plY3RzJywgbGFiZWw6ICdQcm9qZWN0cycgfSxcbiAgICB7IGlkOiAncHJpb3JpdGllcycsIGxhYmVsOiAnUHJpb3JpdGllcycgfSxcbiAgXTtcblxuICBjb25zdCBmaWx0ZXJNZW51ID0gbmV3IEZpbHRlck1lbnUocHJpdmF0ZXMuZWxlbWVudHMuc2lkZVBhbmVsLCBmaWx0ZXJHcm91cHMpO1xuXG4gIGNvbnN0IGZpbHRlcnMgPSBbXG4gICAgeyBncm91cElkOiAnZGVmYXVsdCcsIGZpbHRlcklkOiAnYWxsJywgbGFiZWw6ICdBbGwgVGFza3MnIH0sXG4gICAgeyBncm91cElkOiAnZGF0ZXMnLCBmaWx0ZXJJZDogJ3RvZGF5JywgbGFiZWw6ICdUb2RheScgfSxcbiAgICB7IGdyb3VwSWQ6ICdkYXRlcycsIGZpbHRlcklkOiAnd2VlaycsIGxhYmVsOiAnVGhpcyBXZWVrJyB9LFxuICAgIHsgZ3JvdXBJZDogJ2RhdGVzJywgZmlsdGVySWQ6ICdtb250aCcsIGxhYmVsOiAnVGhpcyBNb250aCcgfSxcbiAgICB7IGdyb3VwSWQ6ICdkYXRlcycsIGZpbHRlcklkOiAncGFzdC1kdWUnLCBsYWJlbDogJ1Bhc3QgRHVlJyB9LFxuICAgIHsgZ3JvdXBJZDogJ3ByaW9yaXRpZXMnLCBmaWx0ZXJJZDogJ3ZlcnktaGlnaCcsIGxhYmVsOiAnVmVyeSBIaWdoJyB9LFxuICAgIHsgZ3JvdXBJZDogJ3ByaW9yaXRpZXMnLCBmaWx0ZXJJZDogJ2hpZ2gnLCBsYWJlbDogJ0hpZ2gnIH0sXG4gICAgeyBncm91cElkOiAncHJpb3JpdGllcycsIGZpbHRlcklkOiAnbWVkaXVtJywgbGFiZWw6ICdNZWRpdW0nIH0sXG4gICAgeyBncm91cElkOiAncHJpb3JpdGllcycsIGZpbHRlcklkOiAnbG93JywgbGFiZWw6ICdMb3cnIH0sXG4gICAgeyBncm91cElkOiAncHJpb3JpdGllcycsIGZpbHRlcklkOiAndmVyeS1sb3cnLCBsYWJlbDogJ1ZlcnkgTG93JyB9LFxuICBdO1xuXG4gIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgZmlsdGVyTWVudS5hZGRGaWx0ZXIoZmlsdGVyLmdyb3VwSWQsIGZpbHRlci5maWx0ZXJJZCwgZmlsdGVyLmxhYmVsKTtcbiAgfSk7XG5cbiAgZmlsdGVyTWVudS5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3QtZmlsdGVyJywgKGUpID0+IHtcbiAgICBoYW5kbGVGaWx0ZXJDaGFuZ2UoaW5zdGFuY2UsIGUpO1xuICB9KTtcbiAgZmlsdGVyTWVudS5hZGRHcm91cEljb25CdXR0b24oJ3Byb2plY3RzJywgQWRkSWNvbiwge1xuICAgIGFsdFRleHQ6ICdBZGQgcHJvamVjdCcsXG4gICAgd2lkdGg6IElDT05fV0lEVEgsXG4gICAgaGVpZ2h0OiBJQ09OX0hFSUdIVCxcbiAgICBjYWxsYmFjazogKCkgPT4gc2hvd0FkZFByb2plY3RNb2RhbChpbnN0YW5jZSksXG4gIH0pO1xuXG4gIHByaXZhdGVzLmZpbHRlck1lbnUgPSBmaWx0ZXJNZW51O1xuICB1cGRhdGVQcm9qZWN0RmlsdGVycyhpbnN0YW5jZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBhcHAncyBoZWFkZXIuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IFRoZSBwYXJlbnQgZWxlbWVudCB1bmRlciB3aGljaCB0aGUgaGVhZGVyXG4gKiAgIHNob3VsZCBiZSBpbnNlcnRlZC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSGVhZGVyKGluc3RhbmNlLCBwYXJlbnQpIHtcbiAgY29uc3QgeyBlbGVtZW50cyB9ID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoZWFkZXInKTtcbiAgaGVhZGVyLmlkID0gJ2hlYWRlcic7XG5cbiAgY29uc3QgbWVudUJ1dHRvbiA9IGNyZWF0ZUltYWdlQnV0dG9uKE1lbnVJY29uLCB7XG4gICAgYWx0VGV4dDogJ1RvZ2dsZSBzaWRlIHBhbmVsJyxcbiAgICB3aWR0aDogSUNPTl9XSURUSCxcbiAgICBoZWlnaHQ6IElDT05fSEVJR0hULFxuICB9KTtcbiAgZWxlbWVudHMubWVudUJ1dHRvbiA9IG1lbnVCdXR0b247XG5cbiAgY29uc3QgdGl0bGVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdGl0bGVDb250YWluZXIuY2xhc3NMaXN0LmFkZCgndGl0bGUtY29udGFpbmVyJyk7XG4gIHRpdGxlQ29udGFpbmVyLmFwcGVuZENoaWxkKG1lbnVCdXR0b24pO1xuICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgdGl0bGUuY2xhc3NMaXN0LmFkZCgndGl0bGUnKTtcbiAgdGl0bGUudGV4dENvbnRlbnQgPSBBcHBJbmZvLm5hbWU7XG4gIHRpdGxlQ29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgaGVhZGVyLmFwcGVuZENoaWxkKHRpdGxlQ29udGFpbmVyKTtcblxuICBjb25zdCBhcHBPcHRpb25zQnV0dG9uID0gY3JlYXRlSW1hZ2VCdXR0b24oQXBwT3B0aW9uc0ljb24sIHtcbiAgICBhbHRUZXh0OiAnTW9yZSBvcHRpb25zJyxcbiAgICB3aWR0aDogSUNPTl9XSURUSCxcbiAgICBoZWlnaHQ6IElDT05fSEVJR0hULFxuICB9KTtcbiAgZWxlbWVudHMuYXBwT3B0aW9uc0J1dHRvbiA9IGFwcE9wdGlvbnNCdXR0b247XG5cbiAgY29uc3QgdG9vbENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICB0b29sQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3Rvb2xzJyk7XG4gIHRvb2xDb250YWluZXIuYXBwZW5kQ2hpbGQoYXBwT3B0aW9uc0J1dHRvbik7XG4gIGhlYWRlci5hcHBlbmRDaGlsZCh0b29sQ29udGFpbmVyKTtcblxuICBwYXJlbnQuYXBwZW5kQ2hpbGQoaGVhZGVyKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgdGhlIGFwcCdzIHNpZGUgcGFuZWwuXG4gKiBAcGFyYW0ge21vZHVsZTphcHB+QXBwfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG8gYXBwbHkgdGhlXG4gKiAgIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IFRoZSBwYXJlbnQgZWxlbWVudCB1bmRlciB3aGljaCB0aGUgc2lkZSBwYW5lbFxuICogICBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNpZGVQYW5lbChpbnN0YW5jZSwgcGFyZW50KSB7XG4gIGNvbnN0IHsgZWxlbWVudHMgfSA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG5cbiAgZWxlbWVudHMuc2lkZVBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXNpZGUnKTtcbiAgZWxlbWVudHMuc2lkZVBhbmVsLmlkID0gJ3NpZGUtcGFuZWwnO1xuICBjcmVhdGVGaWx0ZXJNZW51KGluc3RhbmNlKTtcbiAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnRzLnNpZGVQYW5lbCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIHRoZSByZXNpemluZyBiYXIgZm9yIHRoZSBzaWRlIHBhbmVsLlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudCBUaGUgcGFyZW50IGVsZW1lbnQgdW5kZXIgd2hpY2ggdGhlIHJlc2l6ZXIgaXNcbiAqICAgdG8gYmUgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJlc2l6ZXIoaW5zdGFuY2UsIHBhcmVudCkge1xuICBjb25zdCB7IGVsZW1lbnRzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuXG4gIGVsZW1lbnRzLnJlc2l6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZWxlbWVudHMucmVzaXplci5jbGFzc0xpc3QuYWRkKCdyZXNpemVyJyk7XG5cbiAgY29uc3QgaGFuZGxlciA9IChlKSA9PiB7XG4gICAgY29uc3Qgc2l6ZSA9IGAke2UueH1weGA7XG4gICAgZWxlbWVudHMuc2lkZVBhbmVsLnN0eWxlLndpZHRoID0gc2l6ZTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH07XG5cbiAgZWxlbWVudHMucmVzaXplci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoZSkgPT4ge1xuICAgIC8vIENoZWNrIGZvciBsZWZ0LWNsaWNrXG4gICAgaWYgKGUuYnV0dG9uID09PSAwKSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBoYW5kbGVyKTtcbiAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9KTtcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGUpID0+IHtcbiAgICBpZiAoZS5idXR0b24gPT09IDApIHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGhhbmRsZXIpO1xuICAgICAgZWxlbWVudHMucmVzaXplci5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuICAgIH1cbiAgfSk7XG5cbiAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnRzLnJlc2l6ZXIpO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0aGUgYXBwJ3MgbWFpbiBwYW5lbC5cbiAqIEBwYXJhbSB7bW9kdWxlOmFwcH5BcHB9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0byBhcHBseSB0aGVcbiAqICAgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgVGhlIHBhcmVudCBlbGVtZW50IHVuZGVyIHdoaWNoIHRoZSBtYWluIHBhbmVsXG4gKiAgIGlzIHRvIGJlIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNYWluUGFuZWwoaW5zdGFuY2UsIHBhcmVudCkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG5cbiAgY29uc3QgbWFpblBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1haW5QYW5lbC5pZCA9ICdtYWluLXBhbmVsJztcbiAgcHJpdmF0ZXMuZWxlbWVudHMubWFpblBhbmVsID0gbWFpblBhbmVsO1xuXG4gIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBoZWFkZXIuaWQgPSAnbWFpbi1wYW5lbC1oZWFkZXInO1xuICBjb25zdCBoZWFkaW5nQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGhlYWRpbmdDb250YWluZXIuaWQgPSAnbWFpbi1wYW5lbC1oZWFkaW5nLWNvbnRhaW5lcic7XG4gIGhlYWRlci5hcHBlbmRDaGlsZChoZWFkaW5nQ29udGFpbmVyKTtcbiAgY29uc3QgaGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gyJyk7XG4gIGhlYWRpbmcuaWQgPSAnbWFpbi1wYW5lbC1oZWFkaW5nJztcbiAgaGVhZGluZ0NvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkaW5nKTtcbiAgY29uc3Qgc3ViaGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7XG4gIHN1YmhlYWRpbmcuaWQgPSAnbWFpbi1wYW5lbC1zdWJoZWFkaW5nJztcbiAgaGVhZGluZ0NvbnRhaW5lci5hcHBlbmRDaGlsZChzdWJoZWFkaW5nKTtcblxuICBjb25zdCBtZW51ID0gbmV3IFBvcHVwTWVudSh7IGNsb3NlSWZTY3JvbGxlZDogbWFpblBhbmVsIH0pO1xuICBwcml2YXRlcy5tYWluUGFuZWxNZW51ID0gbWVudTtcblxuICBjb25zdCBhZGRUYXNrQnV0dG9uID0gY3JlYXRlSW1hZ2VCdXR0b24oQWRkSWNvbiwge1xuICAgIGFsdFRleHQ6ICdBZGQgdGFzaycsXG4gICAgd2lkdGg6IElDT05fV0lEVEgsXG4gICAgaGVpZ2h0OiBJQ09OX0hFSUdIVCxcbiAgfSk7XG4gIHByaXZhdGVzLmVsZW1lbnRzLmFkZFRhc2tCdXR0b24gPSBhZGRUYXNrQnV0dG9uO1xuXG4gIGNvbnN0IG1lbnVCdXR0b24gPSBjcmVhdGVJbWFnZUJ1dHRvbihNb3JlSWNvbiwge1xuICAgIGFsdFRleHQ6ICdNb3JlIGFjdGlvbnMnLFxuICAgIHdpZHRoOiBJQ09OX1dJRFRILFxuICAgIGhlaWdodDogSUNPTl9IRUlHSFQsXG4gIH0pO1xuICBwcml2YXRlcy5lbGVtZW50cy5tYWluUGFuZWxNZW51QnV0dG9uID0gbWVudUJ1dHRvbjtcblxuICBjb25zdCBpY29uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGljb25Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnaWNvbi1jb250YWluZXInKTtcbiAgaWNvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRUYXNrQnV0dG9uKTtcbiAgaWNvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChtZW51QnV0dG9uKTtcbiAgaGVhZGVyLmFwcGVuZENoaWxkKGljb25Db250YWluZXIpO1xuXG4gIG1haW5QYW5lbC5hcHBlbmRDaGlsZChoZWFkZXIpO1xuXG4gIGNvbnN0IHRhc2tEaXNwbGF5T3B0aW9ucyA9IHtcbiAgICB0YXNrQ2FsbGJhY2s6ICh0eXBlLCBpZCwgdGFzaykgPT4ge1xuICAgICAgaGFuZGxlVGFza1VwZGF0ZShpbnN0YW5jZSwgdHlwZSwgaWQsIHRhc2spO1xuICAgIH0sXG4gIH07XG4gIHByaXZhdGVzLnRhc2tEaXNwbGF5ID0gbmV3IFRhc2tEaXNwbGF5KFxuICAgIG1haW5QYW5lbCxcbiAgICBwcml2YXRlcy50YXNrcyxcbiAgICBwcml2YXRlcy5wcm9qZWN0cyxcbiAgICB0YXNrRGlzcGxheU9wdGlvbnMsXG4gICk7XG5cbiAgcGFyZW50LmFwcGVuZENoaWxkKG1haW5QYW5lbCk7XG59XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBhcHAncyBmb290ZXIuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgVGhlIHBhcmVudCBlbGVtZW50IHVuZGVyIHdoaWNoIHRoZSBmb290ZXIgaXNcbiAqICAgdG8gYmUgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZvb3RlcihwYXJlbnQpIHtcbiAgY29uc3QgZm9vdGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9vdGVyJyk7XG4gIGZvb3Rlci5pZCA9ICdmb290ZXInO1xuXG4gIGNvbnN0IGNvcHlyaWdodCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb3B5cmlnaHQuY2xhc3NMaXN0LmFkZCgnY29weXJpZ2h0Jyk7XG4gIGNvcHlyaWdodC5pbm5lckhUTUwgPSBgQ29weXJpZ2h0ICZjb3B5OyAke0FwcEluZm8uY29weXJpZ2h0WWVhcnN9IGBcbiAgICArIGA8YSBocmVmPVwiJHtBcHBJbmZvLmF1dGhvcldlYnNpdGV9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+YFxuICAgICsgYCR7QXBwSW5mby5hdXRob3J9PC9hPmA7XG4gIGZvb3Rlci5hcHBlbmRDaGlsZChjb3B5cmlnaHQpO1xuXG4gIHBhcmVudC5hcHBlbmRDaGlsZChmb290ZXIpO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0aGUgRE9NIGVsZW1lbnRzIGZvciB0aGUgcGFnZSBjb250ZW50LlxuICogQHBhcmFtIHttb2R1bGU6YXBwfkFwcH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvIGFwcGx5IHRoZVxuICogICBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudCBUaGUgY29udGFpbmVyIGVsZW1lbnQgdW5kZXIgd2hpY2ggdGhlIHBhZ2VcbiAqICAgZWxlbWVudHMgc2hvdWxkIGJlIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVQYWdlRWxlbWVudHMoaW5zdGFuY2UsIHBhcmVudCkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG5cbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5pZCA9ICdhcHAnO1xuICBwcml2YXRlcy5lbGVtZW50cy5hcHBDb250YWluZXIgPSBjb250YWluZXI7XG5cbiAgY3JlYXRlSGVhZGVyKGluc3RhbmNlLCBjb250YWluZXIpO1xuXG4gIGNvbnN0IG1pZGRsZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBtaWRkbGVDb250YWluZXIuaWQgPSAnbWlkZGxlLWNvbnRhaW5lcic7XG4gIGNyZWF0ZVNpZGVQYW5lbChpbnN0YW5jZSwgbWlkZGxlQ29udGFpbmVyKTtcbiAgY3JlYXRlUmVzaXplcihpbnN0YW5jZSwgbWlkZGxlQ29udGFpbmVyKTtcbiAgY3JlYXRlTWFpblBhbmVsKGluc3RhbmNlLCBtaWRkbGVDb250YWluZXIpO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobWlkZGxlQ29udGFpbmVyKTtcblxuICBjcmVhdGVGb290ZXIoY29udGFpbmVyKTtcblxuICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICBwcml2YXRlcy5tb2RhbFN0YWNrID0gbmV3IE1vZGFsU3RhY2socGFyZW50LCBjb250YWluZXIpO1xufVxuXG4vKipcbiAqIENsYXNzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgRE9NIGVsZW1lbnRzIGZvciB0aGUgYXBwIGFuZCBydW5uaW5nIHRoZVxuICogZXZlbnQtZHJpdmVuIGxvZ2ljLlxuICovXG5jbGFzcyBBcHAge1xuICAvKipcbiAgICogQW4gb2JqZWN0IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN0YXR1cyBvZiBhIGRhdGEgaW1wb3J0LCBpbmNsdWRpbmdcbiAgICogd2hldGhlciBvciBub3QgdGhlIGltcG9ydCB3YXMgc3VjY2Vzc2Z1bCBhbmQgYW55IGVycm9ycyB0aGF0IHdlcmVcbiAgICogZW5jb3VudGVyZWQuXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTphcHB+QXBwfmltcG9ydFN0YXR1c1xuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHN1Y2Nlc3NmdWwgV2lsbCBiZSB0cnVlIGlmIGRhdGEgd2FzIGltcG9ydGVkLCBvciBmYWxzZVxuICAgKiAgIGlmIGRhdGEgY291bGQgbm90IGJlIGltcG9ydGVkIGR1ZSB0byBhIGZhdGFsIGVycm9yLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gZm9ybWF0IFRoZSBmb3JtYXQgb2YgdGhlIGRhdGEgc3RyaW5nIHRoYXQgd2FzIGltcG9ydGVkLlxuICAgKiAgIFdpbGwgYmUgJ2pzb24nLCAnY3N2Jywgb3IgJ3Vua25vd24nLiBBIHZhbHVlIG9mICd1bmtub3duJyBpbmRpY2F0ZXMgdGhhdFxuICAgKiAgIHRoZSBmb3JtYXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgZGV0ZXJtaW5lZC5cbiAgICogQHByb3BlcnR5IHtPYmplY3R9IHRhc2tzIEFuIG9iamVjdCBob2xkaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBudW1iZXIgb2ZcbiAgICogICB0YXNrcyB0aGF0IHdlcmUgaW1wb3J0ZWQuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0YXNrcy5hZGRlZCBUaGUgbnVtYmVyIG9mIG5ldyB0YXNrcyB0aGF0IHdlcmUgYWRkZWQgdG9cbiAgICogICB0aGUgdGFzayBsaXN0LlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gdGFza3MudXBkYXRlZCBUaGUgbnVtYmVyIG9mIGV4aXN0aW5nIHRhc2tzIGluIHRoZSB0YXNrXG4gICAqICAgbGlzdCB0aGF0IHdlcmUgdXBkYXRlZC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRhc2tzLmZhaWxlZCBUaGUgbnVtYmVyIG9mIHRhc2tzIHRoYXQgZmFpbGVkIHRvIGltcG9ydC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRhc2tzLnRvdGFsIFRoZSB0b3RhbCBudW1iZXIgb2YgdGFza3MgdGhhdCB3ZXJlXG4gICAqICAgcHJvY2Vzc2VkLlxuICAgKiBAcHJvcGVydHkge09iamVjdH0gcHJvamVjdHMgQW4gb2JqZWN0IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG51bWJlclxuICAgKiAgIG9mIHByb2plY3RzIHRoYXQgd2VyZSBpbXBvcnRlZC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHByb2plY3RzLmFkZGVkIFRoZSBudW1iZXIgb2YgbmV3IHByb2plY3RzIHRoYXQgd2VyZVxuICAgKiAgIGFkZGVkIHRvIHRoZSBwcm9qZWN0IGxpc3QuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwcm9qZWN0cy51cGRhdGVkIFRoZSBudW1iZXIgb2YgZXhpc3RpbmcgcHJvamVjdHMgaW4gdGhlXG4gICAqICAgcHJvamVjdCBsaXN0IHRoYXQgd2VyZSB1cGRhdGVkLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gcHJvamVjdHMuZmFpbGVkIFRoZSBudW1iZXIgb2YgcHJvamVjdHMgdGhhdCBmYWlsZWQgdG9cbiAgICogICBpbXBvcnQuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwcm9qZWN0cy50b3RhbCBUaGUgdG90YWwgbnVtYmVyIG9mIHByb2plY3RzIHRoYXQgd2VyZVxuICAgKiAgIHByb2Nlc3NlZC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmdbXX0gZXJyb3JzIEFuIGFycmF5IG9mIGVycm9yIG1lc3NhZ2VzIGRlc2NyaWJpbmcgYW55XG4gICAqICAgZXJyb3JzIHRoYXQgb2NjdXJyZWQgZHVyaW5nIHRoZSBpbXBvcnQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBcHBlbmQgdGhlIERPTSBlbGVtZW50cyBmb3IgdGhlIGFwcCB0byB0aGUgZ2l2ZW4gcGFyZW50IG5vZGUuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudCBUaGUgRE9NIG5vZGUgd2hlcmUgdGhlIGFwcCBlbGVtZW50cyBzaG91bGQgYmVcbiAgICogICBhcHBlbmRlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmVudCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgdGFza3M6IG5ldyBUYXNrTGlzdCgpLFxuICAgICAgcHJvamVjdHM6IG5ldyBQcm9qZWN0TGlzdCgpLFxuICAgICAgbW9kYWxTdGFjazogbnVsbCxcbiAgICAgIGZpbHRlck1lbnU6IG51bGwsXG4gICAgICBjdXJyZW50RmlsdGVyOiB7IGdyb3VwOiBudWxsLCBmaWx0ZXI6IG51bGwgfSxcbiAgICAgIHRhc2tEaXNwbGF5OiBudWxsLFxuICAgICAgc2V0dGluZ3M6IG5ldyBTZXR0aW5ncygpLFxuICAgICAgbWFpblBhbmVsTWVudTogbnVsbCxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIGFwcENvbnRhaW5lcjogbnVsbCxcbiAgICAgICAgc2lkZVBhbmVsOiBudWxsLFxuICAgICAgICByZXNpemVyOiBudWxsLFxuICAgICAgICBtYWluUGFuZWw6IG51bGwsXG4gICAgICAgIG1lbnVCdXR0b246IG51bGwsXG4gICAgICAgIGFwcE9wdGlvbnNCdXR0b246IG51bGwsXG4gICAgICAgIGFkZFRhc2tCdXR0b246IG51bGwsXG4gICAgICAgIG1haW5QYW5lbE1lbnVCdXR0b246IG51bGwsXG4gICAgICB9LFxuICAgICAgbmFycm93U2NyZWVuOiBmYWxzZSxcbiAgICB9O1xuICAgIHByaXZhdGVNZW1iZXJzLnNldCh0aGlzLCBwcml2YXRlcyk7XG5cbiAgICBjcmVhdGVQYWdlRWxlbWVudHModGhpcywgcGFyZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gdGhlIGFwcC4gVGhpcyBtZXRob2Qgc2V0cyB1cCB0aGUgZXZlbnQgaGFuZGxlcnMgYW5kIHBlcmZvcm1zXG4gICAqIGhpZ2gtbGV2ZWwgbG9naWMuIFRoaXMgc2hvdWxkIG5vdCBiZSBjYWxsZWQgdW50aWwgdGhlIHBhZ2UgZWxlbWVudHMgaGF2ZVxuICAgKiBiZWVuIGFkZGVkIHRvIHRoZSBET00uXG4gICAqL1xuICBydW4oKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xuICAgICAgY29uc3Qgd2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICBjb25zdCBuYXJyb3cgPSB3aWR0aCA8PSBOQVJST1dfTEFZT1VUX0NVVE9GRjtcblxuICAgICAgLy8gQWRqdXN0IHNpZGUgcGFuZWwgaWYgc2NyZWVuIGNoYW5nZXMgZnJvbSBuYXJyb3cgdG8gd2lkZSBvciB2aWNlIHZlcnNhXG4gICAgICBpZiAobmFycm93ICYmICFwcml2YXRlcy5uYXJyb3dTY3JlZW4pIHtcbiAgICAgICAgY2xvc2VTaWRlUGFuZWwodGhpcyk7XG4gICAgICB9IGVsc2UgaWYgKCFuYXJyb3cgJiYgcHJpdmF0ZXMubmFycm93U2NyZWVuKSB7XG4gICAgICAgIG9wZW5TaWRlUGFuZWwodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHByaXZhdGVzLm5hcnJvd1NjcmVlbiA9IG5hcnJvdztcbiAgICB9KTtcblxuICAgIHByaXZhdGVzLmZpbHRlck1lbnUuZXhwYW5kR3JvdXAoJ2RhdGVzJyk7XG4gICAgcHJpdmF0ZXMuZmlsdGVyTWVudS5leHBhbmRHcm91cCgncHJvamVjdHMnKTtcbiAgICBwcml2YXRlcy5maWx0ZXJNZW51LnNlbGVjdEZpbHRlcignZGF0ZXMnLCAndG9kYXknKTtcblxuICAgIHByaXZhdGVzLmVsZW1lbnRzLm1lbnVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0b2dnbGVTaWRlUGFuZWwodGhpcyk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB7IGFwcE9wdGlvbnNCdXR0b24gfSA9IHByaXZhdGVzLmVsZW1lbnRzO1xuICAgIGNvbnN0IGljb25PcHRpb25zID0gKHNvdXJjZSkgPT4gKHtcbiAgICAgIHNvdXJjZSxcbiAgICAgIHdpZHRoOiBJQ09OX1dJRFRILFxuICAgICAgaGVpZ2h0OiBJQ09OX0hFSUdIVCxcbiAgICB9KTtcbiAgICBjb25zdCBhcHBPcHRpb25zTWVudSA9IG5ldyBQb3B1cE1lbnUoe1xuICAgICAgbWVudUl0ZW1zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogJ1NldHRpbmdzLi4uJyxcbiAgICAgICAgICBpZDogJ3NldHRpbmdzJyxcbiAgICAgICAgICBpY29uOiBpY29uT3B0aW9ucyhTZXR0aW5nc0ljb24pLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6ICdEYXRhIE1hbmFnZW1lbnQuLi4nLFxuICAgICAgICAgIGlkOiAnZGF0YScsXG4gICAgICAgICAgaWNvbjogaWNvbk9wdGlvbnMoU2F2ZUljb24pLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6ICdBYm91dC4uLicsXG4gICAgICAgICAgaWQ6ICdhYm91dCcsXG4gICAgICAgICAgaWNvbjogaWNvbk9wdGlvbnMoSW5mb0ljb24pLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KTtcbiAgICBhcHBPcHRpb25zQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgYXBwT3B0aW9uc01lbnUub3BlbihcbiAgICAgICAgKGl0ZW1JZCkgPT4gaGFuZGxlQXBwTWVudVNlbGVjdGlvbih0aGlzLCBpdGVtSWQpLFxuICAgICAgICB7IHJlZmVyZW5jZUVsZW1lbnQ6IGFwcE9wdGlvbnNCdXR0b24gfSxcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBwcml2YXRlcy5lbGVtZW50cy5hZGRUYXNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgaGFuZGxlTWFpblBhbmVsTWVudVNlbGVjdGlvbih0aGlzLCAnYWRkLXRhc2snKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHsgbWFpblBhbmVsTWVudUJ1dHRvbiB9ID0gcHJpdmF0ZXMuZWxlbWVudHM7XG4gICAgbWFpblBhbmVsTWVudUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHByaXZhdGVzLm1haW5QYW5lbE1lbnUub3BlbihcbiAgICAgICAgKGl0ZW0pID0+IGhhbmRsZU1haW5QYW5lbE1lbnVTZWxlY3Rpb24odGhpcywgaXRlbSksXG4gICAgICAgIHsgcmVmZXJlbmNlRWxlbWVudDogbWFpblBhbmVsTWVudUJ1dHRvbiB9LFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGluaXRpYWxpemVTdG9yYWdlKHRoaXMpO1xuICAgIGxvYWRBbGxTdG9yYWdlRGF0YSh0aGlzKTtcblxuICAgIGNvbnN0IHRhc2tDYWxsYmFjayA9IChldmVudCkgPT4gdXBkYXRlU3RvcmFnZSh0aGlzLCAndGFzaycsIGV2ZW50KTtcbiAgICBwcml2YXRlcy50YXNrcy5hZGRFdmVudExpc3RlbmVyKCdhZGQtdGFzaycsIHRhc2tDYWxsYmFjayk7XG4gICAgcHJpdmF0ZXMudGFza3MuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlLXRhc2snLCB0YXNrQ2FsbGJhY2spO1xuICAgIHByaXZhdGVzLnRhc2tzLmFkZEV2ZW50TGlzdGVuZXIoJ2RlbGV0ZS10YXNrJywgdGFza0NhbGxiYWNrKTtcblxuICAgIGNvbnN0IHByb2pDYWxsYmFjayA9IChldmVudCkgPT4gdXBkYXRlU3RvcmFnZSh0aGlzLCAncHJvamVjdCcsIGV2ZW50KTtcbiAgICBwcml2YXRlcy5wcm9qZWN0cy5hZGRFdmVudExpc3RlbmVyKCdhZGQtcHJvamVjdCcsIHByb2pDYWxsYmFjayk7XG4gICAgcHJpdmF0ZXMucHJvamVjdHMuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlLXByb2plY3QnLCBwcm9qQ2FsbGJhY2spO1xuICAgIHByaXZhdGVzLnByb2plY3RzLmFkZEV2ZW50TGlzdGVuZXIoJ2RlbGV0ZS1wcm9qZWN0JywgcHJvakNhbGxiYWNrKTtcblxuICAgIGNvbnN0IHNldHRpbmdzQ2FsbGJhY2sgPSAoZXZlbnQpID0+IHVwZGF0ZVN0b3JhZ2UodGhpcywgJ3NldHRpbmcnLCBldmVudCk7XG4gICAgcHJpdmF0ZXMuc2V0dGluZ3MuYWRkRXZlbnRMaXN0ZW5lcigndXBkYXRlLXNldHRpbmcnLCBzZXR0aW5nc0NhbGxiYWNrKTtcblxuICAgIC8qIEFkZCByYW5kb20gdGFzayBhbmQgcHJvamVjdCBkYXRhIGZvciB0ZXN0aW5nICovXG4gICAgLy8gVE9ETzogcmVtb3ZlXG4gICAgYWRkUmFuZG9tRGF0YSh0aGlzLCAwLCAwKTtcblxuICAgIHVwZGF0ZVByb2plY3RGaWx0ZXJzKHRoaXMpO1xuICAgIHByaXZhdGVzLmZpbHRlck1lbnUuc2VsZWN0RmlsdGVyKCdkZWZhdWx0JywgJ2FsbCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgZGF0YSB0byBhbiBvYmplY3Qgc3VpdGFibGUgZm9yIHNlcmlhbGl6YXRpb24uXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCByZXByZXNlbnRpbmcgc2VyaWFsaXphYmxlIGRhdGEgZm9yIHRoZSBjbGFzcy5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcblxuICAgIHJldHVybiB7XG4gICAgICBhcHA6IHtcbiAgICAgICAgbmFtZTogQXBwSW5mby5uYW1lLFxuICAgICAgICB2ZXJzaW9uOiBBcHBJbmZvLnZlcnNpb24sXG4gICAgICB9LFxuICAgICAgc2V0dGluZ3M6IHByaXZhdGVzLnNldHRpbmdzLFxuICAgICAgdGFza3M6IHByaXZhdGVzLnRhc2tzLFxuICAgICAgcHJvamVjdHM6IHByaXZhdGVzLnByb2plY3RzLFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiY29uc3QgQXBwSW5mbyA9IHtcbiAgbmFtZTogJ1Rhc2sgSXQgVXAnLFxuICB2ZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT04sXG4gIGF1dGhvcjogUEFDS0FHRV9BVVRIT1JfTkFNRSxcbiAgYXV0aG9yV2Vic2l0ZTogUEFDS0FHRV9BVVRIT1JfV0VCU0lURSxcbiAgY29weXJpZ2h0WWVhcnM6ICcyMDIxXFx1MjAxMzIwMjInLFxuICBsaWNlbnNlOiBQQUNLQUdFX0xJQ0VOU0UsXG4gIGhvbWVwYWdlOiBQQUNLQUdFX0hPTUVQQUdFLFxuICBzdG9yYWdlUHJlZml4OiBQQUNLQUdFX05BTUUsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcHBJbmZvO1xuIiwiLyoqXG4gKiBEZWZpbmVzIHRoZSBbQ29sbGFwc2libGVde0BsaW5rIG1vZHVsZTpjb2xsYXBzaWJsZX5Db2xsYXBzaWJsZX0gY2xhc3MuXG4gKiBAbW9kdWxlIGNvbGxhcHNpYmxlXG4gKi9cblxuY29uc3QgRk9DVVNBQkxFX1NFTEVDVE9SID0gW1xuICAnYVtocmVmXScsXG4gICdpbnB1dCcsXG4gICdzZWxlY3QnLFxuICAndGV4dGFyZWEnLFxuICAnYnV0dG9uJyxcbl0uam9pbignLCAnKTtcblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW0NvbGxhcHNpYmxlXXtAbGluayBtb2R1bGU6Y29sbGFwc2libGV+Q29sbGFwc2libGV9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmNvbGxhcHNpYmxlfkNvbGxhcHNpYmxlfnByaXZhdGVzXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250YWluZXIgVGhlIGNvbGxhcHNpYmxlIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250ZW50IFRoZSBpbm5lciBjb250YWluZXIgaG9sZGluZyB0aGUgY29sbGFwc2libGVcbiAqICAgY29udGVudHMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNvbGxhcHNlZCBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY29udGFpbmVyIGlzIGN1cnJlbnRseVxuICogICBjb2xsYXBzZWQgb3Igbm90LlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZSBkYXRhIGZvciB0aGVcbiAqIFtDb2xsYXBzaWJsZV17QGxpbmsgbW9kdWxlOmNvbGxhcHNpYmxlfkNvbGxhcHNpYmxlfSBjbGFzcy5cbiAqIEB0eXBlIHtXZWFrTWFwfVxuICogQHNlZSBtb2R1bGU6Y29sbGFwc2libGV+Q29sbGFwc2libGV+cHJpdmF0ZXNcbiAqL1xuY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEEgY29udGFpbmVyIG9uIHRoZSBwYWdlIHRoYXQgY2FuIGJlIGV4cGFuZGVkIG9yIGNvbGxhcHNlZC5cbiAqL1xuY2xhc3MgQ29sbGFwc2libGUge1xuICAvKipcbiAgICogQ3JlYXRlIGEgY29sbGFwc2libGUgcGFuZWwgYW5kIGFkZCBpdCB0byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgVGhlIHBhcmVudCBub2RlIHVuZGVyIHdoaWNoIHRoZSBjb2xsYXBzaWJsZSBpc1xuICAgKiAgIHRvIGJlIGluc2VydGVkLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbcmVmZXJlbmNlTm9kZT1udWxsXSBUaGUgY2hpbGQgbm9kZSBiZWZvcmUgd2hpY2ggdGhlXG4gICAqICAgY29sbGFwc2libGUgc2hvdWxkIGJlIGluc2VydGVkLiBJZiBub3QgZ2l2ZW4sIHRoZSBjb2xsYXBzaWJsZSB3aWxsIGJlXG4gICAqICAgYXBwZW5kZWQgYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50J3MgY2hpbGQgbm9kZXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gU3BlY2lmaWVzIGFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIG1vZGFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgY29sbGFwc2libGUgY29udGFpbmVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy5jbGFzc0xpc3RdIEFuIGFycmF5IG9mIGNsYXNzIG5hbWVzIHRvIGJlXG4gICAqICAgYXBwbGllZCB0byB0aGUgY29sbGFwc2libGUgY29udGFpbmVyLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbGxhcHNlZF0gU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHBhbmVsIHNob3VsZCBiZVxuICAgKiAgIGluaXRpYWxseSBjb2xsYXBzZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHJlZmVyZW5jZU5vZGUgPSBudWxsLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBpZiAob3B0aW9ucy5pZCkgY29udGFpbmVyLmlkID0gb3B0aW9ucy5pZDtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2libGUnKTtcbiAgICBpZiAob3B0aW9ucy5jbGFzc0xpc3QpIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKC4uLm9wdGlvbnMuY2xhc3NMaXN0KTtcblxuICAgIGNvbnN0IGlubmVyQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgaW5uZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnY29sbGFwc2libGUtY29udGVudCcpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbm5lckNvbnRhaW5lcik7XG4gICAgcGFyZW50Lmluc2VydEJlZm9yZShjb250YWluZXIsIHJlZmVyZW5jZU5vZGUpO1xuXG4gICAgY29uc3QgcHJpdmF0ZXMgPSB7XG4gICAgICBjb250YWluZXIsXG4gICAgICBjb250ZW50OiBpbm5lckNvbnRhaW5lcixcbiAgICAgIGNvbGxhcHNlZDogZmFsc2UsXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuXG4gICAgaWYgKCdjb2xsYXBzZWQnIGluIG9wdGlvbnMgJiYgb3B0aW9ucy5jb2xsYXBzZWQpIHRoaXMuY29sbGFwc2UoKTtcbiAgICBlbHNlIHRoaXMuZXhwYW5kKCk7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBjb250YWluZXIgaXMgY3VycmVudGx5IGNvbGxhcHNlZC5cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgY29sbGFwc2VkKCkge1xuICAgIHJldHVybiBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuY29sbGFwc2VkO1xuICB9XG5cbiAgc2V0IGNvbGxhcHNlZChjb2xsYXBzZWQpIHtcbiAgICBpZiAoY29sbGFwc2VkKSB0aGlzLmNvbGxhcHNlKCk7XG4gICAgZWxzZSB0aGlzLmV4cGFuZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBpbm5lciBjb250YWluZXIgZWxlbWVudCBob2xkaW5nIHRoZSBwYW5lbCdzIGNvbnRlbnQuXG4gICAqIEB0eXBlIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBjb250ZW50KCkge1xuICAgIHJldHVybiBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuY29udGVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBhbmQgdGhlIHBhbmVsLCBzbyB0aGF0IGl0cyBjb250ZW50cyBhcmUgdmlzaWJsZS5cbiAgICovXG4gIGV4cGFuZCgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBpZiAocHJpdmF0ZXMuY29sbGFwc2VkKSB7XG4gICAgICBwcml2YXRlcy5jb2xsYXBzZWQgPSBmYWxzZTtcbiAgICAgIHByaXZhdGVzLmNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdjb2xsYXBzZWQnKTtcbiAgICAgIHByaXZhdGVzLmNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG4gICAgICBwcml2YXRlcy5jb250YWluZXIucXVlcnlTZWxlY3RvckFsbChGT0NVU0FCTEVfU0VMRUNUT1IpLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbGxhcHNlIHRoZSBwYW5lbCwgc28gdGhhdCBpdHMgY29udGVudHMgYXJlIGhpZGRlbi5cbiAgICovXG4gIGNvbGxhcHNlKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIGlmICghcHJpdmF0ZXMuY29sbGFwc2VkKSB7XG4gICAgICBwcml2YXRlcy5jb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgcHJpdmF0ZXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NvbGxhcHNlZCcpO1xuICAgICAgcHJpdmF0ZXMuY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgcHJpdmF0ZXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoRk9DVVNBQkxFX1NFTEVDVE9SKS5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIGNvbGxhcHNlZCBzdGF0ZSBvZiB0aGUgcGFuZWwuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYW5lbCBpcyBpbiB0aGUgY29sbGFwc2VkIHN0YXRlIGFmdGVyIHRoZVxuICAgKiAgIHRvZ2dsZSwgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBpZiAocHJpdmF0ZXMuY29sbGFwc2VkKSB0aGlzLmV4cGFuZCgpO1xuICAgIGVsc2UgdGhpcy5jb2xsYXBzZSgpO1xuICAgIHJldHVybiBwcml2YXRlcy5jb2xsYXBzZWQ7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBjb2xsYXBzaWJsZSBjb250YWluZXIgdG8gYWNjb3VudCBmb3IgY2hhbmdlcyB0byBpdHMgY29udGVudC5cbiAgICogVGhpcyB3aWxsIHJlY2FsY3VsYXRlIHRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciBhbmQgc2hvdWxkIGJlIGNhbGxlZFxuICAgKiB3aGVuZXZlciB0aGUgcGFuZWwncyBjb250ZW50IGlzIGFsdGVyZWQuXG4gICAqL1xuICB1cGRhdGUoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29uc3QgaGVpZ2h0ID0gcHJpdmF0ZXMuY29sbGFwc2VkXG4gICAgICA/ICcwJyA6IGAke3ByaXZhdGVzLmNvbnRlbnQub2Zmc2V0SGVpZ2h0fXB4YDtcbiAgICBwcml2YXRlcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbGxhcHNpYmxlO1xuIiwiLyoqXG4gKiBEZWZpbmVzIHRoZSBbRGF0ZVBpY2tlcl17QGxpbmsgbW9kdWxlOmRhdGVQaWNrZXJ+RGF0ZVBpY2tlcn0gY2xhc3MuXG4gKiBAbW9kdWxlIGRhdGVQaWNrZXJcbiAqL1xuXG5pbXBvcnQge1xuICBhZGQsXG4gIGlzQmVmb3JlLFxuICBpc1NhbWVEYXksXG4gIGlzU2FtZU1vbnRoLFxuICBpc1RvZGF5LFxuICBzdGFydE9mTW9udGgsXG4gIHN0YXJ0T2ZXZWVrLFxufSBmcm9tICdkYXRlLWZucyc7XG5cbmltcG9ydCBMZWZ0QXJyb3dJY29uIGZyb20gJy4uL2ltYWdlcy9hcnJvdy1sZWZ0LnN2Zyc7XG5pbXBvcnQgUmlnaHRBcnJvd0ljb24gZnJvbSAnLi4vaW1hZ2VzL2Fycm93LXJpZ2h0LnN2Zyc7XG5pbXBvcnQgVG9kYXlJY29uIGZyb20gJy4uL2ltYWdlcy90b2RheS5zdmcnO1xuXG5pbXBvcnQgeyBjcmVhdGVGb3JtQ29udHJvbCwgY3JlYXRlSW1hZ2VCdXR0b24gfSBmcm9tICcuL3V0aWxpdHkvZG9tJztcblxuY29uc3QgSUNPTl9XSURUSCA9IDI0O1xuY29uc3QgSUNPTl9IRUlHSFQgPSAyNDtcbmNvbnN0IE1PTlRIUyA9IFtcbiAgJ0phbnVhcnknLFxuICAnRmVicnVhcnknLFxuICAnTWFyY2gnLFxuICAnQXByaWwnLFxuICAnTWF5JyxcbiAgJ0p1bmUnLFxuICAnSnVseScsXG4gICdBdWd1c3QnLFxuICAnU2VwdGVtYmVyJyxcbiAgJ09jdG9iZXInLFxuICAnTm92ZW1iZXInLFxuICAnRGVjZW1iZXInLFxuXTtcblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW0RhdGVQaWNrZXJde0BsaW5rIG1vZHVsZTpkYXRlUGlja2VyfkRhdGVQaWNrZXJ9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmRhdGVQaWNrZXJ+RGF0ZVBpY2tlcn5wcml2YXRlc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHllYXIgVGhlIHllYXIgdGhhdCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gbW9udGggVGhlIG1vbnRoIHRoYXQgaXMgY3VycmVudGx5IHNlbGVjdGVkLCByZXByZXNlbnRlZFxuICogICBhcyBhIHZhbHVlIGZyb20gMCB0byAxMS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXkgVGhlIGRheSBvZiB0aGUgbW9udGggdGhhdCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQsXG4gKiAgIHJlcHJlc2VudGVkIGFzIGEgdmFsdWUgZnJvbSAxIHRvIDMxLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRpc3BsYXllZE1vbnRoIFRoZSBtb250aCB0aGF0IGlzIGN1cnJlbnRseSBiZWluZ1xuICogICBkaXNwbGF5ZWQgaW4gdGhlIGNhbGVuZGFyIGdyaWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGlzcGxheWVkWWVhciBUaGUgeWVhciB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyBkaXNwbGF5ZWRcbiAqICAgaW4gdGhlIGNhbGVuZGFyIGdyaWQuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBtb250aElucHV0IFRoZSBzZWxlY3QgYm94IGVsZW1lbnQgdGhhdCBpcyBzaG93biBpblxuICogICB0aGUgaGVhZGVyIGFuZCBpcyB1c2VkIHRvIHNlbGVjdCB0aGUgbW9udGguXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSB5ZWFySW5wdXQgVGhlIGlucHV0IGVsZW1lbnQgdGhhdCBpcyBzaG93biBpbiB0aGVcbiAqICAgaGVhZGVyIGFuZCBpcyB1c2VkIHRvIHNlbGVjdCB0aGUgeWVhci5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGRheUdyaWQgVGhlIGNvbnRhaW5lciBlbGVtZW50IGhvbGRpbmcgdGhlIGdyaWQgb2ZcbiAqICAgY2FsZW5kYXIgZGF5cy5cbiAqL1xuXG4vKipcbiAqIEhvbGRzIHByaXZhdGUgZGF0YSBmb3IgdGhlIFtEYXRlUGlja2VyXXtAbGluayBtb2R1bGU6ZGF0ZVBpY2tlcn5EYXRlUGlja2VyfVxuICogY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOmRhdGVQaWNrZXJ+RGF0ZVBpY2tlcn5wcml2YXRlc1xuICovXG5jb25zdCBwcml2YXRlTWVtYmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogQ2xlYXIgdGhlIGdyaWQgb2YgY2FsZW5kYXIgZGF5cyBhbmQgcmVidWlsZCBpdCB1c2luZyB0aGUgY3VycmVudCBkaXNwbGF5XG4gKiBtb250aCBhbmQgZGlzcGxheSB5ZWFyLlxuICogQHBhcmFtIHttb2R1bGU6ZGF0ZVBpY2tlcn5EYXRlUGlja2VyfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2hcbiAqICAgdG8gYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB1cGRhdGVEYXlHcmlkKGluc3RhbmNlKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgcHJpdmF0ZXMuZGF5R3JpZC5pbm5lckhUTUwgPSAnJztcblxuICBjb25zdCBkYXRlID0gbmV3IERhdGUocHJpdmF0ZXMuZGlzcGxheWVkWWVhciwgcHJpdmF0ZXMuZGlzcGxheWVkTW9udGgsIDEpO1xuICBpZiAocHJpdmF0ZXMuZGlzcGxheWVkWWVhciA8IDEwMCkge1xuICAgIC8vIEZpeCBmb3IgdHdvLWRpZ2l0IHllYXJzXG4gICAgZGF0ZS5zZXRGdWxsWWVhcihwcml2YXRlcy5kaXNwbGF5ZWRZZWFyKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGVjdGVkID0gaW5zdGFuY2UuZGF0ZTtcbiAgY29uc3QgbW9udGhTdGFydCA9IHN0YXJ0T2ZNb250aChkYXRlKTtcbiAgY29uc3Qgc3RhcnQgPSBzdGFydE9mV2Vlayhtb250aFN0YXJ0KTtcbiAgY29uc3QgZW5kID0gYWRkKHN0YXJ0LCB7IHdlZWtzOiA1LCBkYXlzOiA2LCBob3VyczogMTEgfSk7XG5cbiAgWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10uZm9yRWFjaCgobGFiZWwpID0+IHtcbiAgICBjb25zdCBkYXlMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBkYXlMYWJlbC5jbGFzc0xpc3QuYWRkKCdkYXRlLXBpY2tlci1kYXktaGVhZGVyJyk7XG4gICAgZGF5TGFiZWwudGV4dENvbnRlbnQgPSBsYWJlbDtcbiAgICBwcml2YXRlcy5kYXlHcmlkLmFwcGVuZENoaWxkKGRheUxhYmVsKTtcbiAgfSk7XG5cbiAgbGV0IGN1cnJlbnREYXkgPSBzdGFydDtcbiAgd2hpbGUgKGlzQmVmb3JlKGN1cnJlbnREYXksIGVuZCkpIHtcbiAgICBjb25zdCBkYXlFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKCdkYXRlLXBpY2tlci1kYXknKTtcblxuICAgIGlmIChpc1NhbWVEYXkoc2VsZWN0ZWQsIGN1cnJlbnREYXkpKSBkYXlFbGVtLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgZWxzZSBpZiAoaXNUb2RheShjdXJyZW50RGF5KSkgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKCd0b2RheScpO1xuXG4gICAgaWYgKCFpc1NhbWVNb250aChkYXRlLCBjdXJyZW50RGF5KSkge1xuICAgICAgZGF5RWxlbS5jbGFzc0xpc3QuYWRkKCdkaWZmZXJlbnQtbW9udGgnKTtcbiAgICB9XG5cbiAgICBkYXlFbGVtLnRleHRDb250ZW50ID0gY3VycmVudERheS5nZXREYXRlKCk7XG4gICAgZGF5RWxlbS5kYXRhc2V0LnllYXIgPSBjdXJyZW50RGF5LmdldEZ1bGxZZWFyKCk7XG4gICAgZGF5RWxlbS5kYXRhc2V0Lm1vbnRoID0gY3VycmVudERheS5nZXRNb250aCgpO1xuICAgIGRheUVsZW0uZGF0YXNldC5kYXkgPSBjdXJyZW50RGF5LmdldERhdGUoKTtcbiAgICBwcml2YXRlcy5kYXlHcmlkLmFwcGVuZENoaWxkKGRheUVsZW0pO1xuXG4gICAgY3VycmVudERheSA9IGFkZChjdXJyZW50RGF5LCB7IGRheXM6IDEgfSk7XG4gIH1cbn1cblxuLyoqXG4gKiBVcGRhdGUgdGhlIG1vbnRoIGFuZCB5ZWFyIGlucHV0IGNvbnRyb2xzIHRvIG1hdGNoIHRoZSBzZWxlY3RlZCBkYXRlLlxuICogQHBhcmFtIHttb2R1bGU6ZGF0ZVBpY2tlcn5EYXRlUGlja2VyfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2hcbiAqICAgdG8gYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB1cGRhdGVJbnB1dHMoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBwcml2YXRlcy5tb250aElucHV0LnZhbHVlID0gcHJpdmF0ZXMuZGlzcGxheWVkTW9udGgudG9TdHJpbmcoKTtcbiAgcHJpdmF0ZXMueWVhcklucHV0LnZhbHVlID0gcHJpdmF0ZXMuZGlzcGxheWVkWWVhci50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIENyZWF0ZSB0aGUgZm9ybSBlbGVtZW50cyBmb3IgdGhlIGRhdGUgcGlja2VyLlxuICogQHBhcmFtIHttb2R1bGU6ZGF0ZVBpY2tlcn5EYXRlUGlja2VyfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2hcbiAqICAgdG8gYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IFRoZSBwYXJlbnQgRE9NIG5vZGUgdW5kZXIgd2hpY2ggdGhlIGZvcm1cbiAqICAgc2hvdWxkIGJlIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVGb3JtRWxlbWVudHMoaW5zdGFuY2UsIHBhcmVudCkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG5cbiAgY29uc3QgaGVhZGluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBoZWFkaW5nLmNsYXNzTGlzdC5hZGQoJ2RhdGUtcGlja2VyLWhlYWRpbmcnKTtcblxuICBjb25zdCBtZW51SXRlbXMgPSBNT05USFMubWFwKChtb250aCwgaW5kZXgpID0+IChcbiAgICB7IHZhbHVlOiBpbmRleC50b1N0cmluZygpLCBsYWJlbDogbW9udGggfVxuICApKTtcbiAgcHJpdmF0ZXMubW9udGhJbnB1dCA9IGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICBpZDogJ2RhdGUtcGlja2VyLW1vbnRoLXNlbGVjdCcsXG4gICAgbmFtZTogJ2RhdGUtcGlja2VyLW1vbnRoLXNlbGVjdCcsXG4gICAgY2xhc3NMaXN0OiBbJ2Zvcm0tc2VsZWN0LWlubGluZSddLFxuICAgIG1lbnVJdGVtcyxcbiAgfSk7XG5cbiAgcHJpdmF0ZXMueWVhcklucHV0ID0gY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgIHR5cGU6ICdudW1iZXInLFxuICAgIGlkOiAnZGF0ZS1waWNrZXIteWVhci1pbnB1dCcsXG4gICAgbmFtZTogJ2RhdGUtcGlja2VyLXllYXItaW5wdXQnLFxuICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWlubGluZScsICdmb3JtLWlucHV0LWNvdW50J10sXG4gIH0pO1xuXG4gIGNvbnN0IG1vbnRoWWVhckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBtb250aFllYXJDb250YWluZXIuYXBwZW5kQ2hpbGQocHJpdmF0ZXMubW9udGhJbnB1dCk7XG4gIGNvbnN0IHNwYWNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgc3BhY2VyLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gIHNwYWNlci50ZXh0Q29udGVudCA9ICcgJztcbiAgbW9udGhZZWFyQ29udGFpbmVyLmFwcGVuZENoaWxkKHNwYWNlcik7XG4gIG1vbnRoWWVhckNvbnRhaW5lci5hcHBlbmRDaGlsZChwcml2YXRlcy55ZWFySW5wdXQpO1xuICBoZWFkaW5nLmFwcGVuZENoaWxkKG1vbnRoWWVhckNvbnRhaW5lcik7XG5cbiAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGJhY2tCdXR0b24gPSBjcmVhdGVJbWFnZUJ1dHRvbihMZWZ0QXJyb3dJY29uLCB7XG4gICAgYWx0VGV4dDogJ0dvIHRvIHByZXZpb3VzIG1vbnRoJyxcbiAgICB3aWR0aDogSUNPTl9XSURUSCxcbiAgICBoZWlnaHQ6IElDT05fSEVJR0hULFxuICB9KTtcbiAgY29uc3QgdG9kYXlCdXR0b24gPSBjcmVhdGVJbWFnZUJ1dHRvbihUb2RheUljb24sIHtcbiAgICBhbHRUZXh0OiAnR28gdG8gdG9kYXknLFxuICAgIHdpZHRoOiBJQ09OX1dJRFRILFxuICAgIGhlaWdodDogSUNPTl9IRUlHSFQsXG4gIH0pO1xuICBjb25zdCBmb3J3YXJkQnV0dG9uID0gY3JlYXRlSW1hZ2VCdXR0b24oUmlnaHRBcnJvd0ljb24sIHtcbiAgICBhbHRUZXh0OiAnR28gdG8gbmV4dCBtb250aCcsXG4gICAgd2lkdGg6IElDT05fV0lEVEgsXG4gICAgaGVpZ2h0OiBJQ09OX0hFSUdIVCxcbiAgfSk7XG4gIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChiYWNrQnV0dG9uKTtcbiAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKHRvZGF5QnV0dG9uKTtcbiAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGZvcndhcmRCdXR0b24pO1xuICBoZWFkaW5nLmFwcGVuZENoaWxkKGJ1dHRvbkNvbnRhaW5lcik7XG5cbiAgcGFyZW50LmFwcGVuZENoaWxkKGhlYWRpbmcpO1xuXG4gIGNvbnN0IGdyaWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZ3JpZC5jbGFzc0xpc3QuYWRkKCdkYXRlLXBpY2tlci1ncmlkJyk7XG4gIHBhcmVudC5hcHBlbmRDaGlsZChncmlkKTtcbiAgcHJpdmF0ZXMuZGF5R3JpZCA9IGdyaWQ7XG5cbiAgdXBkYXRlSW5wdXRzKGluc3RhbmNlKTtcbiAgdXBkYXRlRGF5R3JpZChpbnN0YW5jZSk7XG5cbiAgYmFja0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGluc3RhbmNlLmdvVG9QcmV2aW91c01vbnRoKCkpO1xuICB0b2RheUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGluc3RhbmNlLmdvVG9UaGlzTW9udGgoKSk7XG4gIGZvcndhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBpbnN0YW5jZS5nb1RvTmV4dE1vbnRoKCkpO1xuICBwcml2YXRlcy5tb250aElucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgcHJpdmF0ZXMuZGlzcGxheWVkTW9udGggPSBOdW1iZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIHVwZGF0ZURheUdyaWQoaW5zdGFuY2UpO1xuICB9KTtcblxuICBjb25zdCB5ZWFyTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgIGlmIChlLnR5cGUgPT09ICdjaGFuZ2UnIHx8IGUudGFyZ2V0LnZhbHVlLmxlbmd0aCA9PT0gNCkge1xuICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoZS50YXJnZXQudmFsdWUpO1xuICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlLmxlbmd0aCA+IDAgJiYgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICAgICAgaWYgKHByaXZhdGVzLmRpc3BsYXllZFllYXIgIT09IHZhbHVlKSB7XG4gICAgICAgICAgcHJpdmF0ZXMuZGlzcGxheWVkWWVhciA9IHZhbHVlO1xuICAgICAgICAgIHVwZGF0ZURheUdyaWQoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ2NoYW5nZScpIHtcbiAgICAgICAgZS50YXJnZXQudmFsdWUgPSBwcml2YXRlcy5kaXNwbGF5ZWRZZWFyLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwcml2YXRlcy55ZWFySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB5ZWFyTGlzdGVuZXIpO1xuICBwcml2YXRlcy55ZWFySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgeWVhckxpc3RlbmVyKTtcblxuICBwcml2YXRlcy5kYXlHcmlkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICBjb25zdCBlbGVtID0gZS50YXJnZXQ7XG4gICAgaWYgKGVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdkYXRlLXBpY2tlci1kYXknKSkge1xuICAgICAgcHJpdmF0ZXMueWVhciA9IE51bWJlcihlbGVtLmRhdGFzZXQueWVhcik7XG4gICAgICBwcml2YXRlcy5tb250aCA9IE51bWJlcihlbGVtLmRhdGFzZXQubW9udGgpO1xuICAgICAgcHJpdmF0ZXMuZGF5ID0gTnVtYmVyKGVsZW0uZGF0YXNldC5kYXkpO1xuXG4gICAgICBpZiAocHJpdmF0ZXMuZGlzcGxheWVkTW9udGggIT09IHByaXZhdGVzLm1vbnRoXG4gICAgICAgIHx8IHByaXZhdGVzLmRpc3BsYXllZFllYXIgIT09IHByaXZhdGVzLnllYXIpIHtcbiAgICAgICAgcHJpdmF0ZXMuZGlzcGxheWVkTW9udGggPSBwcml2YXRlcy5tb250aDtcbiAgICAgICAgcHJpdmF0ZXMuZGlzcGxheWVkWWVhciA9IHByaXZhdGVzLnllYXI7XG4gICAgICAgIHVwZGF0ZUlucHV0cyhpbnN0YW5jZSk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZURheUdyaWQoaW5zdGFuY2UpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogQ29udHJvbHMgYSBmb3JtIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0byBzZWxlY3QgYSBjYWxlbmRhciBkYXRlLlxuICovXG5jbGFzcyBEYXRlUGlja2VyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgZGF0ZSBwaWNrZXIgZm9ybS5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IFRoZSBwYXJlbnQgRE9NIG5vZGUgdW5kZXIgd2hpY2ggdGhlIGZvcm1cbiAgICogICBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gICAqIEBwYXJhbSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gVGhlIGRhdGUgdGhhdCB3aWxsIGJlIGluaXRpYWxseSBzZWxlY3RlZC4gSWYgbm90XG4gICAqICAgZ2l2ZW4sIHRoZW4gdGhlIHByZXNlbnQgZGF0ZSBpcyB1c2VkLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyZW50LCBzdGFydERhdGUpIHtcbiAgICBjb25zdCBkYXRlID0gc3RhcnREYXRlIHx8IG5ldyBEYXRlKCk7XG5cbiAgICBjb25zdCBwcml2YXRlcyA9IHtcbiAgICAgIHllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIG1vbnRoOiBkYXRlLmdldE1vbnRoKCksXG4gICAgICBkYXk6IGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgZGlzcGxheWVkTW9udGg6IGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGRpc3BsYXllZFllYXI6IGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIG1vbnRoSW5wdXQ6IG51bGwsXG4gICAgICB5ZWFySW5wdXQ6IG51bGwsXG4gICAgICBkYXlHcmlkOiBudWxsLFxuICAgIH07XG4gICAgcHJpdmF0ZU1lbWJlcnMuc2V0KHRoaXMsIHByaXZhdGVzKTtcblxuICAgIGNyZWF0ZUZvcm1FbGVtZW50cyh0aGlzLCBwYXJlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRlIHRoYXQgaXMgY3VycmVudGx5IHNlbGVjdGVkIGluIHRoZSBmb3JtLlxuICAgKiBAdHlwZSB7RGF0ZX1cbiAgICovXG4gIGdldCBkYXRlKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgY29uc3QgdmFsdWUgPSBuZXcgRGF0ZShwcml2YXRlcy55ZWFyLCBwcml2YXRlcy5tb250aCwgcHJpdmF0ZXMuZGF5KTtcbiAgICBpZiAocHJpdmF0ZXMueWVhciA8IDEwMCkge1xuICAgICAgLy8gRml4IGZvciB0d28tZGlnaXQgeWVhcnNcbiAgICAgIHZhbHVlLnNldEZ1bGxZZWFyKHByaXZhdGVzLnllYXIpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHllYXIgdGhhdCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQgaW4gdGhlIGZvcm0uIEZvciBmb3VyLWRpZ2l0IHllYXJzLFxuICAgKiB0aGlzIHdpbGwgYmUgYSBmb3VyLWRpZ2l0IG51bWJlci5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB5ZWFyKCkge1xuICAgIHJldHVybiBwcml2YXRlTWVtYmVycy5nZXQodGhpcykueWVhcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbW9udGggdGhhdCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQgaW4gdGhlIGZvcm0sIGFzIGEgbnVtYmVyIGJldHdlZW4gMFxuICAgKiBhbmQgMTEsIHdpdGggSmFudWFyeSBjb3JyZXNwb25kaW5nIHRvIGEgdmFsdWUgb2YgMC5cbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCBtb250aCgpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLm1vbnRoO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBkYXkgb2YgdGhlIG1vbnRoIHRoYXQgaXMgY3VycmVudGx5IHNlbGVjdGVkIGluIHRoZSBmb3JtLCBhcyBhIG51bWJlclxuICAgKiBiZXR3ZWVuIDEgYW5kIDMxLlxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRheSgpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmRheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2ggdG8gdGhlIHByZXNlbnQgbW9udGguXG4gICAqL1xuICBnb1RvVGhpc01vbnRoKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgcHJpdmF0ZXMuZGlzcGxheWVkWWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xuICAgIHByaXZhdGVzLmRpc3BsYXllZE1vbnRoID0gbm93LmdldE1vbnRoKCk7XG5cbiAgICB1cGRhdGVJbnB1dHModGhpcyk7XG4gICAgdXBkYXRlRGF5R3JpZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2ggdG8gdGhlIHByZXZpb3VzIG1vbnRoLlxuICAgKi9cbiAgZ29Ub1ByZXZpb3VzTW9udGgoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKHByaXZhdGVzLmRpc3BsYXllZE1vbnRoID4gMCkge1xuICAgICAgcHJpdmF0ZXMuZGlzcGxheWVkTW9udGggLT0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJpdmF0ZXMuZGlzcGxheWVkWWVhciAtPSAxO1xuICAgICAgcHJpdmF0ZXMuZGlzcGxheWVkTW9udGggPSAxMTtcbiAgICB9XG5cbiAgICB1cGRhdGVJbnB1dHModGhpcyk7XG4gICAgdXBkYXRlRGF5R3JpZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTd2l0Y2ggdG8gdGhlIG5leHQgbW9udGguXG4gICAqL1xuICBnb1RvTmV4dE1vbnRoKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIGlmIChwcml2YXRlcy5kaXNwbGF5ZWRNb250aCA8IDExKSB7XG4gICAgICBwcml2YXRlcy5kaXNwbGF5ZWRNb250aCArPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcml2YXRlcy5kaXNwbGF5ZWRZZWFyICs9IDE7XG4gICAgICBwcml2YXRlcy5kaXNwbGF5ZWRNb250aCA9IDA7XG4gICAgfVxuXG4gICAgdXBkYXRlSW5wdXRzKHRoaXMpO1xuICAgIHVwZGF0ZURheUdyaWQodGhpcyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0ZVBpY2tlcjtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgW0ZpbHRlck1lbnVde0BsaW5rIG1vZHVsZTpmaWx0ZXJNZW51fkZpbHRlck1lbnV9IGNsYXNzLlxuICogQG1vZHVsZSBmaWx0ZXJNZW51XG4gKi9cblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcblxuaW1wb3J0IENvbGxhcHNlZEljb24gZnJvbSAnLi4vaW1hZ2VzL2Fycm93LXJpZ2h0LnN2Zyc7XG5pbXBvcnQgRXhwYW5kZWRJY29uIGZyb20gJy4uL2ltYWdlcy9hcnJvdy1kb3duLnN2Zyc7XG5cbmltcG9ydCBDb2xsYXBzaWJsZSBmcm9tICcuL2NvbGxhcHNpYmxlJztcbmltcG9ydCB7IGNyZWF0ZUltYWdlQnV0dG9uIH0gZnJvbSAnLi91dGlsaXR5L2RvbSc7XG5cbmNvbnN0IElDT05fV0lEVEggPSAyNDtcbmNvbnN0IElDT05fSEVJR0hUID0gMjQ7XG5cbi8qKlxuICogT2JqZWN0IGhvbGRpbmcgcHJpdmF0ZSBtZW1iZXJzIGZvciB0aGVcbiAqIFtGaWx0ZXJNZW51XXtAbGluayBtb2R1bGU6ZmlsdGVyTWVudX5GaWx0ZXJNZW51fSBjbGFzcy5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpmaWx0ZXJNZW51fkZpbHRlck1lbnV+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciBUaGUgRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgbWVudS5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX5maWx0ZXJJbmZvfSBzZWxlY3RlZEZpbHRlciBEZXNjcmliZXNcbiAqICAgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YXNrIGZpbHRlciwgaWYgYW55LlxuICogQHByb3BlcnR5IHtNYXB9IGdyb3VwRWxlbWVudHMgQSBtYXAgYXNzb2NpYXRpbmcgZmlsdGVyIGdyb3VwIGlkZW50aWZpZXJzIHRvXG4gKiAgIFtncm91cEVsZW1lbnRzXXtAbGluayBtb2R1bGU6ZmlsdGVyTWVudX5GaWx0ZXJNZW51fmdyb3VwRWxlbWVudHN9IG9iamVjdHMuXG4gKiBAcHJvcGVydHkge0V2ZW50RW1pdHRlcn0gZXZlbnRFbWl0dGVyIEhvbGRzIHRoZSBldmVudCBlbWl0dGVyLiBUaGUgZXZlbnRcbiAqICAgZW1pdHRlciBkaXNwYXRjaGVzIGV2ZW50cyB0byBhbnkgYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzLlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZXMgZGF0YSBmb3IgdGhlIFtGaWx0ZXJNZW51XXtAbGluayBtb2R1bGU6ZmlsdGVyTWVudX5GaWx0ZXJNZW51fVxuICogY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX5wcml2YXRlc1xuICovXG5jb25zdCBwcml2YXRlTWVtYmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogR2V0IHRoZSBbZ3JvdXBFbGVtZW50c117QGxpbmsgbW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX5ncm91cEVsZW1lbnRzfVxuICogb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCBhIGZpbHRlciBncm91cC5cbiAqIEBwYXJhbSB7bW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoXG4gKiAgIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBncm91cElkIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZ3JvdXAgd2hvc2UgZWxlbWVudHMgYXJlIHRvXG4gKiAgIGJlIHJldHJpZXZlZC5cbiAqIEByZXR1cm4ge21vZHVsZTpmaWx0ZXJNZW51fkZpbHRlck1lbnV+Z3JvdXBFbGVtZW50c30gVGhlIG9iamVjdCBjb250YWluaW5nXG4gKiAgIHRoZSBncm91cCdzIERPTSBlbGVtZW50cy5cbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIHRoZSBnaXZlbiBncm91cCBpZGVudGlmaWVyIGlzIGludmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGdldEdyb3VwRWxlbWVudHMoaW5zdGFuY2UsIGdyb3VwSWQpIHtcbiAgY29uc3QgZWxlbWVudHMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpLmdyb3VwRWxlbWVudHMuZ2V0KGdyb3VwSWQpO1xuICBpZiAoIWVsZW1lbnRzKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYENhbm5vdCBsb2NhdGUgZmlsdGVyIGdyb3VwIFwiJHtncm91cElkfVwiYCk7XG4gIH1cbiAgcmV0dXJuIGVsZW1lbnRzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgbGlzdCBpdGVtIGVsZW1lbnQgaW4gdGhlIERPTSBiZWxvbmdpbmcgdG8gYSBwYXJ0aWN1bGFyIGZpbHRlci5cbiAqIEBwYXJhbSB7bW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoXG4gKiAgIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBncm91cElkIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZ3JvdXAgY29udGFpbmluZyB0aGVcbiAqICAgZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlcklkIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsdGVyLlxuICogQHJldHVybnMge0hUTUxFbGVtZW50fSBUaGUgbGlzdCBpdGVtIGVsZW1lbnQgZm9yIHRoZSBmaWx0ZXIuXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiBlaXRoZXIgdGhlIGdyb3VwIG9yIGZpbHRlciBpZGVudGlmaWVycyBhcmVcbiAqICAgaW52YWxpZC5cbiAqL1xuZnVuY3Rpb24gZ2V0RmlsdGVySXRlbUVsZW1lbnQoaW5zdGFuY2UsIGdyb3VwSWQsIGZpbHRlcklkKSB7XG4gIGNvbnN0IGl0ZW0gPSBnZXRHcm91cEVsZW1lbnRzKGluc3RhbmNlLCBncm91cElkKS5maWx0ZXJJdGVtcy5nZXQoZmlsdGVySWQpO1xuICBpZiAoIWl0ZW0pIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgQ2Fubm90IGxvY2F0ZSBmaWx0ZXIgXCIke2ZpbHRlcklkfVwiIGluIGdyb3VwIGBcbiAgICAgICsgYFwiJHtncm91cElkfVwiYCk7XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5cbi8qKlxuICogQ2xlYXIgdGhlIGZpbHRlciBzZWxlY3Rpb24sIGJ1dCBkbyBzbyB3aXRob3V0IGZpcmluZyBhbnkgZXZlbnRzLlxuICogQHBhcmFtIHttb2R1bGU6ZmlsdGVyTWVudX5GaWx0ZXJNZW51fSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2hcbiAqICAgdG8gYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaWxlbnRDbGVhclNlbGVjdGlvbihpbnN0YW5jZSkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGlmIChwcml2YXRlcy5zZWxlY3RlZEZpbHRlci5ncm91cCAmJiBwcml2YXRlcy5zZWxlY3RlZEZpbHRlci5maWx0ZXIpIHtcbiAgICBjb25zdCBsaXN0SXRlbSA9IGdldEZpbHRlckl0ZW1FbGVtZW50KFxuICAgICAgaW5zdGFuY2UsXG4gICAgICBwcml2YXRlcy5zZWxlY3RlZEZpbHRlci5ncm91cCxcbiAgICAgIHByaXZhdGVzLnNlbGVjdGVkRmlsdGVyLmZpbHRlcixcbiAgICApO1xuICAgIGxpc3RJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gIH1cblxuICBwcml2YXRlcy5zZWxlY3RlZEZpbHRlci5ncm91cCA9IG51bGw7XG4gIHByaXZhdGVzLnNlbGVjdGVkRmlsdGVyLmZpbHRlciA9IG51bGw7XG59XG5cbi8qKlxuICogQSBjdXN0b21pemFibGUgbWVudSBvZiB0YXNrIGZpbHRlcnMuXG4gKi9cbmNsYXNzIEZpbHRlck1lbnUge1xuICAvKipcbiAgICogRXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgZmlsdGVyIGl0ZW0gaXMgc2VsZWN0ZWQsIG9yIHdoZW4gdGhlIHNlbGVjdGlvblxuICAgKiBpcyBjbGVhcmVkLlxuICAgKiBAZXZlbnQgbW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX5zZWxlY3RGaWx0ZXJcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGU6IHNlbGVjdC1maWx0ZXIuXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX0gdGFyZ2V0IFRoZSBmaWx0ZXIgbWVudSB0aGF0IGZpcmVkXG4gICAqICAgdGhlIGV2ZW50LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2dyb3VwSWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsdGVyIGdyb3VwXG4gICAqICAgY29udGFpbmluZyB0aGUgc2VsZWN0ZWQgZmlsdGVyLCBpZiBhbnkuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZmlsdGVySWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsdGVyIHRoYXQgd2FzXG4gICAqICAgc2VsZWN0ZWQsIGlmIGFueS5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWx0ZXJMYWJlbF0gVGhlIGRpc3BsYXllZCBsYWJlbCBmb3IgdGhlIGZpbHRlciB0aGF0XG4gICAqICAgd2FzIHNlbGVjdGVkLCBpZiBhbnkuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJZGVudGlmaWVzIGEgdGFzayBmaWx0ZXIgaW4gdGhlIG1lbnUuXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpmaWx0ZXJNZW51fkZpbHRlck1lbnV+ZmlsdGVySW5mb1xuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2dyb3VwXSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGZpbHRlciBncm91cFxuICAgKiAgIGNvbnRhaW5pbmcgdGhlIGZpbHRlci5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtmaWx0ZXJdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsdGVyLlxuICAgKi9cblxuICAvKipcbiAgICogSG9sZHMgcmVmZXJlbmNlcyB0byBET00gZWxlbWVudHMgcmVsYXRlZCB0byBhIHBhcnRpY3VsYXIgZmlsdGVyIGdyb3VwIGluXG4gICAqIHRoZSBmaWx0ZXIgbWVudS5cbiAgICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX5ncm91cEVsZW1lbnRzXG4gICAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciBUaGUgY29udGFpbmVyIGVsZW1lbnQgZm9yIHRoZSBncm91cC5cbiAgICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gW2V4cGFuZEljb25dIFRoZSBleHBhbmQvY29sbGFwc2UgaWNvbiBlbGVtZW50IGluXG4gICAqICAgdGhlIGdyb3VwIGhlYWRpbmcgKGlmIGFueSkuXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOmNvbGxhcHNpYmxlfkNvbGxhcHNpYmxlfSBbY29sbGFwc2libGVdIFRoZSBjb2xsYXBzaWJsZVxuICAgKiAgIHBhbmVsIGNvbnRhaW5pbmcgdGhlIGdyb3VwJ3MgZmlsdGVyIGxpc3QuIElmIHRoZSBncm91cCBjYW5ub3QgYmVcbiAgICogICBjb2xsYXBzZWQsIHRoaXMgc2hvdWxkIGJlIG51bGwuXG4gICAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGZpbHRlckxpc3QgVGhlIGxpc3QgZWxlbWVudCBjb250YWluaW5nIHRoZVxuICAgKiAgIGZpbHRlciBpdGVtcyBiZWxvbmdpbmcgdG8gdGhlIGdyb3VwLlxuICAgKiBAcHJvcGVydHkge01hcH0gZmlsdGVySXRlbXMgQSBtYXAgYXNzb2NpYXRpbmcgZmlsdGVyIGlkZW50aWZpZXJzIHRvIHRoZVxuICAgKiAgIGxpc3QgaXRlbSBlbGVtZW50cyBpbiB0aGUgRE9NIGJlbG9uZ2luZyB0byBlYWNoIGZpbHRlciBpdGVtIGluIHRoZVxuICAgKiAgIGdyb3VwLlxuICAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgZmlsdGVyIG1lbnUgYW5kIGFkZCBpdCB0byB0aGUgRE9NLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgVGhlIHBhcmVudCBET00gbm9kZSB0aGF0IHdpbGwgY29udGFpbiB0aGVcbiAgICogICBtZW51LlxuICAgKiBAcGFyYW0ge09iamVjdFtdfSBbZ3JvdXBzXSBBbiBhcnJheSBvZiBmaWx0ZXIgZ3JvdXBzIHRvIGFkZCB0byB0aGUgbWVudS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGdyb3Vwc1tdLmlkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBmaWx0ZXIgZ3JvdXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZ3JvdXBzW10ubGFiZWxdIFRoZSBkaXNwbGF5ZWQgbGFiZWwgZm9yIHRoZSBmaWx0ZXIgZ3JvdXAuXG4gICAqICAgSWYgbm90IGdpdmVuLCB0aGUgZ3JvdXAgd2lsbCBoYXZlIG5vIGhlYWRpbmcgYW5kIHdpbGwgbm90IGJlXG4gICAqICAgY29sbGFwc2libGUuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIGdyb3Vwcykge1xuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgc2VsZWN0ZWRGaWx0ZXI6IHsgZ3JvdXA6IG51bGwsIGZpbHRlcjogbnVsbCB9LFxuICAgICAgZ3JvdXBFbGVtZW50czogbmV3IE1hcCgpLFxuICAgICAgZXZlbnRFbWl0dGVyOiBuZXcgRXZlbnRFbWl0dGVyKCksXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuXG4gICAgcHJpdmF0ZXMuY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcHJpdmF0ZXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2ZpbHRlci1tZW51Jyk7XG5cbiAgICBpZiAoZ3JvdXBzKSB7XG4gICAgICBncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHRoaXMuYWRkR3JvdXAoZ3JvdXAuaWQsIGdyb3VwLmxhYmVsKSk7XG4gICAgfVxuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKHByaXZhdGVzLmNvbnRhaW5lcik7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgZmlsdGVyIGdyb3VwIHRvIHRoZSBtZW51LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBncm91cC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsYWJlbF0gVGhlIGRpc3BsYXllZCBsYWJlbCBmb3IgdGhlIGdyb3VwLiBJZiBub3QgZ2l2ZW4sXG4gICAqICAgdGhlIGdyb3VwIHdpbGwgaGF2ZSBubyBoZWFkaW5nIGFuZCB3aWxsIG5vdCBiZSBjb2xsYXBzaWJsZS5cbiAgICovXG4gIGFkZEdyb3VwKGlkLCBsYWJlbCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgY29uc3QgZ3JvdXBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBncm91cENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmaWx0ZXItZ3JvdXAnKTtcbiAgICBncm91cENvbnRhaW5lci5kYXRhc2V0Lmdyb3VwSWQgPSBpZDtcblxuICAgIGxldCB0b2dnbGUgPSBudWxsO1xuICAgIGxldCBhcnJvdyA9IG51bGw7XG4gICAgaWYgKGxhYmVsKSB7XG4gICAgICBjb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBoZWFkaW5nLmNsYXNzTGlzdC5hZGQoJ2ZpbHRlci1ncm91cC1oZWFkaW5nJyk7XG4gICAgICBncm91cENvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkaW5nKTtcblxuICAgICAgdG9nZ2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICB0b2dnbGUuY2xhc3NMaXN0LmFkZCgnZmlsdGVyLWdyb3VwLXRvZ2dsZScpO1xuICAgICAgaGVhZGluZy5hcHBlbmRDaGlsZCh0b2dnbGUpO1xuXG4gICAgICBjb25zdCBpY29uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBpY29uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2ljb24tY29udGFpbmVyJyk7XG4gICAgICBoZWFkaW5nLmFwcGVuZENoaWxkKGljb25Db250YWluZXIpO1xuXG4gICAgICBhcnJvdyA9IG5ldyBJbWFnZSgpO1xuICAgICAgYXJyb3cuc3JjID0gQ29sbGFwc2VkSWNvbjtcbiAgICAgIGFycm93LmFsdCA9ICdFeHBhbmQnO1xuICAgICAgYXJyb3cud2lkdGggPSBJQ09OX1dJRFRIO1xuICAgICAgYXJyb3cuaGVpZ2h0ID0gSUNPTl9IRUlHSFQ7XG4gICAgICBhcnJvdy5jbGFzc0xpc3QuYWRkKCdmaWx0ZXItZ3JvdXAtZXhwYW5kLWljb24nKTtcbiAgICAgIHRvZ2dsZS5hcHBlbmRDaGlsZChhcnJvdyk7XG5cbiAgICAgIGNvbnN0IHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICB0ZXh0LmNsYXNzTGlzdC5hZGQoJ2ZpbHRlci1ncm91cC1sYWJlbCcpO1xuICAgICAgdGV4dC50ZXh0Q29udGVudCA9IGxhYmVsO1xuICAgICAgdG9nZ2xlLmFwcGVuZENoaWxkKHRleHQpO1xuICAgIH1cblxuICAgIGxldCBjb2xsYXBzaWJsZTtcbiAgICBsZXQgbGlzdENvbnRhaW5lcjtcbiAgICBpZiAobGFiZWwpIHtcbiAgICAgIGNvbGxhcHNpYmxlID0gbmV3IENvbGxhcHNpYmxlKGdyb3VwQ29udGFpbmVyLCBudWxsLCB7IGNvbGxhcHNlZDogdHJ1ZSB9KTtcbiAgICAgIGxpc3RDb250YWluZXIgPSBjb2xsYXBzaWJsZS5jb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb2xsYXBzaWJsZSA9IG51bGw7XG4gICAgICBsaXN0Q29udGFpbmVyID0gZ3JvdXBDb250YWluZXI7XG4gICAgfVxuXG4gICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3VsJyk7XG4gICAgbGlzdC5jbGFzc0xpc3QuYWRkKCdmaWx0ZXItbGlzdCcpO1xuICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQobGlzdCk7XG5cbiAgICBwcml2YXRlcy5ncm91cEVsZW1lbnRzLnNldChpZCwge1xuICAgICAgY29udGFpbmVyOiBncm91cENvbnRhaW5lcixcbiAgICAgIGV4cGFuZEljb246IGFycm93LFxuICAgICAgY29sbGFwc2libGUsXG4gICAgICBmaWx0ZXJMaXN0OiBsaXN0LFxuICAgICAgZmlsdGVySXRlbXM6IG5ldyBNYXAoKSxcbiAgICB9KTtcblxuICAgIGlmICh0b2dnbGUpIHRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMudG9nZ2xlR3JvdXAoaWQpKTtcblxuICAgIHByaXZhdGVzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChncm91cENvbnRhaW5lcik7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgZmlsdGVyIHRvIHRoZSBtZW51LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZ3JvdXAgaW4gd2hpY2ggdG8gaW5zZXJ0IHRoZVxuICAgKiAgIGZpbHRlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlcklkIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsdGVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgVGhlIGRpc3BsYXllZCBsYWJlbCBmb3IgdGhlIGZpbHRlci5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBbiBvYmplY3QgaG9sZGluZyBvcHRpb25zIGNvbnRyb2xsaW5nIHRoZVxuICAgKiAgIGZpbHRlciBpbnNlcnRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jb3VudD0wXSBUaGUgbnVtYmVyIG9mIHRhc2tzIG1hdGNoaW5nIHRoZSBmaWx0ZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5pbnNlcnRCZWZvcmVdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZmlsdGVyXG4gICAqICAgYmVmb3JlIHdoaWNoIHRoZSBuZXcgZmlsdGVyIHNob3VsZCBiZSBpbnNlcnRlZC4gSWYgbm90IGdpdmVuLCB0aGVuIHRoZVxuICAgKiAgIGZpbHRlciB3aWxsIGJlIGluc2VydGVkIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QuXG4gICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIHRoZSBncm91cCBpZGVudGlmaWVyIGlzIGludmFsaWQuXG4gICAqL1xuICBhZGRGaWx0ZXIoZ3JvdXBJZCwgZmlsdGVySWQsIGxhYmVsLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBncm91cEVsZW1lbnRzID0gZ2V0R3JvdXBFbGVtZW50cyh0aGlzLCBncm91cElkKTtcblxuICAgIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnZmlsdGVyLWl0ZW0nKTtcbiAgICBpdGVtLmRhdGFzZXQuZmlsdGVySWQgPSBmaWx0ZXJJZDtcbiAgICBpdGVtLmRhdGFzZXQuZmlsdGVyTGFiZWwgPSBsYWJlbDtcblxuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdmaWx0ZXItaXRlbS1zZWxlY3RvcicpO1xuICAgIGl0ZW0uYXBwZW5kQ2hpbGQoYnV0dG9uKTtcblxuICAgIGNvbnN0IGxhYmVsRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBsYWJlbEVsZW0uY2xhc3NMaXN0LmFkZCgnZmlsdGVyLWl0ZW0tbGFiZWwnKTtcbiAgICBsYWJlbEVsZW0udGV4dENvbnRlbnQgPSBsYWJlbDtcbiAgICBidXR0b24uYXBwZW5kQ2hpbGQobGFiZWxFbGVtKTtcblxuICAgIGNvbnN0IGNvdW50RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBjb3VudEVsZW0uY2xhc3NMaXN0LmFkZCgnZmlsdGVyLWl0ZW0tY291bnQnKTtcbiAgICBjb3VudEVsZW0udGV4dENvbnRlbnQgPSBvcHRpb25zLmNvdW50IHx8ICcnO1xuICAgIGJ1dHRvbi5hcHBlbmRDaGlsZChjb3VudEVsZW0pO1xuXG4gICAgbGV0IHJlZmVyZW5jZU5vZGUgPSBudWxsO1xuICAgIGlmIChvcHRpb25zLmluc2VydEJlZm9yZSkge1xuICAgICAgcmVmZXJlbmNlTm9kZSA9IGdldEZpbHRlckl0ZW1FbGVtZW50KHRoaXMsIGdyb3VwSWQsIG9wdGlvbnMuaW5zZXJ0QmVmb3JlKTtcbiAgICB9XG5cbiAgICBncm91cEVsZW1lbnRzLmZpbHRlckxpc3QuaW5zZXJ0QmVmb3JlKGl0ZW0sIHJlZmVyZW5jZU5vZGUpO1xuICAgIGdyb3VwRWxlbWVudHMuZmlsdGVySXRlbXMuc2V0KGZpbHRlcklkLCBpdGVtKTtcblxuICAgIGdyb3VwRWxlbWVudHMuY29sbGFwc2libGU/LnVwZGF0ZSgpO1xuXG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5zZWxlY3RGaWx0ZXIoZ3JvdXBJZCwgZmlsdGVySWQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGZpbHRlciBmcm9tIHRoZSBtZW51LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZ3JvdXAgY29udGFpbmluZyB0aGUgZmlsdGVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVySWQgVGhlIGlkZW50aWZpZXIgb2YgdGhlIGZpbHRlciB0byByZW1vdmUuXG4gICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIGVpdGhlciB0aGUgZ3JvdXAgb3IgZmlsdGVyIGlkZW50aWZpZXJzIGFyZVxuICAgKiAgIGludmFsaWQuXG4gICAqL1xuICByZW1vdmVGaWx0ZXIoZ3JvdXBJZCwgZmlsdGVySWQpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcblxuICAgIC8vIElmIGZpbHRlciBpcyBzZWxlY3RlZCwgY2xlYXIgc2VsZWN0aW9uXG4gICAgaWYgKHByaXZhdGVzLnNlbGVjdGVkRmlsdGVyLmdyb3VwID09PSBncm91cElkXG4gICAgICAmJiBwcml2YXRlcy5zZWxlY3RlZEZpbHRlci5maWx0ZXIgPT09IGZpbHRlcklkKSB7XG4gICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ3JvdXBFbGVtZW50cyA9IGdldEdyb3VwRWxlbWVudHModGhpcywgZ3JvdXBJZCk7XG4gICAgY29uc3QgaXRlbSA9IGdldEZpbHRlckl0ZW1FbGVtZW50KHRoaXMsIGdyb3VwSWQsIGZpbHRlcklkKTtcbiAgICBncm91cEVsZW1lbnRzLmZpbHRlckxpc3QucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgZ3JvdXBFbGVtZW50cy5maWx0ZXJJdGVtcy5kZWxldGUoZmlsdGVySWQpO1xuICAgIGdyb3VwRWxlbWVudHMuY29sbGFwc2libGU/LnVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgdGhlIGZpbHRlcnMgaW4gYSBmaWx0ZXIgZ3JvdXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGdyb3VwIHRvIGVtcHR5LlxuICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiB0aGUgZ3JvdXAgaWRlbnRpZmllciBpcyBpbnZhbGlkLlxuICAgKi9cbiAgcmVtb3ZlQWxsRmlsdGVycyhpZCkge1xuICAgIC8vIElmIGEgZmlsdGVyIGluIHRoZSBncm91cCBpcyBzZWxlY3RlZCwgY2xlYXIgc2VsZWN0aW9uXG4gICAgaWYgKHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5zZWxlY3RlZEZpbHRlci5ncm91cCA9PT0gaWQpIHtcbiAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBjb25zdCBncm91cEVsZW1lbnRzID0gZ2V0R3JvdXBFbGVtZW50cyh0aGlzLCBpZCk7XG4gICAgY29uc3QgbGlzdCA9IGdyb3VwRWxlbWVudHMuZmlsdGVyTGlzdDtcbiAgICBncm91cEVsZW1lbnRzLmZpbHRlckl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IGxpc3QucmVtb3ZlQ2hpbGQoaXRlbSkpO1xuICAgIGdyb3VwRWxlbWVudHMuZmlsdGVySXRlbXMuY2xlYXIoKTtcbiAgICBncm91cEVsZW1lbnRzLmNvbGxhcHNpYmxlPy51cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciBvciBub3QgYSBmaWx0ZXIgZXhpc3RzIGluIGEgZmlsdGVyIGdyb3VwLiBUaGlzIG1ldGhvZFxuICAgKiB3aWxsIHJldHVybiBmYWxzZSBpZiBlaXRoZXIgdGhlIGdyb3VwIGRvZXMgbm90IGV4aXN0LCBvciBpZiB0aGUgZmlsdGVyXG4gICAqIGRvZXMgbm90IGV4aXN0IHdpdGhpbiB0aGUgZ3JvdXAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBncm91cElkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBncm91cCBjb250YWluaW5nIHRoZSBmaWx0ZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWx0ZXJJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZmlsdGVyIHRvIHRlc3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBnaXZlbiBncm91cCBhbmQgZmlsdGVyIGV4aXN0IGluIHRoZSBmaWx0ZXJcbiAgICogICBtZW51LlxuICAgKi9cbiAgaGFzRmlsdGVyKGdyb3VwSWQsIGZpbHRlcklkKSB7XG4gICAgY29uc3QgZ3JvdXBFbGVtZW50cyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5ncm91cEVsZW1lbnRzLmdldChncm91cElkKTtcbiAgICByZXR1cm4gZ3JvdXBFbGVtZW50cyA/IGdyb3VwRWxlbWVudHMuZmlsdGVySXRlbXMuaGFzKGZpbHRlcklkKSA6IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cGFuZCBhIGZpbHRlciBncm91cCwgc28gdGhhdCBpdHMgZmlsdGVyIGl0ZW1zIGFyZSB2aXNpYmxlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBncm91cCB0byBiZSBleHBhbmRlZC5cbiAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgdGhlIGdyb3VwIGlkZW50aWZpZXIgaXMgaW52YWxpZC5cbiAgICovXG4gIGV4cGFuZEdyb3VwKGlkKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBnZXRHcm91cEVsZW1lbnRzKHRoaXMsIGlkKTtcbiAgICBjb25zdCB7IGNvbGxhcHNpYmxlLCBleHBhbmRJY29uIH0gPSBlbGVtZW50cztcbiAgICBpZiAoY29sbGFwc2libGUpIHtcbiAgICAgIGNvbGxhcHNpYmxlLmV4cGFuZCgpO1xuICAgICAgZXhwYW5kSWNvbi5zcmMgPSBFeHBhbmRlZEljb247XG4gICAgICBleHBhbmRJY29uLmFsdCA9ICdDb2xsYXBzZSc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbGxhcHNlIGEgZmlsdGVyIGdyb3VwLCBzbyB0aGF0IGl0cyBmaWx0ZXIgaXRlbXMgYXJlIGhpZGRlbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZ3JvdXAgdG8gYmUgY29sbGFwc2VkLlxuICAgKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBJZiB0aGUgZ3JvdXAgaWRlbnRpZmllciBpcyBpbnZhbGlkLlxuICAgKi9cbiAgY29sbGFwc2VHcm91cChpZCkge1xuICAgIGNvbnN0IGVsZW1lbnRzID0gZ2V0R3JvdXBFbGVtZW50cyh0aGlzLCBpZCk7XG4gICAgY29uc3QgeyBjb2xsYXBzaWJsZSwgZXhwYW5kSWNvbiB9ID0gZWxlbWVudHM7XG4gICAgaWYgKGNvbGxhcHNpYmxlKSB7XG4gICAgICBjb2xsYXBzaWJsZS5jb2xsYXBzZSgpO1xuICAgICAgZXhwYW5kSWNvbi5zcmMgPSBDb2xsYXBzZWRJY29uO1xuICAgICAgZXhwYW5kSWNvbi5hbHQgPSAnRXhwYW5kJztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBjb2xsYXBzZWQgc3RhdGUgb2YgYSBmaWx0ZXIgZ3JvdXAuIElmIHRoZSBncm91cCBpcyBjb2xsYXBzZWQsXG4gICAqIGl0IHdpbGwgYmUgZXhwYW5kZWQgYW5kIHZpY2UgdmVyc2EuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGdyb3VwIHRvIGV4cGFuZCBvciBjb2xsYXBzZS5cbiAgICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgdGhlIGdyb3VwIGlkZW50aWZpZXIgaXMgaW52YWxpZC5cbiAgICovXG4gIHRvZ2dsZUdyb3VwKGlkKSB7XG4gICAgY29uc3QgZWxlbWVudHMgPSBnZXRHcm91cEVsZW1lbnRzKHRoaXMsIGlkKTtcbiAgICBjb25zdCB7IGNvbGxhcHNpYmxlIH0gPSBlbGVtZW50cztcbiAgICBpZiAoY29sbGFwc2libGUpIHtcbiAgICAgIGlmIChjb2xsYXBzaWJsZS5jb2xsYXBzZWQpIHRoaXMuZXhwYW5kR3JvdXAoaWQpO1xuICAgICAgZWxzZSB0aGlzLmNvbGxhcHNlR3JvdXAoaWQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYW4gaWNvbiBidXR0b24gdG8gYSBncm91cCBoZWFkaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBJZCBUaGUgaWRlbnRpZmllciBvZiB0aGUgZ3JvdXAgaW4gd2hpY2ggdG8gaW5zZXJ0IHRoZVxuICAgKiAgIGljb24gYnV0dG9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgVVJMIGZvciB0aGUgaW1hZ2UgdG8gZGlzcGxheSBpbiB0aGVcbiAgICogICBidXR0b24uXG4gICAqIEBwYXJhbSB7bW9kdWxlOmRvbX5pbWFnZUJ1dHRvbk9wdGlvbnN9IFtvcHRpb25zPXt9XSBBbiBvYmplY3QgaG9sZGluZ1xuICAgKiAgIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGJ1dHRvbi5cbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSBBIHJlZmVyZW5jZSB0byB0aGUgYnV0dG9uIHRoYXQgd2FzIGNyZWF0ZWQuXG4gICAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IElmIHRoZSBncm91cCBpZGVudGlmaWVyIGlzIGludmFsaWQuXG4gICAqL1xuICBhZGRHcm91cEljb25CdXR0b24oZ3JvdXBJZCwgc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gZ2V0R3JvdXBFbGVtZW50cyh0aGlzLCBncm91cElkKTtcbiAgICBjb25zdCBpY29uQ29udGFpbmVyID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5pY29uLWNvbnRhaW5lcicpO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGNyZWF0ZUltYWdlQnV0dG9uKHNvdXJjZSwgb3B0aW9ucyk7XG4gICAgaWNvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgIHJldHVybiBidXR0b247XG4gIH1cblxuICAvKipcbiAgICogU2VsZWN0IGEgZmlsdGVyIGluIHRoZSBtZW51LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBJZCBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGdyb3VwIGNvbnRhaW5pbmcgdGhlIGZpbHRlclxuICAgKiAgIHRvIGJlIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVySWQgVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBmaWx0ZXIgdG8gYmUgc2VsZWN0ZWQuXG4gICAqIEBmaXJlcyBtb2R1bGU6ZmlsdGVyTWVudX5GaWx0ZXJNZW51fnNlbGVjdEZpbHRlclxuICAgKi9cbiAgc2VsZWN0RmlsdGVyKGdyb3VwSWQsIGZpbHRlcklkKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgc2lsZW50Q2xlYXJTZWxlY3Rpb24odGhpcyk7XG5cbiAgICAvLyBFeHBhbmQgdGhlIGNvbnRhaW5pbmcgZ3JvdXAgaWYgaXQgaXMgbm90IGFscmVhZHlcbiAgICB0aGlzLmV4cGFuZEdyb3VwKGdyb3VwSWQpO1xuXG4gICAgY29uc3QgbGlzdEl0ZW0gPSBnZXRGaWx0ZXJJdGVtRWxlbWVudCh0aGlzLCBncm91cElkLCBmaWx0ZXJJZCk7XG4gICAgbGlzdEl0ZW0uY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICBwcml2YXRlcy5zZWxlY3RlZEZpbHRlci5ncm91cCA9IGdyb3VwSWQ7XG4gICAgcHJpdmF0ZXMuc2VsZWN0ZWRGaWx0ZXIuZmlsdGVyID0gZmlsdGVySWQ7XG4gICAgY29uc3QgeyBmaWx0ZXJMYWJlbCB9ID0gbGlzdEl0ZW0uZGF0YXNldDtcbiAgICBwcml2YXRlcy5ldmVudEVtaXR0ZXIuZW1pdCgnc2VsZWN0LWZpbHRlcicsIHtcbiAgICAgIHR5cGU6ICdzZWxlY3QtZmlsdGVyJyxcbiAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIGdyb3VwSWQsXG4gICAgICBmaWx0ZXJJZCxcbiAgICAgIGZpbHRlckxhYmVsLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBmaWx0ZXIgc2VsZWN0aW9uLCBzbyB0aGF0IG5vbmUgb2YgdGhlIGZpbHRlcnMgaW4gdGhlIG1lbnUgYXJlXG4gICAqIHNlbGVjdGVkLlxuICAgKiBAZmlyZXMgbW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX5zZWxlY3RGaWx0ZXJcbiAgICovXG4gIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgIHNpbGVudENsZWFyU2VsZWN0aW9uKHRoaXMpO1xuICAgIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5ldmVudEVtaXR0ZXIuZW1pdCgnc2VsZWN0LWZpbHRlcicsIHtcbiAgICAgIHR5cGU6ICdzZWxlY3QtZmlsdGVyJyxcbiAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIGdyb3VwSWQ6IG51bGwsXG4gICAgICBmaWx0ZXJJZDogbnVsbCxcbiAgICAgIGZpbHRlckxhYmVsOiBudWxsLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSB0YXNrIGZpbHRlciB0aGF0IGlzIGN1cnJlbnRseSBzZWxlY3RlZCBpbiB0aGUgbWVudSwgaWYgYW55LlxuICAgKiBAcmV0dXJucyB7bW9kdWxlOmZpbHRlck1lbnV+RmlsdGVyTWVudX5maWx0ZXJJbmZvfSBBbiBvYmplY3QgZGVzY3JpYmluZ1xuICAgKiAgIHRoZSBzZWxlY3RlZCBmaWx0ZXIuXG4gICAqL1xuICBnZXRTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIF8uY2xvbmVEZWVwKHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5zZWxlY3RlZEZpbHRlcik7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBtZW51LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgZXZlbnQgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50XG4gICAqICAgaXMgZmlyZWQuXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmV2ZW50RW1pdHRlci5vbih0eXBlLCBsaXN0ZW5lcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlsdGVyTWVudTtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgW01vZGFsU3RhY2tde0BsaW5rIG1vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IGNsYXNzLlxuICogQG1vZHVsZSBtb2RhbFN0YWNrXG4gKi9cblxuaW1wb3J0IENsb3NlSWNvbiBmcm9tICcuLi9pbWFnZXMvY2xvc2Uuc3ZnJztcblxuaW1wb3J0IHsgY3JlYXRlSW1hZ2VCdXR0b24gfSBmcm9tICcuL3V0aWxpdHkvZG9tJztcblxuY29uc3QgRk9DVVNBQkxFX1NFTEVDVE9SID0gW1xuICAnYVtocmVmXScsXG4gICdpbnB1dCcsXG4gICdzZWxlY3QnLFxuICAndGV4dGFyZWEnLFxuICAnYnV0dG9uJyxcbl0uam9pbignLCAnKTtcbmNvbnN0IElDT05fV0lEVEggPSAyNDtcbmNvbnN0IElDT05fSEVJR0hUID0gMjQ7XG5jb25zdCBaX0lOREVYX1NUQVJUID0gNTAwO1xuY29uc3QgWl9JTkRFWF9TVEVQID0gMTAwO1xuY29uc3QgWl9JTkRFWF9PVkVSTEFZX1NURVAgPSA1MDtcblxuLyoqXG4gKiBJbnRlcmZhY2UgZm9yIGNsYXNzZXMgdGhhdCByZXByZXNlbnQgYSBtb2RhbCBkaWFsb2cuXG4gKiBAaW50ZXJmYWNlIE1vZGFsXG4gKi9cblxuLyoqXG4gKiBUaGUgdGl0bGUgb2YgdGhlIG1vZGFsLlxuICogQG1lbWJlciB7c3RyaW5nfSBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbCN0aXRsZVxuICovXG5cbi8qKlxuICogVGhlIGxhYmVsIHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBjb25maXJtIGJ1dHRvbiwgc2hvd24gYXQgdGhlIGJvdHRvbSBvZlxuICogdGhlIG1vZGFsLlxuICogQG1lbWJlciB7c3RyaW5nfSBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbCNjb25maXJtTGFiZWxcbiAqIEBkZWZhdWx0IE9rYXlcbiAqL1xuXG4vKipcbiAqIFRoZSBsYWJlbCB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciB0aGUgY2FuY2VsIGJ1dHRvbiwgc2hvd24gYXQgdGhlIGJvdHRvbSBvZlxuICogdGhlIG1vZGFsLlxuICogQG1lbWJlciB7c3RyaW5nfSBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbCNjYW5jZWxMYWJlbFxuICogQGRlZmF1bHQgQ2FuY2VsXG4gKi9cblxuLyoqXG4gKiBJbmRpY2F0ZXMgd2hldGhlciB0byBzaG93IHRoZSBjYW5jZWwgYnV0dG9uIGluIHRoZSBtb2RhbCB3aW5kb3cuIElmIHNldCB0b1xuICogdHJ1ZSwgdGhlbiB0aGUgYnV0dG9uIHNob3VsZCBub3QgYmUgZGlzcGxheWVkLlxuICogQG1lbWJlciB7Ym9vbGVhbn0gbW9kdWxlOm1vZGFsU3RhY2t+TW9kYWwjbm9DYW5jZWxCdXR0b25cbiAqIEBkZWZhdWx0IGZhbHNlXG4gKi9cblxuLyoqXG4gKiBJbmRpY2F0ZXMgd2hpY2ggZWxlbWVudCB0byBmb2N1cyBhZnRlciB0aGUgbW9kYWwgaGFzIGJlZW4gb3BlbmVkLiBUaGlzXG4gKiBwcm9wZXJ0eSBjYW4gZWl0aGVyIGdpdmUgdGhlIGVsZW1lbnQgaXRzZWxmLCBvciBjYW4gYmUgYSBzdHJpbmcgd2l0aCBvbmUgb2ZcbiAqIHRoZSBmb2xsb3dpbmcgb3B0aW9uczogJ2NvbmZpcm0nIHdpbGwgZm9jdXMgdGhlIENvbmZpcm0gYnV0dG9uIGluIHRoZSBtb2RhbCxcbiAqICdjYW5jZWwnIHdpbGwgZm9jdXMgdGhlIENhbmNlbCBidXR0b24sIGFuZCAnbm9uZScgd2lsbCBmb2N1cyBub3RoaW5nLlxuICogQG1lbWJlciB7SFRNTEVsZW1lbnR8c3RyaW5nfSBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbCNpbml0Rm9jdXNcbiAqIEBkZWZhdWx0IGNvbmZpcm1cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhbmQgZGlzcGxheSB0aGUgbW9kYWwncyBtYWluIGNvbnRlbnQuXG4gKiBAZnVuY3Rpb24gbW9kdWxlOm1vZGFsU3RhY2t+TW9kYWwjYWRkQ29udGVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IFRoZSBwYXJlbnQgRE9NIG5vZGUgdW5kZXIgd2hpY2ggdGhlIG1vZGFsJ3MgbWFpblxuICogICBjb250ZW50IHdpbGwgYmUgaW5zZXJ0ZWQuXG4gKiBAcGFyYW0ge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IG1vZGFsU3RhY2sgVGhlIG1vZGFsIHN0YWNrIGluIHdoaWNoXG4gKiAgIHRoZSBtb2RhbCBpcyBiZWluZyBpbnNlcnRlZC5cbiAqL1xuXG4vKipcbiAqIENvbmZpcm0gdGhlIG1vZGFsLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgaW52b2tlZCB3aGVuIHRoZSBtb2RhbCBpc1xuICogc3VjY2VzZnVsbHkgY29uZmlybWVkIGJ5IHRoZSB1c2VyLlxuICogQGZ1bmN0aW9uIG1vZHVsZTptb2RhbFN0YWNrfk1vZGFsI2NvbmZpcm1cbiAqL1xuXG4vKipcbiAqIENhbmNlbCB0aGUgbW9kYWwuIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBpbnZva2VkIHdoZW4gdGhlIG1vZGFsIGlzIGNhbmNlbGVkXG4gKiBieSB0aGUgdXNlci5cbiAqIEBmdW5jdGlvbiBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbCNjYW5jZWxcbiAqL1xuXG4vKipcbiAqIFZhbGlkYXRlIHRoZSBtb2RhbC4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGludm9rZWQgd2hlbiB0aGUgdXNlciBhdHRlbXB0cyB0b1xuICogY29uZmlybSB0aGUgbW9kYWwuXG4gKiBAZnVuY3Rpb24gbW9kdWxlOm1vZGFsU3RhY2t+TW9kYWwjdmFsaWRhdGVcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB1c2VyJ3Mgc2VsZWN0aW9ucyBoYXZlIHBhc3NlZCB2YWxpZGF0aW9uLCBhbmRcbiAqICAgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5cbi8qKlxuICogT2JqZWN0IGhvbGRpbmcgcHJpdmF0ZSBtZW1iZXJzIGZvciB0aGVcbiAqIFtNb2RhbFN0YWNrXXtAbGluayBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbFN0YWNrfSBjbGFzcy5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IG92ZXJsYXkgVGhlIHNjcmVlbiBvdmVybGF5IGVsZW1lbnQgaW4gdGhlIERPTS5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IHBhcmVudCBUaGUgcGFyZW50IGVsZW1lbnQgdW5kZXIgd2hpY2ggbW9kYWxzIHNob3VsZFxuICogICBiZSBpbnNlcnRlZC5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IFtiYWNrZ3JvdW5kXSBDb250YWluZXIgaG9sZGluZyBiYWNrZ3JvdW5kIGVsZW1lbnRzXG4gKiAgIHRoYXQgc2hvdWxkIGJlIGhpZGRlbiB3aGVuIGEgbW9kYWwgaXMgb3Blbi5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWxTdGFja35tb2RhbEluZm9bXX0gbW9kYWxzIFRoZSBzdGFjayBvZlxuICogICBtb2RhbCBkaWFsb2dzLlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZSBkYXRhIGZvciB0aGUgW01vZGFsU3RhY2tde0BsaW5rIG1vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9XG4gKiBjbGFzcy5cbiAqIEB0eXBlIHtXZWFrTWFwfVxuICogQHNlZSBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbFN0YWNrfnByaXZhdGVzXG4gKi9cbmNvbnN0IHByaXZhdGVNZW1iZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIHotaW5kZXggZm9yIGEgbW9kYWwgZGlhbG9nLlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgZGlhbG9nIGluIHRoZSBzdGFjay5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSB6LWluZGV4IHRoYXQgdGhlIG1vZGFsIHNob3VsZCBiZSBzZXQgdG8uXG4gKi9cbmZ1bmN0aW9uIGdldFpJbmRleChpbmRleCkge1xuICByZXR1cm4gWl9JTkRFWF9TVEFSVCArIChpbmRleCAtIDEpICogWl9JTkRFWF9TVEVQO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB0aGUgbW9kYWwgb3ZlcmxheS4gVGhlIG92ZXJsYXkgd2lsbCBiZSBzaG93biBvciBoaWRkZW4gZGVwZW5kaW5nIG9uXG4gKiB3aGV0aGVyIGFueSBtb2RhbHMgYXJlIG9wZW4sIGFuZCBpdHMgei1pbmRleCB3aWxsIGJlIGFkanVzdGVkIHRvIHNpdCBiZWxvd1xuICogdGhlIHRvcG1vc3QgbW9kYWwuXG4gKiBAcGFyYW0ge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaFxuICogICB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU92ZXJsYXkoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCBjb3VudCA9IHByaXZhdGVzLm1vZGFscy5sZW5ndGg7XG4gIGlmIChjb3VudCA+IDApIHtcbiAgICBjb25zdCB6SW5kZXggPSBnZXRaSW5kZXgoY291bnQpIC0gWl9JTkRFWF9PVkVSTEFZX1NURVA7XG4gICAgcHJpdmF0ZXMub3ZlcmxheS5zdHlsZS56SW5kZXggPSB6SW5kZXgudG9TdHJpbmcoKTtcbiAgICBwcml2YXRlcy5vdmVybGF5LmNsYXNzTGlzdC5yZW1vdmUoJ2Nsb3NlZCcpO1xuICB9IGVsc2Uge1xuICAgIHByaXZhdGVzLm92ZXJsYXkuY2xhc3NMaXN0LmFkZCgnY2xvc2VkJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG93IHRoZSBtb2RhbCBvdmVybGF5IGFuZCBoaWRlIGFueSBiYWNrZ3JvdW5kIGVsZW1lbnRzLlxuICogQHBhcmFtIHttb2R1bGU6bW9kYWxTdGFja35Nb2RhbFN0YWNrfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2hcbiAqICAgdG8gYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBoaWRlQmFja2dyb3VuZChpbnN0YW5jZSkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGxldCB0b0hpZGUgPSBudWxsO1xuXG4gIC8vIElmIHRoaXMgaXMgdGhlIGZpcnN0IG1vZGFsLCBoaWRlIHBhZ2UgYmFja2dyb3VuZFxuICBpZiAocHJpdmF0ZXMubW9kYWxzLmxlbmd0aCA8PSAxKSB7XG4gICAgdG9IaWRlID0gcHJpdmF0ZXMuYmFja2dyb3VuZDtcbiAgfSBlbHNlIHsgLy8gT3RoZXJ3aXNlLCBoaWRlIHRoZSBtb2RhbCBiZWxvdyB0aGUgdG9wbW9zdCBvbmVcbiAgICB0b0hpZGUgPSBwcml2YXRlcy5tb2RhbHNbcHJpdmF0ZXMubW9kYWxzLmxlbmd0aCAtIDJdLndyYXBwZXI7XG4gIH1cblxuICBpZiAodG9IaWRlKSB7XG4gICAgdG9IaWRlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgY29uc3QgeyBvbGRUYWJJbmRleCB9ID0gcHJpdmF0ZXMubW9kYWxzW3ByaXZhdGVzLm1vZGFscy5sZW5ndGggLSAxXTtcbiAgICB0b0hpZGUucXVlcnlTZWxlY3RvckFsbChGT0NVU0FCTEVfU0VMRUNUT1IpLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgIGNvbnN0IHRhYkluZGV4ID0gZWxlbS5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykgPyBlbGVtLnRhYkluZGV4IDogbnVsbDtcbiAgICAgIG9sZFRhYkluZGV4LnB1c2goeyBlbGVtZW50OiBlbGVtLCB0YWJJbmRleCB9KTtcbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlT3ZlcmxheShpbnN0YW5jZSk7XG59XG5cbi8qKlxuICogUmVzdG9yZSBiYWNrZ3JvdW5kIGVsZW1lbnQgdmlzaWJpbGl0eS4gSWYgdGhlcmUgYXJlIHN0aWxsIG1vZGFscyBvcGVuLFxuICogb25seSB0aGUgdG9wbW9zdCBtb2RhbCdzIGVsZW1lbnRzIHdpbGwgYmVjb21lIHZpc2libGUuIElmIGFsbCBtb2RhbHMgYXJlXG4gKiBjbG9zZWQsIHRoZW4gdGhlIG92ZXJsYXkgd2lsbCBiZSBoaWRkZW4uXG4gKiBAcGFyYW0ge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaFxuICogICB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t+ZWxlbVRhYkluZGV4W119IG9sZFRhYkluZGV4IEFuIGFycmF5IG9mXG4gKiAgIG9iamVjdHMgc3BlY2lmeWluZyBlbGVtZW50cyB3aG9zZSB0YWJpbmRleCBhdHRyaWJ1dGVzIG5lZWQgdG8gYmUgcmVzdG9yZWQuXG4gKi9cbmZ1bmN0aW9uIHJlc3RvcmVCYWNrZ3JvdW5kKGluc3RhbmNlLCBvbGRUYWJJbmRleCkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGxldCB0b1Jlc3RvcmUgPSBudWxsO1xuXG4gIC8vIElmIG5vIG1vZGFscyByZW1haW4gb3BlbiwgcmVzdG9yZSB0aGUgcGFnZSBiYWNrZ3JvdW5kXG4gIGlmIChwcml2YXRlcy5tb2RhbHMubGVuZ3RoID09PSAwKSB7XG4gICAgdG9SZXN0b3JlID0gcHJpdmF0ZXMuYmFja2dyb3VuZDtcbiAgfSBlbHNlIHtcbiAgICB0b1Jlc3RvcmUgPSBwcml2YXRlcy5tb2RhbHNbcHJpdmF0ZXMubW9kYWxzLmxlbmd0aCAtIDFdLndyYXBwZXI7XG4gIH1cblxuICBpZiAodG9SZXN0b3JlKSB7XG4gICAgdG9SZXN0b3JlLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICBvbGRUYWJJbmRleC5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgY29uc3QgeyBlbGVtZW50LCB0YWJJbmRleCB9ID0gZW50cnk7XG4gICAgICBpZiAodGFiSW5kZXggIT09IG51bGwpIGVsZW1lbnQudGFiSW5kZXggPSB0YWJJbmRleDtcbiAgICAgIGVsc2UgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVPdmVybGF5KGluc3RhbmNlKTtcbn1cblxuLyoqXG4gKiBNYW5hZ2VzIGFuZCBkaXNwbGF5cyBhIHN0YWNrIG9mIG1vZGFsIGRpYWxvZyB3aW5kb3dzLlxuICovXG5jbGFzcyBNb2RhbFN0YWNrIHtcbiAgLyoqXG4gICAqIEhvbGRzIGluZm9ybWF0aW9uIGFib3V0IGFuIGVsZW1lbnQncyB0YWIgaW5kZXgsIHVzZWQgZm9yIGNoYW5naW5nIGFuZFxuICAgKiByZXN0b3JpbmcgdGFiIG9yZGVyIHdoZW4gbW9kYWxzIGFyZSBvcGVuZWQgb3IgY2xvc2VkLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6bW9kYWxTdGFja35Nb2RhbFN0YWNrfmVsZW1UYWJJbmRleFxuICAgKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBlbGVtZW50IEFuIGVsZW1lbnQgaW4gdGhlIERPTS5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IFt0YWJJbmRleF0gVGhlIHRhYiBpbmRleCBvZiB0aGUgZWxlbWVudCwgb3IgbnVsbCBpZiBpdFxuICAgKiAgIGlzIG5vdCBzZXQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBIb2xkcyBpbmZvcm1hdGlvbiBhYm91dCBhIG1vZGFsIGRpYWxvZyBpbiB0aGUgc3RhY2suXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t+bW9kYWxJbmZvXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWx9IG1vZGFsIFRoZSBtb2RhbCBpbnN0YW5jZS5cbiAgICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gd3JhcHBlciBUaGUgb3V0ZXIgd3JhcHBlciBub2RlIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgKiAgIG1vZGFsIHdpbmRvdyBjb250YWluZXIuXG4gICAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciBUaGUgY29udGFpbmVyIG5vZGUgaG9sZGluZyB0aGUgbW9kYWxcbiAgICogICBkaWFsb2cuXG4gICAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRlbnQgVGhlIERPTSBub2RlIGhvbGRpbmcgdGhlIG1haW4gY29udGVudHMgb2ZcbiAgICogICB0aGUgbW9kYWwgZGlhbG9nLlxuICAgKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBbb2xkQWN0aXZlXSBUaGUgZWxlbWVudCB0aGF0IGhhZCBrZXlib2FyZCBmb2N1c1xuICAgKiAgIGJlZm9yZSB0aGUgbW9kYWwgd2FzIG9wZW5lZCwgaWYgYW55LlxuICAgKiBAcHJvcGVydHkge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t+ZWxlbVRhYkluZGV4W119IG9sZFRhYkluZGV4IEFuXG4gICAqICAgYXJyYXkgb2Ygb2JqZWN0cyBzcGVjaWZ5aW5nIGVsZW1lbnRzIHdob3NlIHRhYmluZGV4IGF0dHJpYnV0ZXMgbmVlZCB0b1xuICAgKiAgIGJlIHJlc3RvcmVkIGFmdGVyIHRoZSBtb2RhbCBpcyBjbG9zZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBtb2RhbCBzdGFjay4gQSBoaWRkZW4gb3ZlcmxheSB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlXG4gICAqIERPTS5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW3BhcmVudD1kb2N1bWVudC5ib2R5XSBUaGUgcGFyZW50IG5vZGUgdW5kZXIgd2hpY2hcbiAgICogICB0aGUgbW9kYWwgb3ZlcmxheSBpcyB0byBiZSBpbnNlcnRlZC5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gW2JhY2tncm91bmRdIEEgRE9NIG5vZGUgY29udGFpbmluZyBlbGVtZW50cyB0aGF0XG4gICAqICAgc2hvdWxkIGJlIGhpZGRlbiBmcm9tIHNjcmVlbiByZWFkZXJzIGFuZCBtYWRlIHVuZm9jdXNhYmxlIHdoaWxlIGEgbW9kYWxcbiAgICogICBpcyBvcGVuLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyZW50ID0gZG9jdW1lbnQuYm9keSwgYmFja2dyb3VuZCA9IG51bGwpIHtcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgb3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdtb2RhbC1vdmVybGF5JywgJ2Nsb3NlZCcpO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChvdmVybGF5KTtcblxuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgb3ZlcmxheSxcbiAgICAgIHBhcmVudCxcbiAgICAgIGJhY2tncm91bmQ6IGJhY2tncm91bmQgfHwgbnVsbCxcbiAgICAgIG1vZGFsczogW10sXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICBpZiAocHJpdmF0ZXMubW9kYWxzLmxlbmd0aCA+IDBcbiAgICAgICAgJiYgKGUua2V5ID09PSAnRXNjYXBlJyB8fCBlLmtleSA9PT0gJ0VzYycpKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsTW9kYWwoKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BsYXkgYSBtb2RhbCBkaWFsb2cuXG4gICAqIEBwYXJhbSB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWx9IG1vZGFsIFRoZSBtb2RhbCBkaWFsb2cgdG8gc2hvdy5cbiAgICovXG4gIHNob3dNb2RhbChtb2RhbCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgY29uc3Qgb2xkQWN0aXZlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAob2xkQWN0aXZlKSBvbGRBY3RpdmUuYmx1cigpO1xuXG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHdyYXBwZXIuY2xhc3NMaXN0LmFkZCgnbW9kYWwtd3JhcHBlcicpO1xuICAgIHdyYXBwZXIuc3R5bGUuekluZGV4ID0gZ2V0WkluZGV4KHByaXZhdGVzLm1vZGFscy5sZW5ndGggKyAxKTtcblxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtb2RhbCcpO1xuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIGNvbnN0IHRpdGxlQmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgdGl0bGVCYXIuY2xhc3NMaXN0LmFkZCgnbW9kYWwtdGl0bGUtYmFyJyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRpdGxlQmFyKTtcblxuICAgIGNvbnN0IHRpdGxlVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRpdGxlVGV4dC5jbGFzc0xpc3QuYWRkKCdtb2RhbC10aXRsZScpO1xuICAgIHRpdGxlVGV4dC50ZXh0Q29udGVudCA9IG1vZGFsLnRpdGxlO1xuICAgIHRpdGxlQmFyLmFwcGVuZENoaWxkKHRpdGxlVGV4dCk7XG4gICAgY29uc3QgY2xvc2VJY29uID0gY3JlYXRlSW1hZ2VCdXR0b24oQ2xvc2VJY29uLCB7XG4gICAgICBhbHRUZXh0OiAnQ2xvc2UnLFxuICAgICAgd2lkdGg6IElDT05fV0lEVEgsXG4gICAgICBoZWlnaHQ6IElDT05fSEVJR0hULFxuICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuY2FuY2VsTW9kYWwoKSxcbiAgICB9KTtcbiAgICB0aXRsZUJhci5hcHBlbmRDaGlsZChjbG9zZUljb24pO1xuXG4gICAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRlbnQuY2xhc3NMaXN0LmFkZCgnbW9kYWwtY29udGVudCcpO1xuICAgIG1vZGFsLmFkZENvbnRlbnQoY29udGVudCwgdGhpcyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYnV0dG9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ21vZGFsLWJ1dHRvbi1jb250YWluZXInKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYnV0dG9uQ29udGFpbmVyKTtcblxuICAgIGxldCBjYW5jZWxCdXR0b24gPSBudWxsO1xuICAgIGlmICghbW9kYWwubm9DYW5jZWxCdXR0b24pIHtcbiAgICAgIGNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgY2FuY2VsQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21vZGFsLWJ1dHRvbicpO1xuICAgICAgY2FuY2VsQnV0dG9uLnRleHRDb250ZW50ID0gbW9kYWwuY2FuY2VsTGFiZWwgfHwgJ0NhbmNlbCc7XG4gICAgICBjYW5jZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmNhbmNlbE1vZGFsKCkpO1xuICAgICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNhbmNlbEJ1dHRvbik7XG4gICAgfVxuXG4gICAgY29uc3Qgb2theUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIG9rYXlCdXR0b24uY2xhc3NMaXN0LmFkZCgnbW9kYWwtYnV0dG9uJywgJ21vZGFsLW9rYXknKTtcbiAgICBva2F5QnV0dG9uLnRleHRDb250ZW50ID0gbW9kYWwuY29uZmlybUxhYmVsIHx8ICdPa2F5JztcbiAgICBva2F5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5jb25maXJtTW9kYWwoKSk7XG4gICAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKG9rYXlCdXR0b24pO1xuXG4gICAgY29uc3QgbW9kYWxJbmZvID0ge1xuICAgICAgbW9kYWwsXG4gICAgICB3cmFwcGVyLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgY29udGVudCxcbiAgICAgIG9sZEFjdGl2ZSxcbiAgICAgIG9sZFRhYkluZGV4OiBbXSxcbiAgICB9O1xuXG4gICAgcHJpdmF0ZXMubW9kYWxzLnB1c2gobW9kYWxJbmZvKTtcbiAgICBwcml2YXRlcy5wYXJlbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgaGlkZUJhY2tncm91bmQodGhpcyk7XG5cbiAgICBpZiAodHlwZW9mIG1vZGFsLmluaXRGb2N1cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN3aXRjaCAobW9kYWwuaW5pdEZvY3VzKSB7XG4gICAgICAgIGNhc2UgJ2NvbmZpcm0nOlxuICAgICAgICAgIG9rYXlCdXR0b24uZm9jdXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY2FuY2VsJzpcbiAgICAgICAgICBpZiAoY2FuY2VsQnV0dG9uKSBjYW5jZWxCdXR0b24uZm9jdXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtb2RhbC5pbml0Rm9jdXMpIHtcbiAgICAgIG1vZGFsLmluaXRGb2N1cy5mb2N1cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBva2F5QnV0dG9uLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlIHRoZSB0b3Btb3N0IG1vZGFsIGRpYWxvZy4gVGhpcyB3aWxsIG5vdCBpbnZva2UgdGhlIGFzc29jaWF0ZWRcbiAgICogY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqL1xuICBjbG9zZU1vZGFsKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIGNvbnN0IG1vZGFsSW5mbyA9IHByaXZhdGVzLm1vZGFscy5wb3AoKTtcbiAgICBpZiAobW9kYWxJbmZvKSB7XG4gICAgICBwcml2YXRlcy5wYXJlbnQucmVtb3ZlQ2hpbGQobW9kYWxJbmZvLndyYXBwZXIpO1xuICAgICAgcmVzdG9yZUJhY2tncm91bmQodGhpcywgbW9kYWxJbmZvLm9sZFRhYkluZGV4KTtcbiAgICAgIGlmIChtb2RhbEluZm8ub2xkQWN0aXZlKSBtb2RhbEluZm8ub2xkQWN0aXZlLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gY29uZmlybSB0aGUgdG9wbW9zdCBtb2RhbCBkaWFsb2cuIFRoZSBtb2RhbCdzXG4gICAqIFt2YWxpZGF0ZV17QGxpbmsgbW9kdWxlOm1vZGFsU3RhY2t+TW9kYWwjdmFsaWRhdGV9IG1ldGhvZCB3aWxsIGZpcnN0IGJlXG4gICAqIGludm9rZWQuIElmIHRoZSBtb2RhbCBwYXNzZXMgdmFsaWRhdGlvbiwgdGhlbiBpdHNcbiAgICogW2NvbmZpcm1de0BsaW5rIG1vZHVsZTptb2RhbFN0YWNrfk1vZGFsI2NvbmZpcm19IG1ldGhvZCBpcyBpbnZva2VkLCBhbmRcbiAgICogdGhlbiB0aGUgbW9kYWwgaXMgY2xvc2VkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgbW9kYWwgd2FzIHN1Y2Nlc3NmdWxseSBjb25maXJtZWQsIGFuZCBmYWxzZVxuICAgKiAgIGlmIHRoZSBtb2RhbCBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICovXG4gIGNvbmZpcm1Nb2RhbCgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBpZiAocHJpdmF0ZXMubW9kYWxzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgY29uc3QgeyBtb2RhbCB9ID0gcHJpdmF0ZXMubW9kYWxzW3ByaXZhdGVzLm1vZGFscy5sZW5ndGggLSAxXTtcbiAgICBpZiAoIW1vZGFsLnZhbGlkYXRlKCkpIHJldHVybiBmYWxzZTtcblxuICAgIG1vZGFsLmNvbmZpcm0oKTtcbiAgICB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWwgdGhlIHRvcG1vc3QgbW9kYWwgZGlhbG9nLiBUaGlzIHdpbGwgaW52b2tlIHRoZSBtb2RhbCdzXG4gICAqIFtjYW5jZWxde0BsaW5rIG1vZHVsZTptb2RhbFN0YWNrfk1vZGFsI2NhbmNlbH0gbWV0aG9kLCBhbmQgdGhlbiB0aGUgbW9kYWxcbiAgICogd2lsbCBiZSBjbG9zZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBmYWxzZSBpZiBpdCBpcyBjYWxsZWQgd2hlblxuICAgKiAgIHRoZXJlIGFyZSBubyBtb2RhbHMgaW4gdGhlIHN0YWNrLiBPdGhlcndpc2UgaXQgcmV0dXJucyB0cnVlLlxuICAgKi9cbiAgY2FuY2VsTW9kYWwoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKHByaXZhdGVzLm1vZGFscy5sZW5ndGggPT09IDApIHJldHVybiBmYWxzZTtcblxuICAgIHByaXZhdGVzLm1vZGFsc1twcml2YXRlcy5tb2RhbHMubGVuZ3RoIC0gMV0ubW9kYWwuY2FuY2VsKCk7XG4gICAgdGhpcy5jbG9zZU1vZGFsKCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW9kYWxTdGFjaztcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgW0FkZFByb2plY3RNb2RhbF17QGxpbmsgbW9kdWxlOmFkZFByb2plY3RNb2RhbH5BZGRQcm9qZWN0TW9kYWx9XG4gKiBjbGFzcy5cbiAqIEBtb2R1bGUgYWRkUHJvamVjdE1vZGFsXG4gKi9cblxuaW1wb3J0IFByb2plY3QgZnJvbSAnLi4vcHJvamVjdCc7XG5pbXBvcnQgeyBjcmVhdGVGb3JtQ29udHJvbCB9IGZyb20gJy4uL3V0aWxpdHkvZG9tJztcblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW0FkZFByb2plY3RNb2RhbF17QGxpbmsgbW9kdWxlOmFkZFByb2plY3RNb2RhbH5BZGRQcm9qZWN0TW9kYWx9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmFkZFByb2plY3RNb2RhbH5BZGRQcm9qZWN0TW9kYWx+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnByb2plY3R+UHJvamVjdH0gW3Byb2plY3RdIFRoZSBwcm9qZWN0IGJlaW5nIGVkaXRlZCwgaWZcbiAqICAgYW55LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG1vZGUgSW5kaWNhdGVzIHRoZSBzdGF0dXMgb2YgdGhlIHByb2plY3QgYmVpbmcgZW50ZXJlZC5cbiAqICAgSWYgc2V0IHRvICdhZGQnLCBhIG5ldyBwcm9qZWN0IGlzIGJlaW5nIGNyZWF0ZWQsIGFuZCBpZiBzZXQgdG8gJ2VkaXQnLFxuICogICB0aGVuIGFuIGV4aXN0aW5nIHByb2plY3QgaXMgYmVpbmcgdXBkYXRlZC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjYWxsYmFja3MgQW4gb2JqZWN0IGhvbGRpbmcgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jb25maXJtXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjYWxsYmFja3MuY2FuY2VsXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2FuY2VscyB0aGUgbW9kYWwuXG4gKiBAcHJvcGVydHkge09iamVjdH0gY29udHJvbHMgQW4gb2JqZWN0IGhvbGRpbmcgdGhlIGZvcm0gaW5wdXQgZWxlbWVudHMgZm9yXG4gKiAgIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzLm5hbWUgVGhlIHRleHQgaW5wdXQgZWxlbWVudCBmb3IgdGhlIHByb2plY3RcbiAqICAgbmFtZS5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzLmRlc2NyaXB0aW9uIFRoZSB0ZXh0YXJlYSBlbGVtZW50IGZvciB0aGVcbiAqICAgcHJvamVjdCBkZXNjcmlwdGlvbi5cbiAqL1xuXG4vKipcbiAqIEhvbGRzIHByaXZhdGUgZGF0YSBmb3IgdGhlXG4gKiBbQWRkUHJvamVjdE1vZGFsXXtAbGluayBtb2R1bGU6YWRkUHJvamVjdE1vZGFsfkFkZFByb2plY3RNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOmFkZFByb2plY3RNb2RhbH5BZGRQcm9qZWN0TW9kYWx+cHJpdmF0ZXNcbiAqL1xuY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIHZhbHVlcyBvZiB0aGUgZm9ybSBlbGVtZW50cyBiYXNlZCBvbiB0aGUgaW5pdGlhbCBwcm9qZWN0IHRoYXRcbiAqIHdhcyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLCBpZiBhbnkuXG4gKiBAcGFyYW0ge21vZHVsZTphZGRQcm9qZWN0TW9kYWx+QWRkUHJvamVjdE1vZGFsfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2VcbiAqICAgb24gd2hpY2ggdG8gYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBpbml0Rm9ybVZhbHVlcyhpbnN0YW5jZSkge1xuICBjb25zdCB7IHByb2plY3QsIGNvbnRyb2xzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuXG4gIGlmIChwcm9qZWN0KSB7XG4gICAgY29udHJvbHMubmFtZS52YWx1ZSA9IHByb2plY3QubmFtZSB8fCAnJztcbiAgICBjb250cm9scy5kZXNjcmlwdGlvbi52YWx1ZSA9IHByb2plY3QuZGVzY3JpcHRpb24gfHwgJyc7XG4gIH1cbn1cblxuLyoqXG4gKiBBIG1vZGFsIGRpYWxvZyBmb3IgYWRkaW5nIG9yIGVkaXRpbmcgYSBwcm9qZWN0LlxuICogQGltcGxlbWVudHMge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsfVxuICovXG5jbGFzcyBBZGRQcm9qZWN0TW9kYWwge1xuICAvKipcbiAgICogU3BlY2lmaWVzIG9wdGlvbnMgZm9yIHRoZSBtb2RhbC5cbiAgICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmFkZFByb2plY3RNb2RhbH5BZGRQcm9qZWN0TW9kYWx+b3B0aW9uc1xuICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY29uZmlybV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZFxuICAgKiAgIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmVcbiAgICogICBwYXNzZWQgdGhlIG5ldyAob3IgbW9kaWZpZWQpIHByb2plY3QuXG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjYW5jZWxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWRcbiAgICogICB3aGVuIHRoZSB1c2VyIGNhbmNlbHMgdGhlIG1vZGFsLlxuICAgKiBAcHJvcGVydHkge21vZHVsZTpwcm9qZWN0flByb2plY3R9IFtwcm9qZWN0XSBUaGUgcHJvamVjdCB0byBlZGl0LiBJZiBub3RcbiAgICogICBnaXZlbiwgdGhlbiBhIG5ldyBwcm9qZWN0IGlzIGNyZWF0ZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHttb2R1bGU6YWRkUHJvamVjdE1vZGFsfkFkZFByb2plY3RNb2RhbH5vcHRpb25zfSBbb3B0aW9ucz17fV0gQW5cbiAgICogICBvYmplY3QgaG9sZGluZyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBtb2RhbC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgcHJvamVjdDogb3B0aW9ucy5wcm9qZWN0IHx8IG51bGwsXG4gICAgICBtb2RlOiBvcHRpb25zLnByb2plY3QgPyAnZWRpdCcgOiAnYWRkJyxcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICBjb25maXJtOiBvcHRpb25zLmNvbmZpcm0gfHwgbnVsbCxcbiAgICAgICAgY2FuY2VsOiBvcHRpb25zLmNhbmNlbCB8fCBudWxsLFxuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgfSxcbiAgICB9O1xuICAgIHByaXZhdGVNZW1iZXJzLnNldCh0aGlzLCBwcml2YXRlcyk7XG4gIH1cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgcmV0dXJuIChwcml2YXRlcy5tb2RlID09PSAnZWRpdCcpID8gJ0VkaXQgUHJvamVjdCcgOiAnQWRkIFByb2plY3QnO1xuICB9XG5cbiAgZ2V0IGNvbmZpcm1MYWJlbCgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICByZXR1cm4gKHByaXZhdGVzLm1vZGUgPT09ICdlZGl0JykgPyAnVXBkYXRlJyA6ICdBZGQnO1xuICB9XG5cbiAgZ2V0IGluaXRGb2N1cygpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmNvbnRyb2xzLm5hbWU7XG4gIH1cblxuICBhZGRDb250ZW50KHBhcmVudCkge1xuICAgIGNvbnN0IGNvbnRhaW5lclR5cGUgPSB7IGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWNvbnRhaW5lciddIH07XG4gICAgY29uc3QgbGFiZWxUeXBlID0gKHZhbHVlKSA9PiAoeyB2YWx1ZSwgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtbGFiZWwnXSB9KTtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgaWQ6ICdwcm9qZWN0LW5hbWUnLFxuICAgICAgbmFtZTogJ3Byb2plY3QtbmFtZScsXG4gICAgICBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dCddLFxuICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICBsYWJlbDogbGFiZWxUeXBlKCdOYW1lJyksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclR5cGUsXG4gICAgfSkpO1xuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICd0ZXh0YXJlYScsXG4gICAgICBpZDogJ3Byb2plY3QtZGVzY3JpcHRpb24nLFxuICAgICAgbmFtZTogJ3Byb2plY3QtZGVzY3JpcHRpb24nLFxuICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0tdGV4dGFyZWEnXSxcbiAgICAgIGxhYmVsOiBsYWJlbFR5cGUoJ0Rlc2NyaXB0aW9uJyksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclR5cGUsXG4gICAgICBzaXplOiB7IHJvd3M6IDQsIGNvbHM6IDIwIH0sXG4gICAgfSkpO1xuXG4gICAgcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmNvbnRyb2xzID0ge1xuICAgICAgbmFtZTogcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LW5hbWUnKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBwYXJlbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3QtZGVzY3JpcHRpb24nKSxcbiAgICB9O1xuXG4gICAgaW5pdEZvcm1WYWx1ZXModGhpcyk7XG4gIH1cblxuICBjb25maXJtKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIGNvbnN0IHsgY29udHJvbHMgfSA9IHByaXZhdGVzO1xuICAgIGNvbnN0IHByb2plY3QgPSBuZXcgUHJvamVjdChjb250cm9scy5uYW1lLnZhbHVlLCB7XG4gICAgICBkZXNjcmlwdGlvbjogY29udHJvbHMuZGVzY3JpcHRpb24udmFsdWUgfHwgbnVsbCxcbiAgICB9KTtcblxuICAgIGlmIChwcml2YXRlcy5jYWxsYmFja3MuY29uZmlybSkgcHJpdmF0ZXMuY2FsbGJhY2tzLmNvbmZpcm0ocHJvamVjdCk7XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKHByaXZhdGVzLmNhbGxiYWNrcy5jYW5jZWwpIHByaXZhdGVzLmNhbGxiYWNrcy5jYW5jZWwoKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIGlmICghcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmNvbnRyb2xzLm5hbWUucmVwb3J0VmFsaWRpdHkoKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFkZFByb2plY3RNb2RhbDtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgW0FkZFRhc2tNb2RhbF17QGxpbmsgbW9kdWxlOmFkZFRhc2tNb2RhbH5BZGRUYXNrTW9kYWx9IGNsYXNzLlxuICogQG1vZHVsZSBhZGRUYXNrTW9kYWxcbiAqL1xuXG5pbXBvcnQgQWRkUHJvamVjdE1vZGFsIGZyb20gJy4vYWRkUHJvamVjdE1vZGFsJztcbmltcG9ydCBEYXRlUGlja2VyTW9kYWwgZnJvbSAnLi9kYXRlUGlja2VyTW9kYWwnO1xuaW1wb3J0IFJlY3VycmVuY2VNb2RhbCBmcm9tICcuL3JlY3VycmVuY2VNb2RhbCc7XG5pbXBvcnQgUmVjdXJyaW5nRGF0ZSBmcm9tICcuLi9yZWN1cnJpbmdEYXRlJztcbmltcG9ydCBTZXR0aW5ncyBmcm9tICcuLi9zZXR0aW5ncyc7XG5pbXBvcnQgVGFzayBmcm9tICcuLi90YXNrJztcbmltcG9ydCB7IGZvcm1hdERhdGUsIHBhcnNlRGF0ZSB9IGZyb20gJy4uL3V0aWxpdHkvZGF0ZXMnO1xuaW1wb3J0IHsgY3JlYXRlRGF0ZUlucHV0RmllbGQsIGNyZWF0ZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vdXRpbGl0eS9kb20nO1xuXG4vKipcbiAqIE9iamVjdCBob2xkaW5nIHByaXZhdGUgbWVtYmVycyBmb3IgdGhlXG4gKiBbQWRkVGFza01vZGFsXXtAbGluayBtb2R1bGU6YWRkVGFza01vZGFsfkFkZFRhc2tNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6YWRkVGFza01vZGFsfkFkZFRhc2tNb2RhbH5wcml2YXRlc1xuICogQHByb3BlcnR5IHttb2R1bGU6dGFza0xpc3R+VGFza0xpc3R9IHRhc2tzIFRoZSB0YXNrIGxpc3QgdG8gdXBkYXRlLlxuICogQHByb3BlcnR5IHttb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IHByb2plY3RzIFRoZSBwcm9qZWN0IGxpc3QgdG8gdXNlXG4gKiAgIGZvciB0aGUgUHJvamVjdCBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGFza0lkXSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSB0YXNrIGJlaW5nIGVkaXRlZCxcbiAqICAgaWYgYW55LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcm9qZWN0SWRdIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGRlZmF1bHRcbiAqICAgcHJvamVjdCwgaWYgYW55LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHByaW9yaXR5IFRoZSBkZWZhdWx0IHByaW9yaXR5LlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG1vZGUgSW5kaWNhdGVzIHRoZSBzdGF0dXMgb2YgdGhlIHRhc2sgYmVpbmcgZW50ZXJlZC4gSWZcbiAqICAgc2V0IHRvICdhZGQnLCBhIG5ldyB0YXNrIGlzIGJlaW5nIGNyZWF0ZWQsIGFuZCBpZiBzZXQgdG8gJ2VkaXQnLCB0aGVuIGFuXG4gKiAgIGV4aXN0aW5nIHRhc2sgaXMgYmVpbmcgdXBkYXRlZC5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnJlY3VycmluZ0RhdGV+UmVjdXJyaW5nRGF0ZX0gW2N1c3RvbVJlY3VycmVuY2VdIFRoZSBjdXN0b21cbiAqICAgcmVjdXJyZW5jZSB0aGF0IHRoZSB1c2VyIGFkZGVkLCBpZiBhbnkuXG4gKiBAcHJvcGVydHkge21vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35kYXRlRm9ybWF0fSBkYXRlRm9ybWF0IEFuIG9iamVjdCBob2xkaW5nXG4gKiAgIGRhdGUgZm9ybWF0IGluZm9ybWF0aW9uLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGNhbGxiYWNrcyBBbiBvYmplY3QgaG9sZGluZyBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLmNvbmZpcm1dIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBzdWNjZXNzZnVsbHkgY29uZmlybXMgdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jYW5jZWxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBjYW5jZWxzIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjYWxsYmFja3MubmV3UHJvamVjdF0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAqICAgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGFkZHMgYSBuZXcgcHJvamVjdC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjb250cm9scyBBbiBvYmplY3QgaG9sZGluZyB0aGUgZm9ybSBpbnB1dCBlbGVtZW50cyBmb3JcbiAqICAgdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMubmFtZSBUaGUgdGV4dCBpbnB1dCBlbGVtZW50IGZvciB0aGUgdGFza1xuICogICBuYW1lLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMuZHVlRGF0ZSBUaGUgdGV4dCBpbnB1dCBlbGVtZW50IGZvciB0aGUgdGFza1xuICogICBkdWUgZGF0ZS5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzLnJlY3VycmluZ0RhdGUgVGhlIHNlbGVjdCBlbGVtZW50IGZvciB0aGVcbiAqICAgdGFzayByZWN1cnJpbmcgZGF0ZS5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzLnByaW9yaXR5IFRoZSBzZWxlY3QgZWxlbWVudCBmb3IgdGhlIHRhc2tcbiAqICAgcHJpb3JpdHkuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250cm9scy5wcm9qZWN0IFRoZSBzZWxlY3QgZWxlbWVudCBmb3IgdGhlIHRhc2snc1xuICogICBjb250YWluaW5nIHByb2plY3QuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250cm9scy5kZXNjcmlwdGlvbiBUaGUgdGV4dGFyZWEgZWxlbWVudCBmb3IgdGhlXG4gKiAgIHRhc2sgZGVzY3JpcHRpb24uXG4gKi9cblxuLyoqXG4gKiBIb2xkcyBwcml2YXRlIGRhdGEgZm9yIHRoZVxuICogW0FkZFRhc2tNb2RhbF17QGxpbmsgbW9kdWxlOmFkZFRhc2tNb2RhbH5BZGRUYXNrTW9kYWx9IGNsYXNzLlxuICogQHR5cGUge1dlYWtNYXB9XG4gKiBAc2VlIG1vZHVsZTphZGRUYXNrTW9kYWx+QWRkVGFza01vZGFsfnByaXZhdGVzXG4gKi9cbmNvbnN0IHByaXZhdGVNZW1iZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIHByb2plY3Qgc2VsZWN0IGJveCBvcHRpb25zLlxuICogQHBhcmFtIHttb2R1bGU6YWRkVGFza01vZGFsfkFkZFRhc2tNb2RhbH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uXG4gKiAgIHdoaWNoIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUHJvamVjdHMoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCBwcm9qZWN0SXRlbXMgPSBbeyB2YWx1ZTogJ25vbmUnLCBsYWJlbDogJ05vbmUnIH1dO1xuICBwcml2YXRlcy5wcm9qZWN0cy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgIHByb2plY3RJdGVtcy5wdXNoKHsgdmFsdWU6IGVudHJ5LmlkLCBsYWJlbDogZW50cnkucHJvamVjdC5uYW1lIH0pO1xuICB9KTtcbiAgcHJvamVjdEl0ZW1zLnB1c2goeyB2YWx1ZTogJ25ldycsIGxhYmVsOiAnTmV3IFByb2plY3QuLi4nIH0pO1xuXG4gIGNvbnN0IHNlbGVjdEJveCA9IHByaXZhdGVzLmNvbnRyb2xzLnByb2plY3Q7XG4gIHNlbGVjdEJveC5pbm5lckhUTUwgPSAnJztcbiAgcHJvamVjdEl0ZW1zLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgY29uc3Qgb3B0RWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgIG9wdEVsZW0udmFsdWUgPSBlbnRyeS52YWx1ZTtcbiAgICBvcHRFbGVtLnRleHRDb250ZW50ID0gZW50cnkubGFiZWw7XG4gICAgc2VsZWN0Qm94LmFwcGVuZENoaWxkKG9wdEVsZW0pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSB2YWx1ZXMgb2YgdGhlIGZvcm0gZWxlbWVudHMgYmFzZWQgb24gdGhlIGluaXRpYWwgdGFzayB0aGF0XG4gKiB3YXMgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3RvciwgaWYgYW55LlxuICogQHBhcmFtIHttb2R1bGU6YWRkVGFza01vZGFsfkFkZFRhc2tNb2RhbH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uXG4gKiAgIHdoaWNoIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gaW5pdEZvcm1WYWx1ZXMoaW5zdGFuY2UpIHtcbiAgdXBkYXRlUHJvamVjdHMoaW5zdGFuY2UpO1xuXG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgY29uc3QgeyBjb250cm9scyB9ID0gcHJpdmF0ZXM7XG4gIGxldCB0YXNrID0gbnVsbDtcbiAgaWYgKHByaXZhdGVzLnRhc2tJZCkgdGFzayA9IHByaXZhdGVzLnRhc2tzLmdldFRhc2socHJpdmF0ZXMudGFza0lkKTtcblxuICBpZiAodGFzaz8ubmFtZSkgY29udHJvbHMubmFtZS52YWx1ZSA9IHRhc2submFtZTtcblxuICBpZiAodGFzaz8uZHVlRGF0ZSkge1xuICAgIGNvbnRyb2xzLmR1ZURhdGUudmFsdWUgPSBmb3JtYXREYXRlKFxuICAgICAgdGFzay5kdWVEYXRlLFxuICAgICAgcHJpdmF0ZXMuZGF0ZUZvcm1hdC5vdXRwdXRQYXR0ZXJuLFxuICAgICk7XG4gIH1cblxuICBpZiAodGFzaz8ucmVjdXJyaW5nRGF0ZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBpZiAodGFzay5yZWN1cnJpbmdEYXRlLmlzRGVmYXVsdCgpKSB7XG4gICAgICBzd2l0Y2ggKHRhc2sucmVjdXJyaW5nRGF0ZS5pbnRlcnZhbFVuaXQpIHtcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICB2YWx1ZSA9ICdkYWlseSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgIHZhbHVlID0gJ3dlZWtseSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICB2YWx1ZSA9ICdtb250aGx5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgdmFsdWUgPSAnYW5udWFsbHknO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbHVlID0gJ2N1c3RvbSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gJ2N1c3RvbSc7XG4gICAgfVxuICAgIGNvbnRyb2xzLnJlY3VycmluZ0RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT09ICdjdXN0b20nKSBwcml2YXRlcy5jdXN0b21SZWN1cnJlbmNlID0gdGFzay5yZWN1cnJpbmdEYXRlO1xuICB9XG5cbiAgaWYgKHRhc2s/LnByaW9yaXR5U3RyaW5nICYmIHRhc2sucHJpb3JpdHlTdHJpbmcgIT09ICd1bmtub3duJykge1xuICAgIGNvbnRyb2xzLnByaW9yaXR5LnZhbHVlID0gdGFzay5wcmlvcml0eVN0cmluZztcbiAgfSBlbHNlIHtcbiAgICBjb250cm9scy5wcmlvcml0eS52YWx1ZSA9IFRhc2suY29udmVydFByaW9yaXR5VG9TdHJpbmcocHJpdmF0ZXMucHJpb3JpdHkpO1xuICB9XG5cbiAgbGV0IHsgcHJvamVjdElkIH0gPSBwcml2YXRlcztcbiAgaWYgKHRhc2s/LnByb2plY3QpIHByb2plY3RJZCA9IHRhc2sucHJvamVjdDtcbiAgaWYgKHByb2plY3RJZCkgY29udHJvbHMucHJvamVjdC52YWx1ZSA9IHByb2plY3RJZDtcblxuICBpZiAodGFzaz8uZGVzY3JpcHRpb24pIGNvbnRyb2xzLmRlc2NyaXB0aW9uLnZhbHVlID0gdGFzay5kZXNjcmlwdGlvbjtcbn1cblxuLyoqXG4gKiBPcGVucyBhIGRhdGUgcGlja2VyIGFuZCB1cGRhdGVzIHRoZSBkdWUgZGF0ZSBmaWVsZC5cbiAqIEBwYXJhbSB7bW9kdWxlOmFkZFRhc2tNb2RhbH5BZGRUYXNrTW9kYWx9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvblxuICogICB3aGljaCB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IG1vZGFsU3RhY2sgVGhlIG1vZGFsIHN0YWNrIGluIHdoaWNoXG4gKiAgIHRoZSBtb2RhbCBoYXMgYmVlbiBpbnNlcnRlZC5cbiAqL1xuZnVuY3Rpb24gcGlja0R1ZURhdGUoaW5zdGFuY2UsIG1vZGFsU3RhY2spIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCBpbnB1dCA9IHByaXZhdGVzLmNvbnRyb2xzLmR1ZURhdGU7XG4gIGxldCBzdGFydERhdGUgPSBudWxsO1xuICBpZiAoaW5wdXQudmFsdWUpIHtcbiAgICBzdGFydERhdGUgPSBwYXJzZURhdGUoaW5wdXQudmFsdWUsIHByaXZhdGVzLmRhdGVGb3JtYXQuaW5wdXRQYXR0ZXJucyk7XG4gIH1cblxuICBtb2RhbFN0YWNrLnNob3dNb2RhbChuZXcgRGF0ZVBpY2tlck1vZGFsKHtcbiAgICBjb25maXJtOiAoZGF0ZSkgPT4ge1xuICAgICAgaW5wdXQudmFsdWUgPSBmb3JtYXREYXRlKGRhdGUsIHByaXZhdGVzLmRhdGVGb3JtYXQub3V0cHV0UGF0dGVybik7XG4gICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eSgnJyk7XG4gICAgfSxcbiAgICBzdGFydERhdGUsXG4gICAgdGl0bGU6ICdTZWxlY3QgRHVlIERhdGUnLFxuICB9KSk7XG59XG5cbi8qKlxuICogQWRkIHRoZSBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGZvcm0gY29udHJvbHMgaW4gdGhlIG1vZGFsLlxuICogQHBhcmFtIHttb2R1bGU6YWRkVGFza01vZGFsfkFkZFRhc2tNb2RhbH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uXG4gKiAgIHdoaWNoIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWxTdGFja30gbW9kYWxTdGFjayBUaGUgbW9kYWwgc3RhY2sgaW4gd2hpY2hcbiAqICAgdGhlIG1vZGFsIGlzIGJlaW5nIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcnMoaW5zdGFuY2UsIG1vZGFsU3RhY2spIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCB7IGNvbnRyb2xzLCBkYXRlRm9ybWF0IH0gPSBwcml2YXRlcztcblxuICAvLyBIYW5kbGUgcmVjdXJyZW5jZSBzZWxlY3Rpb25cbiAgY29uc3QgeyByZWN1cnJpbmdEYXRlIH0gPSBjb250cm9scztcbiAgbGV0IHJlY3VycmVuY2VWYWx1ZSA9IHJlY3VycmluZ0RhdGUudmFsdWU7XG4gIGNvbnN0IHByb2Nlc3NSZWN1cnJlbmNlID0gKHJlY3VycmVuY2UpID0+IHtcbiAgICBwcml2YXRlcy5jdXN0b21SZWN1cnJlbmNlID0gcmVjdXJyZW5jZTtcblxuICAgIGxldCBuZXdWYWx1ZSA9ICdjdXN0b20tcmVzdWx0JztcbiAgICBpZiAocmVjdXJyZW5jZS5pc0RlZmF1bHQoKSkge1xuICAgICAgc3dpdGNoIChyZWN1cnJlbmNlLmludGVydmFsVW5pdCkge1xuICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgIG5ld1ZhbHVlID0gJ2RhaWx5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgbmV3VmFsdWUgPSAnd2Vla2x5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgIG5ld1ZhbHVlID0gJ21vbnRobHknO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICBuZXdWYWx1ZSA9ICdhbm51YWxseSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIHNlbGVjdCBib3ggb3B0aW9uc1xuICAgIGNvbnN0IHNlbGVjdG9yID0gJ29wdGlvblt2YWx1ZT1cImN1c3RvbS1yZXN1bHRcIl0nO1xuICAgIGxldCBvcHRFbGVtID0gcmVjdXJyaW5nRGF0ZS5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZiAob3B0RWxlbSAmJiBuZXdWYWx1ZSAhPT0gJ2N1c3RvbS1yZXN1bHQnKSB7XG4gICAgICByZWN1cnJpbmdEYXRlLnJlbW92ZUNoaWxkKG9wdEVsZW0pO1xuICAgIH0gZWxzZSBpZiAobmV3VmFsdWUgPT09ICdjdXN0b20tcmVzdWx0Jykge1xuICAgICAgaWYgKCFvcHRFbGVtKSB7XG4gICAgICAgIG9wdEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgb3B0RWxlbS52YWx1ZSA9ICdjdXN0b20tcmVzdWx0JztcbiAgICAgICAgcmVjdXJyaW5nRGF0ZS5pbnNlcnRCZWZvcmUob3B0RWxlbSwgcmVjdXJyaW5nRGF0ZS5sYXN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgY29uc3QgZGF0ZUZvcm1hdFN0ciA9IGRhdGVGb3JtYXQub3V0cHV0UGF0dGVybjtcbiAgICAgIG9wdEVsZW0udGV4dENvbnRlbnQgPSByZWN1cnJlbmNlLnRvU3RyaW5nVmVyYm9zZShkYXRlRm9ybWF0U3RyKTtcbiAgICB9XG5cbiAgICByZWN1cnJpbmdEYXRlLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgcmVjdXJyZW5jZVZhbHVlID0gbmV3VmFsdWU7XG4gIH07XG5cbiAgaWYgKHByaXZhdGVzLmN1c3RvbVJlY3VycmVuY2UpIHByb2Nlc3NSZWN1cnJlbmNlKHByaXZhdGVzLmN1c3RvbVJlY3VycmVuY2UpO1xuXG4gIGNvbnN0IGNhbmNlbFJlY3VycmVuY2UgPSAoKSA9PiB7IHJlY3VycmluZ0RhdGUudmFsdWUgPSByZWN1cnJlbmNlVmFsdWU7IH07XG5cbiAgcmVjdXJyaW5nRGF0ZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC52YWx1ZSA9PT0gJ2N1c3RvbScpIHtcbiAgICAgIC8vIEdldCBkdWUgZGF0ZSwgaWYgYW55XG4gICAgICBjb25zdCBkYXRlSW5wdXQgPSBjb250cm9scy5kdWVEYXRlO1xuICAgICAgbGV0IGJhc2VEYXRlID0gbnVsbDtcbiAgICAgIGlmIChkYXRlSW5wdXQudmFsdWUpIHtcbiAgICAgICAgYmFzZURhdGUgPSBwYXJzZURhdGUoZGF0ZUlucHV0LnZhbHVlLCBkYXRlRm9ybWF0LmlucHV0UGF0dGVybnMpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBtb2RhbCA9IG5ldyBSZWN1cnJlbmNlTW9kYWwoe1xuICAgICAgICBjb25maXJtOiBwcm9jZXNzUmVjdXJyZW5jZSxcbiAgICAgICAgY2FuY2VsOiBjYW5jZWxSZWN1cnJlbmNlLFxuICAgICAgICBpbml0aWFsOiBwcml2YXRlcy5jdXN0b21SZWN1cnJlbmNlLFxuICAgICAgICBiYXNlRGF0ZSxcbiAgICAgICAgZGF0ZUZvcm1hdCxcbiAgICAgIH0pO1xuICAgICAgbW9kYWxTdGFjay5zaG93TW9kYWwobW9kYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWN1cnJlbmNlVmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIEhhbmRsZSBwcm9qZWN0IHNlbGVjdGlvblxuICBsZXQgcHJvamVjdFZhbHVlID0gY29udHJvbHMucHJvamVjdC52YWx1ZTtcbiAgY29udHJvbHMucHJvamVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgIGlmIChlLnRhcmdldC52YWx1ZSA9PT0gJ25ldycpIHtcbiAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEFkZFByb2plY3RNb2RhbCh7XG4gICAgICAgIGNvbmZpcm06IChwcm9qZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgaWQgPSBwcml2YXRlcy5wcm9qZWN0cy5hZGRQcm9qZWN0KHByb2plY3QpO1xuICAgICAgICAgIHVwZGF0ZVByb2plY3RzKGluc3RhbmNlKTtcbiAgICAgICAgICBjb250cm9scy5wcm9qZWN0LnZhbHVlID0gaWQ7XG4gICAgICAgICAgcHJvamVjdFZhbHVlID0gaWQ7XG4gICAgICAgICAgaWYgKHByaXZhdGVzLmNhbGxiYWNrcy5uZXdQcm9qZWN0KSBwcml2YXRlcy5jYWxsYmFja3MubmV3UHJvamVjdChpZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbmNlbDogKCkgPT4geyBjb250cm9scy5wcm9qZWN0LnZhbHVlID0gcHJvamVjdFZhbHVlOyB9LFxuICAgICAgfSk7XG4gICAgICBtb2RhbFN0YWNrLnNob3dNb2RhbChtb2RhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2plY3RWYWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gQ2hlY2sgZGF0ZSB2YWxpZGl0eVxuICBjb250cm9scy5kdWVEYXRlLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZS50YXJnZXQ7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICBpZiAoIXBhcnNlRGF0ZSh2YWx1ZSwgZGF0ZUZvcm1hdC5pbnB1dFBhdHRlcm5zKSkge1xuICAgICAgICBjb25zdCBmb3JtYXQgPSBkYXRlRm9ybWF0LnZpc3VhbFBhdHRlcm47XG4gICAgICAgIG1lc3NhZ2UgPSBgUGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZSBpbiAke2Zvcm1hdH0gZm9ybWF0LmA7XG4gICAgICB9XG4gICAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShtZXNzYWdlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEEgbW9kYWwgZGlhbG9nIGZvciBhZGRpbmcgb3IgZWRpdGluZyBhIHRhc2suXG4gKiBAaW1wbGVtZW50cyB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWx9XG4gKi9cbmNsYXNzIEFkZFRhc2tNb2RhbCB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgb3B0aW9ucyBmb3IgdGhlIG1vZGFsLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6YWRkVGFza01vZGFsfkFkZFRhc2tNb2RhbH5vcHRpb25zXG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjb25maXJtXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkXG4gICAqICAgd2hlbiB0aGUgdXNlciBzdWNjZXNzZnVsbHkgY29uZmlybXMgdGhlIG1vZGFsLiBUaGUgZnVuY3Rpb24gd2lsbCBiZVxuICAgKiAgIHBhc3NlZCB0aGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHRhc2sgdGhhdCB3YXMgaW5zZXJ0ZWQgaW50byB0aGUgdGFza1xuICAgKiAgIGxpc3QgKG9yIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBleGlzdGluZyB0YXNrIHRoYXQgd2FzIG1vZGlmaWVkKS5cbiAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbmNlbF0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZFxuICAgKiAgIHdoZW4gdGhlIHVzZXIgY2FuY2VscyB0aGUgbW9kYWwuXG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtuZXdQcm9qZWN0XSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkXG4gICAqICAgd2hlbiB0aGUgdXNlciBhZGRzIGEgbmV3IHByb2plY3QgdG8gdGhlIHByb2plY3QgbGlzdC4gVGhlIHVuaXF1ZVxuICAgKiAgIGlkZW50aWZpZXIgZm9yIHRoZSBwcm9qZWN0IHdpbGwgYmUgcGFzc2VkIHRvIHRoZSBmdW5jdGlvbiBhcyBhblxuICAgKiAgIGFyZ3VtZW50LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3Rhc2tJZF0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgdGFzayB0aGF0IGlzXG4gICAqICAgYmVpbmcgZWRpdGVkLCBpZiBhbnkuIElmIG5vdCBwcm92aWRlZCwgdGhlbiBhIG5ldyB0YXNrIHdpbGwgYmUgY3JlYXRlZC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcm9qZWN0SWRdIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHByb2plY3QgdG9cbiAgICogICB1c2UgYXMgdGhlIGRlZmF1bHQgc2VsZWN0aW9uIGluIHRoZSBQcm9qZWN0IGZpZWxkLiBJZiBub3QgcHJvdmlkZWQsIHRoZW5cbiAgICogICB0aGUgdGFzayB3aWxsIGRlZmF1bHQgdG8gaGF2aW5nIG5vIHByb2plY3QuIFRoaXMgcHJvcGVydHkgaXMgaWdub3JlZCBpZlxuICAgKiAgIGFuIGV4aXN0aW5nIHRhc2sgaXMgYmVpbmcgZWRpdGVkLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gW3ByaW9yaXR5PTBdIFRoZSBkZWZhdWx0IHByaW9yaXR5IHRvIHVzZSBmb3IgdGhlIHRhc2suXG4gICAqICAgVGhpcyBpcyBpZ25vcmVkIGlmIGFuIGV4aXN0aW5nIHRhc2sgaXMgYmVpbmcgZWRpdGVkLlxuICAgKiBAcHJvcGVydHkge21vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35kYXRlRm9ybWF0fSBbZGF0ZUZvcm1hdF0gQW4gb2JqZWN0XG4gICAqICAgaG9sZGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FsZW5kYXIgZGF0ZSBmb3JtYXQgdG8gdXNlIGZvciBkYXRlXG4gICAqICAgZmllbGRzLiBJZiBub3QgZ2l2ZW4sIHRoZW4gdGhlIGJyb3dzZXIgZGVmYXVsdCBpcyB1c2VkLlxuICAgKi9cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgbW9kYWwuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fSB0YXNrTGlzdCBUaGUgdGFzayBsaXN0IGluIHdoaWNoIHRoZSBuZXdcbiAgICogICB0YXNrIHNob3VsZCBiZSBpbnNlcnRlZC5cbiAgICogQHBhcmFtIHttb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IHByb2plY3RMaXN0IFRoZSBwcm9qZWN0IGxpc3QgdGhhdFxuICAgKiAgIHdpbGwgYmUgdXNlZCB0byBwb3B1bGF0ZSB0aGUgUHJvamVjdCBzZWxlY3QgYm94LiBUaGUgdXNlciBjYW4gYWxzb1xuICAgKiAgIGNyZWF0ZSBhIG5ldyBwcm9qZWN0LCB3aGljaCB3aWxsIGJlIGFkZGVkIHRvIHRoZSBsaXN0LlxuICAgKiBAcGFyYW0ge21vZHVsZTphZGRUYXNrTW9kYWx+QWRkVGFza01vZGFsfm9wdGlvbnN9IFtvcHRpb25zPXt9XSBIb2xkc1xuICAgKiAgIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIG1vZGFsLlxuICAgKi9cbiAgY29uc3RydWN0b3IodGFza0xpc3QsIHByb2plY3RMaXN0LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHtcbiAgICAgIHRhc2tzOiB0YXNrTGlzdCxcbiAgICAgIHByb2plY3RzOiBwcm9qZWN0TGlzdCxcbiAgICAgIHRhc2tJZDogb3B0aW9ucy50YXNrSWQgfHwgbnVsbCxcbiAgICAgIHByb2plY3RJZDogb3B0aW9ucy5wcm9qZWN0SWQgfHwgbnVsbCxcbiAgICAgIHByaW9yaXR5OiBvcHRpb25zLnByaW9yaXR5ID8/IDAsXG4gICAgICBtb2RlOiBvcHRpb25zLnRhc2tJZCA/ICdlZGl0JyA6ICdhZGQnLFxuICAgICAgY3VzdG9tUmVjdXJyZW5jZTogbnVsbCxcbiAgICAgIGRhdGVGb3JtYXQ6IG9wdGlvbnMuZGF0ZUZvcm1hdCB8fCBTZXR0aW5ncy5sb29rdXBEYXRlRm9ybWF0KCksXG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgY29uZmlybTogb3B0aW9ucy5jb25maXJtIHx8IG51bGwsXG4gICAgICAgIGNhbmNlbDogb3B0aW9ucy5jYW5jZWwgfHwgbnVsbCxcbiAgICAgICAgbmV3UHJvamVjdDogb3B0aW9ucy5uZXdQcm9qZWN0IHx8IG51bGwsXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgZHVlRGF0ZTogbnVsbCxcbiAgICAgICAgcmVjdXJyaW5nRGF0ZTogbnVsbCxcbiAgICAgICAgcHJpb3JpdHk6IG51bGwsXG4gICAgICAgIHByb2plY3Q6IG51bGwsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLFxuICAgICAgfSxcbiAgICB9O1xuICAgIHByaXZhdGVNZW1iZXJzLnNldCh0aGlzLCBwcml2YXRlcyk7XG4gIH1cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgcmV0dXJuIChwcml2YXRlcy5tb2RlID09PSAnZWRpdCcpID8gJ0VkaXQgVGFzaycgOiAnQWRkIFRhc2snO1xuICB9XG5cbiAgZ2V0IGNvbmZpcm1MYWJlbCgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICByZXR1cm4gKHByaXZhdGVzLm1vZGUgPT09ICdlZGl0JykgPyAnVXBkYXRlJyA6ICdBZGQnO1xuICB9XG5cbiAgZ2V0IGluaXRGb2N1cygpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmNvbnRyb2xzLm5hbWU7XG4gIH1cblxuICBhZGRDb250ZW50KHBhcmVudCwgbW9kYWxTdGFjaykge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgY29uc3QgY29udGFpbmVyVHlwZSA9IHsgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtY29udGFpbmVyJ10gfTtcbiAgICBjb25zdCBsYWJlbFR5cGUgPSAodmFsdWUpID0+ICh7IHZhbHVlLCBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1sYWJlbCddIH0pO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAndGV4dCcsXG4gICAgICBpZDogJ3Rhc2stbmFtZScsXG4gICAgICBuYW1lOiAndGFzay1uYW1lJyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0J10sXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGxhYmVsOiBsYWJlbFR5cGUoJ05hbWUnKSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyVHlwZSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCBkYXRlQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGF0ZUNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKC4uLmNvbnRhaW5lclR5cGUuY2xhc3NMaXN0KTtcbiAgICBjb25zdCBkYXRlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGRhdGVMYWJlbC50ZXh0Q29udGVudCA9ICdEdWUgRGF0ZSc7XG4gICAgZGF0ZUxhYmVsLmh0bWxGb3IgPSAndGFzay1kdWUtZGF0ZSc7XG4gICAgZGF0ZUxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwnKTtcbiAgICBkYXRlQ29udGFpbmVyLmFwcGVuZENoaWxkKGRhdGVMYWJlbCk7XG5cbiAgICBkYXRlQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZURhdGVJbnB1dEZpZWxkKHtcbiAgICAgIGlkOiAndGFzay1kdWUtZGF0ZScsXG4gICAgICBuYW1lOiAndGFzay1kdWUtZGF0ZScsXG4gICAgICBwbGFjZWhvbGRlcjogcHJpdmF0ZXMuZGF0ZUZvcm1hdC52aXN1YWxQYXR0ZXJuLFxuICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtaW5saW5lJ10sXG4gICAgICBjb250YWluZXI6IHsgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtZGF0ZS1jb250YWluZXInXSB9LFxuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIGNsYXNzTGlzdDogWydmb3JtLWJ1dHRvbiddLFxuICAgICAgICBjYWxsYmFjazogKCkgPT4gcGlja0R1ZURhdGUodGhpcywgbW9kYWxTdGFjayksXG4gICAgICB9LFxuICAgIH0pKTtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoZGF0ZUNvbnRhaW5lcik7XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICBpZDogJ3Rhc2stcmVjdXJyaW5nLWRhdGUnLFxuICAgICAgbmFtZTogJ3Rhc2stcmVjdXJyaW5nLWRhdGUnLFxuICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0tc2VsZWN0J10sXG4gICAgICBsYWJlbDogbGFiZWxUeXBlKCdSZWN1cnJpbmcgRGF0ZScpLFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXJUeXBlLFxuICAgICAgbWVudUl0ZW1zOiBbXG4gICAgICAgIHsgdmFsdWU6ICdub25lJywgbGFiZWw6ICdOZXZlciBSZXBlYXQnLCBzZWxlY3RlZDogdHJ1ZSB9LFxuICAgICAgICB7IHZhbHVlOiAnZGFpbHknLCBsYWJlbDogJ1JlcGVhdCBEYWlseScgfSxcbiAgICAgICAgeyB2YWx1ZTogJ3dlZWtseScsIGxhYmVsOiAnUmVwZWF0IFdlZWtseScgfSxcbiAgICAgICAgeyB2YWx1ZTogJ21vbnRobHknLCBsYWJlbDogJ1JlcGVhdCBNb250aGx5JyB9LFxuICAgICAgICB7IHZhbHVlOiAnYW5udWFsbHknLCBsYWJlbDogJ1JlcGVhdCBBbm51YWxseScgfSxcbiAgICAgICAgeyB2YWx1ZTogJ2N1c3RvbScsIGxhYmVsOiAnQ3VzdG9tIFJlY3VycmVuY2UuLi4nIH0sXG4gICAgICBdLFxuICAgIH0pKTtcblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgIGlkOiAndGFzay1wcmlvcml0eScsXG4gICAgICBuYW1lOiAndGFzay1wcmlvcml0eScsXG4gICAgICBjbGFzc0xpc3Q6IFsnZm9ybS1zZWxlY3QnXSxcbiAgICAgIGxhYmVsOiBsYWJlbFR5cGUoJ1ByaW9yaXR5JyksXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclR5cGUsXG4gICAgICBtZW51SXRlbXM6IFtcbiAgICAgICAgeyB2YWx1ZTogJ3ZlcnktaGlnaCcsIGxhYmVsOiAnVmVyeSBIaWdoJyB9LFxuICAgICAgICB7IHZhbHVlOiAnaGlnaCcsIGxhYmVsOiAnSGlnaCcgfSxcbiAgICAgICAgeyB2YWx1ZTogJ21lZGl1bScsIGxhYmVsOiAnTWVkaXVtJywgc2VsZWN0ZWQ6IHRydWUgfSxcbiAgICAgICAgeyB2YWx1ZTogJ2xvdycsIGxhYmVsOiAnTG93JyB9LFxuICAgICAgICB7IHZhbHVlOiAndmVyeS1sb3cnLCBsYWJlbDogJ1ZlcnkgTG93JyB9LFxuICAgICAgXSxcbiAgICB9KSk7XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICBpZDogJ3Rhc2stcHJvamVjdCcsXG4gICAgICBuYW1lOiAndGFzay1wcm9qZWN0JyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdCddLFxuICAgICAgbGFiZWw6IGxhYmVsVHlwZSgnUHJvamVjdCcpLFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXJUeXBlLFxuICAgICAgbWVudUl0ZW1zOiBbeyB2YWx1ZTogJ25vbmUnLCBsYWJlbDogJ05vbmUnIH1dLFxuICAgIH0pKTtcblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAndGV4dGFyZWEnLFxuICAgICAgaWQ6ICd0YXNrLWRlc2NyaXB0aW9uJyxcbiAgICAgIG5hbWU6ICd0YXNrLWRlc2NyaXB0aW9uJyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLXRleHRhcmVhJ10sXG4gICAgICBsYWJlbDogbGFiZWxUeXBlKCdEZXNjcmlwdGlvbicpLFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXJUeXBlLFxuICAgICAgc2l6ZTogeyByb3dzOiA0LCBjb2xzOiAyMCB9LFxuICAgIH0pKTtcblxuICAgIHByaXZhdGVzLmNvbnRyb2xzID0ge1xuICAgICAgbmFtZTogcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YXNrLW5hbWUnKSxcbiAgICAgIGR1ZURhdGU6IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcjdGFzay1kdWUtZGF0ZScpLFxuICAgICAgcmVjdXJyaW5nRGF0ZTogcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YXNrLXJlY3VycmluZy1kYXRlJyksXG4gICAgICBwcmlvcml0eTogcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyN0YXNrLXByaW9yaXR5JyksXG4gICAgICBwcm9qZWN0OiBwYXJlbnQucXVlcnlTZWxlY3RvcignI3Rhc2stcHJvamVjdCcpLFxuICAgICAgZGVzY3JpcHRpb246IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcjdGFzay1kZXNjcmlwdGlvbicpLFxuICAgIH07XG4gICAgaW5pdEZvcm1WYWx1ZXModGhpcyk7XG4gICAgYWRkTGlzdGVuZXJzKHRoaXMsIG1vZGFsU3RhY2spO1xuICB9XG5cbiAgY29uZmlybSgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBjb25zdCB7IGNvbnRyb2xzLCBkYXRlRm9ybWF0IH0gPSBwcml2YXRlcztcblxuICAgIGxldCBkdWVEYXRlID0gbnVsbDtcbiAgICBpZiAoY29udHJvbHMuZHVlRGF0ZS52YWx1ZSkge1xuICAgICAgZHVlRGF0ZSA9IHBhcnNlRGF0ZShjb250cm9scy5kdWVEYXRlLnZhbHVlLCBkYXRlRm9ybWF0LmlucHV0UGF0dGVybnMpO1xuICAgIH1cblxuICAgIGxldCBjcmVhdGlvbkRhdGUgPSBudWxsO1xuICAgIGxldCBjb21wbGV0aW9uRGF0ZSA9IG51bGw7XG4gICAgaWYgKHByaXZhdGVzLnRhc2tJZCkge1xuICAgICAgY29uc3QgdGFzayA9IHByaXZhdGVzLnRhc2tzLmdldFRhc2socHJpdmF0ZXMudGFza0lkKTtcbiAgICAgIGNyZWF0aW9uRGF0ZSA9IHRhc2suY3JlYXRpb25EYXRlO1xuICAgICAgY29tcGxldGlvbkRhdGUgPSB0YXNrLmNvbXBsZXRpb25EYXRlO1xuICAgIH1cblxuICAgIGxldCByZWN1cnJpbmdEYXRlID0gbnVsbDtcbiAgICBzd2l0Y2ggKGNvbnRyb2xzLnJlY3VycmluZ0RhdGUudmFsdWUpIHtcbiAgICAgIGNhc2UgJ2RhaWx5JzpcbiAgICAgICAgcmVjdXJyaW5nRGF0ZSA9IG5ldyBSZWN1cnJpbmdEYXRlKCdkYXknKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd3ZWVrbHknOlxuICAgICAgICByZWN1cnJpbmdEYXRlID0gbmV3IFJlY3VycmluZ0RhdGUoJ3dlZWsnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aGx5JzpcbiAgICAgICAgcmVjdXJyaW5nRGF0ZSA9IG5ldyBSZWN1cnJpbmdEYXRlKCdtb250aCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2FubnVhbGx5JzpcbiAgICAgICAgcmVjdXJyaW5nRGF0ZSA9IG5ldyBSZWN1cnJpbmdEYXRlKCd5ZWFyJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY3VzdG9tLXJlc3VsdCc6XG4gICAgICAgIHJlY3VycmluZ0RhdGUgPSBwcml2YXRlcy5jdXN0b21SZWN1cnJlbmNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxldCBwcm9qZWN0ID0gbnVsbDtcbiAgICBzd2l0Y2ggKGNvbnRyb2xzLnByb2plY3QudmFsdWUpIHtcbiAgICAgIGNhc2UgJ25vbmUnOlxuICAgICAgY2FzZSAnbmV3JzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBwcm9qZWN0ID0gY29udHJvbHMucHJvamVjdC52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgY29uc3QgdGFzayA9IG5ldyBUYXNrKGNvbnRyb2xzLm5hbWUudmFsdWUsIHtcbiAgICAgIGR1ZURhdGUsXG4gICAgICBjcmVhdGlvbkRhdGUsXG4gICAgICBjb21wbGV0aW9uRGF0ZSxcbiAgICAgIHByaW9yaXR5OiBjb250cm9scy5wcmlvcml0eS52YWx1ZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBjb250cm9scy5kZXNjcmlwdGlvbi52YWx1ZSB8fCBudWxsLFxuICAgICAgcmVjdXJyaW5nRGF0ZSxcbiAgICAgIHByb2plY3QsXG4gICAgfSk7XG5cbiAgICBsZXQgaWQ7XG4gICAgaWYgKHByaXZhdGVzLnRhc2tJZCkge1xuICAgICAgaWQgPSBwcml2YXRlcy50YXNrSWQ7XG4gICAgICBwcml2YXRlcy50YXNrcy51cGRhdGVUYXNrKGlkLCB0YXNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSBwcml2YXRlcy50YXNrcy5hZGRUYXNrKHRhc2spO1xuICAgIH1cblxuICAgIGlmIChwcml2YXRlcy5jYWxsYmFja3MuY29uZmlybSkgcHJpdmF0ZXMuY2FsbGJhY2tzLmNvbmZpcm0oaWQpO1xuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIGNvbnN0IHsgY2FsbGJhY2tzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrcy5jYW5jZWwpIGNhbGxiYWNrcy5jYW5jZWwoKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIGNvbnN0IHsgY29udHJvbHMgfSA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBpZiAoIWNvbnRyb2xzLm5hbWUucmVwb3J0VmFsaWRpdHkoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghY29udHJvbHMuZHVlRGF0ZS5yZXBvcnRWYWxpZGl0eSgpKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWRkVGFza01vZGFsO1xuIiwiLyoqXG4gKiBEZWZpbmVzIHRoZSBbQ29uZmlybU1vZGFsXXtAbGluayBtb2R1bGU6Y29uZmlybU1vZGFsfkNvbmZpcm1Nb2RhbH0gY2xhc3MuXG4gKiBAbW9kdWxlIGNvbmZpcm1Nb2RhbFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vdXRpbGl0eS9kb20nO1xuXG4vKipcbiAqIE9iamVjdCBob2xkaW5nIHRoZSBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW0NvbmZpcm1Nb2RhbF17QGxpbmsgbW9kdWxlOmNvbmZpcm1Nb2RhbH5Db25maXJtTW9kYWx9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmNvbmZpcm1Nb2RhbH5Db25maXJtTW9kYWx+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aXRsZSBUaGUgdGl0bGUgZm9yIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgY29udGVudCBvZiB0aGVcbiAqICAgbW9kYWwuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlybUxhYmVsIFRoZSBsYWJlbCB0byBiZSB1c2VkIGZvciB0aGUgY29uZmlybSBidXR0b24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY2FuY2VsTGFiZWwgVGhlIGxhYmVsIHRvIGJlIHVzZWQgZm9yIHRoZSBjYW5jZWwgYnV0dG9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGluaXRGb2N1cyBXaGljaCBidXR0b24gdG8gZ2l2ZSBpbml0aWFsIGtleWJvYXJkIGZvY3VzOlxuICogICAnY29uZmlybScsICdjYW5jZWwnLCBvciAnbm9uZScuXG4gKiBAcHJvcGVydHkge21vZHVsZTpjb25maXJtTW9kYWx+Q29uZmlybU1vZGFsfmNvbmZpcm1Cb3h9IFtjb25maXJtQm94XSBIb2xkc1xuICogICBvcHRpb25zIGNvbnRyb2xsaW5nIHRleHQgdGhhdCB0aGUgdXNlciBtdXN0IGVudGVyIHRvIGNvbmZpcm0gdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGNhbGxiYWNrcyBBbiBvYmplY3QgaG9sZGluZyBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLmNvbmZpcm1dIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBzdWNjZXNzZnVsbHkgY29uZmlybXMgdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jYW5jZWxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBjYW5jZWxzIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjb250cm9scyBBbiBvYmplY3QgaG9sZGluZyB0aGUgZm9ybSBpbnB1dCBlbGVtZW50cyBmb3JcbiAqICAgdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gW2NvbnRyb2xzLmNvbmZpcm1Cb3hdIFRoZSB0ZXh0IGlucHV0IGVsZW1lbnQgZm9yIHRoZVxuICogICBjb25maXJtYXRpb24gdGV4dCB0aGF0IHRoZSB1c2VyIG11c3QgZW50ZXIsIGlmIGFwcGxpY2FibGUuXG4gKi9cblxuLyoqXG4gKiBIb2xkcyBwcml2YXRlIGRhdGEgZm9yIHRoZVxuICogW0NvbmZpcm1Nb2RhbF17QGxpbmsgbW9kdWxlOmNvbmZpcm1Nb2RhbH5Db25maXJtTW9kYWx9IGNsYXNzLlxuICogQHR5cGUge1dlYWtNYXB9XG4gKiBAc2VlIG1vZHVsZTpjb25maXJtTW9kYWx+Q29uZmlybU1vZGFsfnByaXZhdGVzXG4gKi9cbmNvbnN0IHByaXZhdGVNZW1iZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzIGZvciB0aGUgbW9kYWwuXG4gKiBAcGFyYW0ge21vZHVsZTpjb25maXJtTW9kYWx+Q29uZmlybU1vZGFsfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb25cbiAqICAgd2hpY2ggdG8gYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBpbml0Rm9ybUNvbnRyb2xzKGluc3RhbmNlKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgY29uc3QgeyBjb250cm9scyB9ID0gcHJpdmF0ZXM7XG5cbiAgaWYgKGNvbnRyb2xzLmNvbmZpcm1Cb3gpIHtcbiAgICBjb25zdCB7IGNvbmZpcm1Cb3ggfSA9IHByaXZhdGVzO1xuXG4gICAgY29udHJvbHMuY29uZmlybUJveC52YWx1ZSA9ICcnO1xuICAgIGNvbnRyb2xzLmNvbmZpcm1Cb3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgIGNvbnN0IHsgdmFsdWUgfSA9IGUudGFyZ2V0O1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSAnJztcbiAgICAgICAgaWYgKHZhbHVlICE9PSBjb25maXJtQm94LnZhbHVlKSBtZXNzYWdlID0gY29uZmlybUJveC5lcnJvck1lc3NhZ2U7XG4gICAgICAgIGUudGFyZ2V0LnNldEN1c3RvbVZhbGlkaXR5KG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogQSBtb2RhbCBkaWFsb2cgcHJvbXB0aW5nIHRoZSB1c2VyIGZvciBjb25maXJtYXRpb24uXG4gKiBAaW1wbGVtZW50cyB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWx9XG4gKi9cbmNsYXNzIENvbmZpcm1Nb2RhbCB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgb3B0aW9ucyBmb3IgdGV4dCB0aGF0IHRoZSB1c2VyIG11c3QgZW50ZXIgdG8gY29uZmlybSB0aGUgYWN0aW9uLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6Y29uZmlybU1vZGFsfkNvbmZpcm1Nb2RhbH5jb25maXJtQm94XG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdmFsdWU9Y29uZmlybV0gQSB2YWx1ZSB0aGF0IHRoZSB1c2VyIG11c3QgZW50ZXIgaW4gYVxuICAgKiAgIHRleHQgYm94IGluIG9yZGVyIHRvIGNvbmZpcm0gdGhlIGFjdGlvbi5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtsYWJlbF0gVGhlIGxhYmVsIGZvciB0aGUgdGV4dCBib3guIElmIG5vdCBnaXZlbiwgYVxuICAgKiAgIGdlbmVyaWMgbGFiZWwgaXMgY3JlYXRlZC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtlcnJvck1lc3NhZ2VdIFRoZSB2YWxpZGF0aW9uIG1lc3NhZ2UgdGhhdCBzaG91bGQgYmVcbiAgICogICBkaXNwbGF5ZWQgd2hlbiB0aGUgdXNlciB0cmllcyB0byBjb25maXJtIHRoZSBtb2RhbCB3aXRob3V0IGVudGVyaW5nIHRoZVxuICAgKiAgIGNvcnJlY3QgdmFsdWUuIElmIG5vdCBnaXZlbiwgYSBnZW5lcmljIG1lc3NhZ2UgaXMgdXNlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBvcHRpb25zIGZvciB0aGUgbW9kYWwuXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpjb25maXJtTW9kYWx+Q29uZmlybU1vZGFsfm9wdGlvbnNcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0aXRsZT1Db25maXJtXSBUaGUgdGl0bGUgZm9yIHRoZSBtb2RhbC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maXJtTGFiZWw9WWVzXSBUaGUgbGFiZWwgdG8gYmUgdXNlZCBmb3IgdGhlIGNvbmZpcm1cbiAgICogICBidXR0b24uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY2FuY2VsTGFiZWw9Tm9dIFRoZSBsYWJlbCB0byBiZSB1c2VkIGZvciB0aGUgY2FuY2VsXG4gICAqICAgYnV0dG9uLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2luaXRGb2N1cz1jYW5jZWxdIFdoaWNoIGVsZW1lbnQgdG8gZ2l2ZSBpbml0aWFsXG4gICAqICAga2V5Ym9hcmQgZm9jdXM6ICdjb25maXJtJyAodGhlIENvbmZpcm0gYnV0dG9uKSwgJ2NhbmNlbCcgKHRoZSBDYW5jZWxcbiAgICogICBidXR0b24pLCAnY29uZmlybS1ib3gnICh0aGUgY29uZmlybWF0aW9uIHRleHQgYm94KSwgb3IgJ25vbmUnLlxuICAgKiBAcHJvcGVydHkge21vZHVsZTpjb25maXJtTW9kYWx+Q29uZmlybU1vZGFsfmNvbmZpcm1Cb3h9IFtjb25maXJtQm94XSBBblxuICAgKiAgIG9iamVjdCBzcGVjaWZ5aW5nIG9wdGlvbnMgZm9yIHRleHQgdGhhdCB0aGUgdXNlciBtdXN0IGVudGVyIGluIG9yZGVyIHRvXG4gICAqICAgY29uZmlybSB0aGUgYWN0aW9uLiBJZiB0aGlzIHByb3BlcnR5IGlzIHByb3ZpZGVkLCB0aGVuIGEgdGV4dGJveCB3aWxsIGJlXG4gICAqICAgZGlzcGxheWVkIGFuZCB0aGUgdXNlciB3aWxsIGJlIHJlcXVpcmVkIHRvIHR5cGUgaW4gdGhlIGdpdmVuIHZhbHVlXG4gICAqICAgYmVmb3JlIGNvbmZpcm1pbmcgdGhlIG1vZGFsLlxuICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY29uZmlybV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZFxuICAgKiAgIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC5cbiAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbmNlbF0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZFxuICAgKiAgIHdoZW4gdGhlIHVzZXIgY2FuY2VscyB0aGUgbW9kYWwuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdGhhdCBzaG91bGQgYmUgZGlzcGxheWVkIHRvIHRoZSB1c2VyLlxuICAgKiBAcGFyYW0ge21vZHVsZTpjb25maXJtTW9kYWx+Q29uZmlybU1vZGFsfm9wdGlvbnN9IFtvcHRpb25zPXt9XSBIb2xkc1xuICAgKiAgIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIG1vZGFsLlxuICAgKi9cbiAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSB7XG4gICAgICB0aXRsZTogb3B0aW9ucy50aXRsZSA/PyAnQ29uZmlybScsXG4gICAgICBtZXNzYWdlLFxuICAgICAgY29uZmlybUxhYmVsOiBvcHRpb25zLmNvbmZpcm1MYWJlbCB8fCAnWWVzJyxcbiAgICAgIGNhbmNlbExhYmVsOiBvcHRpb25zLmNhbmNlbExhYmVsIHx8ICdObycsXG4gICAgICBpbml0Rm9jdXM6IG9wdGlvbnMuaW5pdEZvY3VzIHx8ICdjYW5jZWwnLFxuICAgICAgY29uZmlybUJveDogbnVsbCxcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICBjb25maXJtOiBvcHRpb25zLmNvbmZpcm0gfHwgbnVsbCxcbiAgICAgICAgY2FuY2VsOiBvcHRpb25zLmNhbmNlbCB8fCBudWxsLFxuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIGNvbmZpcm1Cb3g6IG51bGwsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCB7IGNvbmZpcm1Cb3ggfSA9IG9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnMuY29uZmlybUJveCkge1xuICAgICAgcHJpdmF0ZXMuY29uZmlybUJveCA9IHtcbiAgICAgICAgdmFsdWU6IGNvbmZpcm1Cb3gudmFsdWUgfHwgJ2NvbmZpcm0nLFxuICAgICAgICBsYWJlbDogY29uZmlybUJveC5sYWJlbCB8fCBgUGxlYXNlIGVudGVyICcke2NvbmZpcm1Cb3gudmFsdWV9JzpgLFxuICAgICAgICBlcnJvck1lc3NhZ2U6IGNvbmZpcm1Cb3guZXJyb3JNZXNzYWdlXG4gICAgICAgICAgfHwgYFBsZWFzZSBlbnRlciAnJHtjb25maXJtQm94LnZhbHVlfScuYCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZU1lbWJlcnMuc2V0KHRoaXMsIHByaXZhdGVzKTtcbiAgfVxuXG4gIGdldCB0aXRsZSgpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLnRpdGxlO1xuICB9XG5cbiAgZ2V0IGNvbmZpcm1MYWJlbCgpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmNvbmZpcm1MYWJlbDtcbiAgfVxuXG4gIGdldCBjYW5jZWxMYWJlbCgpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLmNhbmNlbExhYmVsO1xuICB9XG5cbiAgZ2V0IGluaXRGb2N1cygpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcblxuICAgIGlmIChwcml2YXRlcy5pbml0Rm9jdXMgPT09ICdjb25maXJtLWJveCcpIHtcbiAgICAgIHJldHVybiBwcml2YXRlcy5jb250cm9scy5jb25maXJtQm94IHx8ICdub25lJztcbiAgICB9XG5cbiAgICByZXR1cm4gcHJpdmF0ZXMuaW5pdEZvY3VzO1xuICB9XG5cbiAgYWRkQ29udGVudChwYXJlbnQpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBjb25zdCB7IG1lc3NhZ2UsIGNvbmZpcm1Cb3ggfSA9IHByaXZhdGVzO1xuXG4gICAgbGV0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICBpZiAoY29uZmlybUJveCkge1xuICAgICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSAnICc7XG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGlkOiAnY29uZmlybWF0aW9uLWJveCcsXG4gICAgICAgIG5hbWU6ICdjb25maXJtYXRpb24tYm94JyxcbiAgICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQnLCAnY29uZmlybWF0aW9uLWJveCddLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgcGxhY2Vob2xkZXI6IGNvbmZpcm1Cb3gudmFsdWUsXG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgdmFsdWU6IGNvbmZpcm1Cb3gubGFiZWwsXG4gICAgICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJ10sXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRhaW5lcjogeyBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1jb250YWluZXInXSB9LFxuICAgICAgfSkpO1xuXG4gICAgICBwcml2YXRlcy5jb250cm9scy5jb25maXJtQm94ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb25maXJtYXRpb24tYm94Jyk7XG4gICAgfVxuXG4gICAgaW5pdEZvcm1Db250cm9scyh0aGlzKTtcbiAgfVxuXG4gIGNvbmZpcm0oKSB7XG4gICAgY29uc3QgeyBjb25maXJtIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuY2FsbGJhY2tzO1xuICAgIGlmIChjb25maXJtKSBjb25maXJtKCk7XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgY29uc3QgeyBjYW5jZWwgfSA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5jYWxsYmFja3M7XG4gICAgaWYgKGNhbmNlbCkgY2FuY2VsKCk7XG4gIH1cblxuICB2YWxpZGF0ZSgpIHtcbiAgICBjb25zdCB7IGNvbnRyb2xzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKGNvbnRyb2xzLmNvbmZpcm1Cb3ggJiYgIWNvbnRyb2xzLmNvbmZpcm1Cb3gucmVwb3J0VmFsaWRpdHkoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb25maXJtTW9kYWw7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtEYXRhTW9kYWxde0BsaW5rIG1vZHVsZTpkYXRhTW9kYWx+ZGF0YU1vZGFsfSBjbGFzcy5cbiAqIEBtb2R1bGUgZGF0YU1vZGFsXG4gKi9cblxuaW1wb3J0IENvbmZpcm1Nb2RhbCBmcm9tICcuL2NvbmZpcm1Nb2RhbCc7XG5pbXBvcnQgRXhwb3J0TW9kYWwgZnJvbSAnLi9leHBvcnRNb2RhbCc7XG5cbmltcG9ydCB7IGNyZWF0ZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vdXRpbGl0eS9kb20nO1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICcuLi91dGlsaXR5L3N0b3JhZ2UnO1xuXG4vKipcbiAqIE9iamVjdCBob2xkaW5nIHRoZSBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW0RhdGFNb2RhbF17QGxpbmsgbW9kdWxlOmRhdGFNb2RhbH5kYXRhTW9kYWx9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmRhdGFNb2RhbH5EYXRhTW9kYWx+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjYWxsYmFja3MgQW4gb2JqZWN0IGhvbGRpbmcgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICogQHByb3BlcnR5IHttb2R1bGU6ZGF0YU1vZGFsfkRhdGFNb2RhbH5pbXBvcnREYXRhfSBbY2FsbGJhY2tzLmltcG9ydERhdGFdIEFcbiAqICAgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgaWYgdGhlIHVzZXIgY2hvb3NlcyB0byBpbXBvcnQgZGF0YVxuICogICBmcm9tIGEgZmlsZS5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhdGFNb2RhbH5EYXRhTW9kYWx+ZXhwb3J0RGF0YX0gW2NhbGxiYWNrcy5leHBvcnREYXRhXSBBXG4gKiAgIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIGlmIHRoZSB1c2VyIGNob29zZXMgdG8gZXhwb3J0IGRhdGFcbiAqICAgdG8gYSBmaWxlLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5kZWxldGVBbGxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgaWYgdGhlIHVzZXIgY2hvb3NlcyB0byBkZWxldGUgYWxsIGRhdGEuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLmNsb3NlXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2xvc2VzIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjb250cm9scyBBbiBvYmplY3QgaG9sZGluZyB0aGUgZm9ybSBjb250cm9scyBpbiB0aGUgbW9kYWxcbiAqICAgY29udGVudC5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzLmZpbGVTZWxlY3RvciBUaGUgZmlsZSBpbnB1dCBjb250cm9sLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMuaW1wb3J0QnV0dG9uIFRoZSBpbXBvcnQgYnV0dG9uLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMuZXhwb3J0QnV0dG9uIFRoZSBleHBvcnQgYnV0dG9uLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMuZGVsZXRlQnV0dG9uIFRoZSBkZWxldGUgYnV0dG9uLlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZSBkYXRhIGZvciB0aGUgW0RhdGFNb2RhbF17QGxpbmsgbW9kdWxlOmRhdGFNb2RhbH5kYXRhTW9kYWx9XG4gKiBjbGFzcy5cbiAqIEB0eXBlIHtXZWFrTWFwfVxuICogQHNlZSBtb2R1bGU6ZGF0YU1vZGFsfkRhdGFNb2RhbH5wcml2YXRlc1xuICovXG5jb25zdCBwcml2YXRlTWVtYmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogUGVyZm9ybSBhIGRhdGEgaW1wb3J0IHRoYXQgd2FzIHJlcXVlc3RlZCBieSB0aGUgdXNlci5cbiAqIEBwYXJhbSB7bW9kdWxlOmRhdGFNb2RhbH5EYXRhTW9kYWx9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0b1xuICogICBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IG1vZGFsU3RhY2sgVGhlIG1vZGFsIHN0YWNrIGluIHdoaWNoXG4gKiAgIHRoZSBtb2RhbCBpcyBiZWluZyBpbnNlcnRlZC5cbiAqIEBwYXJhbSB7QmxvYn0gZmlsZSBUaGUgZmlsZSB0aGF0IHRoZSB1c2VyIHNlbGVjdGVkIGZvciBpbXBvcnQuXG4gKi9cbmZ1bmN0aW9uIGRvSW1wb3J0KGluc3RhbmNlLCBtb2RhbFN0YWNrLCBmaWxlKSB7XG4gIHJlYWRGaWxlKGZpbGUsIChjb250ZW50KSA9PiB7XG4gICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgIG1vZGFsU3RhY2suY2xvc2VNb2RhbCgpO1xuICAgICAgY29uc3QgY2FsbGJhY2sgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpLmNhbGxiYWNrcy5pbXBvcnREYXRhO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGZpbGVJbmZvID0ge1xuICAgICAgICAgIG5hbWU6IGZpbGUubmFtZSxcbiAgICAgICAgICBzaXplOiBmaWxlLnNpemUsXG4gICAgICAgICAgdHlwZTogZmlsZS50eXBlIHx8IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIGNhbGxiYWNrKGNvbnRlbnQsIGZpbGVJbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFBlcmZvcm0gYSBkYXRhIGV4cG9ydCB0aGF0IHdhcyByZXF1ZXN0ZWQgYnkgdGhlIHVzZXIuXG4gKiBAcGFyYW0ge21vZHVsZTpkYXRhTW9kYWx+RGF0YU1vZGFsfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG9cbiAqICAgYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHttb2R1bGU6bW9kYWxTdGFja35Nb2RhbFN0YWNrfSBtb2RhbFN0YWNrIFRoZSBtb2RhbCBzdGFjayBpbiB3aGljaFxuICogICB0aGUgbW9kYWwgaXMgYmVpbmcgaW5zZXJ0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZVR5cGUgQSBzdHJpbmcgc3BlY2lmeWluZyB0aGUgZmlsZSBmb3JtYXQgdG8gdXNlIGZvclxuICogICBleHBvcnQ6ICdqc29uJyBvciAnY3N2Jy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBmaWxlT3B0aW9ucyBBbiBvYmplY3Qgc3BlY2lmeWluZyBhZGRpdGlvbmFsIGZpbGUgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gZG9FeHBvcnQoaW5zdGFuY2UsIG1vZGFsU3RhY2ssIGZpbGVUeXBlLCBmaWxlT3B0aW9ucykge1xuICAvLyBVc2Ugc2V0VGltZW91dCB0byB3YWl0IGZvciBleHBvcnQgbW9kYWwgdG8gZmluaXNoXG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIG1vZGFsU3RhY2suY2xvc2VNb2RhbCgpO1xuICAgIGNvbnN0IGNhbGxiYWNrID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKS5jYWxsYmFja3MuZXhwb3J0RGF0YTtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGZpbGVUeXBlLCBmaWxlT3B0aW9ucyk7XG4gIH0pO1xufVxuXG4vKipcbiAqIFBlcmZvcm0gYSBkYXRhIGRlbGV0aW9uIG9wZXJhdGlvbiB0aGF0IHdhcyByZXF1ZXN0ZWQgYnkgdGhlIHVzZXIuXG4gKiBAcGFyYW0ge21vZHVsZTpkYXRhTW9kYWx+RGF0YU1vZGFsfSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG9cbiAqICAgYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHttb2R1bGU6bW9kYWxTdGFja35Nb2RhbFN0YWNrfSBtb2RhbFN0YWNrIFRoZSBtb2RhbCBzdGFjayBpbiB3aGljaFxuICogICB0aGUgbW9kYWwgaXMgYmVpbmcgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGRvRGVsZXRlKGluc3RhbmNlLCBtb2RhbFN0YWNrKSB7XG4gIGNvbnN0IGNhbGxiYWNrID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKS5jYWxsYmFja3MuZGVsZXRlQWxsO1xuICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG5cbiAgLy8gQ2xvc2UgdGhlIGRhdGEgbW9kYWwgKHVzaW5nIHNldFRpbWVvdXQgdG8gd2FpdCBmb3IgY29uZmlybSBtb2RhbCB0byBjbG9zZSlcbiAgc2V0VGltZW91dCgoKSA9PiBtb2RhbFN0YWNrLmNsb3NlTW9kYWwoKSk7XG59XG5cbi8qKlxuICogQWRkIHRoZSBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGJ1dHRvbnMgaW4gdGhlIG1vZGFsLlxuICogQHBhcmFtIHttb2R1bGU6ZGF0YU1vZGFsfkRhdGFNb2RhbH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvXG4gKiAgIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWxTdGFja30gbW9kYWxTdGFjayBUaGUgbW9kYWwgc3RhY2sgaW4gd2hpY2hcbiAqICAgdGhlIG1vZGFsIGlzIGJlaW5nIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBhZGRMaXN0ZW5lcnMoaW5zdGFuY2UsIG1vZGFsU3RhY2spIHtcbiAgY29uc3QgeyBjb250cm9scyB9ID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBjb250cm9scy5pbXBvcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29udHJvbHMuZmlsZVNlbGVjdG9yLmNsaWNrKCk7XG4gIH0pO1xuXG4gIGNvbnRyb2xzLmV4cG9ydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb25zdCBtb2RhbCA9IG5ldyBFeHBvcnRNb2RhbCh7XG4gICAgICBjb25maXJtOiAoZmlsZVR5cGUsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgZG9FeHBvcnQoaW5zdGFuY2UsIG1vZGFsU3RhY2ssIGZpbGVUeXBlLCBvcHRpb25zKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgbW9kYWxTdGFjay5zaG93TW9kYWwobW9kYWwpO1xuICB9KTtcblxuICBjb250cm9scy5kZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3QgbW9kYWwgPSBuZXcgQ29uZmlybU1vZGFsKFxuICAgICAgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgYWxsIHVzZXIgZGF0YT8gVGhpcyB3aWxsIGVyYXNlIGFsbCB0YXNrcyBhbmQgcHJvamVjdHMsIGFuZCB3aWxsIGFsc28gcmVzZXQgYXBwIHNldHRpbmdzLicsXG4gICAgICB7XG4gICAgICAgIGluaXRGb2N1czogJ2NvbmZpcm0tYm94JyxcbiAgICAgICAgY29uZmlybUJveDoge1xuICAgICAgICAgIHZhbHVlOiAnZGVsZXRlJyxcbiAgICAgICAgICBsYWJlbDogJ1RoaXMgYWN0aW9uIGNhbm5vdCBiZSB1bmRvbmUuIFBsZWFzZSBjb25maXJtIHlvdXIgaW50ZW50aW9uIGJ5IHR5cGluZyB0aGUgd29yZCBcXCdkZWxldGVcXCcgKHdpdGhvdXQgcXVvdGVzKSBpbiB0aGUgYm94OicsXG4gICAgICAgICAgZXJyb3JNZXNzYWdlOiAnUGxlYXNlIGVudGVyIHRoZSB3b3JkIFxcJ2RlbGV0ZVxcJy4nLFxuICAgICAgICB9LFxuICAgICAgICBjb25maXJtOiAoKSA9PiBkb0RlbGV0ZShpbnN0YW5jZSwgbW9kYWxTdGFjayksXG4gICAgICB9LFxuICAgICk7XG4gICAgbW9kYWxTdGFjay5zaG93TW9kYWwobW9kYWwpO1xuICB9KTtcblxuICBjb250cm9scy5maWxlU2VsZWN0b3IuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICBjb25zdCB7IGZpbGVzIH0gPSBlLnRhcmdldDtcbiAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkgZG9JbXBvcnQoaW5zdGFuY2UsIG1vZGFsU3RhY2ssIGZpbGVzWzBdKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQSBtb2RhbCBkaWFsb2cgZm9yIG1hbmFnaW5nIHVzZXIgZGF0YS5cbiAqIEBpbXBsZW1lbnRzIHttb2R1bGU6bW9kYWxTdGFja35Nb2RhbH1cbiAqL1xuY2xhc3MgRGF0YU1vZGFsIHtcbiAgLyoqXG4gICAqIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgdXNlciBjaG9vc2VzIHRvIGltcG9ydFxuICAgKiBkYXRhIGZyb20gYSBmaWxlIGFuZCB0aGUgZmlsZSBpcyByZWFkIHN1Y2Nlc3NmdWxseS5cbiAgICogQGNhbGxiYWNrIG1vZHVsZTpkYXRhTW9kYWx+RGF0YU1vZGFsfmltcG9ydERhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgVGhlIGNvbnRlbnRzIG9mIHRoZSBmaWxlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2luZm9dIEFuIG9iamVjdCBzcGVjaWZ5aW5nIGFkZGl0aW9uYWwgZmlsZSBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtpbmZvLm5hbWVdIFRoZSBuYW1lIG9mIHRoZSBmaWxlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2luZm8uc2l6ZV0gVGhlIHNpemUgb2YgdGhlIGZpbGUgaW4gYnl0ZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbaW5mby50eXBlXSBUaGUgbWVkaWEgdHlwZSBvZiB0aGUgZmlsZSwgb3IgbnVsbCBpZiB0aGVcbiAgICogICBicm93c2VyIGNvdWxkIG5vdCBkZXRlcm1pbmUgYSBtZWRpYSB0eXBlLlxuICAgKi9cblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNob29zZXMgdG8gZXhwb3J0XG4gICAqIGRhdGEgdG8gYSBmaWxlLlxuICAgKiBAY2FsbGJhY2sgbW9kdWxlOmRhdGFNb2RhbH5EYXRhTW9kYWx+ZXhwb3J0RGF0YVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZVR5cGUgQSBzdHJpbmcgc3BlY2lmeWluZyB0aGUgZmlsZSBmb3JtYXQgdG8gdXNlIGZvclxuICAgKiAgIGV4cG9ydC4gVGhpcyBjYW4gYmUgZWl0aGVyICdqc29uJyBvciAnY3N2Jy5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBBbiBvYmplY3Qgc3BlY2lmeWluZyBhZGRpdGlvbmFsIGZpbGUgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm5ld2xpbmVTZXF1ZW5jZV0gVGhlIGNoYXJhY3RlciBzZXF1ZW5jZSB0byB1c2VcbiAgICogICBmb3IgbmV3bGluZXMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgb3B0aW9ucyBmb3IgdGhlIG1vZGFsLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6ZGF0YU1vZGFsfkRhdGFNb2RhbH5vcHRpb25zXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhdGFNb2RhbH5EYXRhTW9kYWx+aW1wb3J0RGF0YX0gW2ltcG9ydERhdGFdIEEgY2FsbGJhY2tcbiAgICogICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNob29zZXMgdG8gaW1wb3J0IGRhdGEgZnJvbVxuICAgKiAgIGEgZmlsZSBhbmQgdGhlIGZpbGUgaXMgcmVhZCBzdWNjZXNzZnVsbHkuXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhdGFNb2RhbH5EYXRhTW9kYWx+ZXhwb3J0RGF0YX0gW2V4cG9ydERhdGFdIEEgY2FsbGJhY2tcbiAgICogICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNob29zZXMgdG8gZXhwb3J0IGRhdGEgdG8gYVxuICAgKiAgIGZpbGUuXG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtkZWxldGVBbGxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWRcbiAgICogICB3aGVuIHRoZSB1c2VyIGNob29zZXMgKGFuZCBjb25maXJtcyB0aGUgY2hvaWNlKSB0byBkZWxldGUgYWxsIGRhdGEuXG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjbG9zZV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuXG4gICAqICAgdGhlIHVzZXIgY2xvc2VzIHRoZSBtb2RhbC4gVGhpcyB3aWxsIG5vdCBiZSBpbnZva2VkIGlmIHRoZSBtb2RhbCBpc1xuICAgKiAgIGF1dG9tYXRpY2FsbHkgY2xvc2VkIGZvbGxvd2luZyBhIGRhdGEgbWFuYWdlbWVudCBvcGVyYXRpb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHttb2R1bGU6ZGF0YU1vZGFsfkRhdGFNb2RhbH5vcHRpb25zfSBbb3B0aW9ucz17fV0gSG9sZHNcbiAgICogICBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBtb2RhbC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIGltcG9ydERhdGE6IG9wdGlvbnMuaW1wb3J0RGF0YSB8fCBudWxsLFxuICAgICAgICBleHBvcnREYXRhOiBvcHRpb25zLmV4cG9ydERhdGEgfHwgbnVsbCxcbiAgICAgICAgZGVsZXRlQWxsOiBvcHRpb25zLmRlbGV0ZUFsbCB8fCBudWxsLFxuICAgICAgICBjbG9zZTogb3B0aW9ucy5jbG9zZSB8fCBudWxsLFxuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIGZpbGVTZWxlY3RvcjogbnVsbCxcbiAgICAgICAgaW1wb3J0QnV0dG9uOiBudWxsLFxuICAgICAgICBleHBvcnRCdXR0b246IG51bGwsXG4gICAgICAgIGRlbGV0ZUJ1dHRvbjogbnVsbCxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAtLVxuICAgKiBXZSBuZWVkIHRvIHNldCB0aGVzZSBwcm9wZXJ0aWVzIHRvIGNvbmZvcm0gdG8gdGhlIE1vZGFsIGludGVyZmFjZSwgYnV0XG4gICAqIHNldHRpbmcgdGhlbSBkaXJlY3RseSBpbiB0aGUgY29uc3RydWN0b3Igd291bGQgYWxsb3cgZXh0ZXJuYWxcbiAgICogbW9kaWZpY2F0aW9uLlxuICAgKi9cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuICdNYW5hZ2UgRGF0YSc7XG4gIH1cblxuICBnZXQgY29uZmlybUxhYmVsKCkge1xuICAgIHJldHVybiAnQ2xvc2UnO1xuICB9XG5cbiAgZ2V0IG5vQ2FuY2VsQnV0dG9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0IGluaXRGb2N1cygpIHtcbiAgICByZXR1cm4gJ2NvbmZpcm0nO1xuICB9XG5cbiAgLyogZXNsaW50LWVuYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzICovXG5cbiAgYWRkQ29udGVudChwYXJlbnQsIG1vZGFsU3RhY2spIHtcbiAgICBjb25zdCBhZGRDb250YWluZXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWNvbnRhaW5lcicpO1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH07XG4gICAgY29uc3QgYWRkSGVhZGluZyA9IChsYWJlbCwgY29udGFpbmVyKSA9PiB7XG4gICAgICBjb25zdCBsYWJlbEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGxhYmVsRWxlbS5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsJyk7XG4gICAgICBsYWJlbEVsZW0udGV4dENvbnRlbnQgPSBsYWJlbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbEVsZW0pO1xuICAgIH07XG4gICAgY29uc3QgYWRkQnV0dG9uID0gKGxhYmVsLCBjb250YWluZXIpID0+IHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2Zvcm0tYnV0dG9uJyk7XG4gICAgICBidXR0b24udGV4dENvbnRlbnQgPSBsYWJlbDtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xuICAgICAgcmV0dXJuIGJ1dHRvbjtcbiAgICB9O1xuXG4gICAgY29uc3QgeyBjb250cm9scyB9ID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIGxldCBjb250YWluZXIgPSBhZGRDb250YWluZXIoKTtcbiAgICBhZGRIZWFkaW5nKCdJbXBvcnQvRXhwb3J0JywgY29udGFpbmVyKTtcbiAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBidXR0b25Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnZm9ybS1idXR0b24tY29udGFpbmVyJyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbkNvbnRhaW5lcik7XG4gICAgY29udHJvbHMuaW1wb3J0QnV0dG9uID0gYWRkQnV0dG9uKCdJbXBvcnQgZnJvbSBGaWxlLi4uJywgYnV0dG9uQ29udGFpbmVyKTtcbiAgICBjb250cm9scy5leHBvcnRCdXR0b24gPSBhZGRCdXR0b24oJ0V4cG9ydCB0byBGaWxlLi4uJywgYnV0dG9uQ29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lciA9IGFkZENvbnRhaW5lcigpO1xuICAgIGFkZEhlYWRpbmcoJ0RlbGV0ZSBEYXRhJywgY29udGFpbmVyKTtcbiAgICBjb250cm9scy5kZWxldGVCdXR0b24gPSBhZGRCdXR0b24oJ0VyYXNlIEFsbCBEYXRhLi4uJywgY29udGFpbmVyKTtcblxuICAgIGNvbnRyb2xzLmZpbGVTZWxlY3RvciA9IGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdmaWxlJyxcbiAgICAgIGlkOiAnZGF0YS1pbXBvcnQtZmlsZS1zZWxlY3QnLFxuICAgICAgbmFtZTogJ2RhdGEtaW1wb3J0LWZpbGUtc2VsZWN0JyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWhpZGRlbiddLFxuICAgICAgYWNjZXB0OiBbXG4gICAgICAgICcuanNvbicsXG4gICAgICAgICcuY3N2JyxcbiAgICAgICAgJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAndGV4dC9jc3YnLFxuICAgICAgXSxcbiAgICB9KTtcblxuICAgIGFkZExpc3RlbmVycyh0aGlzLCBtb2RhbFN0YWNrKTtcbiAgfVxuXG4gIGNvbmZpcm0oKSB7XG4gICAgdGhpcy5jYW5jZWwoKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICBjb25zdCB7IGNsb3NlIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuY2FsbGJhY2tzO1xuICAgIGlmIChjbG9zZSkgY2xvc2UoKTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzIC0tXG4gICAqIE5lY2Vzc2FyeSBzaW5jZSBtb2RhbCBtdXN0IGhhdmUgdmFsaWRhdGUgZnVuY3Rpb24gaW4gb3JkZXIgdG8gc2F0aXNmeVxuICAgKiBNb2RhbCBpbnRlcmZhY2UuXG4gICAqL1xuICB2YWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEYXRhTW9kYWw7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtEYXRlUGlja2VyTW9kYWxde0BsaW5rIG1vZHVsZTpkYXRlUGlja2VyTW9kYWx+RGF0ZVBpY2tlck1vZGFsfVxuICogY2xhc3MuXG4gKiBAbW9kdWxlIGRhdGVQaWNrZXJNb2RhbFxuICovXG5cbmltcG9ydCBEYXRlUGlja2VyIGZyb20gJy4uL2RhdGVQaWNrZXInO1xuXG4vKipcbiAqIE9iamVjdCBob2xkaW5nIHByaXZhdGUgbWVtYmVycyBmb3IgdGhlXG4gKiBbRGF0ZVBpY2tlck1vZGFsXXtAbGluayBtb2R1bGU6ZGF0ZVBpY2tlck1vZGFsfkRhdGVQaWNrZXJNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6ZGF0ZVBpY2tlck1vZGFsfkRhdGVQaWNrZXJNb2RhbH5wcml2YXRlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGNhbGxiYWNrcyBBbiBvYmplY3QgaG9sZGluZyBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLmNvbmZpcm1dIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBzdWNjZXNzZnVsbHkgY29uZmlybXMgdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jYW5jZWxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBjYW5jZWxzIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7RGF0ZX0gW3N0YXRlRGF0ZV0gVGhlIGRlZmF1bHQgZGF0ZSB0aGF0IGlzIHNlbGVjdGVkIHdoZW4gdGhlXG4gKiAgIG1vZGFsIGlzIG9wZW5lZCwgaWYgZGlmZmVyZW50IGZyb20gdG9kYXkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGl0bGUgVGhlIHRpdGxlIG9mIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhdGVQaWNrZXJ+RGF0ZVBpY2tlcn0gcGlja2VyIFRoZSBkYXRlIHBpY2tlciBpbnN0YW5jZS5cbiAqL1xuXG4vKipcbiAqIEhvbGRzIHByaXZhdGUgZGF0YSBmb3IgdGhlXG4gKiBbRGF0ZVBpY2tlck1vZGFsXXtAbGluayBtb2R1bGU6ZGF0ZVBpY2tlck1vZGFsfkRhdGVQaWNrZXJNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOmRhdGVQaWNrZXJNb2RhbH5EYXRlUGlja2VyTW9kYWx+cHJpdmF0ZXNcbiAqL1xuY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEEgbW9kYWwgZGlhbG9nIGZvciBjaG9vc2luZyBhIGNhbGVuZGFyIGRhdGUuXG4gKiBAaW1wbGVtZW50cyB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWx9XG4gKi9cbmNsYXNzIERhdGVQaWNrZXJNb2RhbCB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBIb2xkcyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuY29uZmlybV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAgICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC4gVGhlIHNlbGVjdGVkIGRhdGVcbiAgICogICB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZnVuY3Rpb24gYXMgYW4gYXJndW1lbnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmNhbmNlbF0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAgICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2FuY2VscyB0aGUgbW9kYWwuXG4gICAqIEBwYXJhbSB7RGF0ZX0gW29wdGlvbnMuc3RhcnREYXRlXSBUaGUgZGF0ZSB0aGF0IHdpbGwgYmUgaW5pdGlhbGx5XG4gICAqICAgc2VsZWN0ZWQuIElmIG5vdCBnaXZlbiwgdGhlbiB0aGUgcHJlc2VudCBkYXRlIGlzIHVzZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50aXRsZT1TZWxlY3QgRGF0ZV0gVGhlIHRpdGxlIG9mIHRoZSBtb2RhbC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIGNvbmZpcm06IG9wdGlvbnMuY29uZmlybSB8fCBudWxsLFxuICAgICAgICBjYW5jZWw6IG9wdGlvbnMuY2FuY2VsIHx8IG51bGwsXG4gICAgICB9LFxuICAgICAgc3RhcnREYXRlOiBvcHRpb25zLnN0YXJ0RGF0ZSB8fCBudWxsLFxuICAgICAgdGl0bGU6IG9wdGlvbnMudGl0bGUgPz8gJ1NlbGVjdCBEYXRlJyxcbiAgICAgIHBpY2tlcjogbnVsbCxcbiAgICB9O1xuICAgIHByaXZhdGVNZW1iZXJzLnNldCh0aGlzLCBwcml2YXRlcyk7XG4gIH1cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS50aXRsZTtcbiAgfVxuXG4gIGFkZENvbnRlbnQocGFyZW50KSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgcHJpdmF0ZXMucGlja2VyID0gbmV3IERhdGVQaWNrZXIocGFyZW50LCBwcml2YXRlcy5zdGFydERhdGUpO1xuICB9XG5cbiAgY29uZmlybSgpIHtcbiAgICBjb25zdCB7IGNhbGxiYWNrcywgcGlja2VyIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrcy5jb25maXJtKSBjYWxsYmFja3MuY29uZmlybShwaWNrZXIuZGF0ZSk7XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgY29uc3QgeyBjYWxsYmFja3MgfSA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBpZiAoY2FsbGJhY2tzLmNhbmNlbCkgY2FsbGJhY2tzLmNhbmNlbCgpO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMgLS1cbiAgICogTmVjZXNzYXJ5IHNpbmNlIG1vZGFsIG11c3QgaGF2ZSB2YWxpZGF0ZSBmdW5jdGlvbiBpbiBvcmRlciB0byBzYXRpc2Z5XG4gICAqIE1vZGFsIGludGVyZmFjZS5cbiAgICovXG4gIHZhbGlkYXRlKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVQaWNrZXJNb2RhbDtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgW0V4cG9ydE1vZGFsXXtAbGluayBtb2R1bGU6ZXhwb3J0TW9kYWx+RXhwb3J0TW9kYWx9IGNsYXNzLlxuICogQG1vZHVsZSBleHBvcnRNb2RhbFxuICovXG5cbmltcG9ydCB7IGNyZWF0ZUZvcm1Db250cm9sIH0gZnJvbSAnLi4vdXRpbGl0eS9kb20nO1xuXG4vKipcbiAqIE9iamVjdCBob2xkaW5nIHByaXZhdGUgbWVtYmVycyBmb3IgdGhlXG4gKiBbRXhwb3J0TW9kYWxde0BsaW5rIG1vZHVsZTpleHBvcnRNb2RhbH5FeHBvcnRNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6ZXhwb3J0TW9kYWx+RXhwb3J0TW9kYWx+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjYWxsYmFja3MgQW4gb2JqZWN0IGhvbGRpbmcgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jb25maXJtXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjYWxsYmFja3MuY2FuY2VsXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2FuY2VscyB0aGUgbW9kYWwuXG4gKiBAcHJvcGVydHkge09iamVjdH0gY29udHJvbHMgQW4gb2JqZWN0IGhvbGRpbmcgdGhlIGZvcm0gaW5wdXQgZWxlbWVudHMgZm9yXG4gKiAgIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzLmV4cG9ydEpzb24gVGhlIHJhZGlvIGJ1dHRvbiBmb3Igc2VsZWN0aW5nXG4gKiAgIHRoZSBKU09OIGZpbGUgZm9ybWF0LlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMuZXhwb3J0Q3N2IFRoZSByYWRpbyBidXR0b24gZm9yIHNlbGVjdGluZ1xuICogICB0aGUgQ1NWIGZpbGUgZm9ybWF0LlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMubmV3bGluZVNlcXVlbmNlIFRoZSBzZWxlY3QgYm94IGZvciBjaG9vc2luZ1xuICogICB0aGUgbmV3bGluZSBzdHlsZS5cbiAqL1xuXG4vKipcbiAqIEhvbGRzIHByaXZhdGUgZGF0YSBmb3IgdGhlXG4gKiBbRXhwb3J0TW9kYWxde0BsaW5rIG1vZHVsZTpleHBvcnRNb2RhbH5FeHBvcnRNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOmV4cG9ydE1vZGFsfkV4cG9ydE1vZGFsfnByaXZhdGVzXG4gKi9cbmNvbnN0IHByaXZhdGVNZW1iZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBBIG1vZGFsIGRpYWxvZyBmb3IgZXhwb3J0aW5nIGRhdGEgdG8gYSBmaWxlLlxuICogQGltcGxlbWVudHMge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsfVxuICovXG5jbGFzcyBFeHBvcnRNb2RhbCB7XG4gIC8qKlxuICAgKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2hvb3NlcyB0byBleHBvcnRcbiAgICogZGF0YSB0byBhIGZpbGUuXG4gICAqIEBjYWxsYmFjayBtb2R1bGU6ZXhwb3J0TW9kYWx+RXhwb3J0TW9kYWx+ZXhwb3J0Q2FsbGJhY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVUeXBlIEEgc3RyaW5nIHNwZWNpZnlpbmcgdGhlIGZpbGUgZm9ybWF0IHRvIHVzZSBmb3JcbiAgICogICBleHBvcnQuIFRoaXMgY2FuIGJlIGVpdGhlciAnanNvbicgb3IgJ2NzdicuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gQW4gb2JqZWN0IHNwZWNpZnlpbmcgYWRkaXRpb25hbCBmaWxlIG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5uZXdsaW5lU2VxdWVuY2VdIFRoZSBjaGFyYWN0ZXIgc2VxdWVuY2UgdG8gdXNlXG4gICAqICAgZm9yIG5ld2xpbmVzLlxuICAgKi9cblxuICAvKipcbiAgICogU3BlY2lmaWVzIG9wdGlvbnMgZm9yIHRoZSBtb2RhbC5cbiAgICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmV4cG9ydE1vZGFsfkV4cG9ydE1vZGFsfm9wdGlvbnNcbiAgICogQHByb3BlcnR5IHttb2R1bGU6ZXhwb3J0TW9kYWx+RXhwb3J0TW9kYWx+ZXhwb3J0Q2FsbGJhY2t9IFtjb25maXJtXSBBXG4gICAqICAgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgdXNlciBzdWNjZXNzZnVsbHlcbiAgICogICBjb25maXJtcyB0aGUgbW9kYWwuXG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjYW5jZWxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWRcbiAgICogICB3aGVuIHRoZSB1c2VyIGNhbmNlbHMgdGhlIG1vZGFsLlxuICAgKi9cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgbW9kYWwuXG4gICAqIEBwYXJhbSB7bW9kdWxlOmV4cG9ydE1vZGFsfkV4cG9ydE1vZGFsfm9wdGlvbnN9IFtvcHRpb25zPXt9XSBIb2xkc1xuICAgKiAgIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIG1vZGFsLlxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgY29uZmlybTogb3B0aW9ucy5jb25maXJtIHx8IG51bGwsXG4gICAgICAgIGNhbmNlbDogb3B0aW9ucy5jYW5jZWwgfHwgbnVsbCxcbiAgICAgIH0sXG4gICAgICBjb250cm9sczoge1xuICAgICAgICBleHBvcnRKc29uOiBudWxsLFxuICAgICAgICBleHBvcnRDc3Y6IG51bGwsXG4gICAgICAgIG5ld2xpbmVTZXF1ZW5jZTogbnVsbCxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuICB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAtLVxuICAgKiBXZSBuZWVkIHRvIHNldCB0aGVzZSBwcm9wZXJ0aWVzIHRvIGNvbmZvcm0gdG8gdGhlIE1vZGFsIGludGVyZmFjZSwgYnV0XG4gICAqIHNldHRpbmcgdGhlbSBkaXJlY3RseSBpbiB0aGUgY29uc3RydWN0b3Igd291bGQgYWxsb3cgZXh0ZXJuYWxcbiAgICogbW9kaWZpY2F0aW9uLlxuICAgKi9cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuICdFeHBvcnQgRGF0YSc7XG4gIH1cblxuICBnZXQgY29uZmlybUxhYmVsKCkge1xuICAgIHJldHVybiAnRXhwb3J0Li4uJztcbiAgfVxuXG4gIC8qIGVzbGludC1lbmFibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuXG4gIGFkZENvbnRlbnQocGFyZW50KSB7XG4gICAgY29uc3QgcmFkaW9MYWJlbCA9ICh2YWx1ZSkgPT4gKFxuICAgICAgeyB2YWx1ZSwgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJ10gfVxuICAgICk7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1jb250YWluZXInKTtcblxuICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbCcpO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ0ZpbGUgRm9ybWF0JztcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdyYWRpbycsXG4gICAgICBpZDogJ2V4cG9ydC1mb3JtYXQtanNvbicsXG4gICAgICBuYW1lOiAnZXhwb3J0LWZvcm1hdCcsXG4gICAgICB2YWx1ZTogJ2pzb24nLFxuICAgICAgY2hlY2tlZDogdHJ1ZSxcbiAgICAgIGxhYmVsOiByYWRpb0xhYmVsKCdFeHBvcnQgYWxsIGRhdGEgdG8gSlNPTiBmb3JtYXQnKSxcbiAgICAgIGNvbnRhaW5lcjogeyBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1pdGVtLWNvbnRhaW5lciddIH0sXG4gICAgfSkpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAncmFkaW8nLFxuICAgICAgaWQ6ICdleHBvcnQtZm9ybWF0LWNzdicsXG4gICAgICBuYW1lOiAnZXhwb3J0LWZvcm1hdCcsXG4gICAgICB2YWx1ZTogJ2NzdicsXG4gICAgICBsYWJlbDogcmFkaW9MYWJlbCgnRXhwb3J0IHRhc2tzIHRvIENTViBmb3JtYXQnKSxcbiAgICAgIGNvbnRhaW5lcjogeyBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1pdGVtLWNvbnRhaW5lciddIH0sXG4gICAgfSkpO1xuXG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICBpZDogJ2V4cG9ydC1saW5lLWVuZGluZycsXG4gICAgICBuYW1lOiAnZXhwb3J0LWxpbmUtZW5kaW5nJyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdCddLFxuICAgICAgbGFiZWw6IHsgdmFsdWU6ICdMaW5lIEVuZGluZyBTdHlsZScsIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWxhYmVsJ10gfSxcbiAgICAgIGNvbnRhaW5lcjogeyBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1jb250YWluZXInXSB9LFxuICAgICAgbWVudUl0ZW1zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogJ2NybGYnLFxuICAgICAgICAgIGxhYmVsOiAnV2luZG93cyBTdGFuZGFyZDogQ1JMRicsXG4gICAgICAgICAgc2VsZWN0ZWQ6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZTogJ2xmJyxcbiAgICAgICAgICBsYWJlbDogJ1VuaXggU3RhbmRhcmQ6IExGJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiAnY3InLFxuICAgICAgICAgIGxhYmVsOiAnQ2xhc3NpYyBNYWMgT1MgU3RhbmRhcmQgKEJlZm9yZSBPUyBYKTogQ1InLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KSk7XG5cbiAgICBjb25zdCB7IGNvbnRyb2xzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29udHJvbHMuZXhwb3J0SnNvbiA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcjZXhwb3J0LWZvcm1hdC1qc29uJyk7XG4gICAgY29udHJvbHMuZXhwb3J0Q3N2ID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNleHBvcnQtZm9ybWF0LWNzdicpO1xuICAgIGNvbnRyb2xzLm5ld2xpbmVTZXF1ZW5jZSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcjZXhwb3J0LWxpbmUtZW5kaW5nJyk7XG4gIH1cblxuICBjb25maXJtKCkge1xuICAgIGNvbnN0IHsgY2FsbGJhY2tzLCBjb250cm9scyB9ID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgaWYgKGNhbGxiYWNrcy5jb25maXJtKSB7XG4gICAgICBjb25zdCBmaWxlVHlwZSA9IGNvbnRyb2xzLmV4cG9ydEpzb24uY2hlY2tlZCA/ICdqc29uJyA6ICdjc3YnO1xuICAgICAgbGV0IG5ld2xpbmVTZXF1ZW5jZTtcbiAgICAgIHN3aXRjaCAoY29udHJvbHMubmV3bGluZVNlcXVlbmNlLnZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ2xmJzpcbiAgICAgICAgICBuZXdsaW5lU2VxdWVuY2UgPSAnXFxuJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY3InOlxuICAgICAgICAgIG5ld2xpbmVTZXF1ZW5jZSA9ICdcXHInO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjcmxmJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBuZXdsaW5lU2VxdWVuY2UgPSAnXFxyXFxuJztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5jb25maXJtKGZpbGVUeXBlLCB7IG5ld2xpbmVTZXF1ZW5jZSB9KTtcbiAgICB9XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuY2FsbGJhY2tzLmNhbmNlbDtcbiAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAtLVxuICAgKiBOZWNlc3Nhcnkgc2luY2UgbW9kYWwgbXVzdCBoYXZlIHZhbGlkYXRlIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHNhdGlzZnlcbiAgICogTW9kYWwgaW50ZXJmYWNlLlxuICAgKi9cbiAgdmFsaWRhdGUoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwb3J0TW9kYWw7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtJbmZvTW9kYWxde0BsaW5rIG1vZHVsZTppbmZvTW9kYWx+SW5mb01vZGFsfSBjbGFzcy5cbiAqIEBtb2R1bGUgaW5mb01vZGFsXG4gKi9cblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyB0aGUgcHJpdmF0ZSBtZW1iZXJzIGZvciB0aGVcbiAqIFtJbmZvTW9kYWxde0BsaW5rIG1vZHVsZTppbmZvTW9kYWx+SW5mb01vZGFsfSBjbGFzcy5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTppbmZvTW9kYWx+SW5mb01vZGFsfnByaXZhdGVzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGl0bGUgVGhlIHRpdGxlIGZvciB0aGUgbW9kYWwuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlybUxhYmVsIFRoZSBsYWJlbCB0byBiZSB1c2VkIGZvciB0aGUgY29uZmlybSBidXR0b24uXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250ZW50IFRoZSBjdXN0b20gY29udGVudCB0byBkaXNwbGF5IGluIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjYWxsYmFja3MgQW4gb2JqZWN0IGhvbGRpbmcgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jbG9zZV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAqICAgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsb3NlcyB0aGUgbW9kYWwuXG4gKi9cblxuLyoqXG4gKiBIb2xkcyBwcml2YXRlIGRhdGEgZm9yIHRoZSBbSW5mb01vZGFsXXtAbGluayBtb2R1bGU6aW5mb01vZGFsfkluZm9Nb2RhbH1cbiAqIGNsYXNzLlxuICogQHR5cGUge1dlYWtNYXB9XG4gKiBAc2VlIG1vZHVsZTppbmZvTW9kYWx+SW5mb01vZGFsfnByaXZhdGVzXG4gKi9cbmNvbnN0IHByaXZhdGVNZW1iZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBBIG1vZGFsIGRpYWxvZyBkaXNwbGF5aW5nIGN1c3RvbSBpbmZvcm1hdGlvbmFsIGNvbnRlbnQuXG4gKiBAaW1wbGVtZW50cyB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWx9XG4gKi9cbmNsYXNzIEluZm9Nb2RhbCB7XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgb3B0aW9ucyBmb3IgdGhlIG1vZGFsLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6aW5mb01vZGFsfkluZm9Nb2RhbH5vcHRpb25zXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGU9QWxlcnRdIFRoZSB0aXRsZSBmb3IgdGhlIG1vZGFsLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbmZpcm1MYWJlbD1Pa2F5XSBUaGUgbGFiZWwgdG8gYmUgdXNlZCBmb3IgdGhlXG4gICAqICAgY29uZmlybSBidXR0b24uXG4gICAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjbG9zZV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuXG4gICAqICAgdGhlIHVzZXIgY2xvc2VzIHRoZSBtb2RhbC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIG1vZGFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXXxIVE1MRWxlbWVudH0gY29udGVudCBUaGUgY29udGVudCB0aGF0IHdpbGwgYmVcbiAgICogICBkaXNwbGF5ZWQgaW4gdGhlIG1vZGFsLiBUaGlzIGNhbiBlaXRoZXIgYmUgYSBzdHJpbmcgc3BlY2lmeWluZyBhXG4gICAqICAgbWVzc2FnZSwgYW4gYXJyYXkgb2Ygc3RyaW5ncyBlYWNoIHNwZWNpZnlpbmcgYSBwYXJhZ3JhcGggb2YgdGV4dCwgb3IgYVxuICAgKiAgIGN1c3RvbSBlbGVtZW50IHRoYXQgd2lsbCBiZSBpbnNlcnRlZCBpbnRvIHRoZSBtb2RhbCBjb250ZW50IGFyZWEuXG4gICAqIEBwYXJhbSB7bW9kdWxlOmluZm9Nb2RhbH5JbmZvTW9kYWx+b3B0aW9uc30gW29wdGlvbnM9e31dIEhvbGRzXG4gICAqICAgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgbW9kYWwuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb250ZW50LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHtcbiAgICAgIHRpdGxlOiBvcHRpb25zLnRpdGxlID8/ICdBbGVydCcsXG4gICAgICBjb25maXJtTGFiZWw6IG9wdGlvbnMuY29uZmlybUxhYmVsIHx8ICdPa2F5JyxcbiAgICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgY2xvc2U6IG9wdGlvbnMuY2xvc2UgfHwgbnVsbCxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGlmIChjb250ZW50IGluc3RhbmNlb2YgTm9kZSkge1xuICAgICAgcHJpdmF0ZXMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2luZm8tbW9kYWwtY29udGVudC1jb250YWluZXInKTtcbiAgICAgIGNvbnN0IHBhcmFncmFwaHMgPSBBcnJheS5pc0FycmF5KGNvbnRlbnQpID8gY29udGVudCA6IFtjb250ZW50XTtcbiAgICAgIHBhcmFncmFwaHMuZm9yRWFjaCgocGFyYWdyYXBoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICBwRWxlbS5jbGFzc0xpc3QuYWRkKCdpbmZvLW1vZGFsLWNvbnRlbnQtcGFyYWdyYXBoJyk7XG4gICAgICAgIHBFbGVtLnRleHRDb250ZW50ID0gcGFyYWdyYXBoO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQocEVsZW0pO1xuICAgICAgfSk7XG4gICAgICBwcml2YXRlcy5jb250ZW50ID0gY29udGFpbmVyO1xuICAgIH1cblxuICAgIHByaXZhdGVNZW1iZXJzLnNldCh0aGlzLCBwcml2YXRlcyk7XG4gIH1cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS50aXRsZTtcbiAgfVxuXG4gIGdldCBjb25maXJtTGFiZWwoKSB7XG4gICAgcmV0dXJuIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5jb25maXJtTGFiZWw7XG4gIH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzIC0tXG4gICAqIFdlIG5lZWQgdG8gc2V0IHRoZXNlIHByb3BlcnRpZXMgdG8gY29uZm9ybSB0byB0aGUgTW9kYWwgaW50ZXJmYWNlLCBidXRcbiAgICogc2V0dGluZyB0aGVtIGRpcmVjdGx5IGluIHRoZSBjb25zdHJ1Y3RvciB3b3VsZCBhbGxvdyBleHRlcm5hbFxuICAgKiBtb2RpZmljYXRpb24uXG4gICAqL1xuXG4gIGdldCBub0NhbmNlbEJ1dHRvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGdldCBpbml0Rm9jdXMoKSB7XG4gICAgcmV0dXJuICdjb25maXJtJztcbiAgfVxuXG4gIC8qIGVzbGludC1lbmFibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuXG4gIGFkZENvbnRlbnQocGFyZW50KSB7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5jb250ZW50KTtcbiAgfVxuXG4gIGNvbmZpcm0oKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuY2FsbGJhY2tzLmNsb3NlO1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbmZpcm0oKTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzIC0tXG4gICAqIE5lY2Vzc2FyeSBzaW5jZSBtb2RhbCBtdXN0IGhhdmUgdmFsaWRhdGUgZnVuY3Rpb24gaW4gb3JkZXIgdG8gc2F0aXNmeVxuICAgKiBNb2RhbCBpbnRlcmZhY2UuXG4gICAqL1xuICB2YWxpZGF0ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbmZvTW9kYWw7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtSZWN1cnJlbmNlTW9kYWxde0BsaW5rIG1vZHVsZTpyZWN1cnJlbmNlTW9kYWx+UmVjdXJyZW5jZU1vZGFsfVxuICogY2xhc3MuXG4gKiBAbW9kdWxlIHJlY3VycmVuY2VNb2RhbFxuICovXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3JkaW5hbCBmcm9tICdvcmRpbmFsJztcblxuaW1wb3J0IERhdGVQaWNrZXJNb2RhbCBmcm9tICcuL2RhdGVQaWNrZXJNb2RhbCc7XG5pbXBvcnQgUmVjdXJyaW5nRGF0ZSBmcm9tICcuLi9yZWN1cnJpbmdEYXRlJztcbmltcG9ydCBTZXR0aW5ncyBmcm9tICcuLi9zZXR0aW5ncyc7XG5pbXBvcnQge1xuICBmb3JtYXREYXRlLFxuICBwYXJzZURhdGUsXG4gIGdldFdlZWtkYXlOYW1lLFxuICBnZXRNb250aE5hbWUsXG4gIGdldERheXNJbk1vbnRoLFxufSBmcm9tICcuLi91dGlsaXR5L2RhdGVzJztcbmltcG9ydCB7XG4gIGNyZWF0ZURhdGVJbnB1dEZpZWxkLFxuICBjcmVhdGVGb3JtQ29udHJvbCxcbiAgY3JlYXRlVG9nZ2xlQnV0dG9uLFxufSBmcm9tICcuLi91dGlsaXR5L2RvbSc7XG5cbmNvbnN0IFVOSVRTID0gW1xuICB7IHZhbHVlOiAnZGF5Jywgc2luZ3VsYXI6ICdEYXknLCBwbHVyYWw6ICdEYXlzJyB9LFxuICB7IHZhbHVlOiAnd2VlaycsIHNpbmd1bGFyOiAnV2VlaycsIHBsdXJhbDogJ1dlZWtzJyB9LFxuICB7IHZhbHVlOiAnbW9udGgnLCBzaW5ndWxhcjogJ01vbnRoJywgcGx1cmFsOiAnTW9udGhzJyB9LFxuICB7IHZhbHVlOiAneWVhcicsIHNpbmd1bGFyOiAnWWVhcicsIHBsdXJhbDogJ1llYXJzJyB9LFxuXTtcblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW1JlY3VycmVuY2VNb2RhbF17QGxpbmsgbW9kdWxlOnJlY3VycmVuY2VNb2RhbH5SZWN1cnJlbmNlTW9kYWx9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOnJlY3VycmVuY2VNb2RhbH5SZWN1cnJlbmNlTW9kYWx+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnJlY3VycmluZ0RhdGV+UmVjdXJyaW5nRGF0ZX0gW2luaXRpYWxSZWN1cnJlbmNlXSBUaGVcbiAqICAgcmVjdXJyaW5nIGRhdGUgdG8gdXNlIGFzIGEgZGVmYXVsdCB3aGVuIGluaXRpYWxpemluZyB0aGUgZm9ybSBjb250cm9scywgaWZcbiAqICAgYW55LlxuICogQHByb3BlcnR5IHtEYXRlfSBiYXNlRGF0ZSBUaGUgZGF0ZSB0byB1c2Ugd2hlbiBpbml0aWFsaXppbmcgY2VydGFpbiBpbnB1dFxuICogICBmaWVsZHMuXG4gKiBAcHJvcGVydHkge21vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35kYXRlRm9ybWF0fSBkYXRlRm9ybWF0IEFuIG9iamVjdCBob2xkaW5nXG4gKiAgIGRhdGUgZm9ybWF0IGluZm9ybWF0aW9uLlxuICogQHByb3BlcnR5IHtPYmplY3R9IGNhbGxiYWNrcyBBbiBvYmplY3QgaG9sZGluZyBjYWxsYmFjayBmdW5jdGlvbnMuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLmNvbmZpcm1dIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBzdWNjZXNzZnVsbHkgY29uZmlybXMgdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jYW5jZWxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gKiAgIGludm9rZWQgd2hlbiB0aGUgdXNlciBjYW5jZWxzIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjb250YWluZXJzIEFuIG9iamVjdCBob2xkaW5nIHRoZSB2YXJpb3VzIGNvbnRhaW5lclxuICogICBlbGVtZW50cyB1c2VkIGluIHRoZSBtb2RhbCdzIGNvbnRlbnRzLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udGFpbmVycy5wYXJlbnQgVGhlIHBhcmVudCBjb250YWluZXIgZWxlbWVudFxuICogICBob2xkaW5nIGFsbCB0aGUgZm9ybSBlbGVtZW50cy5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lcnMuY29udGV4dCBUaGUgY29udGFpbmVyIGVsZW1lbnQgaG9sZGluZ1xuICogICBjb250ZXh0LXNlbnNpdGl2ZSBvcHRpb25zIHRoYXQgZGVwZW5kIG9uIHRoZSBzZWxlY3RlZCBpbnRlcnZhbCB1bml0LlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udGFpbmVycy53ZWVrT3B0aW9ucyBUaGUgY29udGFpbmVyIGVsZW1lbnQgaG9sZGluZ1xuICogICB0aGUgZm9ybSBlbGVtZW50cyBzcGVjaWZpYyB0byB3ZWVrbHkgcmVjdXJyZW5jZXMuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250YWluZXJzLm1vbnRoT3B0aW9ucyBUaGUgY29udGFpbmVyIGVsZW1lbnRcbiAqICAgaG9sZGluZyB0aGUgZm9ybSBlbGVtZW50cyBzcGVjaWZpYyB0byBtb250aGx5IHJlY3VycmVuY2VzLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udGFpbmVycy55ZWFyT3B0aW9ucyBUaGUgY29udGFpbmVyIGVsZW1lbnQgaG9sZGluZ1xuICogICB0aGUgZm9ybSBlbGVtZW50cyBzcGVjaWZpYyB0byB5ZWFybHkgcmVjdXJyZW5jZXMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdGl0bGUgVGhlIHRpdGxlIG9mIHRoZSBtb2RhbC5cbiAqL1xuXG4vKipcbiAqIEhvbGRzIHByaXZhdGUgZGF0YSBmb3IgdGhlXG4gKiBbUmVjdXJyZW5jZU1vZGFsXXtAbGluayBtb2R1bGU6cmVjdXJyZW5jZU1vZGFsflJlY3VycmVuY2VNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOnJlY3VycmVuY2VNb2RhbH5SZWN1cnJlbmNlTW9kYWx+cHJpdmF0ZXNcbiAqL1xuY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIENyZWF0ZSB0aGUgZm9ybSBlbGVtZW50cyBmb3IgdGhlIGNvbnRleHQgb3B0aW9ucyBmb3Igd2Vla2x5IHJlY3VycmVuY2VzLlxuICogQHJldHVybnMge0hUTUxFbGVtZW50fSBUaGUgY29udGFpbmVyIGVsZW1lbnQgaG9sZGluZyB0aGUgZm9ybSBlbGVtZW50cy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlV2Vla0NvbnRleHRGb3JtKCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtY29udGFpbmVyJyk7XG5cbiAgbGV0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gIGxhYmVsLnRleHRDb250ZW50ID0gJ1JlcGVhdCBvbic7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICB0eXBlOiAncmFkaW8nLFxuICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtd2Vlay10eXBlLXByZXZpb3VzJyxcbiAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtd2Vlay10eXBlJyxcbiAgICB2YWx1ZTogJ3VzZS1wcmV2aW91cycsXG4gICAgY2hlY2tlZDogdHJ1ZSxcbiAgICBsYWJlbDoge1xuICAgICAgdmFsdWU6ICdUaGUgc2FtZSBkYXkgb2YgdGhlIHdlZWsgYXMgYmVmb3JlJyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWxhYmVsLWlubGluZSddLFxuICAgIH0sXG4gICAgY29udGFpbmVyOiB7IGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWl0ZW0tY29udGFpbmVyJ10gfSxcbiAgfSkpO1xuXG4gIGNvbnN0IG9wdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBvcHRpb25Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1pdGVtLWNvbnRhaW5lcicpO1xuXG4gIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgdHlwZTogJ3JhZGlvJyxcbiAgICBpZDogJ3JlY3VycmluZy1kYXRlLXdlZWstdHlwZS1zZWxlY3QtZGF5cycsXG4gICAgbmFtZTogJ3JlY3VycmluZy1kYXRlLXdlZWstdHlwZScsXG4gICAgdmFsdWU6ICdzZWxlY3QtZGF5cycsXG4gIH0pKTtcblxuICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gIGxhYmVsLnRleHRDb250ZW50ID0gJ1RoZXNlIGRheXM6ICc7XG4gIGxhYmVsLmh0bWxGb3IgPSAncmVjdXJyaW5nLWRhdGUtd2Vlay10eXBlLXNlbGVjdC1kYXlzJztcbiAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICBfLnJhbmdlKDcpLm1hcCgoaW5kZXgpID0+IHtcbiAgICBjb25zdCBuYW1lID0gZ2V0V2Vla2RheU5hbWUoaW5kZXgpO1xuICAgIHJldHVybiB7IHZhbHVlOiBuYW1lLnRvTG93ZXJDYXNlKCksIGxhYmVsOiBuYW1lLnNsaWNlKDAsIDEpIH07XG4gIH0pLmZvckVhY2goKGRheSkgPT4ge1xuICAgIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVUb2dnbGVCdXR0b24oZGF5LmxhYmVsLCB7XG4gICAgICBpZDogYHJlY3VycmluZy1kYXRlLXdlZWtkYXktJHtkYXkudmFsdWV9YCxcbiAgICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS13ZWVrZGF5JyxcbiAgICAgIHZhbHVlOiBkYXkudmFsdWUsXG4gICAgICBjbGFzc0xpc3Q6IFsndG9nZ2xlLWJ1dHRvbicsICdmb3JtLXdlZWtkYXktYnV0dG9uJ10sXG4gICAgfSkpO1xuICB9KTtcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKG9wdGlvbkNvbnRhaW5lcik7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuLyoqXG4gKiBDcmVhdGUgdGhlIGZvcm0gZWxlbWVudHMgZm9yIHRoZSBjb250ZXh0IG9wdGlvbnMgZm9yIG1vbnRobHkgcmVjdXJyZW5jZXMuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBjb250YWluZXIgZWxlbWVudCBob2xkaW5nIHRoZSBmb3JtIGVsZW1lbnRzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNb250aENvbnRleHRGb3JtKCkge1xuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtY29udGFpbmVyJyk7XG5cbiAgbGV0IGxhYmVsO1xuICBsZXQgb3B0aW9uQ29udGFpbmVyO1xuICBsZXQgc2VsZWN0SXRlbXM7XG5cbiAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnKTtcbiAgbGFiZWwudGV4dENvbnRlbnQgPSAnUmVwZWF0IG9uJztcbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgIHR5cGU6ICdyYWRpbycsXG4gICAgaWQ6ICdyZWN1cnJpbmctZGF0ZS1tb250aC10eXBlLXByZXZpb3VzJyxcbiAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtbW9udGgtdHlwZScsXG4gICAgdmFsdWU6ICd1c2UtcHJldmlvdXMnLFxuICAgIGNoZWNrZWQ6IHRydWUsXG4gICAgbGFiZWw6IHtcbiAgICAgIHZhbHVlOiAnVGhlIHNhbWUgZGF5IG9mIHRoZSBtb250aCBhcyBiZWZvcmUnLFxuICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJ10sXG4gICAgfSxcbiAgICBjb250YWluZXI6IHsgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtaXRlbS1jb250YWluZXInXSB9LFxuICB9KSk7XG5cbiAgb3B0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG9wdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWl0ZW0tY29udGFpbmVyJyk7XG4gIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgdHlwZTogJ3JhZGlvJyxcbiAgICBpZDogJ3JlY3VycmluZy1kYXRlLW1vbnRoLXR5cGUtZGF5JyxcbiAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtbW9udGgtdHlwZScsXG4gICAgdmFsdWU6ICdkYXktb2YtbW9udGgnLFxuICB9KSk7XG5cbiAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICBsYWJlbC5odG1sRm9yID0gJ3JlY3VycmluZy1kYXRlLW1vbnRoLXR5cGUtZGF5JztcbiAgbGFiZWwudGV4dENvbnRlbnQgPSAnVGhlICc7XG4gIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgc2VsZWN0SXRlbXMgPSBfLnJhbmdlKDEsIDMyKS5tYXAoKGRheSkgPT4gKFxuICAgIHsgdmFsdWU6IGRheS50b1N0cmluZygpLCBsYWJlbDogb3JkaW5hbChkYXkpIH1cbiAgKSk7XG4gIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgaWQ6ICdyZWN1cnJpbmctZGF0ZS1tb250aC1kYXknLFxuICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS1tb250aC1kYXknLFxuICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdC1pbmxpbmUnXSxcbiAgICBtZW51SXRlbXM6IHNlbGVjdEl0ZW1zLFxuICB9KSk7XG5cbiAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICBsYWJlbC5odG1sRm9yID0gJ3JlY3VycmluZy1kYXRlLW1vbnRoLWRheSc7XG4gIGxhYmVsLnRleHRDb250ZW50ID0gJyBkYXkgb2YgdGhlIG1vbnRoJztcbiAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQob3B0aW9uQ29udGFpbmVyKTtcblxuICBvcHRpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgb3B0aW9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtaXRlbS1jb250YWluZXInKTtcbiAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICB0eXBlOiAncmFkaW8nLFxuICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtbW9udGgtdHlwZS13ZWVrJyxcbiAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtbW9udGgtdHlwZScsXG4gICAgdmFsdWU6ICd3ZWVrLW9mLW1vbnRoJyxcbiAgfSkpO1xuXG4gIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnKTtcbiAgbGFiZWwuaHRtbEZvciA9ICdyZWN1cnJpbmctZGF0ZS1tb250aC10eXBlLXdlZWsnO1xuICBsYWJlbC50ZXh0Q29udGVudCA9ICdUaGUgJztcbiAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICBzZWxlY3RJdGVtcyA9IF8ucmFuZ2UoMSwgNikubWFwKCh3ZWVrKSA9PiAoXG4gICAgeyB2YWx1ZTogd2Vlay50b1N0cmluZygpLCBsYWJlbDogKHdlZWsgPCA1KSA/IG9yZGluYWwod2VlaykgOiAnbGFzdCcgfVxuICApKTtcbiAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICBpZDogJ3JlY3VycmluZy1kYXRlLW1vbnRoLXdlZWstbnVtYmVyJyxcbiAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtbW9udGgtd2Vlay1udW1iZXInLFxuICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdC1pbmxpbmUnXSxcbiAgICBtZW51SXRlbXM6IHNlbGVjdEl0ZW1zLFxuICB9KSk7XG5cbiAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gIGxhYmVsLnRleHRDb250ZW50ID0gJyAnO1xuICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gIHNlbGVjdEl0ZW1zID0gXy5yYW5nZSg3KS5tYXAoKGluZGV4KSA9PiB7XG4gICAgY29uc3QgZGF5ID0gZ2V0V2Vla2RheU5hbWUoaW5kZXgpO1xuICAgIHJldHVybiB7IHZhbHVlOiBkYXkudG9Mb3dlckNhc2UoKSwgbGFiZWw6IGRheSB9O1xuICB9KTtcbiAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICBpZDogJ3JlY3VycmluZy1kYXRlLW1vbnRoLXdlZWstZGF5JyxcbiAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtbW9udGgtd2Vlay1kYXknLFxuICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdC1pbmxpbmUnXSxcbiAgICBtZW51SXRlbXM6IHNlbGVjdEl0ZW1zLFxuICB9KSk7XG5cbiAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICBsYWJlbC5odG1sRm9yID0gJ3JlY3VycmluZy1kYXRlLW1vbnRoLXdlZWstZGF5JztcbiAgbGFiZWwudGV4dENvbnRlbnQgPSAnIG9mIHRoZSBtb250aCc7XG4gIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKG9wdGlvbkNvbnRhaW5lcik7XG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBmb3JtIGVsZW1lbnRzIGZvciB0aGUgY29udGV4dCBvcHRpb25zIGZvciB5ZWFybHkgcmVjdXJyZW5jZXMuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBjb250YWluZXIgZWxlbWVudCBob2xkaW5nIHRoZSBmb3JtIGVsZW1lbnRzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVZZWFyQ29udGV4dEZvcm0oKSB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1jb250YWluZXInKTtcblxuICBsZXQgbGFiZWw7XG4gIGxldCBzZWxlY3RJdGVtcztcblxuICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICBsYWJlbC50ZXh0Q29udGVudCA9ICdSZXBlYXQgb24nO1xuICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgdHlwZTogJ3JhZGlvJyxcbiAgICBpZDogJ3JlY3VycmluZy1kYXRlLXllYXItdHlwZS1wcmV2aW91cycsXG4gICAgbmFtZTogJ3JlY3VycmluZy1kYXRlLXllYXItdHlwZScsXG4gICAgdmFsdWU6ICd1c2UtcHJldmlvdXMnLFxuICAgIGNoZWNrZWQ6IHRydWUsXG4gICAgbGFiZWw6IHtcbiAgICAgIHZhbHVlOiAnVGhlIHNhbWUgbW9udGggYW5kIGRheSBhcyBiZWZvcmUnLFxuICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJ10sXG4gICAgfSxcbiAgICBjb250YWluZXI6IHsgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtaXRlbS1jb250YWluZXInXSB9LFxuICB9KSk7XG5cbiAgY29uc3Qgb3B0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG9wdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWl0ZW0tY29udGFpbmVyJyk7XG4gIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgdHlwZTogJ3JhZGlvJyxcbiAgICBpZDogJ3JlY3VycmluZy1kYXRlLXllYXItdHlwZS1kYXknLFxuICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS15ZWFyLXR5cGUnLFxuICAgIHZhbHVlOiAnbW9udGgtYW5kLWRheScsXG4gIH0pKTtcblxuICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gIGxhYmVsLmh0bWxGb3IgPSAncmVjdXJyaW5nLWRhdGUteWVhci10eXBlLWRheSc7XG4gIGxhYmVsLnRleHRDb250ZW50ID0gJ1RoZSAnO1xuICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gIHNlbGVjdEl0ZW1zID0gXy5yYW5nZSgxLCAzMikubWFwKChkYXkpID0+IChcbiAgICB7IHZhbHVlOiBkYXkudG9TdHJpbmcoKSwgbGFiZWw6IG9yZGluYWwoZGF5KSB9XG4gICkpO1xuICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgIGlkOiAncmVjdXJyaW5nLWRhdGUteWVhci1kYXknLFxuICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS15ZWFyLWRheScsXG4gICAgY2xhc3NMaXN0OiBbJ2Zvcm0tc2VsZWN0LWlubGluZSddLFxuICAgIG1lbnVJdGVtczogc2VsZWN0SXRlbXMsXG4gIH0pKTtcblxuICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnKTtcbiAgbGFiZWwudGV4dENvbnRlbnQgPSAnIGRheSBvZiAnO1xuICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gIHNlbGVjdEl0ZW1zID0gXy5yYW5nZSgxMikubWFwKChpbmRleCkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBnZXRNb250aE5hbWUoaW5kZXgpO1xuICAgIHJldHVybiB7IHZhbHVlOiBuYW1lLnRvTG93ZXJDYXNlKCksIGxhYmVsOiBuYW1lIH07XG4gIH0pO1xuICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgIGlkOiAncmVjdXJyaW5nLWRhdGUteWVhci1tb250aCcsXG4gICAgbmFtZTogJ3JlY3VycmluZy1kYXRlLXllYXItbW9udGgnLFxuICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdC1pbmxpbmUnXSxcbiAgICBtZW51SXRlbXM6IHNlbGVjdEl0ZW1zLFxuICB9KSk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChvcHRpb25Db250YWluZXIpO1xuXG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbi8qKlxuICogU2VsZWN0IGEgZm9ybSBjb250cm9sIGluIHRoZSBtb2RhbC5cbiAqIEBwYXJhbSB7bW9kdWxlOnJlY3VycmVuY2VNb2RhbH5SZWN1cnJlbmNlTW9kYWx9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZVxuICogICBvbiB3aGljaCB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRTdWZmaXggVGhlIGlkZW50aWZpZXIgb2YgdGhlIGNvbnRyb2wgdG8gcmV0cmlldmUsXG4gKiAgIHdpdGhvdXQgdGhlICdyZWN1cnJpbmctZGF0ZS0nIHByZWZpeC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29udGFpbmVyXSBUaGUgY29udGFpbmVyIGluIHdoaWNoIHRvIGxvb2sgZm9yIHRoZVxuICogICBjb250cm9sLiBJZiBub3QgZ2l2ZW4sIHRoZW4gdGhlIG1vZGFsIGNvbnRlbnQgY29udGFpbmVyIGlzIHVzZWQuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSByZXF1ZXN0ZWQgZWxlbWVudCwgb3IgdW5kZWZpbmVkIGlmIG5vdCBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29udHJvbChpbnN0YW5jZSwgaWRTdWZmaXgsIGNvbnRhaW5lcikge1xuICBjb25zdCBwYXJlbnQgPSBjb250YWluZXIgfHwgcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKS5jb250YWluZXJzLnBhcmVudDtcbiAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKGAjcmVjdXJyaW5nLWRhdGUtJHtpZFN1ZmZpeH1gKTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSB2YWx1ZXMgb2YgdGhlIGZvcm0gZWxlbWVudHMgYmFzZWQgb24gdGhlIGluaXRpYWwgcmVjdXJyZW5jZVxuICogdGhhdCB3YXMgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3RvciwgaWYgYW55LlxuICogQHBhcmFtIHttb2R1bGU6cmVjdXJyZW5jZU1vZGFsflJlY3VycmVuY2VNb2RhbH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlXG4gKiAgIG9uIHdoaWNoIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gaW5pdEZvcm1WYWx1ZXMoaW5zdGFuY2UpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCB7IHdlZWtPcHRpb25zLCBtb250aE9wdGlvbnMsIHllYXJPcHRpb25zIH0gPSBwcml2YXRlcy5jb250YWluZXJzO1xuICBjb25zdCBpbml0aWFsID0gcHJpdmF0ZXMuaW5pdGlhbFJlY3VycmVuY2U7XG4gIGlmIChpbml0aWFsKSB7XG4gICAgZ2V0Q29udHJvbChpbnN0YW5jZSwgJ2ludGVydmFsLWxlbmd0aCcpLnZhbHVlID0gaW5pdGlhbC5pbnRlcnZhbExlbmd0aDtcbiAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnaW50ZXJ2YWwtdW5pdCcpLnZhbHVlID0gaW5pdGlhbC5pbnRlcnZhbFVuaXQ7XG5cbiAgICBsZXQgY29udGV4dDtcbiAgICBzd2l0Y2ggKGluaXRpYWwuaW50ZXJ2YWxVbml0KSB7XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgY29udGV4dCA9IHdlZWtPcHRpb25zO1xuICAgICAgICBpZiAoaW5pdGlhbC5kYXlzT2ZXZWVrKSB7XG4gICAgICAgICAgZ2V0Q29udHJvbChpbnN0YW5jZSwgJ3dlZWstdHlwZS1zZWxlY3QtZGF5cycsIGNvbnRleHQpLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgIGluaXRpYWwuZGF5c09mV2Vlay5mb3JFYWNoKChkYXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYHdlZWtkYXktJHtnZXRXZWVrZGF5TmFtZShkYXkpLnRvTG93ZXJDYXNlKCl9YDtcbiAgICAgICAgICAgIGNvbnN0IGJ1dHRvbiA9IGdldENvbnRyb2woaW5zdGFuY2UsIGlkLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChidXR0b24pIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnd2Vlay10eXBlLXByZXZpb3VzJywgY29udGV4dCkuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIGNvbnRleHQgPSBtb250aE9wdGlvbnM7XG4gICAgICAgIGlmIChpbml0aWFsLmRheU9mTW9udGgpIHtcbiAgICAgICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnbW9udGgtdHlwZS1kYXknLCBjb250ZXh0KS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnbW9udGgtZGF5JywgY29udGV4dCkudmFsdWUgPSBpbml0aWFsLmRheU9mTW9udGg7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5pdGlhbC53ZWVrTnVtYmVyICYmIGluaXRpYWwuZGF5c09mV2Vla1xuICAgICAgICAgICYmIGluaXRpYWwuZGF5c09mV2Vlay5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnbW9udGgtdHlwZS13ZWVrJywgY29udGV4dCkuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgY29uc3Qgd2Vla1NlbGVjdCA9IGdldENvbnRyb2woaW5zdGFuY2UsICdtb250aC13ZWVrLW51bWJlcicsIGNvbnRleHQpO1xuICAgICAgICAgIGNvbnN0IGRheVNlbGVjdCA9IGdldENvbnRyb2woaW5zdGFuY2UsICdtb250aC13ZWVrLWRheScsIGNvbnRleHQpO1xuICAgICAgICAgIHdlZWtTZWxlY3QudmFsdWUgPSBpbml0aWFsLndlZWtOdW1iZXI7XG4gICAgICAgICAgZGF5U2VsZWN0LnZhbHVlID0gZ2V0V2Vla2RheU5hbWUoXG4gICAgICAgICAgICBpbml0aWFsLmRheXNPZldlZWtbMF0sXG4gICAgICAgICAgKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdldENvbnRyb2woaW5zdGFuY2UsICdtb250aC10eXBlLXByZXZpb3VzJywgY29udGV4dCkuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgY29udGV4dCA9IHllYXJPcHRpb25zO1xuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihpbml0aWFsLm1vbnRoKSAmJiBpbml0aWFsLmRheU9mTW9udGgpIHtcbiAgICAgICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAneWVhci10eXBlLWRheScsIGNvbnRleHQpLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IG1vbnRoU2VsZWN0ID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgJ3llYXItbW9udGgnLCBjb250ZXh0KTtcbiAgICAgICAgICBjb25zdCBkYXlTZWxlY3QgPSBnZXRDb250cm9sKGluc3RhbmNlLCAneWVhci1kYXknLCBjb250ZXh0KTtcbiAgICAgICAgICBtb250aFNlbGVjdC52YWx1ZSA9IGdldE1vbnRoTmFtZShpbml0aWFsLm1vbnRoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGRheVNlbGVjdC52YWx1ZSA9IGluaXRpYWwuZGF5T2ZNb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAneWVhci10eXBlLXByZXZpb3VzJywgY29udGV4dCkuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoaW5pdGlhbC5lbmREYXRlKSB7XG4gICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnZW5kLXR5cGUtZGF0ZScpLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgY29uc3QgaW5wdXQgPSBnZXRDb250cm9sKGluc3RhbmNlLCAnZW5kLWRhdGUnKTtcbiAgICAgIGlucHV0LnZhbHVlID0gZm9ybWF0RGF0ZShcbiAgICAgICAgaW5pdGlhbC5lbmREYXRlLFxuICAgICAgICBwcml2YXRlcy5kYXRlRm9ybWF0Lm91dHB1dFBhdHRlcm4sXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaW5pdGlhbC5tYXhDb3VudCkge1xuICAgICAgZ2V0Q29udHJvbChpbnN0YW5jZSwgJ2VuZC10eXBlLWNvdW50JykuY2hlY2tlZCA9IHRydWU7XG4gICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnZW5kLWNvdW50JykudmFsdWUgPSBpbml0aWFsLm1heENvdW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnZW5kLXR5cGUtbmV2ZXInKS5jaGVja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5pdGlhbC5zdGFydERhdGUpIHtcbiAgICAgIGdldENvbnRyb2woaW5zdGFuY2UsICd1c2Utc3RhcnQtZGF0ZScpLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgY29uc3QgaW5wdXQgPSBnZXRDb250cm9sKGluc3RhbmNlLCAnc3RhcnQtZGF0ZScpO1xuICAgICAgaW5wdXQudmFsdWUgPSBmb3JtYXREYXRlKFxuICAgICAgICBpbml0aWFsLnN0YXJ0RGF0ZSxcbiAgICAgICAgcHJpdmF0ZXMuZGF0ZUZvcm1hdC5vdXRwdXRQYXR0ZXJuLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaW5pdGlhbC5iYXNlT25Db21wbGV0aW9uKSB7XG4gICAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnYmFzZS1vbi1jb21wbGV0aW9uJykuY2hlY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGluaXRpYWwub25XZWVrZW5kICE9PSAnbm8tY2hhbmdlJykge1xuICAgICAgZ2V0Q29udHJvbChpbnN0YW5jZSwgJ25vLXdlZWtlbmQnKS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIGdldENvbnRyb2woaW5zdGFuY2UsICd3ZWVrZW5kLXNlbGVjdCcpLnZhbHVlID0gaW5pdGlhbC5vbldlZWtlbmQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZGF0ZSA9IHByaXZhdGVzLmJhc2VEYXRlO1xuICBjb25zdCBkYXlPZldlZWsgPSBnZXRXZWVrZGF5TmFtZShkYXRlLmdldERheSgpKS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBkYXlPZk1vbnRoID0gZGF0ZS5nZXREYXRlKCk7XG4gIGNvbnN0IG1vbnRoID0gZ2V0TW9udGhOYW1lKGRhdGUuZ2V0TW9udGgoKSkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qgd2Vla051bWJlciA9IE1hdGguZmxvb3IoKGRheU9mTW9udGggLSAxKSAvIDcpICsgMTtcblxuICBpZiAoIWluaXRpYWwgfHwgaW5pdGlhbC5pbnRlcnZhbFVuaXQgIT09ICd3ZWVrJyB8fCAhaW5pdGlhbC5kYXlzT2ZXZWVrKSB7XG4gICAgY29uc3QgZGF5QnV0dG9uID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgYHdlZWtkYXktJHtkYXlPZldlZWt9YCwgd2Vla09wdGlvbnMpO1xuICAgIGRheUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgfVxuXG4gIGlmICghaW5pdGlhbCB8fCBpbml0aWFsLmludGVydmFsVW5pdCAhPT0gJ21vbnRoJyB8fCAhaW5pdGlhbC5kYXlPZk1vbnRoKSB7XG4gICAgY29uc3QgbW9udGhEYXlTZWxlY3QgPSBnZXRDb250cm9sKGluc3RhbmNlLCAnbW9udGgtZGF5JywgbW9udGhPcHRpb25zKTtcbiAgICBtb250aERheVNlbGVjdC52YWx1ZSA9IGRheU9mTW9udGgudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGlmICghaW5pdGlhbCB8fCBpbml0aWFsLmludGVydmFsVW5pdCAhPT0gJ21vbnRoJyB8fCAhaW5pdGlhbC53ZWVrTnVtYmVyKSB7XG4gICAgY29uc3QgbW9udGhXZWVrTnVtU2VsZWN0ID0gZ2V0Q29udHJvbChcbiAgICAgIGluc3RhbmNlLFxuICAgICAgJ21vbnRoLXdlZWstbnVtYmVyJyxcbiAgICAgIG1vbnRoT3B0aW9ucyxcbiAgICApO1xuICAgIGNvbnN0IG1vbnRoV2Vla0RheVNlbGVjdCA9IGdldENvbnRyb2woXG4gICAgICBpbnN0YW5jZSxcbiAgICAgICdtb250aC13ZWVrLWRheScsXG4gICAgICBtb250aE9wdGlvbnMsXG4gICAgKTtcbiAgICBtb250aFdlZWtOdW1TZWxlY3QudmFsdWUgPSB3ZWVrTnVtYmVyLnRvU3RyaW5nKCk7XG4gICAgbW9udGhXZWVrRGF5U2VsZWN0LnZhbHVlID0gZGF5T2ZXZWVrO1xuICB9XG5cbiAgaWYgKCFpbml0aWFsIHx8IGluaXRpYWwuaW50ZXJ2YWxVbml0ICE9PSAneWVhcidcbiAgICB8fCAhTnVtYmVyLmlzSW50ZWdlcihpbml0aWFsLm1vbnRoKSkge1xuICAgIGNvbnN0IHllYXJNb250aFNlbGVjdCA9IGdldENvbnRyb2woaW5zdGFuY2UsICd5ZWFyLW1vbnRoJywgeWVhck9wdGlvbnMpO1xuICAgIGNvbnN0IHllYXJEYXlTZWxlY3QgPSBnZXRDb250cm9sKGluc3RhbmNlLCAneWVhci1kYXknLCB5ZWFyT3B0aW9ucyk7XG4gICAgeWVhck1vbnRoU2VsZWN0LnZhbHVlID0gbW9udGg7XG4gICAgeWVhckRheVNlbGVjdC52YWx1ZSA9IGRheU9mTW9udGgudG9TdHJpbmcoKTtcbiAgfVxufVxuXG4vKipcbiAqIE9wZW5zIGEgZGF0ZSBwaWNrZXIgYW5kIHVwZGF0ZXMgdGhlIGdpdmVuIGlucHV0IGZpZWxkIHdpdGggdGhlIHNlbGVjdGVkXG4gKiBkYXRlLlxuICogQHBhcmFtIHttb2R1bGU6cmVjdXJyZW5jZU1vZGFsflJlY3VycmVuY2VNb2RhbH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlXG4gKiAgIG9uIHdoaWNoIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGlucHV0IFRoZSB0ZXh0IGlucHV0IGZpZWxkIHdoZXJlIHRoZSBkYXRlIGlzIGJlaW5nXG4gKiAgIGVudGVyZWQuXG4gKiBAcGFyYW0ge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsU3RhY2t9IG1vZGFsU3RhY2sgVGhlIG1vZGFsIHN0YWNrIGluIHdoaWNoXG4gKiAgIHRoZSBtb2RhbCBoYXMgYmVlbiBpbnNlcnRlZC5cbiAqL1xuZnVuY3Rpb24gcGlja0RhdGUoaW5zdGFuY2UsIGlucHV0LCBtb2RhbFN0YWNrKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBsZXQgc3RhcnREYXRlID0gbnVsbDtcbiAgaWYgKGlucHV0LnZhbHVlKSB7XG4gICAgc3RhcnREYXRlID0gcGFyc2VEYXRlKGlucHV0LnZhbHVlLCBwcml2YXRlcy5kYXRlRm9ybWF0LmlucHV0UGF0dGVybnMpO1xuICB9XG5cbiAgbGV0IHRpdGxlID0gbnVsbDtcbiAgc3dpdGNoIChpbnB1dC5pZCkge1xuICAgIGNhc2UgJ3JlY3VycmluZy1kYXRlLXN0YXJ0LWRhdGUnOlxuICAgICAgdGl0bGUgPSAnU2VsZWN0IFN0YXJ0IERhdGUnO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmVjdXJyaW5nLWRhdGUtZW5kLWRhdGUnOlxuICAgICAgdGl0bGUgPSAnU2VsZWN0IEVuZCBEYXRlJztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGNvbnN0IGZpZWxkID0gaW5wdXQ7XG4gIG1vZGFsU3RhY2suc2hvd01vZGFsKG5ldyBEYXRlUGlja2VyTW9kYWwoe1xuICAgIGNvbmZpcm06IChkYXRlKSA9PiB7XG4gICAgICBmaWVsZC52YWx1ZSA9IGZvcm1hdERhdGUoZGF0ZSwgcHJpdmF0ZXMuZGF0ZUZvcm1hdC5vdXRwdXRQYXR0ZXJuKTtcbiAgICAgIGZpZWxkLnNldEN1c3RvbVZhbGlkaXR5KCcnKTtcbiAgICB9LFxuICAgIHN0YXJ0RGF0ZSxcbiAgICB0aXRsZSxcbiAgfSkpO1xufVxuXG4vKipcbiAqIFVwZGF0ZSB0aGUgY29udGVudHMgb2YgdGhlIGNvbnRhaW5lciBob2xkaW5nIGNvbnRleHQtc2Vuc2l0aXZlIG9wdGlvbnMsXG4gKiBiYXNlZCBvbiB0aGUgc2VsZWN0ZWQgaW50ZXJ2YWwgdW5pdC5cbiAqIEBwYXJhbSB7bW9kdWxlOnJlY3VycmVuY2VNb2RhbH5SZWN1cnJlbmNlTW9kYWx9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZVxuICogICBvbiB3aGljaCB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUNvbnRleHRDb250YWluZXIoaW5zdGFuY2UpIHtcbiAgY29uc3QgeyBjb250YWluZXJzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBjb25zdCBjb250ZXh0Q29udGFpbmVyID0gY29udGFpbmVycy5jb250ZXh0O1xuXG4gIHdoaWxlIChjb250ZXh0Q29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICBjb250ZXh0Q29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRleHRDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gIH1cblxuICBzd2l0Y2ggKGdldENvbnRyb2woaW5zdGFuY2UsICdpbnRlcnZhbC11bml0JykudmFsdWUpIHtcbiAgICBjYXNlICd3ZWVrJzpcbiAgICAgIGNvbnRleHRDb250YWluZXIuYXBwZW5kQ2hpbGQoY29udGFpbmVycy53ZWVrT3B0aW9ucyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtb250aCc6XG4gICAgICBjb250ZXh0Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvbnRhaW5lcnMubW9udGhPcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3llYXInOlxuICAgICAgY29udGV4dENvbnRhaW5lci5hcHBlbmRDaGlsZChjb250YWluZXJzLnllYXJPcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxufVxuXG4vKipcbiAqIEFkZCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBmb3JtIGNvbnRyb2xzIGluIHRoZSBtb2RhbC5cbiAqIEBwYXJhbSB7bW9kdWxlOnJlY3VycmVuY2VNb2RhbH5SZWN1cnJlbmNlTW9kYWx9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZVxuICogICBvbiB3aGljaCB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGFkZExpc3RlbmVycyhpbnN0YW5jZSkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IHsgcGFyZW50IH0gPSBwcml2YXRlcy5jb250YWluZXJzO1xuICBjb25zdCBmaXJlRXZlbnQgPSAoaW5wdXQpID0+IGlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjaGFuZ2UnKSk7XG5cbiAgLy8gTWFrZSB1bml0cyBzaW5ndWxhciBvciBwbHVyYWwgYmFzZWQgb24gbGVuZ3RoXG4gIGNvbnN0IGxlbmd0aFNlbGVjdCA9IGdldENvbnRyb2woaW5zdGFuY2UsICdpbnRlcnZhbC1sZW5ndGgnKTtcbiAgY29uc3QgdW5pdFNlbGVjdCA9IGdldENvbnRyb2woaW5zdGFuY2UsICdpbnRlcnZhbC11bml0Jyk7XG4gIGxlbmd0aFNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgIGNvbnN0IGxlbmd0aCA9IE51bWJlcihlLnRhcmdldC52YWx1ZSk7XG4gICAgaWYgKGUudGFyZ2V0LnZhbHVlLmxlbmd0aCA+IDAgJiYgTnVtYmVyLmlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGNvbnN0IHBsdXJhbCA9IGxlbmd0aCAhPT0gMTtcbiAgICAgIFVOSVRTLmZvckVhY2goKHVuaXQpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3IgPSBgb3B0aW9uW3ZhbHVlPVwiJHt1bml0LnZhbHVlfVwiXWA7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHVuaXRTZWxlY3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gcGx1cmFsID8gdW5pdC5wbHVyYWwgOiB1bml0LnNpbmd1bGFyO1xuICAgICAgICBpZiAob3B0aW9uLnRleHRDb250ZW50ICE9PSBsYWJlbCkgb3B0aW9uLnRleHRDb250ZW50ID0gbGFiZWw7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICBmaXJlRXZlbnQobGVuZ3RoU2VsZWN0KTtcblxuICB1bml0U2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICB1cGRhdGVDb250ZXh0Q29udGFpbmVyKGluc3RhbmNlKTtcbiAgfSk7XG4gIGZpcmVFdmVudCh1bml0U2VsZWN0KTtcblxuICBjb25zdCByYWRpb1NlbGVjdG9yID0gJ2lucHV0W3R5cGU9XCJyYWRpb1wiXSc7XG4gIGNvbnN0IHsgd2Vla09wdGlvbnMsIG1vbnRoT3B0aW9ucywgeWVhck9wdGlvbnMgfSA9IHByaXZhdGVzLmNvbnRhaW5lcnM7XG5cbiAgLy8gQ29uZGl0aW9uYWxseSBlbmFibGUvZGlzYWJsZSBjb250cm9scyBmb3Igd2Vla2x5IHJlY3VycmVuY2VzXG4gIGNvbnN0IHdlZWtUeXBlTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSB3ZWVrT3B0aW9ucy5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybS13ZWVrZGF5LWJ1dHRvbicpO1xuICAgIGNvbnN0IGVuYWJsZSA9IGUudGFyZ2V0LnZhbHVlID09PSAnc2VsZWN0LWRheXMnO1xuICAgIGJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICBjb25zdCBlbGVtID0gYnV0dG9uO1xuICAgICAgZWxlbS5kaXNhYmxlZCA9ICFlbmFibGU7XG4gICAgfSk7XG4gIH07XG4gIHdlZWtPcHRpb25zLnF1ZXJ5U2VsZWN0b3JBbGwocmFkaW9TZWxlY3RvcikuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICByYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB3ZWVrVHlwZUxpc3RlbmVyKTtcbiAgICBpZiAocmFkaW8uY2hlY2tlZCkgZmlyZUV2ZW50KHJhZGlvKTtcbiAgfSk7XG5cbiAgLy8gQ29uZGl0aW9uYWxseSBlbmFibGUvZGlzYWJsZSBjb250cm9scyBmb3IgbW9udGhseSByZWN1cnJlbmNlc1xuICBjb25zdCBtb250aFR5cGVMaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgY29uc3QgZGF5U2VsZWN0ID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgJ21vbnRoLWRheScsIG1vbnRoT3B0aW9ucyk7XG4gICAgY29uc3Qgd2Vla051bWJlclNlbGVjdCA9IGdldENvbnRyb2woXG4gICAgICBpbnN0YW5jZSxcbiAgICAgICdtb250aC13ZWVrLW51bWJlcicsXG4gICAgICBtb250aE9wdGlvbnMsXG4gICAgKTtcbiAgICBjb25zdCB3ZWVrRGF5U2VsZWN0ID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgJ21vbnRoLXdlZWstZGF5JywgbW9udGhPcHRpb25zKTtcblxuICAgIGRheVNlbGVjdC5kaXNhYmxlZCA9IGUudGFyZ2V0LnZhbHVlICE9PSAnZGF5LW9mLW1vbnRoJztcbiAgICB3ZWVrTnVtYmVyU2VsZWN0LmRpc2FibGVkID0gZS50YXJnZXQudmFsdWUgIT09ICd3ZWVrLW9mLW1vbnRoJztcbiAgICB3ZWVrRGF5U2VsZWN0LmRpc2FibGVkID0gZS50YXJnZXQudmFsdWUgIT09ICd3ZWVrLW9mLW1vbnRoJztcbiAgfTtcbiAgbW9udGhPcHRpb25zLnF1ZXJ5U2VsZWN0b3JBbGwocmFkaW9TZWxlY3RvcikuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICByYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBtb250aFR5cGVMaXN0ZW5lcik7XG4gICAgaWYgKHJhZGlvLmNoZWNrZWQpIGZpcmVFdmVudChyYWRpbyk7XG4gIH0pO1xuXG4gIC8vIENvbmRpdGlvbmFsbHkgZW5hYmxlL2Rpc2FibGUgY29udHJvbHMgZm9yIHllYXJseSByZWN1cnJlbmNlc1xuICBjb25zdCB5ZWFyVHlwZUxpc3RlbmVyID0gKGUpID0+IHtcbiAgICBjb25zdCBzZWxlY3RCb3hlcyA9IHllYXJPcHRpb25zLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpO1xuICAgIGNvbnN0IGVuYWJsZSA9IGUudGFyZ2V0LnZhbHVlID09PSAnbW9udGgtYW5kLWRheSc7XG4gICAgc2VsZWN0Qm94ZXMuZm9yRWFjaCgoc2VsZWN0KSA9PiB7XG4gICAgICBjb25zdCBlbGVtID0gc2VsZWN0O1xuICAgICAgZWxlbS5kaXNhYmxlZCA9ICFlbmFibGU7XG4gICAgfSk7XG4gIH07XG4gIHllYXJPcHRpb25zLnF1ZXJ5U2VsZWN0b3JBbGwocmFkaW9TZWxlY3RvcikuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICByYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB5ZWFyVHlwZUxpc3RlbmVyKTtcbiAgICBpZiAocmFkaW8uY2hlY2tlZCkgZmlyZUV2ZW50KHJhZGlvKTtcbiAgfSk7XG5cbiAgLy8gVXBkYXRlIGRheSBzZWxlY3QgYm94IGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGUgc2VsZWN0ZWQgbW9udGhcbiAgY29uc3QgeWVhck1vbnRoU2VsZWN0ID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgJ3llYXItbW9udGgnLCB5ZWFyT3B0aW9ucyk7XG4gIGNvbnN0IHllYXJEYXlTZWxlY3QgPSBnZXRDb250cm9sKGluc3RhbmNlLCAneWVhci1kYXknLCB5ZWFyT3B0aW9ucyk7XG4gIGNvbnN0IHllYXJNb250aExpc3RlbmVyID0gKGUpID0+IHtcbiAgICBjb25zdCBtb250aCA9IF8ucmFuZ2UoMTIpLmZpbmRJbmRleCgobW9udGhJbmRleCkgPT4gKFxuICAgICAgZ2V0TW9udGhOYW1lKG1vbnRoSW5kZXgpLnRvTG93ZXJDYXNlKCkgPT09IGUudGFyZ2V0LnZhbHVlXG4gICAgKSk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSBOdW1iZXIoeWVhckRheVNlbGVjdC52YWx1ZSk7XG4gICAgeWVhckRheVNlbGVjdC5pbm5lckhUTUwgPSAnJztcblxuICAgIGNvbnN0IG1heERheXMgPSBnZXREYXlzSW5Nb250aChtb250aCk7XG4gICAgXy5yYW5nZSgxLCBtYXhEYXlzICsgMSkuZm9yRWFjaCgoZGF5KSA9PiB7XG4gICAgICBjb25zdCBvcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgIG9wdC52YWx1ZSA9IGRheS50b1N0cmluZygpO1xuICAgICAgb3B0LnRleHRDb250ZW50ID0gb3JkaW5hbChkYXkpO1xuICAgICAgeWVhckRheVNlbGVjdC5hcHBlbmRDaGlsZChvcHQpO1xuICAgIH0pO1xuICAgIGlmIChvbGRWYWx1ZSA8PSBtYXhEYXlzKSB5ZWFyRGF5U2VsZWN0LnZhbHVlID0gb2xkVmFsdWU7XG4gICAgZWxzZSB5ZWFyRGF5U2VsZWN0LnZhbHVlID0gbWF4RGF5cztcbiAgfTtcbiAgeWVhck1vbnRoU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHllYXJNb250aExpc3RlbmVyKTtcbiAgZmlyZUV2ZW50KHllYXJNb250aFNlbGVjdCk7XG5cbiAgLy8gTWFrZSBlbmQgY291bnQgbGFiZWwgc2luZ3VsYXIvcGx1cmFsIGJhc2VkIG9uIHZhbHVlXG4gIGNvbnN0IGVuZENvdW50ID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgJ2VuZC1jb3VudCcpO1xuICBlbmRDb3VudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZSkgPT4ge1xuICAgIGNvbnN0IGNvdW50ID0gTnVtYmVyKGUudGFyZ2V0LnZhbHVlKTtcbiAgICBpZiAoZS50YXJnZXQudmFsdWUubGVuZ3RoID4gMCAmJiBOdW1iZXIuaXNGaW5pdGUoY291bnQpKSB7XG4gICAgICBjb25zdCBsYWJlbCA9IGNvdW50ID09PSAxID8gJyBvY2N1cnJlbmNlJyA6ICcgb2NjdXJyZW5jZXMnO1xuICAgICAgZ2V0Q29udHJvbChpbnN0YW5jZSwgJ2VuZC1jb3VudC1sYWJlbCcpLnRleHRDb250ZW50ID0gbGFiZWw7XG4gICAgfVxuICB9KTtcbiAgZmlyZUV2ZW50KGVuZENvdW50KTtcblxuICAvLyBDb25kaXRpb25hbGx5IGVuYWJsZS9kaXNhYmxlIHJlY3VycmVuY2UgZW5kIGNvbnRyb2xzXG4gIGNvbnN0IGVuZFJhZGlvU2VsZWN0b3IgPSAnaW5wdXRbbmFtZT1cInJlY3VycmluZy1kYXRlLWVuZC10eXBlXCJdJztcbiAgY29uc3QgZW5kVHlwZUxpc3RlbmVyID0gKGUpID0+IHtcbiAgICBjb25zdCBkYXRlSW5wdXQgPSBnZXRDb250cm9sKGluc3RhbmNlLCAnZW5kLWRhdGUnKTtcbiAgICBjb25zdCBkYXRlQnV0dG9uID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgJ2VuZC1kYXRlLWJ1dHRvbicpO1xuICAgIGNvbnN0IGNvdW50SW5wdXQgPSBnZXRDb250cm9sKGluc3RhbmNlLCAnZW5kLWNvdW50Jyk7XG5cbiAgICBkYXRlSW5wdXQuZGlzYWJsZWQgPSBlLnRhcmdldC52YWx1ZSAhPT0gJ2RhdGUnO1xuICAgIGRhdGVCdXR0b24uZGlzYWJsZWQgPSBlLnRhcmdldC52YWx1ZSAhPT0gJ2RhdGUnO1xuICAgIGNvdW50SW5wdXQuZGlzYWJsZWQgPSBlLnRhcmdldC52YWx1ZSAhPT0gJ2NvdW50JztcbiAgfTtcbiAgcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZW5kUmFkaW9TZWxlY3RvcikuZm9yRWFjaCgocmFkaW8pID0+IHtcbiAgICByYWRpby5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlbmRUeXBlTGlzdGVuZXIpO1xuICAgIGlmIChyYWRpby5jaGVja2VkKSBmaXJlRXZlbnQocmFkaW8pO1xuICB9KTtcblxuICAvLyBDb25kaXRpb25hbGx5IGVuYWJsZS9kaXNhYmxlIGNvbnRyb2xzIGZvciBjaGVja2JveCBvcHRpb25zXG4gIGNvbnN0IHVzZURhdGVDaGVja2JveCA9IGdldENvbnRyb2woaW5zdGFuY2UsICd1c2Utc3RhcnQtZGF0ZScpO1xuICB1c2VEYXRlQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICBjb25zdCBlbmFibGUgPSBlLnRhcmdldC5jaGVja2VkO1xuICAgIGdldENvbnRyb2woaW5zdGFuY2UsICdzdGFydC1kYXRlJykuZGlzYWJsZWQgPSAhZW5hYmxlO1xuICAgIGdldENvbnRyb2woaW5zdGFuY2UsICdzdGFydC1kYXRlLWJ1dHRvbicpLmRpc2FibGVkID0gIWVuYWJsZTtcbiAgfSk7XG4gIGZpcmVFdmVudCh1c2VEYXRlQ2hlY2tib3gpO1xuXG4gIGNvbnN0IG5vV2Vla2VuZENoZWNrYm94ID0gZ2V0Q29udHJvbChpbnN0YW5jZSwgJ25vLXdlZWtlbmQnKTtcbiAgbm9XZWVrZW5kQ2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICBnZXRDb250cm9sKGluc3RhbmNlLCAnd2Vla2VuZC1zZWxlY3QnKS5kaXNhYmxlZCA9ICFlLnRhcmdldC5jaGVja2VkO1xuICB9KTtcbiAgZmlyZUV2ZW50KG5vV2Vla2VuZENoZWNrYm94KTtcblxuICAvLyBDaGVjayBkYXRlIHZhbGlkaXR5XG4gIGNvbnN0IGRhdGVMaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gZS50YXJnZXQ7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICBpZiAoIXBhcnNlRGF0ZSh2YWx1ZSwgcHJpdmF0ZXMuZGF0ZUZvcm1hdC5pbnB1dFBhdHRlcm5zKSkge1xuICAgICAgICBjb25zdCBmb3JtYXQgPSBwcml2YXRlcy5kYXRlRm9ybWF0LnZpc3VhbFBhdHRlcm47XG4gICAgICAgIG1lc3NhZ2UgPSBgUGxlYXNlIGVudGVyIGEgdmFsaWQgZGF0ZSBpbiAke2Zvcm1hdH0gZm9ybWF0LmA7XG4gICAgICB9XG4gICAgICBlLnRhcmdldC5zZXRDdXN0b21WYWxpZGl0eShtZXNzYWdlKTtcbiAgICB9XG4gIH07XG4gIGdldENvbnRyb2woaW5zdGFuY2UsICdlbmQtZGF0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGRhdGVMaXN0ZW5lcik7XG4gIGdldENvbnRyb2woaW5zdGFuY2UsICdzdGFydC1kYXRlJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZGF0ZUxpc3RlbmVyKTtcbn1cblxuLyoqXG4gKiBBIG1vZGFsIGRpYWxvZyBmb3Igc2VsZWN0aW5nIGEgcmVjdXJyaW5nIGRhdGUuXG4gKiBAaW1wbGVtZW50cyB7bW9kdWxlOm1vZGFsU3RhY2t+TW9kYWx9XG4gKi9cbmNsYXNzIFJlY3VycmVuY2VNb2RhbCB7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBIb2xkcyBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBtb2RhbC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuY29uZmlybV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmVcbiAgICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC4gVGhlIGZ1bmN0aW9uIHdpbGxcbiAgICogICBiZSBwYXNzZWQgdGhlIHJlY3VycmluZyBkYXRlIHRoYXQgd2FzIHNlbGVjdGVkLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5jYW5jZWxdIEEgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIGJlXG4gICAqICAgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNhbmNlbHMgdGhlIG1vZGFsLlxuICAgKiBAcGFyYW0ge21vZHVsZTpyZWN1cnJpbmdEYXRlflJlY3VycmluZ0RhdGV9IFtvcHRpb25zLmluaXRpYWxdIEEgcmVjdXJyaW5nXG4gICAqICAgZGF0ZSB0byB1c2UgYXMgYSBkZWZhdWx0IHdoZW4gaW5pdGlhbGl6aW5nIHRoZSBmb3JtIGNvbnRyb2xzLlxuICAgKiBAcGFyYW0ge0RhdGV9IFtvcHRpb25zLmJhc2VEYXRlXSBUaGUgZGF0ZSB0byB1c2UgYXMgYSBkZWZhdWx0IGZvclxuICAgKiAgIGluaXRpYWxpemluZyBjZXJ0YWluIGZpZWxkcy4gSWYgbm90IGdpdmVuLCB0aGVuIHRoZSBwcmVzZW50IGRhdGUgaXNcbiAgICogICB1c2VkLlxuICAgKiBAcGFyYW0ge21vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35kYXRlRm9ybWF0fSBbb3B0aW9ucy5kYXRlRm9ybWF0XSBBblxuICAgKiAgIG9iamVjdCBob2xkaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjYWxlbmRhciBkYXRlIGZvcm1hdCB0byB1c2UgZm9yXG4gICAqICAgZGF0ZSBmaWVsZHMuIElmIG5vdCBnaXZlbiwgdGhlbiB0aGUgYnJvd3NlciBkZWZhdWx0IGlzIHVzZWQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHtcbiAgICAgIGluaXRpYWxSZWN1cnJlbmNlOiBvcHRpb25zLmluaXRpYWwgfHwgbnVsbCxcbiAgICAgIGJhc2VEYXRlOiBvcHRpb25zLmJhc2VEYXRlIHx8IG5ldyBEYXRlKCksXG4gICAgICBkYXRlRm9ybWF0OiBvcHRpb25zLmRhdGVGb3JtYXQgfHwgU2V0dGluZ3MubG9va3VwRGF0ZUZvcm1hdCgpLFxuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIGNvbmZpcm06IG9wdGlvbnMuY29uZmlybSB8fCBudWxsLFxuICAgICAgICBjYW5jZWw6IG9wdGlvbnMuY2FuY2VsIHx8IG51bGwsXG4gICAgICB9LFxuICAgICAgY29udGFpbmVyczoge1xuICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgIGNvbnRleHQ6IG51bGwsXG4gICAgICAgIHdlZWtPcHRpb25zOiBudWxsLFxuICAgICAgICBtb250aE9wdGlvbnM6IG51bGwsXG4gICAgICAgIHllYXJPcHRpb25zOiBudWxsLFxuICAgICAgfSxcbiAgICAgIHRpdGxlOiAnRWRpdCBSZWN1cnJpbmcgRGF0ZScsXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuICB9XG5cbiAgZ2V0IHRpdGxlKCkge1xuICAgIHJldHVybiBwcml2YXRlTWVtYmVycy5nZXQodGhpcykudGl0bGU7XG4gIH1cblxuICBhZGRDb250ZW50KHBhcmVudCwgbW9kYWxTdGFjaykge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWNvbnRhaW5lcicpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtaW50ZXJ2YWwtbGVuZ3RoJyxcbiAgICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS1pbnRlcnZhbC1sZW5ndGgnLFxuICAgICAgdmFsdWU6ICcxJyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWlubGluZScsICdmb3JtLWlucHV0LWNvdW50J10sXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIG1pbjogMSxcbiAgICAgIGNvbnRhaW5lcjogeyBpbmxpbmU6IHRydWUgfSxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHZhbHVlOiAnUmVwZWF0IGV2ZXJ5ICcsXG4gICAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWxhYmVsLWlubGluZSddLFxuICAgICAgfSxcbiAgICB9KSk7XG5cbiAgICBsZXQgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnKTtcbiAgICBsYWJlbC50ZXh0Q29udGVudCA9ICcgJztcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgaWQ6ICdyZWN1cnJpbmctZGF0ZS1pbnRlcnZhbC11bml0JyxcbiAgICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS1pbnRlcnZhbC11bml0JyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdC1pbmxpbmUnXSxcbiAgICAgIG1lbnVJdGVtczogVU5JVFMubWFwKCh1bml0KSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdW5pdC52YWx1ZSA9PT0gJ3dlZWsnO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5pdC52YWx1ZSwgbGFiZWw6IHVuaXQuc2luZ3VsYXIsIHNlbGVjdGVkIH07XG4gICAgICB9KSxcbiAgICB9KSk7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICBjb25zdCBjb250ZXh0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNvbnRleHRDb250YWluZXIpO1xuXG4gICAgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtY29udGFpbmVyJyk7XG5cbiAgICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSAnU3RvcCByZXBlYXRpbmcnO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3JhZGlvJyxcbiAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtZW5kLXR5cGUtbmV2ZXInLFxuICAgICAgbmFtZTogJ3JlY3VycmluZy1kYXRlLWVuZC10eXBlJyxcbiAgICAgIHZhbHVlOiAnbmV2ZXInLFxuICAgICAgY2hlY2tlZDogdHJ1ZSxcbiAgICAgIGxhYmVsOiB7IHZhbHVlOiAnTmV2ZXInLCBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnXSB9LFxuICAgICAgY29udGFpbmVyOiB7IGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWl0ZW0tY29udGFpbmVyJ10gfSxcbiAgICB9KSk7XG5cbiAgICBsZXQgb3B0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgb3B0aW9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtaXRlbS1jb250YWluZXInKTtcbiAgICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3JhZGlvJyxcbiAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtZW5kLXR5cGUtZGF0ZScsXG4gICAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtZW5kLXR5cGUnLFxuICAgICAgdmFsdWU6ICdkYXRlJyxcbiAgICB9KSk7XG5cbiAgICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnKTtcbiAgICBsYWJlbC5odG1sRm9yID0gJ3JlY3VycmluZy1kYXRlLWVuZC10eXBlLWRhdGUnO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ09uIGRhdGUgJztcbiAgICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZURhdGVJbnB1dEZpZWxkKHtcbiAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtZW5kLWRhdGUnLFxuICAgICAgbmFtZTogJ3JlY3VycmluZy1kYXRlLWVuZC1kYXRlJyxcbiAgICAgIHBsYWNlaG9sZGVyOiBwcml2YXRlcy5kYXRlRm9ybWF0LnZpc3VhbFBhdHRlcm4sXG4gICAgICBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1pbmxpbmUnXSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgY29udGFpbmVyOiB7XG4gICAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWRhdGUtY29udGFpbmVyLWlubGluZSddLFxuICAgICAgICBpbmxpbmU6IHRydWUsXG4gICAgICB9LFxuICAgICAgYnV0dG9uOiB7XG4gICAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtZW5kLWRhdGUtYnV0dG9uJyxcbiAgICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0tYnV0dG9uJ10sXG4gICAgICAgIGNhbGxiYWNrOiAoaW5wdXQpID0+IHBpY2tEYXRlKHRoaXMsIGlucHV0LCBtb2RhbFN0YWNrKSxcbiAgICAgIH0sXG4gICAgfSkpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChvcHRpb25Db250YWluZXIpO1xuXG4gICAgb3B0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgb3B0aW9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtaXRlbS1jb250YWluZXInKTtcbiAgICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3JhZGlvJyxcbiAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtZW5kLXR5cGUtY291bnQnLFxuICAgICAgbmFtZTogJ3JlY3VycmluZy1kYXRlLWVuZC10eXBlJyxcbiAgICAgIHZhbHVlOiAnY291bnQnLFxuICAgIH0pKTtcblxuICAgIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICAgIGxhYmVsLmh0bWxGb3IgPSAncmVjdXJyaW5nLWRhdGUtZW5kLXR5cGUtY291bnQnO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ0FmdGVyICc7XG4gICAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtZW5kLWNvdW50JyxcbiAgICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS1lbmQtY291bnQnLFxuICAgICAgdmFsdWU6ICcxJyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWlubGluZScsICdmb3JtLWlucHV0LWNvdW50J10sXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIG1pbjogMSxcbiAgICB9KSk7XG5cbiAgICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgbGFiZWwuaWQgPSAncmVjdXJyaW5nLWRhdGUtZW5kLWNvdW50LWxhYmVsJztcbiAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICAgIGxhYmVsLmh0bWxGb3IgPSAncmVjdXJyaW5nLWRhdGUtZW5kLWNvdW50JztcbiAgICBsYWJlbC50ZXh0Q29udGVudCA9ICcgb2NjdXJyZW5jZXMnO1xuICAgIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG9wdGlvbkNvbnRhaW5lcik7XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWNvbnRhaW5lcicpO1xuXG4gICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ0FkZGl0aW9uYWwgb3B0aW9uczonO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICBvcHRpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBvcHRpb25Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1pdGVtLWNvbnRhaW5lcicpO1xuXG4gICAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICBpZDogJ3JlY3VycmluZy1kYXRlLXVzZS1zdGFydC1kYXRlJyxcbiAgICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS1hZGRpdGlvbmFsLW9wdGlvbnMnLFxuICAgICAgdmFsdWU6ICd1c2Utc3RhcnQtZGF0ZScsXG4gICAgfSkpO1xuXG4gICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gICAgbGFiZWwuaHRtbEZvciA9ICdyZWN1cnJpbmctZGF0ZS11c2Utc3RhcnQtZGF0ZSc7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSAnU3RhcnQgb24gJztcbiAgICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZURhdGVJbnB1dEZpZWxkKHtcbiAgICAgIGlkOiAncmVjdXJyaW5nLWRhdGUtc3RhcnQtZGF0ZScsXG4gICAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtc3RhcnQtZGF0ZScsXG4gICAgICBwbGFjZWhvbGRlcjogcHJpdmF0ZXMuZGF0ZUZvcm1hdC52aXN1YWxQYXR0ZXJuLFxuICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtaW5saW5lJ10sXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1kYXRlLWNvbnRhaW5lci1pbmxpbmUnXSxcbiAgICAgICAgaW5saW5lOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGJ1dHRvbjoge1xuICAgICAgICBpZDogJ3JlY3VycmluZy1kYXRlLXN0YXJ0LWRhdGUtYnV0dG9uJyxcbiAgICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0tYnV0dG9uJ10sXG4gICAgICAgIGNhbGxiYWNrOiAoaW5wdXQpID0+IHBpY2tEYXRlKHRoaXMsIGlucHV0LCBtb2RhbFN0YWNrKSxcbiAgICAgIH0sXG4gICAgfSkpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChvcHRpb25Db250YWluZXIpO1xuXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICBpZDogJ3JlY3VycmluZy1kYXRlLWJhc2Utb24tY29tcGxldGlvbicsXG4gICAgICBuYW1lOiAncmVjdXJyaW5nLWRhdGUtYWRkaXRpb25hbC1vcHRpb25zJyxcbiAgICAgIHZhbHVlOiAnYmFzZS1vbi1jb21wbGV0aW9uJyxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHZhbHVlOiAnUmVwZWF0IGZyb20gY29tcGxldGlvbiBkYXRlJyxcbiAgICAgICAgY2xhc3NMaXN0OiBbJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJ10sXG4gICAgICB9LFxuICAgICAgY29udGFpbmVyOiB7IGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWl0ZW0tY29udGFpbmVyJ10gfSxcbiAgICB9KSk7XG5cbiAgICBvcHRpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBvcHRpb25Db250YWluZXIuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1pdGVtLWNvbnRhaW5lcicpO1xuXG4gICAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICBpZDogJ3JlY3VycmluZy1kYXRlLW5vLXdlZWtlbmQnLFxuICAgICAgbmFtZTogJ3JlY3VycmluZy1kYXRlLWFkZGl0aW9uYWwtb3B0aW9ucycsXG4gICAgICB2YWx1ZTogJ25vLXdlZWtlbmQnLFxuICAgIH0pKTtcblxuICAgIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGFiZWwnKTtcbiAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWxhYmVsLWlubGluZScpO1xuICAgIGxhYmVsLmh0bWxGb3IgPSAncmVjdXJyaW5nLWRhdGUtbm8td2Vla2VuZCc7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSAnT24gd2Vla2VuZHMsIHVzZSAnO1xuICAgIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlRm9ybUNvbnRyb2woe1xuICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICBpZDogJ3JlY3VycmluZy1kYXRlLXdlZWtlbmQtc2VsZWN0JyxcbiAgICAgIG5hbWU6ICdyZWN1cnJpbmctZGF0ZS13ZWVrZW5kLXNlbGVjdCcsXG4gICAgICBjbGFzc0xpc3Q6IFsnZm9ybS1zZWxlY3QtaW5saW5lJ10sXG4gICAgICBtZW51SXRlbXM6IFtcbiAgICAgICAgeyB2YWx1ZTogJ25lYXJlc3Qtd2Vla2RheScsIGxhYmVsOiAnbmVhcmVzdCcsIHNlbGVjdGVkOiB0cnVlIH0sXG4gICAgICAgIHsgdmFsdWU6ICdwcmV2aW91cy13ZWVrZGF5JywgbGFiZWw6ICdwcmV2aW91cycgfSxcbiAgICAgICAgeyB2YWx1ZTogJ25leHQtd2Vla2RheScsIGxhYmVsOiAnbmV4dCcgfSxcbiAgICAgIF0sXG4gICAgfSkpO1xuXG4gICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2Zvcm0taW5wdXQtbGFiZWwtaW5saW5lJyk7XG4gICAgbGFiZWwuaHRtbEZvciA9ICdyZWN1cnJpbmctZGF0ZS13ZWVrZW5kLXNlbGVjdCc7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSAnIHdlZWtkYXknO1xuICAgIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG9wdGlvbkNvbnRhaW5lcik7XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIGNvbnN0IHdlZWtPcHRpb25zID0gY3JlYXRlV2Vla0NvbnRleHRGb3JtKCk7XG4gICAgY29uc3QgbW9udGhPcHRpb25zID0gY3JlYXRlTW9udGhDb250ZXh0Rm9ybSgpO1xuICAgIGNvbnN0IHllYXJPcHRpb25zID0gY3JlYXRlWWVhckNvbnRleHRGb3JtKCk7XG5cbiAgICBwcml2YXRlcy5jb250YWluZXJzID0ge1xuICAgICAgcGFyZW50LFxuICAgICAgY29udGV4dDogY29udGV4dENvbnRhaW5lcixcbiAgICAgIHdlZWtPcHRpb25zLFxuICAgICAgbW9udGhPcHRpb25zLFxuICAgICAgeWVhck9wdGlvbnMsXG4gICAgfTtcblxuICAgIGluaXRGb3JtVmFsdWVzKHRoaXMpO1xuICAgIGFkZExpc3RlbmVycyh0aGlzKTtcbiAgfVxuXG4gIGNvbmZpcm0oKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKHByaXZhdGVzLmNhbGxiYWNrcy5jb25maXJtKSB7XG4gICAgICBjb25zdCB1bml0ID0gZ2V0Q29udHJvbCh0aGlzLCAnaW50ZXJ2YWwtdW5pdCcpLnZhbHVlO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuXG4gICAgICBjb25zdCBsZW5ndGhJbnB1dCA9IGdldENvbnRyb2wodGhpcywgJ2ludGVydmFsLWxlbmd0aCcpO1xuICAgICAgb3B0aW9ucy5pbnRlcnZhbExlbmd0aCA9IE51bWJlcihsZW5ndGhJbnB1dC52YWx1ZSk7XG5cbiAgICAgIGxldCBjb250ZXh0O1xuICAgICAgY29uc3QgZ2V0RGF5SW5kZXggPSAoZGF5KSA9PiAoXG4gICAgICAgIF8ucmFuZ2UoNykuZmluZEluZGV4KChkYXlJbmRleCkgPT4gKFxuICAgICAgICAgIGRheSA9PT0gZ2V0V2Vla2RheU5hbWUoZGF5SW5kZXgpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgKSlcbiAgICAgICk7XG4gICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgY29udGV4dCA9IHByaXZhdGVzLmNvbnRhaW5lcnMud2Vla09wdGlvbnM7XG4gICAgICAgICAgaWYgKGdldENvbnRyb2wodGhpcywgJ3dlZWstdHlwZS1zZWxlY3QtZGF5cycsIGNvbnRleHQpLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRheXNPZldlZWsgPSBbXTtcbiAgICAgICAgICAgIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCgnLmZvcm0td2Vla2RheS1idXR0b24nKS5mb3JFYWNoKFxuICAgICAgICAgICAgICAoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgICAgICAgICBkYXlzT2ZXZWVrLnB1c2goZ2V0RGF5SW5kZXgoYnV0dG9uLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChkYXlzT2ZXZWVrLmxlbmd0aCA+IDApIG9wdGlvbnMuZGF5c09mV2VlayA9IGRheXNPZldlZWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgY29udGV4dCA9IHByaXZhdGVzLmNvbnRhaW5lcnMubW9udGhPcHRpb25zO1xuICAgICAgICAgIGlmIChnZXRDb250cm9sKHRoaXMsICdtb250aC10eXBlLWRheScsIGNvbnRleHQpLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRheVNlbGVjdCA9IGdldENvbnRyb2wodGhpcywgJ21vbnRoLWRheScsIGNvbnRleHQpO1xuICAgICAgICAgICAgb3B0aW9ucy5kYXlPZk1vbnRoID0gTnVtYmVyKGRheVNlbGVjdC52YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChnZXRDb250cm9sKHRoaXMsICdtb250aC10eXBlLXdlZWsnLCBjb250ZXh0KS5jaGVja2VkKSB7XG4gICAgICAgICAgICBjb25zdCB3ZWVrU2VsZWN0ID0gZ2V0Q29udHJvbCh0aGlzLCAnbW9udGgtd2Vlay1udW1iZXInLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGRheVNlbGVjdCA9IGdldENvbnRyb2wodGhpcywgJ21vbnRoLXdlZWstZGF5JywgY29udGV4dCk7XG4gICAgICAgICAgICBvcHRpb25zLndlZWtOdW1iZXIgPSBOdW1iZXIod2Vla1NlbGVjdC52YWx1ZSk7XG4gICAgICAgICAgICBvcHRpb25zLmRheXNPZldlZWsgPSBbZ2V0RGF5SW5kZXgoZGF5U2VsZWN0LnZhbHVlKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICBjb250ZXh0ID0gcHJpdmF0ZXMuY29udGFpbmVycy55ZWFyT3B0aW9ucztcbiAgICAgICAgICBpZiAoZ2V0Q29udHJvbCh0aGlzLCAneWVhci10eXBlLWRheScsIGNvbnRleHQpLmNoZWNrZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vbnRoU2VsZWN0ID0gZ2V0Q29udHJvbCh0aGlzLCAneWVhci1tb250aCcsIGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3QgZGF5U2VsZWN0ID0gZ2V0Q29udHJvbCh0aGlzLCAneWVhci1kYXknLCBjb250ZXh0KTtcbiAgICAgICAgICAgIG9wdGlvbnMubW9udGggPSBfLnJhbmdlKDEyKS5maW5kSW5kZXgoKG1vbnRoSW5kZXgpID0+IChcbiAgICAgICAgICAgICAgZ2V0TW9udGhOYW1lKG1vbnRoSW5kZXgpLnRvTG93ZXJDYXNlKCkgPT09IG1vbnRoU2VsZWN0LnZhbHVlXG4gICAgICAgICAgICApKTtcbiAgICAgICAgICAgIG9wdGlvbnMuZGF5T2ZNb250aCA9IE51bWJlcihkYXlTZWxlY3QudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGdldENvbnRyb2wodGhpcywgJ2VuZC10eXBlLWRhdGUnKS5jaGVja2VkKSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gZ2V0Q29udHJvbCh0aGlzLCAnZW5kLWRhdGUnKTtcbiAgICAgICAgb3B0aW9ucy5lbmREYXRlID0gcGFyc2VEYXRlKFxuICAgICAgICAgIGlucHV0LnZhbHVlLFxuICAgICAgICAgIHByaXZhdGVzLmRhdGVGb3JtYXQuaW5wdXRQYXR0ZXJucyxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoZ2V0Q29udHJvbCh0aGlzLCAnZW5kLXR5cGUtY291bnQnKS5jaGVja2VkKSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gZ2V0Q29udHJvbCh0aGlzLCAnZW5kLWNvdW50Jyk7XG4gICAgICAgIG9wdGlvbnMubWF4Q291bnQgPSBOdW1iZXIoaW5wdXQudmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2V0Q29udHJvbCh0aGlzLCAndXNlLXN0YXJ0LWRhdGUnKS5jaGVja2VkKSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gZ2V0Q29udHJvbCh0aGlzLCAnc3RhcnQtZGF0ZScpO1xuICAgICAgICBvcHRpb25zLnN0YXJ0RGF0ZSA9IHBhcnNlRGF0ZShcbiAgICAgICAgICBpbnB1dC52YWx1ZSxcbiAgICAgICAgICBwcml2YXRlcy5kYXRlRm9ybWF0LmlucHV0UGF0dGVybnMsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMuYmFzZU9uQ29tcGxldGlvbiA9IGdldENvbnRyb2woXG4gICAgICAgIHRoaXMsXG4gICAgICAgICdiYXNlLW9uLWNvbXBsZXRpb24nLFxuICAgICAgKS5jaGVja2VkO1xuXG4gICAgICBpZiAoZ2V0Q29udHJvbCh0aGlzLCAnbm8td2Vla2VuZCcpLmNoZWNrZWQpIHtcbiAgICAgICAgb3B0aW9ucy5vbldlZWtlbmQgPSBnZXRDb250cm9sKHRoaXMsICd3ZWVrZW5kLXNlbGVjdCcpLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICBwcml2YXRlcy5jYWxsYmFja3MuY29uZmlybShuZXcgUmVjdXJyaW5nRGF0ZSh1bml0LCBvcHRpb25zKSk7XG4gICAgfVxuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIGNvbnN0IHsgY2FsbGJhY2tzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrcy5jYW5jZWwpIGNhbGxiYWNrcy5jYW5jZWwoKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIGlmICghZ2V0Q29udHJvbCh0aGlzLCAnaW50ZXJ2YWwtbGVuZ3RoJykucmVwb3J0VmFsaWRpdHkoKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKGdldENvbnRyb2wodGhpcywgJ2VuZC10eXBlLWRhdGUnKS5jaGVja2VkKSB7XG4gICAgICBpZiAoIWdldENvbnRyb2wodGhpcywgJ2VuZC1kYXRlJykucmVwb3J0VmFsaWRpdHkoKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChnZXRDb250cm9sKHRoaXMsICdlbmQtdHlwZS1jb3VudCcpLmNoZWNrZWQpIHtcbiAgICAgIGlmICghZ2V0Q29udHJvbCh0aGlzLCAnZW5kLWNvdW50JykucmVwb3J0VmFsaWRpdHkoKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChnZXRDb250cm9sKHRoaXMsICd1c2Utc3RhcnQtZGF0ZScpLmNoZWNrZWQpIHtcbiAgICAgIGlmICghZ2V0Q29udHJvbCh0aGlzLCAnc3RhcnQtZGF0ZScpLnJlcG9ydFZhbGlkaXR5KCkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWN1cnJlbmNlTW9kYWw7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtTZXR0aW5nc01vZGFsXXtAbGluayBtb2R1bGU6c2V0dGluZ3NNb2RhbH5TZXR0aW5nc01vZGFsfSBjbGFzcy5cbiAqIEBtb2R1bGUgc2V0dGluZ3NNb2RhbFxuICovXG5cbmltcG9ydCBDb25maXJtTW9kYWwgZnJvbSAnLi9jb25maXJtTW9kYWwnO1xuXG5pbXBvcnQgU2V0dGluZ3MgZnJvbSAnLi4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgY3JlYXRlRm9ybUNvbnRyb2wgfSBmcm9tICcuLi91dGlsaXR5L2RvbSc7XG5pbXBvcnQgeyBpc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCB9IGZyb20gJy4uL3V0aWxpdHkvc3RvcmFnZSc7XG5cbi8qKlxuICogT2JqZWN0IGhvbGRpbmcgcHJpdmF0ZSBtZW1iZXJzIGZvciB0aGVcbiAqIFtTZXR0aW5nc01vZGFsXXtAbGluayBtb2R1bGU6c2V0dGluZ3NNb2RhbH5TZXR0aW5nc01vZGFsfSBjbGFzcy5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpzZXR0aW5nc01vZGFsflNldHRpbmdzTW9kYWx+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnNldHRpbmdzflNldHRpbmdzfSBzZXR0aW5ncyBUaGUgYXBwIHNldHRpbmdzIGJlaW5nXG4gKiAgIG1vZGlmaWVkLlxuICogQHByb3BlcnR5IHttb2R1bGU6bW9kYWxTdGFja35Nb2RhbFN0YWNrfSBtb2RhbFN0YWNrIFRoZSBtb2RhbCBzdGFjayBpbiB3aGljaFxuICogICB0aGUgbW9kYWwgd2FzIGluc2VydGVkLlxuICogQHByb3BlcnR5IHtib29sZWFufSBjb25maXJtTm9TdG9yYWdlIElmIHRydWUsIHRoZW4gdGhlIHVzZXIgc2hvdWxkIGJlIGFza2VkXG4gKiAgIGZvciBjb25maXJtYXRpb24gd2hlbiBkaXNhYmxpbmcgbG9jYWwgc3RvcmFnZS5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBjYWxsYmFja3MgQW4gb2JqZWN0IGhvbGRpbmcgY2FsbGJhY2sgZnVuY3Rpb25zLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5jb25maXJtXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjYWxsYmFja3MuY2FuY2VsXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuICogICBpbnZva2VkIHdoZW4gdGhlIHVzZXIgY2FuY2VscyB0aGUgbW9kYWwuXG4gKiBAcHJvcGVydHkge09iamVjdH0gW2NvbnRyb2xzXSBBbiBvYmplY3QgaG9sZGluZyB0aGUgZm9ybSBpbnB1dCBlbGVtZW50cyBmb3JcbiAqICAgdGhlIG1vZGFsLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMuc2F2ZUxvY2FsIFRoZSByYWRpbyBidXR0b24gZWxlbWVudCBmb3JcbiAqICAgaW5kaWNhdGluZyB0aGF0IGRhdGEgc2hvdWxkIGJlIHNhdmVkIHRvIGxvY2FsIHN0b3JhZ2UuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250cm9scy5zYXZlTmV2ZXIgVGhlIHJhZGlvIGJ1dHRvbiBlbGVtZW50IGZvclxuICogICBpbmRpY2F0aW5nIHRoYXQgZGF0YSBzaG91bGQgbm90IGJlIHNhdmVkLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udHJvbHMuZGF0ZUZvcm1hdCBUaGUgc2VsZWN0IGVsZW1lbnQgZm9yIHRoZSBkYXRlXG4gKiAgIGZvcm1hdC5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRyb2xzLmRlbGV0ZU9sZCBUaGUgY2hlY2tib3ggZWxlbWVudCBpbmRpY2F0aW5nXG4gKiAgIHdoZXRoZXIgdG8gZGVsZXRlIG9sZCBjb21wbGV0ZWQgdGFza3MuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250cm9scy5kZWxldGVBZnRlciBUaGUgaW5wdXQgZWxlbWVudCBmb3IgZW50ZXJpbmdcbiAqICAgdGhlIG51bWJlciBvZiBkYXlzIGFmdGVyIHdoaWNoIHRvIGRlbGV0ZSBjb21wbGV0ZWQgdGFza3MuXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBjb250cm9scy5kZWxldGVBZnRlckxhYmVsIFRoZSBsYWJlbCBlbGVtZW50IGZvciB0aGVcbiAqICAgZGVsZXRlQWZ0ZXIgY29udHJvbC5cbiAqL1xuXG4vKipcbiAqIEhvbGRzIHByaXZhdGUgZGF0YSBmb3IgdGhlXG4gKiBbU2V0dGluZ3NNb2RhbF17QGxpbmsgbW9kdWxlOnNldHRpbmdzTW9kYWx+U2V0dGluZ3NNb2RhbH0gY2xhc3MuXG4gKiBAdHlwZSB7V2Vha01hcH1cbiAqIEBzZWUgbW9kdWxlOnNldHRpbmdzTW9kYWx+U2V0dGluZ3NNb2RhbH5wcml2YXRlc1xuICovXG5jb25zdCBwcml2YXRlTWVtYmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgdmFsdWVzIG9mIHRoZSBmb3JtIGVsZW1lbnRzIGJhc2VkIG9uIGN1cnJlbnQgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge21vZHVsZTpzZXR0aW5nc01vZGFsflNldHRpbmdzTW9kYWx9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvblxuICogICB3aGljaCB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGluaXRGb3JtVmFsdWVzKGluc3RhbmNlKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgY29uc3QgeyBjb250cm9scywgc2V0dGluZ3MgfSA9IHByaXZhdGVzO1xuXG4gIHN3aXRjaCAoc2V0dGluZ3Muc3RvcmFnZU1ldGhvZCkge1xuICAgIGNhc2UgJ25vbmUnOlxuICAgICAgcHJpdmF0ZXMuY29uZmlybU5vU3RvcmFnZSA9IGZhbHNlO1xuICAgICAgY29udHJvbHMuc2F2ZU5ldmVyLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbG9jYWwnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBwcml2YXRlcy5jb25maXJtTm9TdG9yYWdlID0gdHJ1ZTtcbiAgICAgIGNvbnRyb2xzLnNhdmVMb2NhbC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgY29udHJvbHMuZGF0ZUZvcm1hdC52YWx1ZSA9IHNldHRpbmdzLmRhdGVGb3JtYXQudHlwZTtcblxuICBjb25zdCBkZWxldGVPbGQgPSBzZXR0aW5ncy5kZWxldGVBZnRlciAhPT0gbnVsbDtcbiAgY29udHJvbHMuZGVsZXRlT2xkLmNoZWNrZWQgPSBkZWxldGVPbGQ7XG4gIGlmIChkZWxldGVPbGQpIGNvbnRyb2xzLmRlbGV0ZUFmdGVyLnZhbHVlID0gc2V0dGluZ3MuZGVsZXRlQWZ0ZXIudG9TdHJpbmcoKTtcblxuICAvLyBEaXNhYmxlIHN0b3JhZ2Ugb3B0aW9ucyBpZiBsb2NhbCBzdG9yYWdlIGlzIHVuc3VwcG9ydGVkIG9yIGRpc2FibGVkXG4gIGlmICghaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgIGNvbnRyb2xzLnNhdmVOZXZlci5kaXNhYmxlZCA9IHRydWU7XG4gICAgY29udHJvbHMuc2F2ZUxvY2FsLmRpc2FibGVkID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEFkZCB0aGUgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBmb3JtIGNvbnRyb2xzIGluIHRoZSBtb2RhbC5cbiAqIEBwYXJhbSB7bW9kdWxlOnNldHRpbmdzTW9kYWx+U2V0dGluZ3NNb2RhbH0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uXG4gKiAgIHdoaWNoIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXJzKGluc3RhbmNlKSB7XG4gIGNvbnN0IHsgY29udHJvbHMgfSA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IGZpcmVFdmVudCA9IChpbnB1dCkgPT4gaW5wdXQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ2NoYW5nZScpKTtcblxuICBjb250cm9scy5kZWxldGVPbGQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICBjb250cm9scy5kZWxldGVBZnRlci5kaXNhYmxlZCA9ICFlLnRhcmdldC5jaGVja2VkO1xuICB9KTtcbiAgZmlyZUV2ZW50KGNvbnRyb2xzLmRlbGV0ZU9sZCk7XG5cbiAgLy8gTWFrZSBkZWxldGUtYWZ0ZXIgbGFiZWwgc2luZ3VsYXIvcGx1cmFsIGJhc2VkIG9uIHZhbHVlXG4gIGNvbnRyb2xzLmRlbGV0ZUFmdGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7XG4gICAgY29uc3QgY291bnQgPSBOdW1iZXIoZS50YXJnZXQudmFsdWUpO1xuICAgIGlmIChlLnRhcmdldC52YWx1ZS5sZW5ndGggPiAwICYmIE51bWJlci5pc0Zpbml0ZShjb3VudCkpIHtcbiAgICAgIGNvbnN0IGxhYmVsID0gY291bnQgPT09IDEgPyAnIGRheScgOiAnIGRheXMnO1xuICAgICAgY29udHJvbHMuZGVsZXRlQWZ0ZXJMYWJlbC50ZXh0Q29udGVudCA9IGxhYmVsO1xuICAgIH1cbiAgfSk7XG4gIGZpcmVFdmVudChjb250cm9scy5kZWxldGVBZnRlcik7XG59XG5cbi8qKlxuICogQSBtb2RhbCBkaWFsb2cgZm9yIG1vZGlmeWluZyB1c2VyIHNldHRpbmdzLlxuICogQGltcGxlbWVudHMge21vZHVsZTptb2RhbFN0YWNrfk1vZGFsfVxuICovXG5jbGFzcyBTZXR0aW5nc01vZGFsIHtcbiAgLyoqXG4gICAqIFNwZWNpZmllcyBvcHRpb25zIGZvciB0aGUgbW9kYWwuXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpzZXR0aW5nc01vZGFsflNldHRpbmdzTW9kYWx+b3B0aW9uc1xuICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY29uZmlybV0gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZFxuICAgKiAgIHdoZW4gdGhlIHVzZXIgc3VjY2Vzc2Z1bGx5IGNvbmZpcm1zIHRoZSBtb2RhbC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmVcbiAgICogICBwYXNzZWQgYSByZWZlcmVuY2UgdG8gdGhlIG1vZGlmaWVkIFtTZXR0aW5nc117bW9kdWxlOnNldHRpbmdzflNldHRpbmdzfVxuICAgKiAgIGluc3RhbmNlLlxuICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbY2FuY2VsXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkXG4gICAqICAgd2hlbiB0aGUgdXNlciBjYW5jZWxzIHRoZSBtb2RhbC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIG1vZGFsLlxuICAgKiBAcGFyYW0ge21vZHVsZTpzZXR0aW5nc35TZXR0aW5nc30gc2V0dGluZ3MgVGhlIGFwcCBzZXR0aW5ncyBiZWluZ1xuICAgKiAgIG1vZGlmaWVkLlxuICAgKiBAcGFyYW0ge21vZHVsZTpzZXR0aW5nc01vZGFsflNldHRpbmdzTW9kYWx+b3B0aW9uc30gW29wdGlvbnM9e31dIEhvbGRzXG4gICAqICAgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgbW9kYWwuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSB7XG4gICAgICBzZXR0aW5ncyxcbiAgICAgIG1vZGFsU3RhY2s6IG51bGwsXG4gICAgICBjb25maXJtTm9TdG9yYWdlOiB0cnVlLFxuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIGNvbmZpcm06IG9wdGlvbnMuY29uZmlybSB8fCBudWxsLFxuICAgICAgICBjYW5jZWw6IG9wdGlvbnMuY2FuY2VsIHx8IG51bGwsXG4gICAgICB9LFxuICAgICAgY29udHJvbHM6IHtcbiAgICAgICAgc2F2ZUxvY2FsOiBudWxsLFxuICAgICAgICBzYXZlTmV2ZXI6IG51bGwsXG4gICAgICAgIGRhdGVGb3JtYXQ6IG51bGwsXG4gICAgICAgIGRlbGV0ZU9sZDogbnVsbCxcbiAgICAgICAgZGVsZXRlQWZ0ZXI6IG51bGwsXG4gICAgICAgIGRlbGV0ZUFmdGVyTGFiZWw6IG51bGwsXG4gICAgICB9LFxuICAgIH07XG4gICAgcHJpdmF0ZU1lbWJlcnMuc2V0KHRoaXMsIHByaXZhdGVzKTtcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzIC0tXG4gICAqIE5lZWQgdG8gc2V0IHRpdGxlIHRvIGNvbmZvcm0gdG8gTW9kYWwgaW50ZXJmYWNlLCBidXQgc2V0dGluZyBwcm9wZXJ0eVxuICAgKiBkaXJlY3RseSBpbiBjb25zdHJ1Y3RvciB3b3VsZCBhbGxvdyBleHRlcm5hbCBtb2RpZmljYXRpb24uXG4gICAqL1xuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuICdFZGl0IFNldHRpbmdzJztcbiAgfVxuXG4gIGFkZENvbnRlbnQocGFyZW50LCBtb2RhbFN0YWNrKSB7XG4gICAgbGV0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWNvbnRhaW5lcicpO1xuXG4gICAgbGV0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbCcpO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ0RhdGEgU3RvcmFnZSc7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAncmFkaW8nLFxuICAgICAgaWQ6ICdzZXR0aW5ncy1zYXZlLWxvY2FsJyxcbiAgICAgIG5hbWU6ICdzZXR0aW5ncy1zYXZlLW1ldGhvZCcsXG4gICAgICB2YWx1ZTogJ2xvY2FsJyxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHZhbHVlOiAnU2F2ZSBkYXRhIGluIGJyb3dzZXJcXCdzIGxvY2FsIHN0b3JhZ2UgYXJlYScsXG4gICAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWxhYmVsLWlubGluZSddLFxuICAgICAgfSxcbiAgICAgIGNvbnRhaW5lcjogeyBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1pdGVtLWNvbnRhaW5lciddIH0sXG4gICAgfSkpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAncmFkaW8nLFxuICAgICAgaWQ6ICdzZXR0aW5ncy1zYXZlLW5ldmVyJyxcbiAgICAgIG5hbWU6ICdzZXR0aW5ncy1zYXZlLW1ldGhvZCcsXG4gICAgICB2YWx1ZTogJ25ldmVyJyxcbiAgICAgIGxhYmVsOiB7XG4gICAgICAgIHZhbHVlOiAnRG8gbm90IHNhdmUgZGF0YScsXG4gICAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWxhYmVsLWlubGluZSddLFxuICAgICAgfSxcbiAgICAgIGNvbnRhaW5lcjogeyBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1pdGVtLWNvbnRhaW5lciddIH0sXG4gICAgfSkpO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuXG4gICAgY29uc3QgZGF0ZUZvcm1hdHMgPSBbXG4gICAgICAnbG9jYWwnLFxuICAgICAgJ2lzbycsXG4gICAgICAnbW9udGgtZGF5LXllYXInLFxuICAgICAgJ2RheS1tb250aC15ZWFyJyxcbiAgICAgICd5ZWFyLW1vbnRoLWRheScsXG4gICAgXS5tYXAoKHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBmb3JtYXQgPSBTZXR0aW5ncy5sb29rdXBEYXRlRm9ybWF0KHZhbHVlKS52aXN1YWxQYXR0ZXJuO1xuICAgICAgbGV0IGRlc2NyaXB0aW9uO1xuICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlICdsb2NhbCc6XG4gICAgICAgICAgZGVzY3JpcHRpb24gPSAnTG9jYWwgRm9ybWF0JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaXNvJzpcbiAgICAgICAgICBkZXNjcmlwdGlvbiA9ICdJU08nO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtb250aC1kYXkteWVhcic6XG4gICAgICAgICAgZGVzY3JpcHRpb24gPSAnTW9udGgvRGF5L1llYXInO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdkYXktbW9udGgteWVhcic6XG4gICAgICAgICAgZGVzY3JpcHRpb24gPSAnRGF5L01vbnRoL1llYXInO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd5ZWFyLW1vbnRoLWRheSc6XG4gICAgICAgICAgZGVzY3JpcHRpb24gPSAnWWVhci9Nb250aC9EYXknO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyB2YWx1ZSwgbGFiZWw6IGAke2Rlc2NyaXB0aW9ufTogJHtmb3JtYXR9YCB9O1xuICAgIH0pO1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjcmVhdGVGb3JtQ29udHJvbCh7XG4gICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgIGlkOiAnc2V0dGluZ3MtZGF0ZS1mb3JtYXQnLFxuICAgICAgbmFtZTogJ3NldHRpbmdzLWRhdGUtZm9ybWF0JyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLXNlbGVjdCddLFxuICAgICAgbGFiZWw6IHsgdmFsdWU6ICdEYXRlIEZvcm1hdCcsIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWxhYmVsJ10gfSxcbiAgICAgIGNvbnRhaW5lcjogeyBjbGFzc0xpc3Q6IFsnZm9ybS1pbnB1dC1jb250YWluZXInXSB9LFxuICAgICAgbWVudUl0ZW1zOiBkYXRlRm9ybWF0cyxcbiAgICB9KSk7XG5cbiAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1jb250YWluZXInKTtcblxuICAgIGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbCcpO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ0FkZGl0aW9uYWwgT3B0aW9ucyc7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgIGNvbnN0IG9wdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG9wdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdmb3JtLWlucHV0LWl0ZW0tY29udGFpbmVyJyk7XG4gICAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICBpZDogJ3NldHRpbmdzLWRlbGV0ZS1vbGQtdGFza3MnLFxuICAgICAgbmFtZTogJ3NldHRpbmdzLWRlbGV0ZS10YXNrcycsXG4gICAgICB2YWx1ZTogJ2RlbGV0ZS1vbGQnLFxuICAgIH0pKTtcbiAgICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnKTtcbiAgICBsYWJlbC5odG1sRm9yID0gJ3NldHRpbmdzLWRlbGV0ZS1vbGQtdGFza3MnO1xuICAgIGxhYmVsLnRleHRDb250ZW50ID0gJ0RlbGV0ZSBjb21wbGV0ZWQgdGFza3MgYWZ0ZXIgJztcbiAgICBvcHRpb25Db250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgb3B0aW9uQ29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgaWQ6ICdzZXR0aW5ncy1kZWxldGUtYWZ0ZXInLFxuICAgICAgbmFtZTogJ3NldHRpbmdzLWRlbGV0ZS1hZnRlcicsXG4gICAgICB2YWx1ZTogJzE0JyxcbiAgICAgIGNsYXNzTGlzdDogWydmb3JtLWlucHV0LWlubGluZScsICdmb3JtLWlucHV0LWNvdW50J10sXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIG1pbjogMCxcbiAgICB9KSk7XG4gICAgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsYWJlbCcpO1xuICAgIGxhYmVsLmlkID0gJ3NldHRpbmdzLWRlbGV0ZS1hZnRlci1sYWJlbCc7XG4gICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUnKTtcbiAgICBsYWJlbC5odG1sRm9yID0gJ3NldHRpbmdzLWRlbGV0ZS1hZnRlcic7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSAnIGRheXMnO1xuICAgIG9wdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQob3B0aW9uQ29udGFpbmVyKTtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIHByaXZhdGVzLm1vZGFsU3RhY2sgPSBtb2RhbFN0YWNrO1xuXG4gICAgY29uc3QgeyBjb250cm9scyB9ID0gcHJpdmF0ZXM7XG4gICAgY29udHJvbHMuc2F2ZUxvY2FsID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZXR0aW5ncy1zYXZlLWxvY2FsJyk7XG4gICAgY29udHJvbHMuc2F2ZU5ldmVyID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZXR0aW5ncy1zYXZlLW5ldmVyJyk7XG4gICAgY29udHJvbHMuZGF0ZUZvcm1hdCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcjc2V0dGluZ3MtZGF0ZS1mb3JtYXQnKTtcbiAgICBjb250cm9scy5kZWxldGVPbGQgPSBwYXJlbnQucXVlcnlTZWxlY3RvcignI3NldHRpbmdzLWRlbGV0ZS1vbGQtdGFza3MnKTtcbiAgICBjb250cm9scy5kZWxldGVBZnRlciA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKCcjc2V0dGluZ3MtZGVsZXRlLWFmdGVyJyk7XG4gICAgY29udHJvbHMuZGVsZXRlQWZ0ZXJMYWJlbCA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgJyNzZXR0aW5ncy1kZWxldGUtYWZ0ZXItbGFiZWwnLFxuICAgICk7XG5cbiAgICBpbml0Rm9ybVZhbHVlcyh0aGlzKTtcbiAgICBhZGRMaXN0ZW5lcnModGhpcyk7XG4gIH1cblxuICBjb25maXJtKCkge1xuICAgIGNvbnN0IHsgY2FsbGJhY2tzLCBjb250cm9scywgc2V0dGluZ3MgfSA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcblxuICAgIGlmICghY29udHJvbHMuc2F2ZUxvY2FsLmRpc2FibGVkKSB7XG4gICAgICBzZXR0aW5ncy5zdG9yYWdlTWV0aG9kID0gY29udHJvbHMuc2F2ZUxvY2FsLmNoZWNrZWQgPyAnbG9jYWwnIDogJ25vbmUnO1xuICAgIH1cblxuICAgIHNldHRpbmdzLnNldERhdGVGb3JtYXQoY29udHJvbHMuZGF0ZUZvcm1hdC52YWx1ZSk7XG5cbiAgICBpZiAoY29udHJvbHMuZGVsZXRlT2xkLmNoZWNrZWQpIHtcbiAgICAgIHNldHRpbmdzLmRlbGV0ZUFmdGVyID0gTnVtYmVyKGNvbnRyb2xzLmRlbGV0ZUFmdGVyLnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0dGluZ3MuZGVsZXRlQWZ0ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFja3MuY29uZmlybSkgY2FsbGJhY2tzLmNvbmZpcm0oc2V0dGluZ3MpO1xuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIGNvbnN0IHsgY2FsbGJhY2tzIH0gPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrcy5jYW5jZWwpIGNhbGxiYWNrcy5jYW5jZWwoKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIGNvbnN0IHsgY29udHJvbHMsIG1vZGFsU3RhY2sgfSA9IHByaXZhdGVzO1xuXG4gICAgaWYgKGNvbnRyb2xzLmRlbGV0ZU9sZC5jaGVja2VkKSB7XG4gICAgICBpZiAoIWNvbnRyb2xzLmRlbGV0ZUFmdGVyLnJlcG9ydFZhbGlkaXR5KCkpIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBBc2sgZm9yIGNvbmZpcm1hdGlvbiB3aGVuIGRpc2FibGluZyBsb2NhbCBzdG9yYWdlXG4gICAgaWYgKHByaXZhdGVzLmNvbmZpcm1Ob1N0b3JhZ2VcbiAgICAgICYmICFjb250cm9scy5zYXZlTmV2ZXIuZGlzYWJsZWQgJiYgY29udHJvbHMuc2F2ZU5ldmVyLmNoZWNrZWQpIHtcbiAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENvbmZpcm1Nb2RhbChcbiAgICAgICAgJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkaXNhYmxlIGxvY2FsIHN0b3JhZ2U/IFlvdXIgZGF0YSB3aWxsIG5vdCBiZSBzYXZlZCBpbiB0aGUgYnJvd3NlciBhbmQgd2lsbCBiZSBsb3N0IGFmdGVyIHlvdSBsZWF2ZSB0aGlzIHBhZ2UuJyxcbiAgICAgICAge1xuICAgICAgICAgIGNvbmZpcm06ICgpID0+IHtcbiAgICAgICAgICAgIHByaXZhdGVzLmNvbmZpcm1Ob1N0b3JhZ2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gQ2xvc2Ugc2V0dGluZ3MgbW9kYWxcbiAgICAgICAgICAgIC8vIFVzaW5nIHNldFRpbWVvdXQgd2lsbCBsZXQgdXMgd2FpdCBmb3IgdGhlIGNvbmZpcm0gbW9kYWwgdG8gY2xvc2VcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gbW9kYWxTdGFjay5jb25maXJtTW9kYWwoKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnRyb2xzLnNhdmVMb2NhbC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgKTtcbiAgICAgIG1vZGFsU3RhY2suc2hvd01vZGFsKG1vZGFsKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZXR0aW5nc01vZGFsO1xuIiwiLyoqXG4gKiBEZWZpbmVzIHRoZSBbUG9wdXBNZW51XXtAbGluayBtb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX0gY2xhc3MuXG4gKiBAbW9kdWxlIHBvcHVwTWVudVxuICovXG5cbi8qKlxuICogT2JqZWN0IGhvbGRpbmcgcHJpdmF0ZSBtZW1iZXJzIGZvciB0aGVcbiAqIFtQb3B1cE1lbnVde0BsaW5rIG1vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fSBjbGFzcy5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fnByaXZhdGVzXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBwYXJlbnQgVGhlIHBhcmVudCBlbGVtZW50IGluIHRoZSBET00gdW5kZXIgd2hpY2ggdGhlXG4gKiAgIHBvcHVwIG1lbnUgc2hvdWxkIGJlIGluc2VydGVkLlxuICogQHByb3BlcnR5IHttb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX5tZW51SXRlbVtdfSBtZW51SXRlbXMgQW4gYXJyYXkgb2ZcbiAqICAgb2JqZWN0cyBzcGVjaWZ5aW5nIHRoZSBpdGVtcyBpbiB0aGUgbWVudS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbYWN0aXZlSXRlbV0gSG9sZHMgdGhlIGluZGV4IG9mIHRoZSBhY3RpdmUgKGZvY3VzZWQpIG1lbnVcbiAqICAgaXRlbSwgaWYgYW55LlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gW2NvbnRhaW5lcl0gVGhlIGNvbnRhaW5lciBlbGVtZW50IGhvbGRpbmcgdGhlIG1lbnUuXG4gKiAgIFdpbGwgYmUgbnVsbCB3aGVuIHRoZSBtZW51IGlzIGhpZGRlbi5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IFtvdmVybGF5XSBUaGUgZWxlbWVudCB0aGF0IHdpbGwgb3ZlcmxheSB0aGVcbiAqICAgYmFja2dyb3VuZCBvZiB0aGUgbWVudS4gV2lsbCBiZSBudWxsIHdoZW4gdGhlIG1lbnUgaXMgaGlkZGVuLlxuICogQHByb3BlcnR5IHttb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX5zZWxlY3Rpb25DYWxsYmFja30gW2NhbGxiYWNrXSBIb2xkc1xuICogICB0aGUgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBtZW51IGl0ZW0uIFRoaXMgd2lsbCBiZVxuICogICBudWxsIHdoZW4gdGhlIG1lbnUgaXMgY2xvc2VkLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZXZlbnRMaXN0ZW5lciBBbiBldmVudCBsaXN0ZW5lciB0byBtb25pdG9yXG4gKiAgIGRvY3VtZW50LXdpZGUgbW91c2UgYW5kIGtleWJvYXJkIGV2ZW50cy4gTmVlZHMgdG8gYmUgc3RvcmVkIHNvIHRoYXQgaXQgY2FuXG4gKiAgIGJlIGxhdGVyIHJlbW92ZWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW3Njcm9sbFRpbWVvdXRdIEFuIGlkZW50aWZpZXIgZm9yIGEgdGltZW91dCB1c2VkIHRvXG4gKiAgIGRlYm91bmNlIHNjcm9sbCBldmVudHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IFtzY3JvbGxUYXJnZXRdIEFuIGVsZW1lbnQgdG8gbW9uaXRvciBmb3Igc2Nyb2xsXG4gKiAgIGV2ZW50cy4gSWYgdGhlIGVsZW1lbnQgaXMgc2Nyb2xsZWQsIHRoZW4gdGhlIHBvcHVwIG1lbnUgd2lsbCBiZSBjbG9zZWQuXG4gKi9cblxuLyoqXG4gKiBIb2xkcyBwcml2YXRlIGRhdGEgZm9yIHRoZSBbUG9wdXBNZW51XXtAbGluayBtb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX1cbiAqIGNsYXNzLlxuICogQHR5cGUge1dlYWtNYXB9XG4gKiBAc2VlIG1vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fnByaXZhdGVzXG4gKi9cbmNvbnN0IHByaXZhdGVNZW1iZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuLyoqXG4gKiBQb3NpdGlvbiB0aGUgcG9wdXAgbWVudSBhdCBhIHBhcnRpY3VsYXIgbG9jYXRpb24uXG4gKiBAcGFyYW0ge21vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG9cbiAqICAgYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHttb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX5wb3NpdGlvbn0gW3Bvc2l0aW9uPXt9XSBBbiBvYmplY3RcbiAqICAgc3BlY2lmeWluZyB0aGUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50IGF0IHdoaWNoIHRvIHBsYWNlIHRoZSBtZW51LlxuICovXG5mdW5jdGlvbiBwb3NpdGlvbk1lbnUoaW5zdGFuY2UsIHBvc2l0aW9uID0ge30pIHtcbiAgY29uc3QgeyBjb250YWluZXIgfSA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIGNvbnN0IHdpZHRoID0gY29udGFpbmVyLm9mZnNldFdpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xuXG4gIGxldCBsZWZ0ID0gMDtcbiAgbGV0IHRvcCA9IDA7XG4gIGlmIChwb3NpdGlvbi5yZWZlcmVuY2VFbGVtZW50KSB7XG4gICAgY29uc3QgcmVjdCA9IHBvc2l0aW9uLnJlZmVyZW5jZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGVmdCA9IHJlY3QubGVmdDtcbiAgICB0b3AgPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGlmICgnbGVmdCcgaW4gcG9zaXRpb24pIGxlZnQgPSBwb3NpdGlvbi5sZWZ0O1xuICAgIGlmICgndG9wJyBpbiBwb3NpdGlvbikgdG9wID0gcG9zaXRpb24udG9wO1xuICB9XG5cbiAgY29uc3QgTUFSR0lOID0gNDtcbiAgY29uc3QgYm9keVdpZHRoID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aDtcbiAgY29uc3QgYm9keUhlaWdodCA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmIChsZWZ0ICsgd2lkdGggKyBNQVJHSU4gPiBib2R5V2lkdGgpIGxlZnQgPSBib2R5V2lkdGggLSAod2lkdGggKyBNQVJHSU4pO1xuICBpZiAodG9wICsgaGVpZ2h0ICsgTUFSR0lOID4gYm9keUhlaWdodCkgdG9wID0gYm9keUhlaWdodCAtIChoZWlnaHQgKyBNQVJHSU4pO1xuXG4gIGlmIChsZWZ0IDwgMCkgbGVmdCA9IDA7XG4gIGlmICh0b3AgPCAwKSB0b3AgPSAwO1xuXG4gIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gYCR7bGVmdH1weGA7XG4gIGNvbnRhaW5lci5zdHlsZS50b3AgPSBgJHt0b3B9cHhgO1xufVxuXG4vKipcbiAqIFNlbGVjdCBhbiBpdGVtIGluIHRoZSBtZW51LlxuICogQHBhcmFtIHttb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoIHRvXG4gKiAgIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIG1lbnUgaXRlbS5cbiAqL1xuZnVuY3Rpb24gc2VsZWN0SXRlbShpbnN0YW5jZSwgaW5kZXgpIHtcbiAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQoaW5zdGFuY2UpO1xuICBwcml2YXRlcy5jYWxsYmFjayhwcml2YXRlcy5tZW51SXRlbXNbaW5kZXhdLmlkLCBpbmRleCk7XG4gIGluc3RhbmNlLmNsb3NlKCk7XG59XG5cbi8qKlxuICogR2V0IHRoZSBsaXN0IGl0ZW0gSFRNTCBlbGVtZW50IGZvciBhIG1lbnUgaXRlbS5cbiAqIEBwYXJhbSB7bW9kdWxlOnBvcHVwTWVudX5Qb3B1cE1lbnV9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaCB0b1xuICogICBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBtZW51IGl0ZW0gdG8gZmluZC5cbiAqIEByZXR1cm5zIHs/SFRNTEVsZW1lbnR9IFRoZSBsaXN0IGl0ZW0gZWxlbWVudCBpZiBpdCBleGlzdHMsIG9yIG51bGwgaWYgaXRcbiAqICAgZG9lcyBub3QuXG4gKi9cbmZ1bmN0aW9uIGdldEl0ZW0oaW5zdGFuY2UsIGluZGV4KSB7XG4gIGNvbnN0IHNlbGVjdG9yID0gYC5wb3B1cC1tZW51LWl0ZW1bZGF0YS1pbmRleD1cIiR7aW5kZXh9XCJdYDtcbiAgcmV0dXJuIHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSkuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xufVxuXG4vKipcbiAqIEZvY3VzIGFuIGl0ZW0gaW4gdGhlIG1lbnUuXG4gKiBAcGFyYW0ge21vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG9cbiAqICAgYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHs/bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIG1lbnUgaXRlbSB0byBmb2N1cy4gSWYgc2V0IHRvIG51bGwsXG4gKiAgIHRoZW4gbm8gZm9jdXMgd2lsbCBiZSBzZXQgYW5kIGFueSBleGlzdGluZyBmb2N1cyBpcyBjbGVhcmVkLlxuICovXG5mdW5jdGlvbiBmb2N1c0l0ZW0oaW5zdGFuY2UsIGluZGV4KSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcbiAgaWYgKGluZGV4ID09PSBwcml2YXRlcy5hY3RpdmVJdGVtKSByZXR1cm47XG5cbiAgaWYgKHByaXZhdGVzLmFjdGl2ZUl0ZW0gIT09IG51bGwpIHtcbiAgICBjb25zdCBpdGVtID0gZ2V0SXRlbShpbnN0YW5jZSwgcHJpdmF0ZXMuYWN0aXZlSXRlbSk7XG4gICAgaWYgKGl0ZW0pIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgcHJpdmF0ZXMuYWN0aXZlSXRlbSA9IG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgIGNvbnN0IGl0ZW0gPSBnZXRJdGVtKGluc3RhbmNlLCBpbmRleCk7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHByaXZhdGVzLmFjdGl2ZUl0ZW0gPSBpbmRleDtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSGFuZGxlIGEgbW91c2Ugb3Iga2V5Ym9hcmQgZXZlbnQuXG4gKiBAcGFyYW0ge21vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fSBpbnN0YW5jZSBUaGUgY2xhc3MgaW5zdGFuY2Ugb24gd2hpY2ggdG9cbiAqICAgYXBwbHkgdGhlIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhlIGV2ZW50IHRoYXQgb2NjdXJyZWQuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUV2ZW50KGluc3RhbmNlLCBldmVudCkge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgIGNhc2UgJ21vdXNlZG93bic6XG4gICAgICAvLyBDbG9zZSBwb3B1cCBpZiBtb3VzZSB3YXMgY2xpY2tlZCBvdXRzaWRlXG4gICAgICBpZiAoIXByaXZhdGVzLmNvbnRhaW5lci5jb250YWlucyhldmVudC50YXJnZXQpKSBpbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAna2V5ZG93bic6IHtcbiAgICAgIGxldCBwcmV2ZW50RGVmYXVsdCA9IHRydWU7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleSkge1xuICAgICAgICBjYXNlICdFc2NhcGUnOlxuICAgICAgICBjYXNlICdFc2MnOlxuICAgICAgICBjYXNlICdUYWInOlxuICAgICAgICAgIGluc3RhbmNlLmNsb3NlKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgIGNhc2UgJ1NwYWNlYmFyJzpcbiAgICAgICAgICBpZiAocHJpdmF0ZXMuYWN0aXZlSXRlbSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2VsZWN0SXRlbShpbnN0YW5jZSwgcHJpdmF0ZXMuYWN0aXZlSXRlbSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgY2FzZSAnVXAnOiB7XG4gICAgICAgICAgY29uc3QgYWN0aXZlID0gcHJpdmF0ZXMuYWN0aXZlSXRlbTtcbiAgICAgICAgICBjb25zdCBpdGVtQ291bnQgPSBwcml2YXRlcy5tZW51SXRlbXMubGVuZ3RoO1xuICAgICAgICAgIGxldCBpbmRleCA9IG51bGw7XG4gICAgICAgICAgaWYgKGFjdGl2ZSAhPT0gbnVsbCkgaW5kZXggPSBhY3RpdmUgPiAwID8gYWN0aXZlIC0gMSA6IGl0ZW1Db3VudCAtIDE7XG4gICAgICAgICAgZWxzZSBpZiAoaXRlbUNvdW50ID4gMCkgaW5kZXggPSBpdGVtQ291bnQgLSAxO1xuICAgICAgICAgIGZvY3VzSXRlbShpbnN0YW5jZSwgaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgIGNhc2UgJ0Rvd24nOiB7XG4gICAgICAgICAgY29uc3QgYWN0aXZlID0gcHJpdmF0ZXMuYWN0aXZlSXRlbTtcbiAgICAgICAgICBjb25zdCBpdGVtQ291bnQgPSBwcml2YXRlcy5tZW51SXRlbXMubGVuZ3RoO1xuICAgICAgICAgIGxldCBpbmRleCA9IG51bGw7XG4gICAgICAgICAgaWYgKGFjdGl2ZSAhPT0gbnVsbCkgaW5kZXggPSBhY3RpdmUgPCBpdGVtQ291bnQgLSAxID8gYWN0aXZlICsgMSA6IDA7XG4gICAgICAgICAgZWxzZSBpZiAoaXRlbUNvdW50ID4gMCkgaW5kZXggPSAwO1xuICAgICAgICAgIGZvY3VzSXRlbShpbnN0YW5jZSwgaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcHJldmVudERlZmF1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlICdzY3JvbGwnOiB7XG4gICAgICBpZiAocHJpdmF0ZXMuc2Nyb2xsVGltZW91dCkgY2xlYXJUaW1lb3V0KHByaXZhdGVzLnNjcm9sbFRpbWVvdXQpO1xuXG4gICAgICBwcml2YXRlcy5zY3JvbGxUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByaXZhdGVzLnNjcm9sbFRpbWVvdXQgPSBudWxsO1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNvbnRhaW5zKHByaXZhdGVzLnNjcm9sbFRhcmdldCkpIGluc3RhbmNlLmNsb3NlKCk7XG4gICAgICB9LCAxMDApO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxufVxuXG4vKipcbiAqIEEgcG9wdXAgbWVudS5cbiAqL1xuY2xhc3MgUG9wdXBNZW51IHtcbiAgLyoqXG4gICAqIEFuIG9iamVjdCBob2xkaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIHBvcHVwIG1lbnUuXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fm9wdGlvbnNcbiAgICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gW3BhcmVudD1kb2N1bWVudC5ib2R5XSBUaGUgcGFyZW50IGVsZW1lbnQgaW4gdGhlXG4gICAqICAgRE9NIHVuZGVyIHdoaWNoIHRoZSBwb3B1cCBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOnBvcHVwTWVudX5Qb3B1cE1lbnV+bWVudUl0ZW1bXX0gW21lbnVJdGVtc10gQW4gYXJyYXkgb2ZcbiAgICogICBvYmplY3RzIHNwZWNpZnlpbmcgdGhlIGl0ZW1zIGluIHRoZSBtZW51LlxuICAgKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBbY2xvc2VJZlNjcm9sbGVkXSBJZiBwcm92aWRlZCwgdGhlIHBvcHVwIG1lbnUgd2lsbFxuICAgKiAgIGJlIGNsb3NlZCB3aGVuIHRoZSBnaXZlbiBlbGVtZW50IG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGlzIHNjcm9sbGVkLlxuICAgKi9cblxuICAvKipcbiAgICogQSBtZW51IGl0ZW0gaW4gdGhlIHBvcHVwLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX5tZW51SXRlbVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gbGFiZWwgVGhlIHRleHQgbGFiZWwgdGhhdCB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGVcbiAgICogICBtZW51LlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gaWQgQW4gaWRlbnRpZmllciBmb3IgdGhlIG1lbnUgaXRlbS4gVGhpcyB3aWxsIGJlIHBhc3NlZFxuICAgKiAgIHRvIGNhbGxiYWNrcy5cbiAgICogQHByb3BlcnR5IHtPYmplY3R9IFtpY29uXSBBbiBvYmplY3Qgc3BlY2lmeWluZyBpbmZvcm1hdGlvbiBhYm91dCBhbiBpY29uXG4gICAqICAgdG8gZGlzcGxheSBuZXh0IHRvIHRoZSBtZW51IGl0ZW0uXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpY29uLnNvdXJjZSBUaGUgc291cmNlIFVSTCBmb3IgdGhlIGljb24uXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbaWNvbi53aWR0aF0gVGhlIHdpZHRoIG9mIHRoZSBpY29uIGluIHBpeGVscy5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtpY29uLmhlaWdodF0gVGhlIGhlaWdodCBvZiB0aGUgaWNvbiBpbiBwaXhlbHMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgZGVzY3JpYmluZyBob3cgdGhlIHBvcHVwIHNob3VsZCBiZSBwb3NpdGlvbmVkLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX5wb3NpdGlvblxuICAgKiBAcHJvcGVydHkge251bWJlcn0gW2xlZnQ9MF0gVGhlIHBvc2l0aW9uIG9mIHRoZSBsZWZ0IHNpZGUgb2YgdGhlIHBvcHVwLCBpblxuICAgKiAgIHBpeGVscywgcmVsYXRpdmUgdG8gdGhlIGxlZnQgZWRnZSBvZiB0aGUgZG9jdW1lbnQuIFRoaXMgcHJvcGVydHkgaXNcbiAgICogICBpZ25vcmVkIGlmIHRoZSByZWZlcmVuY2VFbGVtZW50IHByb3BlcnR5IGlzIHNldC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IFt0b3A9MF0gVGhlIHBvc2l0aW9uIG9mIHRoZSB0b3Agb2YgdGhlIHBvcHVwLCBpblxuICAgKiAgIHBpeGVscywgcmVsYXRpdmUgdG8gdGhlIHRvcCBvZiB0aGUgZG9jdW1lbnQuIFRoaXMgcHJvcGVydHkgaXMgaWdub3JlZCBpZlxuICAgKiAgIHRoZSByZWZlcmVuY2VFbGVtZW50IHByb3BlcnR5IGlzIHNldC5cbiAgICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gW3JlZmVyZW5jZUVsZW1lbnRdIEFuIGVsZW1lbnQgaW4gdGhlIERPTSB3aG9zZVxuICAgKiAgIHBvc2l0aW9uIGlzIHRvIGJlIHVzZWQgZm9yIGRldGVybWluaW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgcG9wdXAuIElmXG4gICAqICAgZ2l2ZW4sIHRoZSBwb3B1cCB3aWxsIGJlIHBvc2l0aW9uZWQganVzdCB1bmRlcm5lYXRoIHRoZSBlbGVtZW50LlxuICAgKi9cblxuICAvKipcbiAgICogQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBtZW51XG4gICAqIGl0ZW0uXG4gICAqIEBjYWxsYmFjayBtb2R1bGU6cG9wdXBNZW51flBvcHVwTWVudX5zZWxlY3Rpb25DYWxsYmFja1xuICAgKiBAcGFyYW0gaXRlbUlkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBtZW51IGl0ZW0gdGhhdCB3YXMgc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIG1lbnUgaXRlbSB0aGF0IHdhcyBzZWxlY3RlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHBvcHVwIG1lbnUuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnBvcHVwTWVudX5Qb3B1cE1lbnV+b3B0aW9uc30gW29wdGlvbnM9e31dIEFuIG9iamVjdCBob2xkaW5nXG4gICAqICAgYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgcG9wdXAgbWVudS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgcGFyZW50OiBvcHRpb25zLnBhcmVudCB8fCBkb2N1bWVudC5ib2R5LFxuICAgICAgbWVudUl0ZW1zOiBvcHRpb25zLm1lbnVJdGVtcyB8fCBbXSxcbiAgICAgIGFjdGl2ZUl0ZW06IG51bGwsXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICBvdmVybGF5OiBudWxsLFxuICAgICAgY2FsbGJhY2s6IG51bGwsXG4gICAgICBldmVudExpc3RlbmVyOiAoZSkgPT4gaGFuZGxlRXZlbnQodGhpcywgZSksXG4gICAgICBzY3JvbGxUaW1lb3V0OiBudWxsLFxuICAgICAgc2Nyb2xsVGFyZ2V0OiBvcHRpb25zLmNsb3NlSWZTY3JvbGxlZCB8fCBudWxsLFxuICAgIH07XG4gICAgcHJpdmF0ZU1lbWJlcnMuc2V0KHRoaXMsIHByaXZhdGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciBvciBub3QgdGhlIHBvcHVwIG1lbnUgaXMgY3VycmVudGx5IG9wZW4uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwb3B1cCBtZW51IGlzIG9wZW4sIG9yIGZhbHNlIGlmIGl0IGlzXG4gICAqICAgY2xvc2VkLlxuICAgKi9cbiAgaXNPcGVuKCkge1xuICAgIHJldHVybiBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuY29udGFpbmVyICE9PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW4gdGhlIHBvcHVwIG1lbnUgYXQgYSBwYXJ0aWN1bGFyIHBvc2l0aW9uLlxuICAgKiBAcGFyYW0ge21vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fnNlbGVjdGlvbkNhbGxiYWNrfSBjYWxsYmFjayBBIGNhbGxiYWNrXG4gICAqICAgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgdXNlciBjaG9vc2VzIGEgbWVudSBpdGVtLlxuICAgKiBAcGFyYW0ge21vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fnBvc2l0aW9ufSBbcG9zaXRpb25dIEFuIG9iamVjdFxuICAgKiAgIHNwZWNpZnlpbmcgdGhlIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCBhdCB3aGljaCB0byBwbGFjZSB0aGUgbWVudS4gSWZcbiAgICogICBub3QgZ2l2ZW4sIHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgZG9jdW1lbnQgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgb3BlbihjYWxsYmFjaywgcG9zaXRpb24pIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBpZiAocHJpdmF0ZXMuY29udGFpbmVyKSB0aGlzLmNsb3NlKCk7XG4gICAgaWYgKHByaXZhdGVzLm1lbnVJdGVtcy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBvdmVybGF5LmNsYXNzTGlzdC5hZGQoJ3BvcHVwLW1lbnUtb3ZlcmxheScpO1xuICAgIHByaXZhdGVzLnBhcmVudC5hcHBlbmRDaGlsZChvdmVybGF5KTtcbiAgICBwcml2YXRlcy5vdmVybGF5ID0gb3ZlcmxheTtcblxuICAgIGNvbnN0IG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBtZW51LmNsYXNzTGlzdC5hZGQoJ3BvcHVwLW1lbnUnKTtcblxuICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpO1xuICAgIG1lbnUuYXBwZW5kQ2hpbGQobGlzdCk7XG4gICAgcHJpdmF0ZXMubWVudUl0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICBsaXN0SXRlbS5jbGFzc0xpc3QuYWRkKCdwb3B1cC1tZW51LWl0ZW0nKTtcbiAgICAgIGxpc3RJdGVtLmRhdGFzZXQuaW5kZXggPSBpbmRleC50b1N0cmluZygpO1xuICAgICAgbGlzdC5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XG5cbiAgICAgIGlmIChpdGVtLmljb24pIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpY29uLnNyYyA9IGl0ZW0uaWNvbi5zb3VyY2U7XG4gICAgICAgIGljb24uYWx0ID0gJyc7XG4gICAgICAgIGljb24uY2xhc3NMaXN0LmFkZCgncG9wdXAtbWVudS1pdGVtLWljb24nKTtcbiAgICAgICAgaWYgKGl0ZW0uaWNvbi53aWR0aCAhPSBudWxsKSBpY29uLndpZHRoID0gaXRlbS5pY29uLndpZHRoO1xuICAgICAgICBpZiAoaXRlbS5pY29uLmhlaWdodCAhPSBudWxsKSBpY29uLmhlaWdodCA9IGl0ZW0uaWNvbi5oZWlnaHQ7XG4gICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGljb24pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZCgncG9wdXAtbWVudS1pdGVtLWxhYmVsJyk7XG4gICAgICBsYWJlbC50ZXh0Q29udGVudCA9IGl0ZW0ubGFiZWw7XG4gICAgICBsaXN0SXRlbS5hcHBlbmRDaGlsZChsYWJlbCk7XG5cbiAgICAgIGxpc3RJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gc2VsZWN0SXRlbSh0aGlzLCBpbmRleCkpO1xuICAgICAgbGlzdEl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgKCkgPT4gZm9jdXNJdGVtKHRoaXMsIGluZGV4KSk7XG4gICAgfSk7XG5cbiAgICBtZW51LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiBmb2N1c0l0ZW0odGhpcywgbnVsbCkpO1xuXG4gICAgcHJpdmF0ZXMuY29udGFpbmVyID0gbWVudTtcbiAgICBwcml2YXRlcy5wYXJlbnQuYXBwZW5kQ2hpbGQobWVudSk7XG4gICAgcHJpdmF0ZXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgIHBvc2l0aW9uTWVudSh0aGlzLCBwb3NpdGlvbik7XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBwcml2YXRlcy5ldmVudExpc3RlbmVyKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgcHJpdmF0ZXMuZXZlbnRMaXN0ZW5lcik7XG4gICAgaWYgKHByaXZhdGVzLnNjcm9sbFRhcmdldCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgcHJpdmF0ZXMuZXZlbnRMaXN0ZW5lciwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlIHRoZSBwb3B1cCBtZW51IGlmIGl0IGlzIG9wZW4uXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBpZiAocHJpdmF0ZXMuY29udGFpbmVyKSB7XG4gICAgICBwcml2YXRlcy5wYXJlbnQucmVtb3ZlQ2hpbGQocHJpdmF0ZXMuY29udGFpbmVyKTtcbiAgICAgIHByaXZhdGVzLnBhcmVudC5yZW1vdmVDaGlsZChwcml2YXRlcy5vdmVybGF5KTtcbiAgICAgIHByaXZhdGVzLmFjdGl2ZUl0ZW0gPSBudWxsO1xuICAgICAgcHJpdmF0ZXMuY29udGFpbmVyID0gbnVsbDtcbiAgICAgIHByaXZhdGVzLm92ZXJsYXkgPSBudWxsO1xuICAgICAgcHJpdmF0ZXMuY2FsbGJhY2sgPSBudWxsO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgcHJpdmF0ZXMuZXZlbnRMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgcHJpdmF0ZXMuZXZlbnRMaXN0ZW5lcik7XG4gICAgICBpZiAocHJpdmF0ZXMuc2Nyb2xsVGFyZ2V0KSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHByaXZhdGVzLmV2ZW50TGlzdGVuZXIsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGUgdGhlIHN0YXRlIG9mIHRoZSBwb3B1cDogaWYgdGhlIG1lbnUgaXMgY2xvc2VkLCBpdCB3aWxsIGJlIG9wZW5lZC5cbiAgICogSWYgdGhlIG1lbnUgaXMgb3BlbiwgaXQgd2lsbCBiZSBjbG9zZWQuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnBvcHVwTWVudX5Qb3B1cE1lbnV+c2VsZWN0aW9uQ2FsbGJhY2t9IGNhbGxiYWNrIEEgY2FsbGJhY2tcbiAgICogICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNob29zZXMgYSBtZW51IGl0ZW0uXG4gICAqIEBwYXJhbSB7bW9kdWxlOnBvcHVwTWVudX5Qb3B1cE1lbnV+cG9zaXRpb259IFtwb3NpdGlvbl0gQW4gb2JqZWN0XG4gICAqICAgc3BlY2lmeWluZyB0aGUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50IGF0IHdoaWNoIHRvIHBsYWNlIHRoZSBtZW51LiBJZlxuICAgKiAgIG5vdCBnaXZlbiwgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQuXG4gICAqL1xuICB0b2dnbGUoY2FsbGJhY2ssIHBvc2l0aW9uKSB7XG4gICAgaWYgKHRoaXMuaXNPcGVuKCkpIHRoaXMuY2xvc2UoKTtcbiAgICBlbHNlIHRoaXMub3BlbihjYWxsYmFjaywgcG9zaXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbWVudSBpdGVtcyB0aGF0IHdpbGwgYmUgc2hvd24gdGhlIG5leHQgdGltZSB0aGUgcG9wdXAgbWVudSBpc1xuICAgKiBvcGVuZWQuIElmIHRoZSBwb3B1cCBtZW51IGlzIGN1cnJlbnRseSBvcGVuLCB0aGUgZGlzcGxheWVkIGl0ZW1zIHdpbGwgbm90XG4gICAqIGJlIGFsdGVyZWQgdW50aWwgdGhlIG1lbnUgaXMgcmVvcGVuZWQuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnBvcHVwTWVudX5Qb3B1cE1lbnV+bWVudUl0ZW1bXX0gbWVudUl0ZW1zIFRoZSBhcnJheSBvZiBtZW51XG4gICAqICAgaXRlbXMuXG4gICAqL1xuICBzZXRNZW51SXRlbXMobWVudUl0ZW1zKSB7XG4gICAgcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLm1lbnVJdGVtcyA9IG1lbnVJdGVtcztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb3B1cE1lbnU7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtQcm9qZWN0XXtAbGluayBtb2R1bGU6cHJvamVjdH5Qcm9qZWN0fSBjbGFzcy5cbiAqIEBtb2R1bGUgcHJvamVjdFxuICovXG5cbi8qKlxuICogSG9sZHMgaW5mb3JtYXRpb24gYWJvdXQgYSB1c2VyIHByb2plY3QuXG4gKi9cbmNsYXNzIFByb2plY3Qge1xuICAvKipcbiAgICogQ3JlYXRlIGEgcHJvamVjdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb2plY3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IGhvbGRpbmcgYWRkaXRpb25hbCBwcm9qZWN0IG9wdGlvbnMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kZXNjcmlwdGlvbl0gQSBkZXNjcmlwdGlvbiBmb3IgdGhlIHByb2plY3QuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgcHJvamVjdC5cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBBIGRlc2NyaXB0aW9uIGZvciB0aGUgcHJvamVjdC5cbiAgICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gb3B0aW9ucy5kZXNjcmlwdGlvbiA/PyBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHByb2plY3QgZnJvbSBhIEpTT04gb2JqZWN0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgSlNPTiBvYmplY3QgaG9sZGluZyB0aGUgc2VyaWFsaXplZCBkYXRhLlxuICAgKiBAcmV0dXJucyB7bW9kdWxlOnByb2plY3R+UHJvamVjdH0gQSBuZXcgcHJvamVjdCBjb252ZXJ0ZWQgZnJvbSB0aGUgSlNPTlxuICAgKiAgIGRhdGEuXG4gICAqL1xuICBzdGF0aWMgZnJvbUpzb24oZGF0YSkge1xuICAgIHJldHVybiBuZXcgUHJvamVjdChkYXRhLm5hbWUsIHsgZGVzY3JpcHRpb246IGRhdGEuZGVzY3JpcHRpb24gfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdDtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgW1Byb2plY3RMaXN0XXtAbGluayBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IGNsYXNzLlxuICogQG1vZHVsZSBwcm9qZWN0TGlzdFxuICovXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB2NCBhcyBnZW5lcmF0ZVV1aWQgfSBmcm9tICd1dWlkJztcblxuaW1wb3J0IFByb2plY3QgZnJvbSAnLi9wcm9qZWN0JztcbmltcG9ydCB7IGdldEpzb25UeXBlLCBpc1V1aWRWYWxpZCwgdmFsaWRhdGVWYWx1ZSB9IGZyb20gJy4vdXRpbGl0eS9kYXRhJztcblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW1Byb2plY3RMaXN0XXtAbGluayBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fnByaXZhdGVzXG4gKiBAcHJvcGVydHkge21vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH5wcm9qZWN0V3JhcHBlcltdfSBwcm9qZWN0cyBBblxuICogICBhcnJheSBvZiBwcm9qZWN0cy4gRWFjaCBlbGVtZW50IGluIHRoZSBhcnJheSBpcyBhIHdyYXBwZXIgdGhhdCBob2xkcyB0aGVcbiAqICAgcHJvamVjdCBhbG9uZyB3aXRoIGl0cyB1bmlxdWUgaWRlbnRpZmllci5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fmV2ZW50RW1pdHRlcn0gSG9sZHMgdGhlIGV2ZW50XG4gKiAgIGVtaXR0ZXIgd2hpY2ggZGlzcGF0Y2hlcyBldmVudHMgdG8gYXR0YWNoZWQgbGlzdGVuZXJzLlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZSBkYXRhIGZvciB0aGVcbiAqIFtQcm9qZWN0TGlzdF17QGxpbmsgbW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fSBjbGFzcy5cbiAqIEB0eXBlIHtXZWFrTWFwfVxuICogQHNlZSBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+cHJpdmF0ZXNcbiAqL1xuY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIEdldCBhIHByb2plY3QncyBpbmRleCBpbiB0aGUgcHJvamVjdCBsaXN0LlxuICogQHBhcmFtIHttb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaFxuICogICB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBwcm9qZWN0IHRvIGxvb2sgdXAuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgaW5kZXggb2YgdGhlIHByb2plY3QsIG9yIC0xIGlmIG5vdCBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gZmluZEluZGV4KGluc3RhbmNlLCBpZCkge1xuICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKS5wcm9qZWN0cy5maW5kSW5kZXgoKGVudHJ5KSA9PiAoXG4gICAgZW50cnkuaWQgPT09IGlkXG4gICkpO1xufVxuXG4vKipcbiAqIEhvbGRzIGEgbGlzdCBvZiBwcm9qZWN0cy5cbiAqL1xuY2xhc3MgUHJvamVjdExpc3Qge1xuICAvKipcbiAgICogV3JhcHBlciBvYmplY3QgaG9sZGluZyBhIHByb2plY3QgYWxvbmcgd2l0aCBpdHMgVVVJRC5cbiAgICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fnByb2plY3RXcmFwcGVyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBwcm9qZWN0LlxuICAgKiBAcHJvcGVydHkge21vZHVsZTpwcm9qZWN0flByb2plY3R9IHByb2plY3QgVGhlIHByb2plY3QgaW5zdGFuY2UuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFdmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSBwcm9qZWN0IGlzIGFkZGVkIHRvIHRoZSBwcm9qZWN0IGxpc3QuXG4gICAqIEBldmVudCBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+YWRkUHJvamVjdFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZTogJ2FkZC1wcm9qZWN0Jy5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgbmV3bHktYWRkZWQgcHJvamVjdC5cbiAgICogQHByb3BlcnR5IHttb2R1bGU6cHJvamVjdH5Qcm9qZWN0fSBwcm9qZWN0IEEgY29weSBvZiB0aGUgbmV3bHktYWRkZWRcbiAgICogICBwcm9qZWN0LlxuICAgKi9cblxuICAvKipcbiAgICogRXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgcHJvamVjdCBpbiB0aGUgbGlzdCBpcyBtb2RpZmllZC5cbiAgICogQGV2ZW50IG1vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH51cGRhdGVQcm9qZWN0XG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlOiAndXBkYXRlLXByb2plY3QnLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgdXBkYXRlZCBwcm9qZWN0LlxuICAgKiBAcHJvcGVydHkge21vZHVsZTpwcm9qZWN0flByb2plY3R9IHByb2plY3QgQSBjb3B5IG9mIHRoZSB1cGRhdGVkIHByb2plY3QuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFdmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSBwcm9qZWN0IGluIHRoZSBsaXN0IGlzIGRlbGV0ZWQuXG4gICAqIEBldmVudCBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+ZGVsZXRlUHJvamVjdFxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZTogJ2RlbGV0ZS1wcm9qZWN0Jy5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGRlbGV0ZWQgcHJvamVjdC5cbiAgICogQHByb3BlcnR5IHttb2R1bGU6cHJvamVjdH5Qcm9qZWN0fSBwcm9qZWN0IEEgY29weSBvZiB0aGUgZGVsZXRlZCBwcm9qZWN0LlxuICAgKi9cblxuICAvKipcbiAgICogQW4gb2JqZWN0IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN0YXR1cyBvZiBhIGRhdGEgaW1wb3J0LlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+aW1wb3J0U3RhdHVzXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBwcm9qZWN0cyBBbiBvYmplY3QgaG9sZGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbnVtYmVyXG4gICAqICAgb2YgcHJvamVjdHMgdGhhdCB3ZXJlIGltcG9ydGVkLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gcHJvamVjdHMuYWRkZWQgVGhlIG51bWJlciBvZiBuZXcgcHJvamVjdHMgdGhhdCB3ZXJlXG4gICAqICAgYWRkZWQgdG8gdGhlIHByb2plY3QgbGlzdC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHByb2plY3RzLnVwZGF0ZWQgVGhlIG51bWJlciBvZiBleGlzdGluZyBwcm9qZWN0cyBpbiB0aGVcbiAgICogICBwcm9qZWN0IGxpc3QgdGhhdCB3ZXJlIHVwZGF0ZWQuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwcm9qZWN0cy5mYWlsZWQgVGhlIG51bWJlciBvZiBwcm9qZWN0cyB0aGF0IGZhaWxlZCB0b1xuICAgKiAgIGltcG9ydC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHByb2plY3RzLnRvdGFsIFRoZSB0b3RhbCBudW1iZXIgb2YgcHJvamVjdHMgdGhhdCB3ZXJlXG4gICAqICAgcHJvY2Vzc2VkLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ1tdfSBlcnJvcnMgQW4gYXJyYXkgb2YgZXJyb3IgbWVzc2FnZXMgZGVzY3JpYmluZyBhbnlcbiAgICogICBlcnJvcnMgdGhhdCBvY2N1cnJlZCBkdXJpbmcgdGhlIGltcG9ydC5cbiAgICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHByb2plY3QgbGlzdC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHByaXZhdGVzID0ge1xuICAgICAgcHJvamVjdHM6IFtdLFxuICAgICAgZXZlbnRFbWl0dGVyOiBuZXcgRXZlbnRFbWl0dGVyKCksXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHByb2plY3QgaW4gdGhlIHByb2plY3QgbGlzdC4gVGhpcyBtZXRob2Qgb25seSByZXR1cm5zIGEgY29weSBvZiB0aGVcbiAgICogcHJvamVjdCwgbm90IGFuIGFjdHVhbCByZWZlcmVuY2UgdG8gdGhlIHByb2plY3QgaXRzZWxmLiBUbyBtb2RpZnkgYVxuICAgKiBwcm9qZWN0IGluIHRoZSBsaXN0LCB1c2UgdGhlXG4gICAqIFt1cGRhdGVQcm9qZWN0XXtAbGluayBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3QjdXBkYXRlUHJvamVjdH1cbiAgICogbWV0aG9kLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwcm9qZWN0IHRvIHJldHJpZXZlLlxuICAgKiBAcmV0dXJucyB7P21vZHVsZTpwcm9qZWN0flByb2plY3R9IFRoZSByZXF1ZXN0ZWQgcHJvamVjdCwgb3IgdW5kZWZpbmVkIGlmXG4gICAqICAgaXQgY291bGQgbm90IGJlIGZvdW5kLlxuICAgKi9cbiAgZ2V0UHJvamVjdChpZCkge1xuICAgIGNvbnN0IGluZGV4ID0gZmluZEluZGV4KHRoaXMsIGlkKTtcbiAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4gdW5kZWZpbmVkO1xuXG4gICAgcmV0dXJuIF8uY2xvbmVEZWVwKHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5wcm9qZWN0c1tpbmRleF0ucHJvamVjdCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgcHJvamVjdCBpbiB0aGUgcHJvamVjdCBsaXN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwcm9qZWN0IHRvIHJlcGxhY2UuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnByb2plY3R+UHJvamVjdH0gcHJvamVjdCBUaGUgbmV3IHByb2plY3QgdG8gYXNzb2NpYXRlIHdpdGhcbiAgICogICB0aGUgZ2l2ZW4gaWRlbnRpZmllci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvamVjdCB3YXMgcmVwbGFjZWQgc3VjY2Vzc2Z1bGx5LFxuICAgKiAgIG9yIGZhbHNlIGlmIHRoZSBnaXZlbiBpZGVudGlmaWVyIGlzIGludmFsaWQuXG4gICAqIEBmaXJlcyBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+dXBkYXRlUHJvamVjdFxuICAgKi9cbiAgdXBkYXRlUHJvamVjdChpZCwgcHJvamVjdCkge1xuICAgIGNvbnN0IGluZGV4ID0gZmluZEluZGV4KHRoaXMsIGlkKTtcbiAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBjb25zdCB3cmFwcGVyID0gcHJpdmF0ZXMucHJvamVjdHNbaW5kZXhdO1xuICAgIGNvbnN0IG5lZWRTb3J0ID0gcHJvamVjdC5uYW1lICE9PSB3cmFwcGVyLnByb2plY3QubmFtZTtcbiAgICB3cmFwcGVyLnByb2plY3QgPSBfLmNsb25lRGVlcChwcm9qZWN0KTtcblxuICAgIGlmIChuZWVkU29ydCkge1xuICAgICAgcHJpdmF0ZXMucHJvamVjdHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIGNvbnN0IGluc2VydEF0ID0gXy5zb3J0ZWRJbmRleEJ5KFxuICAgICAgICBwcml2YXRlcy5wcm9qZWN0cyxcbiAgICAgICAgd3JhcHBlcixcbiAgICAgICAgKGVsZW0pID0+IGVsZW0ucHJvamVjdC5uYW1lLnRvTG93ZXJDYXNlKCksXG4gICAgICApO1xuICAgICAgcHJpdmF0ZXMucHJvamVjdHMuc3BsaWNlKGluc2VydEF0LCAwLCB3cmFwcGVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlcy5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlLXByb2plY3QnLCB7XG4gICAgICB0eXBlOiAndXBkYXRlLXByb2plY3QnLFxuICAgICAgaWQsXG4gICAgICBwcm9qZWN0OiBfLmNsb25lRGVlcChwcm9qZWN0KSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBvciB1cGRhdGUgYSBwcm9qZWN0LiBJZiBhIHByb2plY3Qgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllciBleGlzdHMsXG4gICAqIHRoZW4gaXQgaXMgcmVwbGFjZWQgd2l0aCB0aGUgZ2l2ZW4gcHJvamVjdC4gT3RoZXJ3aXNlLCB0aGUgcHJvamVjdCBpc1xuICAgKiBhZGRlZCB0byB0aGUgbGlzdCBhcyBhIG5ldyBwcm9qZWN0LiBJZiB0aGUgZ2l2ZW4gaWRlbnRpZmllciBpcyBub3QgYSB2YWxpZFxuICAgKiBVVUlELCB0aGVuIHRoZSBtZXRob2QgcmV0dXJucyBmYWxzZSBhbmQgbm90aGluZyBoYXBwZW5zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBwcm9qZWN0LlxuICAgKiBAcGFyYW0ge21vZHVsZTpwcm9qZWN0flByb2plY3R9IHByb2plY3QgVGhlIHByb2plY3QgdGhhdCBzaG91bGQgYmUgYWRkZWRcbiAgICogICBvciB3aXRoIHdoaWNoIGFuIGV4aXN0aW5nIHByb2plY3Qgc2hvdWxkIGJlIHJlcGxhY2VkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcHJvamVjdCB3YXMgc3VjY2Vzc2Z1bGx5IGFkZGVkIG9yIHVwZGF0ZWQsXG4gICAqICAgb3IgZmFsc2UgaWYgdGhlIGdpdmVuIGlkZW50aWZpZXIgaXMgbm90IGEgdmFsaWQgVVVJRC5cbiAgICogQGZpcmVzIG1vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH5hZGRQcm9qZWN0XG4gICAqIEBmaXJlcyBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+dXBkYXRlUHJvamVjdFxuICAgKi9cbiAgYWRkT3JVcGRhdGVQcm9qZWN0KGlkLCBwcm9qZWN0KSB7XG4gICAgaWYgKCFpc1V1aWRWYWxpZChpZCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmICghdGhpcy51cGRhdGVQcm9qZWN0KGlkLCBwcm9qZWN0KSkge1xuICAgICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgICBjb25zdCB2YWx1ZSA9IHsgaWQsIHByb2plY3Q6IF8uY2xvbmVEZWVwKHByb2plY3QpIH07XG5cbiAgICAgIC8vIE1haW50YWluIHNvcnQgb3JkZXIgb24gaW5zZXJ0aW9uXG4gICAgICBjb25zdCBpbmRleCA9IF8uc29ydGVkSW5kZXhCeShcbiAgICAgICAgcHJpdmF0ZXMucHJvamVjdHMsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICAoZWxlbSkgPT4gZWxlbS5wcm9qZWN0Lm5hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgICk7XG5cbiAgICAgIHByaXZhdGVzLnByb2plY3RzLnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuXG4gICAgICBwcml2YXRlcy5ldmVudEVtaXR0ZXIuZW1pdCgnYWRkLXByb2plY3QnLCB7XG4gICAgICAgIHR5cGU6ICdhZGQtcHJvamVjdCcsXG4gICAgICAgIGlkLFxuICAgICAgICBwcm9qZWN0OiBfLmNsb25lRGVlcChwcm9qZWN0KSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHByb2plY3QgdG8gdGhlIGxpc3QuIEluIG9yZGVyIHRvIHByZXZlbnQgdW5pbnRlbnRpb25hbCBleHRlcm5hbFxuICAgKiBtb2RpZmljYXRpb24gb2YgdGhlIHByb2plY3QsIGEgZGVlcCBjb3B5IGlzIG1hZGUsIGFuZCB0aGUgb3JpZ2luYWwgb2JqZWN0XG4gICAqIGlzIG5vdCBrZXB0LlxuICAgKiBAcGFyYW0ge21vZHVsZTpwcm9qZWN0flByb2plY3R9IHByb2plY3QgVGhlIHByb2plY3QgdG8gYWRkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgaWRlbnRpZmllciBvZiB0aGUgbmV3bHktYWRkZWQgcHJvamVjdC5cbiAgICogQGZpcmVzIG1vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH5hZGRQcm9qZWN0XG4gICAqL1xuICBhZGRQcm9qZWN0KHByb2plY3QpIHtcbiAgICAvLyBHZW5lcmF0ZSBVVUlEIChsb29wIGluIGNhc2Ugb2YgY29sbGlzaW9uKVxuICAgIGxldCBpZDtcbiAgICBkbyB7XG4gICAgICBpZCA9IGdlbmVyYXRlVXVpZCgpO1xuICAgIH0gd2hpbGUgKHRoaXMuaGFzUHJvamVjdChpZCkpO1xuXG4gICAgdGhpcy5hZGRPclVwZGF0ZVByb2plY3QoaWQsIHByb2plY3QpO1xuICAgIHJldHVybiBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBwcm9qZWN0IGZyb20gdGhlIHByb2plY3QgbGlzdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBwcm9qZWN0IHRvIHJlbW92ZS5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvamVjdCB3YXMgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQsXG4gICAqICAgb3IgZmFsc2UgaWYgYW4gaW52YWxpZCBpZGVudGlmaWVyIHdhcyBnaXZlbi5cbiAgICogQGZpcmVzIG1vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH5kZWxldGVQcm9qZWN0XG4gICAqL1xuICBkZWxldGVQcm9qZWN0KGlkKSB7XG4gICAgY29uc3QgaW5kZXggPSBmaW5kSW5kZXgodGhpcywgaWQpO1xuICAgIGlmIChpbmRleCA8IDApIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgY29uc3QgeyBwcm9qZWN0IH0gPSBwcml2YXRlcy5wcm9qZWN0c1tpbmRleF07XG4gICAgcHJpdmF0ZXMucHJvamVjdHMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIHByaXZhdGVzLmV2ZW50RW1pdHRlci5lbWl0KCdkZWxldGUtcHJvamVjdCcsIHtcbiAgICAgIHR5cGU6ICdkZWxldGUtcHJvamVjdCcsXG4gICAgICBpZCxcbiAgICAgIHByb2plY3QsXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgYWxsIHByb2plY3RzIGZyb20gdGhlIHByb2plY3QgbGlzdC5cbiAgICogQGZpcmVzIG1vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH5kZWxldGVQcm9qZWN0XG4gICAqL1xuICBkZWxldGVBbGwoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29uc3QgcHJvamVjdHMgPSBbLi4ucHJpdmF0ZXMucHJvamVjdHNdO1xuXG4gICAgcHJpdmF0ZXMucHJvamVjdHMubGVuZ3RoID0gMDtcblxuICAgIHByb2plY3RzLmZvckVhY2goKHsgaWQsIHByb2plY3QgfSkgPT4ge1xuICAgICAgcHJpdmF0ZXMuZXZlbnRFbWl0dGVyLmVtaXQoJ2RlbGV0ZS1wcm9qZWN0Jywge1xuICAgICAgICB0eXBlOiAnZGVsZXRlLXByb2plY3QnLFxuICAgICAgICBpZCxcbiAgICAgICAgcHJvamVjdCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBhIHByb2plY3Qgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllciBleGlzdHMgd2l0aGluIHRoZVxuICAgKiBwcm9qZWN0IGxpc3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHByb2plY3QgdG8gbG9vayBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwcm9qZWN0IGV4aXN0cywgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGhhc1Byb2plY3QoaWQpIHtcbiAgICByZXR1cm4gZmluZEluZGV4KHRoaXMsIGlkKSA+PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIGVhY2ggcHJvamVjdCBpbiB0aGUgbGlzdC4gTm90ZSB0aGF0IHRoZVxuICAgKiBwcm9qZWN0IGluc3RhbmNlIHBhc3NlZCB0byB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gaXMgb25seSBhIGNvcHkgb2YgdGhlXG4gICAqIHByb2plY3QgaW4gdGhlIGxpc3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIGVhY2ggcHJvamVjdC4gVGhlXG4gICAqICAgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgYVxuICAgKiAgIFt3cmFwcGVyXXtAbGluayBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+cHJvamVjdFdyYXBwZXJ9XG4gICAqICAgY29udGFpbmluZyB0aGUgcHJvamVjdCBhbmQgaXRzIGlkZW50aWZpZXIuIFRoZSBmdW5jdGlvbiBjYW4gYWxzb1xuICAgKiAgIG9wdGlvbmFsbHkgYWNjZXB0IHRoZSBpbmRleCBvZiB0aGUgcHJvamVjdCBpbiB0aGUgbGlzdCBhcyBpdHMgc2Vjb25kXG4gICAqICAgYXJndW1lbnQuXG4gICAqL1xuICBmb3JFYWNoKGNhbGxiYWNrKSB7XG4gICAgcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLnByb2plY3RzLmZvckVhY2goKHByb2plY3QsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBjb3B5ID0gXy5jbG9uZURlZXAocHJvamVjdCk7XG4gICAgICBjYWxsYmFjayhjb3B5LCBpbmRleCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBwcm9qZWN0IGxpc3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIGV2ZW50IHRvIGxpc3RlbiBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIHRoZVxuICAgKiAgIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuZXZlbnRFbWl0dGVyLm9uKHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGRhdGEgdG8gYW4gb2JqZWN0IHN1aXRhYmxlIGZvciBzZXJpYWxpemF0aW9uLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHNlcmlhbGl6YWJsZSBkYXRhIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgY29uc3QgcHJvamVjdHMgPSBbXTtcbiAgICBwcml2YXRlTWVtYmVycy5nZXQodGhpcykucHJvamVjdHMuZm9yRWFjaCgoeyBpZCwgcHJvamVjdCB9KSA9PiB7XG4gICAgICBwcm9qZWN0cy5wdXNoKHtcbiAgICAgICAgbmFtZTogcHJvamVjdC5uYW1lLFxuICAgICAgICBpZCxcbiAgICAgICAgZGVzY3JpcHRpb246IHByb2plY3QuZGVzY3JpcHRpb24sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvamVjdHM7XG4gIH1cblxuICAvKipcbiAgICogSW1wb3J0IHByb2plY3RzIGZyb20gYSBKU09OIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgVGhlIHNlcmlhbGl6ZWQgSlNPTiBvYmplY3QgdG8gaW1wb3J0LlxuICAgKiBAcmV0dXJucyB7bW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fmltcG9ydFN0YXR1c30gQW4gb2JqZWN0IGhvbGRpbmdcbiAgICogICBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RhdHVzIG9mIHRoZSBpbXBvcnQuXG4gICAqIEBmaXJlcyBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+YWRkUHJvamVjdFxuICAgKiBAZmlyZXMgbW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fnVwZGF0ZVByb2plY3RcbiAgICovXG4gIGltcG9ydEZyb21Kc29uKGRhdGEpIHtcbiAgICBjb25zdCBjb3VudHMgPSB7XG4gICAgICBhZGRlZDogMCxcbiAgICAgIHVwZGF0ZWQ6IDAsXG4gICAgICBmYWlsZWQ6IDAsXG4gICAgICB0b3RhbDogMCxcbiAgICB9O1xuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBlcnJvcnMucHVzaCgnRXJyb3I6IEV4cGVjdGVkIFwicHJvamVjdHNcIiBwcm9wZXJ0eSB0byBiZSBhbiBhcnJheS4nKTtcbiAgICAgIHJldHVybiB7IHByb2plY3RzOiBjb3VudHMsIGVycm9ycyB9O1xuICAgIH1cblxuICAgIGRhdGEuZm9yRWFjaCgoeyBuYW1lLCBpZCwgZGVzY3JpcHRpb24gfSkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlRXJyb3IgPSAoZXJyb3JUeXBlLCB2YWx1ZSwgb3B0cykgPT4ge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBtc2dQcmVmaXggPSBgV2FybmluZzogUHJvamVjdCBcIiR7bmFtZX1cImA7XG4gICAgICAgIGxldCBtc2c7XG4gICAgICAgIHN3aXRjaCAoZXJyb3JUeXBlKSB7XG4gICAgICAgICAgY2FzZSAnYmFkLXR5cGUnOlxuICAgICAgICAgICAgbXNnID0gYEV4cGVjdGVkIHR5cGUgXCIke29wdHMuZXhwZWN0ZWRUeXBlfVwiIGZvciBwcm9wZXJ0eSBcIiR7b3B0cy52YWx1ZU5hbWV9XCIgKHJlY2VpdmVkIFwiJHtnZXRKc29uVHlwZSh2YWx1ZSl9XCIpLmA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdiYWQtaWQnOlxuICAgICAgICAgICAgbXNnID0gYEV4cGVjdGVkIGEgdmVyc2lvbiA0IFVVSUQgZm9yIHByb3BlcnR5IFwiJHtvcHRzLnZhbHVlTmFtZX1cIiAocmVjZWl2ZWQgXCIke3ZhbHVlfVwiKS5gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIG1zZyA9IGBFbmNvdW50ZXJlZCB1bnJlY29nbml6ZWQgZXJyb3IgXCIke2Vycm9yVHlwZX1cIiBmb3IgcHJvcGVydHkgXCIke29wdHMudmFsdWVOYW1lfVwiLmA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9ycy5wdXNoKGAke21zZ1ByZWZpeH06ICR7bXNnfWApO1xuICAgICAgfTtcblxuICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICBlcnJvcnMucHVzaCgnRXJyb3I6IFByb2plY3QgbXVzdCBoYXZlIGEgbmFtZS4nKTtcbiAgICAgICAgY291bnRzLmZhaWxlZCArPSAxO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goYEVycm9yOiBFeHBlY3RlZCB0eXBlIFwic3RyaW5nXCIgZm9yIHByb2plY3QgbmFtZSAocmVjZWl2ZWQgXCIke2dldEpzb25UeXBlKG5hbWUpfVwiKS5gKTtcbiAgICAgICAgY291bnRzLmZhaWxlZCArPSAxO1xuICAgICAgfSBlbHNlIGlmIChuYW1lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBlcnJvcnMucHVzaCgnRXJyb3I6IFByb2plY3QgbmFtZSBtdXN0IG5vdCBiZSBlbXB0eS4nKTtcbiAgICAgICAgY291bnRzLmZhaWxlZCArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcHJvamVjdE9wdGlvbnMgPSB7fTtcblxuICAgICAgICBpZiAodmFsaWRhdGVWYWx1ZShkZXNjcmlwdGlvbiwge1xuICAgICAgICAgIHZhbHVlTmFtZTogJ2Rlc2NyaXB0aW9uJyxcbiAgICAgICAgICBleHBlY3RlZFR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICB9KSkgcHJvamVjdE9wdGlvbnMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcblxuICAgICAgICBsZXQgbmV3SWQgPSBudWxsO1xuICAgICAgICBpZiAodmFsaWRhdGVWYWx1ZShpZCwge1xuICAgICAgICAgIHZhbHVlTmFtZTogJ2lkJyxcbiAgICAgICAgICBleHBlY3RlZFR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIHJlcXVpcmVVdWlkOiB0cnVlLFxuICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICB9KSkgbmV3SWQgPSBpZDtcblxuICAgICAgICBpZiAobmV3SWQgJiYgdGhpcy5oYXNQcm9qZWN0KG5ld0lkKSkgY291bnRzLnVwZGF0ZWQgKz0gMTtcbiAgICAgICAgZWxzZSBjb3VudHMuYWRkZWQgKz0gMTtcblxuICAgICAgICBjb25zdCBwcm9qZWN0ID0gbmV3IFByb2plY3QobmFtZSwgcHJvamVjdE9wdGlvbnMpO1xuICAgICAgICBpZiAobmV3SWQpIHRoaXMuYWRkT3JVcGRhdGVQcm9qZWN0KG5ld0lkLCBwcm9qZWN0KTtcbiAgICAgICAgZWxzZSB0aGlzLmFkZFByb2plY3QocHJvamVjdCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb3VudHMudG90YWwgPSBjb3VudHMuYWRkZWQgKyBjb3VudHMudXBkYXRlZCArIGNvdW50cy5mYWlsZWQ7XG5cbiAgICByZXR1cm4geyBwcm9qZWN0czogY291bnRzLCBlcnJvcnMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQgcHJvamVjdHMgZnJvbSBwYXJzZWQgQ1NWIGRhdGEuXG4gICAqIEBwYXJhbSB7c3RyaW5nW11bXX0gZGF0YSBBbiBhcnJheSBvZiBzdHJpbmcgYXJyYXlzLiBFYWNoIG1lbWJlciBvZiB0aGVcbiAgICogICBvdXRlciBhcnJheSByZXByZXNlbnRzIGEgc2luZ2xlIHByb2plY3QsIGFuZCBlYWNoIG1lbWJlciBvZiBlYWNoIGlubmVyXG4gICAqICAgYXJyYXkgaXMgYSBkYXRhIGZpZWxkIGZvciB0aGF0IHBhcnRpY3VsYXIgcHJvamVjdC4gVGhlIGZpcnN0IG1lbWJlciBvZlxuICAgKiAgIHRoZSBvdXRlciBhcnJheSBzaG91bGQgYmUgYSBoZWFkZXIgaG9sZGluZyBmaWVsZCBuYW1lcy4gRHVwbGljYXRlXG4gICAqICAgcHJvamVjdHMgYXJlIGlnbm9yZWQsIGFzIGFyZSB1bnJlbGF0ZWQgZmllbGRzLlxuICAgKiBAcmV0dXJucyB7bW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fmltcG9ydFN0YXR1c30gQW4gb2JqZWN0IGhvbGRpbmdcbiAgICogICBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RhdHVzIG9mIHRoZSBpbXBvcnQuXG4gICAqIEBmaXJlcyBtb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R+YWRkUHJvamVjdFxuICAgKiBAZmlyZXMgbW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fnVwZGF0ZVByb2plY3RcbiAgICovXG4gIGltcG9ydEZyb21Dc3YoZGF0YSkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSBbXTtcbiAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBoZWFkZXIgPSBkYXRhWzBdO1xuICAgICAgaGVhZGVyLmZvckVhY2goKGZpZWxkLCBpbmRleCkgPT4ge1xuICAgICAgICBzd2l0Y2ggKGZpZWxkLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICBjYXNlICdwcm9qZWN0IG5hbWUnOlxuICAgICAgICAgIGNhc2UgJ3Byb2plY3QtbmFtZSc6XG4gICAgICAgICAgICBjb2x1bW5zLnB1c2goeyBuYW1lOiAnbmFtZScsIGluZGV4IH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncHJvamVjdCB1dWlkJzpcbiAgICAgICAgICBjYXNlICdwcm9qZWN0LXV1aWQnOlxuICAgICAgICAgICAgY29sdW1ucy5wdXNoKHsgbmFtZTogJ2lkJywgaW5kZXggfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdwcm9qZWN0IGRlc2NyaXB0aW9uJzpcbiAgICAgICAgICBjYXNlICdwcm9qZWN0LWRlc2NyaXB0aW9uJzpcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7IG5hbWU6ICdkZXNjcmlwdGlvbicsIGluZGV4IH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBlbnRyaWVzID0gW107XG4gICAgaWYgKGNvbHVtbnMubGVuZ3RoID4gMCkge1xuICAgICAgZGF0YS5mb3JFYWNoKChjc3ZSZWNvcmQsIGNzdkluZGV4KSA9PiB7XG4gICAgICAgIGlmIChjc3ZJbmRleCA9PT0gMCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGVudHJ5ID0ge307XG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoeyBuYW1lLCBpbmRleCB9KSA9PiB7XG4gICAgICAgICAgaWYgKGNzdlJlY29yZC5sZW5ndGggPiBpbmRleCAmJiBjc3ZSZWNvcmRbaW5kZXhdLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVudHJ5W25hbWVdID0gY3N2UmVjb3JkW2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIV8uaXNFbXB0eShlbnRyeSkpIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0VudHJ5RXF1YWwgPSAobGVmdCwgcmlnaHQpID0+IHtcbiAgICAgIGlmIChsZWZ0LmlkICE9IG51bGwgfHwgcmlnaHQuaWQgIT0gbnVsbCkgcmV0dXJuIGxlZnQuaWQgPT09IHJpZ2h0LmlkO1xuICAgICAgcmV0dXJuIGxlZnQubmFtZSA9PT0gcmlnaHQubmFtZVxuICAgICAgICAmJiBsZWZ0LmRlc2NyaXB0aW9uID09PSByaWdodC5kZXNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmltcG9ydEZyb21Kc29uKF8udW5pcVdpdGgoZW50cmllcywgaXNFbnRyeUVxdWFsKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdExpc3Q7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtSZWN1cnJpbmdEYXRlXXtAbGluayBtb2R1bGU6cmVjdXJyaW5nRGF0ZX5SZWN1cnJpbmdEYXRlfSBjbGFzcy5cbiAqIEBtb2R1bGUgcmVjdXJyaW5nRGF0ZVxuICovXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgb3JkaW5hbCBmcm9tICdvcmRpbmFsJztcbmltcG9ydCB7XG4gIGFkZCBhcyBhZGRUb0RhdGUsXG4gIGdldERheXNJbk1vbnRoLFxuICBpc0JlZm9yZSBhcyBpc0RhdGVCZWZvcmUsXG4gIGlzV2Vla2VuZCxcbiAgbmV4dERheSxcbiAgcHJldmlvdXNEYXksXG4gIHN0YXJ0T2ZEYXksXG4gIHN0YXJ0T2ZNb250aCxcbn0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5pbXBvcnQge1xuICBmb3JtYXREYXRlLFxuICBnZXRXZWVrZGF5TmFtZSxcbiAgZ2V0TW9udGhOYW1lLFxuICBwYXJzZUlzb0RhdGVUaW1lLFxufSBmcm9tICcuL3V0aWxpdHkvZGF0ZXMnO1xuXG4vKipcbiAqIFN0YXJ0aW5nIGZyb20gdGhlIGdpdmVuIGRhdGUsIGZpbmQgdGhlIG5leHQgZGF0ZSBsYW5kaW5nIG9uIG9uZSBvZiB0aGUgZ2l2ZW5cbiAqIGRheXMgb2YgdGhlIHdlZWsuXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGluaXRpYWwgZGF0ZSB0byBzdGFydCBmcm9tLlxuICogQHBhcmFtIHtudW1iZXJbXX0gZGF5c09mV2VlayBBbiBhcnJheSBvZiBkZXNpcmVkIHdlZWtkYXlzLiBFYWNoIGRheSBpcyBhXG4gKiAgIHZhbHVlIGZyb20gMC02LCB3aXRoIFN1bmRheSBiZWluZyAwLlxuICogQHJldHVybnMge0RhdGV9IFRoZSBmaXJzdCBkYXRlIG9uIG9yIGFmdGVyIHRoZSBnaXZlbiBkYXRlIHRoYXQgbWF0Y2hlcyBvbmVcbiAqICAgb2YgdGhlIGdpdmVuIHdlZWtkYXlzLlxuICovXG5mdW5jdGlvbiBuZXh0RGF5T2ZXZWVrKGRhdGUsIGRheXNPZldlZWspIHtcbiAgbGV0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkoZGF0ZSk7XG4gIGlmIChkYXlzT2ZXZWVrLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc3VsdDtcblxuICBjb25zdCBjdXJyZW50RGF5ID0gcmVzdWx0LmdldERheSgpO1xuICBjb25zdCBkYXlzVG9BZGQgPSBkYXlzT2ZXZWVrLm1hcCgoZGF5KSA9PiAoXG4gICAgZGF5ID49IGN1cnJlbnREYXkgPyBkYXkgLSBjdXJyZW50RGF5IDogZGF5ICsgNyAtIGN1cnJlbnREYXlcbiAgKSkucmVkdWNlKChtaW4sIGN1cnJlbnQpID0+IChjdXJyZW50IDwgbWluID8gY3VycmVudCA6IG1pbikpO1xuXG4gIGlmIChkYXlzVG9BZGQgPiAwKSByZXN1bHQgPSBhZGRUb0RhdGUocmVzdWx0LCB7IGRheXM6IGRheXNUb0FkZCB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBTdGFydGluZyBmcm9tIHRoZSBnaXZlbiBkYXRlLCBmaW5kIHRoZSBuZXh0IGRhdGUgd2l0aCB0aGUgaW5kaWNhdGVkIGRheSBvZlxuICogdGhlIG1vbnRoLlxuICogQHBhcmFtIHtEYXRlfSBkYXRlIFRoZSBpbml0aWFsIGRhdGUgdG8gc3RhcnQgZnJvbS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkYXlPZk1vbnRoIFRoZSBkZXNpcmVkIGRheSBvZiB0aGUgbW9udGgsIGZyb20gMS0zMS5cbiAqIEByZXR1cm5zIHtEYXRlfSBUaGUgZmlyc3QgZGF0ZSBvbiBvciBhZnRlciB0aGUgZ2l2ZW4gZGF0ZSB0aGF0IG1hdGNoZXMgdGhlXG4gKiAgIGRheSBvZiB0aGUgbW9udGguXG4gKi9cbmZ1bmN0aW9uIG5leHREYXlPZk1vbnRoKGRhdGUsIGRheU9mTW9udGgpIHtcbiAgY29uc3QgY3VycmVudE1vbnRoID0gc3RhcnRPZk1vbnRoKGRhdGUpO1xuICBjb25zdCBuZXh0TW9udGggPSBzdGFydE9mTW9udGgoYWRkVG9EYXRlKGN1cnJlbnRNb250aCwgeyBtb250aHM6IDEgfSkpO1xuXG4gIGNvbnN0IHJlc3VsdCA9IChkYXRlLmdldERhdGUoKSA8PSBkYXlPZk1vbnRoKSA/IGN1cnJlbnRNb250aCA6IG5leHRNb250aDtcbiAgY29uc3QgZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aChyZXN1bHQpO1xuICByZXN1bHQuc2V0RGF0ZShNYXRoLm1pbihkYXlPZk1vbnRoLCBkYXlzSW5Nb250aCkpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFN0YXJ0aW5nIGZyb20gdGhlIGdpdmVuIGRhdGUsIGZpbmQgdGhlIG5leHQgZGF0ZSBiZWxvbmdpbmcgdG8gdGhlIGluZGljYXRlZFxuICogd2VlayBhbmQgd2Vla2RheSBvZiB0aGUgbW9udGguXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGluaXRpYWwgZGF0ZSB0byBzdGFydCBmcm9tLlxuICogQHBhcmFtIHtudW1iZXJ9IHdlZWtOdW1iZXIgVGhlIHdlZWsgb2YgdGhlIG1vbnRoLCBmcm9tIDEtNS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB3ZWVrRGF5IFRoZSBkYXkgb2YgdGhlIHdlZWssIGZyb20gMC02IHdpdGggU3VuZGF5IGJlaW5nIDAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gVGhlIGZpcnN0IGRhdGUgb24gb3IgYWZ0ZXIgdGhlIGdpdmVuIGRhdGUgdGhhdCBtYXRjaGVzIHRoZVxuICogICB3ZWVrIGFuZCBkYXkgb2YgdGhlIG1vbnRoLlxuICovXG5mdW5jdGlvbiBuZXh0V2Vla09mTW9udGgoZGF0ZSwgd2Vla051bWJlciwgd2Vla0RheSkge1xuICBjb25zdCBjdXJyZW50TW9udGggPSBzdGFydE9mTW9udGgoZGF0ZSk7XG4gIGNvbnN0IG5leHRNb250aCA9IHN0YXJ0T2ZNb250aChhZGRUb0RhdGUoY3VycmVudE1vbnRoLCB7IG1vbnRoczogMSB9KSk7XG5cbiAgY29uc3QgZmluZERheSA9IChtb250aCkgPT4ge1xuICAgIGNvbnN0IGRheXNJbk1vbnRoID0gZ2V0RGF5c0luTW9udGgobW9udGgpO1xuICAgIGxldCByZXN1bHQgPSBtb250aDtcbiAgICBpZiAocmVzdWx0LmdldERheSgpICE9PSB3ZWVrRGF5KSByZXN1bHQgPSBuZXh0RGF5KHJlc3VsdCwgd2Vla0RheSk7XG5cbiAgICBsZXQgZGF5c1RvQWRkID0gKHdlZWtOdW1iZXIgLSAxKSAqIDc7XG4gICAgaWYgKHJlc3VsdC5nZXREYXRlKCkgKyBkYXlzVG9BZGQgPiBkYXlzSW5Nb250aCkge1xuICAgICAgZGF5c1RvQWRkID0gTWF0aC5mbG9vcigoZGF5c0luTW9udGggLSByZXN1bHQuZ2V0RGF0ZSgpKSAvIDcpICogNztcbiAgICB9XG4gICAgaWYgKHdlZWtOdW1iZXIgPiAxKSByZXN1bHQgPSBhZGRUb0RhdGUocmVzdWx0LCB7IGRheXM6IGRheXNUb0FkZCB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGxldCByZXN1bHQgPSBmaW5kRGF5KGN1cnJlbnRNb250aCk7XG4gIGlmIChpc0RhdGVCZWZvcmUocmVzdWx0LCBkYXRlKSkgcmVzdWx0ID0gZmluZERheShuZXh0TW9udGgpO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogU3RhcnRpbmcgZnJvbSB0aGUgZ2l2ZW4gZGF0ZSwgZmluZCB0aGUgbmV4dCBkYXRlIGJlbG9uZ2luZyB0byB0aGUgZ2l2ZW5cbiAqIG1vbnRoIGFuZCBkYXkgb2YgdGhlIHllYXIuXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGluaXRpYWwgZGF0ZSB0byBzdGFydCBmcm9tLlxuICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoIFRoZSBkZXNpcmVkIG1vbnRoLCBmcm9tIDAtMTEgd2l0aCBKYW51YXJ5IGJlaW5nIDAuXG4gKiBAcGFyYW0ge251bWJlcn0gZGF5T2ZNb250aCBUaGUgZGVzaXJlZCBkYXkgb2YgdGhlIG1vbnRoLCBmcm9tIDEtMzEuXG4gKiBAcmV0dXJucyB7RGF0ZX0gVGhlIGZpcnN0IGRhdGUgb24gb3IgYWZ0ZXIgdGhlIGdpdmVuIGRhdGUgdGhhdCBtYXRjaGVzIHRoZVxuICogICBtb250aCBhbmQgZGF5IG9mIHRoZSB5ZWFyLlxuICovXG5mdW5jdGlvbiBuZXh0RGF5T2ZZZWFyKGRhdGUsIG1vbnRoLCBkYXlPZk1vbnRoKSB7XG4gIGNvbnN0IGRhdGVPZkN1cnJlbnRZZWFyID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBtb250aCwgMSk7XG4gIGRhdGVPZkN1cnJlbnRZZWFyLnNldERhdGUoXG4gICAgTWF0aC5taW4oZGF5T2ZNb250aCwgZ2V0RGF5c0luTW9udGgoZGF0ZU9mQ3VycmVudFllYXIpKSxcbiAgKTtcblxuICBjb25zdCBkYXRlT2ZOZXh0WWVhciA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSArIDEsIG1vbnRoLCAxKTtcbiAgZGF0ZU9mTmV4dFllYXIuc2V0RGF0ZShcbiAgICBNYXRoLm1pbihkYXlPZk1vbnRoLCBnZXREYXlzSW5Nb250aChkYXRlT2ZOZXh0WWVhcikpLFxuICApO1xuXG4gIGxldCByZXN1bHQgPSBkYXRlT2ZDdXJyZW50WWVhcjtcbiAgaWYgKGlzRGF0ZUJlZm9yZShyZXN1bHQsIGRhdGUpKSByZXN1bHQgPSBkYXRlT2ZOZXh0WWVhcjtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVjdXJyaW5nIGRhdGUuXG4gKi9cbmNsYXNzIFJlY3VycmluZ0RhdGUge1xuICAvKipcbiAgICogQ3JlYXRlIGEgcmVjdXJyaW5nIGRhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlcnZhbFVuaXQgVGhlIHVuaXQgb2YgdGltZSAoZS5nLiAnd2VlaycpIGluIHdoaWNoIHRoZVxuICAgKiAgIHJlcGV0aXRpb24gaW50ZXJ2YWwgaXMgbWVhc3VyZWQuIFZhbGlkIG9wdGlvbnMgYXJlICdkYXknLCAnd2VlaycsXG4gICAqICAgJ21vbnRoJywgYW5kICd5ZWFyJy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgQW4gb2JqZWN0IGhvbGRpbmcgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGVcbiAgICogICByZWN1cnJlbmNlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaW50ZXJ2YWxMZW5ndGg9MV0gVGhlIGxlbmd0aCBvZiB0aGUgcmVwZXRpdGlvblxuICAgKiAgIGludGVydmFsLlxuICAgKiBAcGFyYW0ge0RhdGV9IFtvcHRpb25zLnN0YXJ0RGF0ZV0gSW5kaWNhdGVzIHRoZSBlYXJsaWVzdCBkYXRlIHRoYXQgdGhlXG4gICAqICAgbmV4dCBvY2N1cnJlbmNlIGNhbiBoYXBwZW4uIEFueSBvY2N1cnJlbmNlcyB0aGF0IHdvdWxkIGZhbGwgYmVmb3JlIHRoaXNcbiAgICogICBkYXRlIGFyZSBza2lwcGVkLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmJhc2VPbkNvbXBsZXRpb249ZmFsc2VdIElmIHRoaXMgaXMgdHJ1ZSwgdGhlblxuICAgKiAgIHRoZSBuZXh0IG9jY3VycmVuY2Ugc2hvdWxkIGJlIGNhbGN1bGF0ZWQgZnJvbSB0aGUgdGFzaydzIGNvbXBsZXRpb25cbiAgICogICBkYXRlLiBPdGhlcndpc2UsIHRoZSBvY2N1cnJlbmNlIHNob3VsZCBiZSBjYWxjdWxhdGVkIGZyb20gdGhlIHRhc2sncyBkdWVcbiAgICogICBkYXRlLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMud2Vla051bWJlcl0gVGhlIG51bWJlciBvZiB0aGUgd2VlayB3aXRoaW4gYSBtb250aFxuICAgKiAgIGluIHdoaWNoIHRoZSByZWN1cnJpbmcgZGF0ZSBzaG91bGQgb2NjdXIuIFVzZWQgaW4gY29uanVuY3Rpb24gd2l0aFxuICAgKiAgIGRheXNPZldlZWsuIEEgdmFsdWUgb2YgMSBpbmRpY2F0ZXMgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgYSBkYXkgd2l0aGluXG4gICAqICAgdGhlIG1vbnRoLCAyIGluZGljYXRlcyB0aGUgc2Vjb25kIG9jY3VycmVuY2UsIGFuZCBzbyBvbi4gSWYgdGhpcyBpcyBzZXRcbiAgICogICB0byA1LCB0aGVuIHRoZSA0dGggb3IgNXRoIG9jY3VycmVuY2Ugb2YgdGhlIGRheSBtYXkgYmUgdXNlZCwgZGVwZW5kaW5nXG4gICAqICAgb24gaG93IG1hbnkgc3VjaCBkYXlzIGFyZSBpbiBhIHBhcnRpY3VsYXIgbW9udGguXG4gICAqIEBwYXJhbSB7bnVtYmVyW119IFtvcHRpb25zLmRheXNPZldlZWtdIEFuIGFycmF5IGhvbGRpbmcgdGhlIGRheXMgb2YgdGhlXG4gICAqICAgd2VlayBvbiB3aGljaCB0aGUgcmVjdXJyaW5nIGRhdGUgc2hvdWxkIG9jY3VyLiBFYWNoIGRheSBpcyBhbiBpbnRlZ2VyXG4gICAqICAgZnJvbSAwLTYsIHdoZXJlIDAgcmVwcmVzZW50cyBTdW5kYXksIDEgcmVwcmVzZW50cyBNb25kYXksIGFuZCBzbyBvbi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1vbnRoXSBUaGUgbW9udGggaW4gdGhlIHllYXIgb24gd2hpY2ggdGhlXG4gICAqICAgcmVjdXJyaW5nIGRhdGUgc2hvdWxkIG9jY3VyLCByZXByZXNlbnRlZCBhcyBhIG51bWJlciBmcm9tIDAgdG8gMTEuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5kYXlPZk1vbnRoXSBUaGUgZGF5IG9mIHRoZSBtb250aCBvbiB3aGljaCB0aGVcbiAgICogICByZWN1cnJpbmcgZGF0ZSBzaG91bGQgb2NjdXIsIHJlcHJlc2VudGVkIGFzIGEgbnVtYmVyIGZyb20gMSB0byAzMS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9uV2Vla2VuZD1uby1jaGFuZ2VdIFNwZWNpZmllcyB3aGF0IGhhcHBlbnMgd2hlblxuICAgKiAgIHRoZSBuZXh0IHJlY3VycmVuY2UgZmFsbHMgb24gYSB3ZWVrZW5kLiBJZiBzZXQgdG8gJ25vLWNoYW5nZScsIHRoZW4gdGhlXG4gICAqICAgZGF0ZSBpcyB1bmFmZmVjdGVkLiBJZiBzZXQgdG8gJ3ByZXZpb3VzLXdlZWtkYXknIG9yICduZXh0LXdlZWtkYXknLCB0aGVuXG4gICAqICAgdGhlIHByZXZpb3VzIG9yIG5leHQgd2Vla2RheSBpcyB1c2VkIGluc3RlYWQuIElmIHNldCB0b1xuICAgKiAgICduZWFyZXN0LXdlZWtkYXknLCB0aGVuIHRoZSBjbG9zZXN0IHdlZWtkYXkgaXMgdXNlZCBpbnN0ZWFkLlxuICAgKiBAcGFyYW0ge0RhdGV9IFtvcHRpb25zLmVuZERhdGVdIEluZGljYXRlcyB0aGUgZGF0ZSBhZnRlciB3aGljaCB0aGVcbiAgICogICByZXBldGl0aW9uIHNob3VsZCBzdG9wLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4Q291bnRdIEluZGljYXRlcyB0aGUgbWF4aW11bSBudW1iZXIgb2ZcbiAgICogICByZXBldGl0aW9ucyBiZWZvcmUgdGhlIHJlY3VycmVuY2Ugc2hvdWxkIHN0b3AuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihpbnRlcnZhbFVuaXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIC8qKlxuICAgICAqIFRoZSB1bml0IG9mIHRpbWUgaW4gd2hpY2ggdGhlIHJlcGV0aXRpb24gaW50ZXJ2YWwgaXMgbWVhc3VyZWQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmludGVydmFsVW5pdCA9IGludGVydmFsVW5pdDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsZW5ndGggb2YgdGhlIHJlcGV0aXRpb24gaW50ZXJ2YWwuXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmludGVydmFsTGVuZ3RoID0gb3B0aW9ucy5pbnRlcnZhbExlbmd0aCA/PyAxO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBlYXJsaWVzdCBkYXRlIHRoYXQgdGhlIG5leHQgb2NjdXJyZW5jZSBjYW4gaGFwcGVuLiBBbnlcbiAgICAgKiBvY2N1cnJlbmNlcyB0aGF0IHdvdWxkIGZhbGwgYmVmb3JlIHRoaXMgZGF0ZSBhcmUgc2tpcHBlZC5cbiAgICAgKiBAdHlwZSB7P0RhdGV9XG4gICAgICovXG4gICAgdGhpcy5zdGFydERhdGUgPSBvcHRpb25zLnN0YXJ0RGF0ZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhpcyBpcyB0cnVlLCB0aGVuIHRoZSBuZXh0IG9jY3VycmVuY2Ugc2hvdWxkIGJlIGNhbGN1bGF0ZWQgZnJvbSB0aGVcbiAgICAgKiB0YXNrJ3MgY29tcGxldGlvbiBkYXRlLiBPdGhlcndpc2UsIHRoZSBvY2N1cnJlbmNlIHNob3VsZCBiZSBjYWxjdWxhdGVkXG4gICAgICogZnJvbSB0aGUgdGFzaydzIGR1ZSBkYXRlLlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuYmFzZU9uQ29tcGxldGlvbiA9IG9wdGlvbnMuYmFzZU9uQ29tcGxldGlvbiA/PyBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdGhlIHdlZWsgd2l0aGluIGEgbW9udGggaW4gd2hpY2ggdGhlIHJlY3VycmluZyBkYXRlIHNob3VsZFxuICAgICAqIG9jY3VyLiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggZGF5c09mV2Vlay4gQSB2YWx1ZSBvZiAxIGluZGljYXRlcyB0aGVcbiAgICAgKiBmaXJzdCBvY2N1cnJlbmNlIG9mIGEgZGF5IHdpdGhpbiB0aGUgbW9udGgsIDIgaW5kaWNhdGVzIHRoZSBzZWNvbmRcbiAgICAgKiBvY2N1cnJlbmNlLCBhbmQgc28gb24uIElmIHRoaXMgaXMgc2V0IHRvIDUsIHRoZW4gdGhlIDR0aCBvciA1dGhcbiAgICAgKiBvY2N1cnJlbmNlIG9mIHRoZSBkYXkgbWF5IGJlIHVzZWQsIGRlcGVuZGluZyBvbiBob3cgbWFueSBzdWNoIGRheXMgYXJlXG4gICAgICogaW4gYSBwYXJ0aWN1bGFyIG1vbnRoLlxuICAgICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMud2Vla051bWJlciA9IG9wdGlvbnMud2Vla051bWJlciA/PyBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgaG9sZGluZyB0aGUgZGF5cyBvZiB0aGUgd2VlayBvbiB3aGljaCB0aGUgcmVjdXJyaW5nIGRhdGUgc2hvdWxkXG4gICAgICogb2NjdXIuIEVhY2ggZGF5IGlzIGFuIGludGVnZXIgZnJvbSAwLTYsIHdoZXJlIDAgcmVwcmVzZW50cyBTdW5kYXksIDFcbiAgICAgKiByZXByZXNlbnRzIE1vbmRheSwgYW5kIHNvIG9uLlxuICAgICAqIEB0eXBlIHs/bnVtYmVyW119XG4gICAgICovXG4gICAgdGhpcy5kYXlzT2ZXZWVrID0gb3B0aW9ucy5kYXlzT2ZXZWVrIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbW9udGggaW4gdGhlIHllYXIgb24gd2hpY2ggdGhlIHJlY3VycmluZyBkYXRlIHNob3VsZCBvY2N1cixcbiAgICAgKiByZXByZXNlbnRlZCBhcyBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDExLlxuICAgICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubW9udGggPSBvcHRpb25zLm1vbnRoID8/IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF5IG9mIHRoZSBtb250aCBvbiB3aGljaCB0aGUgcmVjdXJyaW5nIGRhdGUgc2hvdWxkIG9jY3VyLFxuICAgICAqIHJlcHJlc2VudGVkIGFzIGEgbnVtYmVyIGJldHdlZW4gMSBhbmQgMzEuXG4gICAgICogQHR5cGUgez9udW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5kYXlPZk1vbnRoID0gb3B0aW9ucy5kYXlPZk1vbnRoID8/IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgd2hhdCBoYXBwZW5zIHdoZW4gdGhlIG5leHQgcmVjdXJyZW5jZSBvY2N1cnMgb24gYSB3ZWVrZW5kLiBJZlxuICAgICAqIHNldCB0byAnbm8tY2hhbmdlJywgdGhlbiB0aGUgZGF0ZSBpcyB1bmFmZmVjdGVkLiBJZiBzZXQgdG9cbiAgICAgKiAncHJldmlvdXMtd2Vla2RheScgb3IgJ25leHQtd2Vla2RheScsIHRoZW4gdGhlIHByZXZpb3VzIG9yIG5leHQgd2Vla2RheVxuICAgICAqIGlzIHVzZWQgaW5zdGVhZC4gSWYgc2V0IHRvICduZWFyZXN0LXdlZWtkYXknLCB0aGVuIHRoZSBjbG9zZXN0IHdlZWtkYXlcbiAgICAgKiBpcyB1c2VkIGluc3RlYWQuXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm9uV2Vla2VuZCA9IG9wdGlvbnMub25XZWVrZW5kIHx8ICduby1jaGFuZ2UnO1xuXG4gICAgLyoqXG4gICAgKiBJbmRpY2F0ZXMgdGhlIGRhdGUgYWZ0ZXIgd2hpY2ggdGhlIHJlcGV0aXRpb24gc2hvdWxkIHN0b3AsIGlmIGFueS5cbiAgICAqIEB0eXBlIHs/RGF0ZX1cbiAgICAqL1xuICAgIHRoaXMuZW5kRGF0ZSA9IG9wdGlvbnMuZW5kRGF0ZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZXBldGl0aW9ucyBiZWZvcmUgdGhlIHJlY3VycmVuY2Ugc2hvdWxkXG4gICAgICogc3RvcCwgaWYgZXZlci5cbiAgICAgKiBAdHlwZSB7P251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLm1heENvdW50ID0gb3B0aW9ucy5tYXhDb3VudCA/PyBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmV4dCBvY2N1cnJlbmNlIG9mIHRoZSByZWN1cnJpbmcgZGF0ZS5cbiAgICogQHBhcmFtIHtEYXRlfSBbYmFzZURhdGVdIFRoZSBiYXNlIGRhdGUgZnJvbSB3aGljaCB0aGUgbmV4dCBvY2N1cnJlbmNlXG4gICAqICAgc2hvdWxkIGJlIGNhbGN1bGF0ZWQuIElmIG5vdCBnaXZlbiwgdGhlbiB0aGUgcHJlc2VudCBkYXkgaXMgdXNlZC5cbiAgICogQHJldHVybnMgez9EYXRlfSBUaGUgZGF0ZSBvbiB3aGljaCB0aGUgcmVjdXJyZW5jZSB3aWxsIG5leHQgb2NjdXIsIG9yIG51bGxcbiAgICogICBpZiB0aGUgcmVjdXJyZW5jZSBoYXMgZW5kZWQuXG4gICAqL1xuICBnZXROZXh0T2NjdXJyZW5jZShiYXNlRGF0ZSkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5tYXhDb3VudCA9PT0gJ251bWJlcicgJiYgdGhpcy5tYXhDb3VudCA8IDEpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgcmVmZXJlbmNlID0gc3RhcnRPZkRheShiYXNlRGF0ZSB8fCBuZXcgRGF0ZSgpKTtcblxuICAgIGxldCBzdGFydERhdGUgPSByZWZlcmVuY2U7XG4gICAgaWYgKHRoaXMuc3RhcnREYXRlICYmIGlzRGF0ZUJlZm9yZShyZWZlcmVuY2UsIHRoaXMuc3RhcnREYXRlKSkge1xuICAgICAgc3RhcnREYXRlID0gc3RhcnRPZkRheSh0aGlzLnN0YXJ0RGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25XZWVrZW5kID09PSAncHJldmlvdXMtd2Vla2RheScgJiYgaXNXZWVrZW5kKHN0YXJ0RGF0ZSkpIHtcbiAgICAgIC8vIE1vdmUgc3RhcnRpbmcgZGF0ZSB0byBmb2xsb3dpbmcgTW9uZGF5XG4gICAgICBzdGFydERhdGUgPSBuZXh0RGF5KHN0YXJ0RGF0ZSwgMSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9uV2Vla2VuZCA9PT0gJ25lYXJlc3Qtd2Vla2RheSdcbiAgICAgICYmIHN0YXJ0RGF0ZS5nZXREYXkoKSA9PT0gNikge1xuICAgICAgLy8gTW92ZSBzdGFydGluZyBkYXRlIHRvIFN1bmRheVxuICAgICAgc3RhcnREYXRlID0gbmV4dERheShzdGFydERhdGUsIDApO1xuICAgIH1cblxuICAgIGNvbnN0IGlzQmVmb3JlU3RhcnQgPSAoZGF0ZSkgPT4gc3RhcnREYXRlICYmIGlzRGF0ZUJlZm9yZShkYXRlLCBzdGFydERhdGUpO1xuXG4gICAgbGV0IHJlc3VsdCA9IHJlZmVyZW5jZTtcbiAgICBzd2l0Y2ggKHRoaXMuaW50ZXJ2YWxVbml0KSB7XG4gICAgICBjYXNlICdkYXknOlxuICAgICAgICByZXN1bHQgPSBhZGRUb0RhdGUocmVzdWx0LCB7IGRheXM6IHRoaXMuaW50ZXJ2YWxMZW5ndGggfSk7XG4gICAgICAgIGlmIChpc0JlZm9yZVN0YXJ0KHJlc3VsdCkpIHJlc3VsdCA9IHN0YXJ0RGF0ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIGlmICh0aGlzLmRheU9mTW9udGggfHwgdGhpcy53ZWVrTnVtYmVyKSB7XG4gICAgICAgICAgcmVzdWx0ID0gYWRkVG9EYXRlKHJlc3VsdCwge1xuICAgICAgICAgICAgbW9udGhzOiB0aGlzLmludGVydmFsTGVuZ3RoLFxuICAgICAgICAgICAgZGF5czogLTE0LFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHRoaXMuZGF5T2ZNb250aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV4dERheU9mTW9udGgocmVzdWx0LCB0aGlzLmRheU9mTW9udGgpO1xuXG4gICAgICAgICAgICBpZiAoaXNCZWZvcmVTdGFydChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXlPZk1vbnRoKHN0YXJ0RGF0ZSwgdGhpcy5kYXlPZk1vbnRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMud2Vla051bWJlcikge1xuICAgICAgICAgICAgbGV0IHdlZWtEYXkgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF5c09mV2VlayAmJiB0aGlzLmRheXNPZldlZWsubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBbd2Vla0RheV0gPSB0aGlzLmRheXNPZldlZWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSBuZXh0V2Vla09mTW9udGgocmVzdWx0LCB0aGlzLndlZWtOdW1iZXIsIHdlZWtEYXkpO1xuXG4gICAgICAgICAgICBpZiAoaXNCZWZvcmVTdGFydChyZXN1bHQpKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IG5leHRXZWVrT2ZNb250aChzdGFydERhdGUsIHRoaXMud2Vla051bWJlciwgd2Vla0RheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGFkZFRvRGF0ZShyZXN1bHQsIHsgbW9udGhzOiB0aGlzLmludGVydmFsTGVuZ3RoIH0pO1xuICAgICAgICAgIGlmIChpc0JlZm9yZVN0YXJ0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXlPZk1vbnRoKHN0YXJ0RGF0ZSwgcmVmZXJlbmNlLmdldERhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5tb250aCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZXN1bHQgPSBhZGRUb0RhdGUocmVzdWx0LCB7XG4gICAgICAgICAgICB5ZWFyczogdGhpcy5pbnRlcnZhbExlbmd0aCxcbiAgICAgICAgICAgIG1vbnRoczogLTYsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXN1bHQgPSBuZXh0RGF5T2ZZZWFyKHJlc3VsdCwgdGhpcy5tb250aCwgdGhpcy5kYXlPZk1vbnRoIHx8IDEpO1xuICAgICAgICAgIGlmIChpc0JlZm9yZVN0YXJ0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXlPZlllYXIoXG4gICAgICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgdGhpcy5tb250aCxcbiAgICAgICAgICAgICAgdGhpcy5kYXlPZk1vbnRoIHx8IDEsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBhZGRUb0RhdGUocmVzdWx0LCB7IHllYXJzOiB0aGlzLmludGVydmFsTGVuZ3RoIH0pO1xuICAgICAgICAgIGlmIChpc0JlZm9yZVN0YXJ0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXlPZlllYXIoXG4gICAgICAgICAgICAgIHN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgcmVmZXJlbmNlLmdldE1vbnRoKCksXG4gICAgICAgICAgICAgIHJlZmVyZW5jZS5nZXREYXRlKCksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICBpZiAodGhpcy5kYXlzT2ZXZWVrICYmIHRoaXMuZGF5c09mV2Vlay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIG9jY3VycmVuY2VzIHJlbWFpbmluZyBmb3IgdGhlIGN1cnJlbnQgd2Vla1xuICAgICAgICAgIGlmICh0aGlzLmRheXNPZldlZWsuZmluZEluZGV4KChkYXkpID0+IChcbiAgICAgICAgICAgIGRheSA+IHJlc3VsdC5nZXREYXkoKVxuICAgICAgICAgICkpICE9PSAtMSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gYWRkVG9EYXRlKHJlc3VsdCwgeyBkYXlzOiAxIH0pO1xuICAgICAgICAgICAgcmVzdWx0ID0gbmV4dERheU9mV2VlayhyZXN1bHQsIHRoaXMuZGF5c09mV2Vlayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIERvbmUgd2l0aCBjdXJyZW50IHdlZWssIHN0YXJ0IGF0IGZvbGxvd2luZyBTdW5kYXlcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXkocmVzdWx0LCAwKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmludGVydmFsTGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICByZXN1bHQgPSBhZGRUb0RhdGUocmVzdWx0LCB7IHdlZWtzOiB0aGlzLmludGVydmFsTGVuZ3RoIC0gMSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXlPZldlZWsocmVzdWx0LCB0aGlzLmRheXNPZldlZWspO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0JlZm9yZVN0YXJ0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXlPZldlZWsoc3RhcnREYXRlLCB0aGlzLmRheXNPZldlZWspO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBhZGRUb0RhdGUocmVzdWx0LCB7IHdlZWtzOiB0aGlzLmludGVydmFsTGVuZ3RoIH0pO1xuICAgICAgICAgIGlmIChpc0JlZm9yZVN0YXJ0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHREYXlPZldlZWsoc3RhcnREYXRlLCBbcmVmZXJlbmNlLmdldERheSgpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub25XZWVrZW5kICE9PSAnbm8tY2hhbmdlJyAmJiBpc1dlZWtlbmQocmVzdWx0KSkge1xuICAgICAgbGV0IGZvcndhcmQ7XG4gICAgICBzd2l0Y2ggKHRoaXMub25XZWVrZW5kKSB7XG4gICAgICAgIGNhc2UgJ3ByZXZpb3VzLXdlZWtkYXknOlxuICAgICAgICAgIGZvcndhcmQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbmV4dC13ZWVrZGF5JzpcbiAgICAgICAgICBmb3J3YXJkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbmVhcmVzdC13ZWVrZGF5JzpcbiAgICAgICAgICBmb3J3YXJkID0gcmVzdWx0LmdldERheSgpID09PSAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGZvcndhcmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9yd2FyZCkgcmVzdWx0ID0gbmV4dERheShyZXN1bHQsIDEpOyAvLyBOZXh0IE1vbmRheVxuICAgICAgZWxzZSByZXN1bHQgPSBwcmV2aW91c0RheShyZXN1bHQsIDUpOyAvLyBQcmV2aW91cyBGcmlkYXlcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbmREYXRlICYmIGlzRGF0ZUJlZm9yZSh0aGlzLmVuZERhdGUsIHJlc3VsdCkpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZHZhbmNlIHRoZSByZWN1cnJlbmNlIHRvIHRoZSBuZXh0IGRhdGUuIFRoaXMgd2lsbCB1cGRhdGUgdGhlIHJlbWFpbmluZ1xuICAgKiByZXBldGl0aW9uIGNvdW50IGlmIG5lZWRlZC5cbiAgICovXG4gIGFkdmFuY2UoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm1heENvdW50ID09PSAnbnVtYmVyJyAmJiB0aGlzLm1heENvdW50ID4gMCkge1xuICAgICAgdGhpcy5tYXhDb3VudCAtPSAxO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciBvciBub3QgdGhlIHJlY3VycmVuY2Ugd2FzIGNyZWF0ZWQgd2l0aCB0aGUgZGVmYXVsdFxuICAgKiBvcHRpb25zLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcmVjdXJyaW5nIGRhdGUgaXMgYSBkZWZhdWx0IHJlY3VycmVuY2UsIGFuZFxuICAgKiAgIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGlzRGVmYXVsdCgpIHtcbiAgICBjb25zdCBkZWYgPSBuZXcgUmVjdXJyaW5nRGF0ZSh0aGlzLmludGVydmFsVW5pdCk7XG4gICAgaWYgKHRoaXMuaW50ZXJ2YWxMZW5ndGggIT09IGRlZi5pbnRlcnZhbExlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0aGlzLnN0YXJ0RGF0ZT8uZ2V0VGltZSgpICE9PSBkZWYuc3RhcnREYXRlPy5nZXRUaW1lKCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5iYXNlT25Db21wbGV0aW9uICE9PSBkZWYuYmFzZU9uQ29tcGxldGlvbikgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0aGlzLndlZWtOdW1iZXIgIT09IGRlZi53ZWVrTnVtYmVyKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFfLmlzRXF1YWwodGhpcy5kYXlzT2ZXZWVrLCBkZWYuZGF5c09mV2VlaykpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5tb250aCAhPT0gZGVmLm1vbnRoKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHRoaXMuZGF5T2ZNb250aCAhPT0gZGVmLmRheU9mTW9udGgpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5vbldlZWtlbmQgIT09IGRlZi5vbldlZWtlbmQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5lbmREYXRlPy5nZXRUaW1lKCkgIT09IGRlZi5lbmREYXRlPy5nZXRUaW1lKCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodGhpcy5tYXhDb3VudCAhPT0gZGVmLm1heENvdW50KSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZWN1cnJpbmcgZGF0ZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHJlY3VycmluZyBkYXRlLlxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5pbnRlcnZhbExlbmd0aDtcblxuICAgIGxldCBzdHJWYWx1ZSA9ICcnO1xuICAgIHN3aXRjaCAodGhpcy5pbnRlcnZhbFVuaXQpIHtcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIHN0clZhbHVlID0gbGVuZ3RoID09PSAxID8gJ0RhaWx5JyA6IGBFdmVyeSAke2xlbmd0aH0gZGF5c2A7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIHN0clZhbHVlID0gbGVuZ3RoID09PSAxID8gJ1dlZWtseScgOiBgRXZlcnkgJHtsZW5ndGh9IHdlZWtzYDtcblxuICAgICAgICBpZiAodGhpcy5kYXlzT2ZXZWVrICYmIHRoaXMuZGF5c09mV2Vlay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3RyVmFsdWUgKz0gJyBvbiAnO1xuICAgICAgICAgIGlmIChfLnVuaXEodGhpcy5kYXlzT2ZXZWVrKS5sZW5ndGggPT09IDcpIHtcbiAgICAgICAgICAgIHN0clZhbHVlICs9ICdhbGwgZGF5cyc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGF5c09mV2Vlay5mb3JFYWNoKChkYXksIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHN0clZhbHVlICs9ICcsICc7XG4gICAgICAgICAgICAgIHN0clZhbHVlICs9IGdldFdlZWtkYXlOYW1lKGRheSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIHN0clZhbHVlID0gbGVuZ3RoID09PSAxID8gJ01vbnRobHknIDogYEV2ZXJ5ICR7bGVuZ3RofSBtb250aHNgO1xuXG4gICAgICAgIGlmICh0aGlzLmRheU9mTW9udGgpIHtcbiAgICAgICAgICBzdHJWYWx1ZSArPSBgIG9uIHRoZSAke29yZGluYWwodGhpcy5kYXlPZk1vbnRoKX1gO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMud2Vla051bWJlciAmJiB0aGlzLmRheXNPZldlZWs/Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGxldCB3ZWVrU3RyO1xuICAgICAgICAgIGlmICh0aGlzLndlZWtOdW1iZXIgPCA1KSB3ZWVrU3RyID0gb3JkaW5hbCh0aGlzLndlZWtOdW1iZXIpO1xuICAgICAgICAgIGVsc2Ugd2Vla1N0ciA9ICdsYXN0JztcbiAgICAgICAgICBjb25zdCBkYXlTdHIgPSBnZXRXZWVrZGF5TmFtZSh0aGlzLmRheXNPZldlZWtbMF0pO1xuICAgICAgICAgIHN0clZhbHVlICs9IGAgb24gdGhlICR7d2Vla1N0cn0gJHtkYXlTdHJ9YDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICBzdHJWYWx1ZSA9IGxlbmd0aCA9PT0gMSA/ICdBbm51YWxseScgOiBgRXZlcnkgJHtsZW5ndGh9IHllYXJzYDtcblxuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih0aGlzLm1vbnRoKSAmJiB0aGlzLmRheU9mTW9udGgpIHtcbiAgICAgICAgICBjb25zdCBtb250aFN0ciA9IGdldE1vbnRoTmFtZSh0aGlzLm1vbnRoKTtcbiAgICAgICAgICBjb25zdCBkYXlTdHIgPSBvcmRpbmFsKHRoaXMuZGF5T2ZNb250aCk7XG4gICAgICAgICAgc3RyVmFsdWUgKz0gYCBvbiAke21vbnRoU3RyfSAke2RheVN0cn1gO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0clZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIExpa2UgW3RvU3RyaW5nXXtAbGluayBtb2R1bGU6cmVjdXJyaW5nRGF0ZX5SZWN1cnJpbmdEYXRlI3RvU3RyaW5nfSwgYnV0XG4gICAqIG1vcmUgdmVyYm9zZSwgaW5jbHVkaW5nIGFsbCBkZXRhaWxzIG9mIHRoZSByZWN1cnJlbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0ZUZvcm1hdFN0ciBUaGUgZm9ybWF0IHRvIHVzZSBmb3IgZGF0ZXMuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSByZWN1cnJpbmcgZGF0ZS5cbiAgICovXG4gIHRvU3RyaW5nVmVyYm9zZShkYXRlRm9ybWF0U3RyKSB7XG4gICAgbGV0IHN0clZhbHVlID0gdGhpcy50b1N0cmluZygpO1xuXG4gICAgaWYgKHRoaXMuc3RhcnREYXRlKSB7XG4gICAgICBjb25zdCBkYXRlU3RyID0gZm9ybWF0RGF0ZSh0aGlzLnN0YXJ0RGF0ZSwgZGF0ZUZvcm1hdFN0cik7XG4gICAgICBzdHJWYWx1ZSArPSBgLCBmcm9tICR7ZGF0ZVN0cn1gO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmVuZERhdGUpIHtcbiAgICAgIGNvbnN0IGRhdGVTdHIgPSBmb3JtYXREYXRlKHRoaXMuZW5kRGF0ZSwgZGF0ZUZvcm1hdFN0cik7XG4gICAgICBzdHJWYWx1ZSArPSBgLCB1bnRpbCAke2RhdGVTdHJ9YDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubWF4Q291bnQpIHtcbiAgICAgIGlmICh0aGlzLm1heENvdW50ID09PSAxKSBzdHJWYWx1ZSArPSAnLCAxIHRpbWUnO1xuICAgICAgZWxzZSBzdHJWYWx1ZSArPSBgLCAke3RoaXMubWF4Q291bnR9IHRpbWVzYDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5iYXNlT25Db21wbGV0aW9uKSB7XG4gICAgICBzdHJWYWx1ZSArPSAnLCBiYXNlZCBvbiBjb21wbGV0aW9uIGRhdGUnO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9uV2Vla2VuZCAhPT0gJ25vLWNoYW5nZScpIHtcbiAgICAgIHN0clZhbHVlICs9ICcsICc7XG4gICAgICBzd2l0Y2ggKHRoaXMub25XZWVrZW5kKSB7XG4gICAgICAgIGNhc2UgJ3ByZXZpb3VzLXdlZWtkYXknOlxuICAgICAgICAgIHN0clZhbHVlICs9ICdwcmV2aW91cyB3ZWVrZGF5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbmV4dC13ZWVrZGF5JzpcbiAgICAgICAgICBzdHJWYWx1ZSArPSAnbmV4dCB3ZWVrZGF5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbmVhcmVzdC13ZWVrZGF5JzpcbiAgICAgICAgICBzdHJWYWx1ZSArPSAnbmVhcmVzdCB3ZWVrZGF5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyVmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgcmVjdXJyaW5nIGRhdGUgZnJvbSBhIEpTT04gb2JqZWN0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgSlNPTiBvYmplY3QgaG9sZGluZyB0aGUgc2VyaWFsaXplZCBkYXRhLlxuICAgKiBAcmV0dXJucyB7bW9kdWxlOnJlY3VycmluZ0RhdGV+UmVjdXJyaW5nRGF0ZX0gQSBuZXcgcmVjdXJyaW5nIGRhdGVcbiAgICogICBjb252ZXJ0ZWQgZnJvbSB0aGUgSlNPTiBkYXRhLlxuICAgKi9cbiAgc3RhdGljIGZyb21Kc29uKGRhdGEpIHtcbiAgICBjb25zdCBjb252ZXJ0RGF0ZSA9IChkYXRlKSA9PiAoZGF0ZSA/IHBhcnNlSXNvRGF0ZVRpbWUoZGF0ZSkgOiBudWxsKTtcbiAgICByZXR1cm4gbmV3IFJlY3VycmluZ0RhdGUoZGF0YS5pbnRlcnZhbFVuaXQsIHtcbiAgICAgIGludGVydmFsTGVuZ3RoOiBkYXRhLmludGVydmFsTGVuZ3RoLFxuICAgICAgc3RhcnREYXRlOiBjb252ZXJ0RGF0ZShkYXRhLnN0YXJ0RGF0ZSksXG4gICAgICBiYXNlT25Db21wbGV0aW9uOiBkYXRhLmJhc2VPbkNvbXBsZXRpb24sXG4gICAgICB3ZWVrTnVtYmVyOiBkYXRhLndlZWtOdW1iZXIsXG4gICAgICBkYXlzT2ZXZWVrOiBkYXRhLmRheXNPZldlZWssXG4gICAgICBtb250aDogZGF0YS5tb250aCxcbiAgICAgIGRheU9mTW9udGg6IGRhdGEuZGF5T2ZNb250aCxcbiAgICAgIG9uV2Vla2VuZDogZGF0YS5vbldlZWtlbmQsXG4gICAgICBlbmREYXRlOiBjb252ZXJ0RGF0ZShkYXRhLmVuZERhdGUpLFxuICAgICAgbWF4Q291bnQ6IGRhdGEubWF4Q291bnQsXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVjdXJyaW5nRGF0ZTtcbiIsIi8qKlxuICogRGVmaW5lcyB0aGUgW1NldHRpbmdzXXtAbGluayBtb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N9IGNsYXNzLlxuICogQG1vZHVsZSBzZXR0aW5nc1xuICovXG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IGdldEpzb25UeXBlLCB2YWxpZGF0ZVZhbHVlIH0gZnJvbSAnLi91dGlsaXR5L2RhdGEnO1xuaW1wb3J0IHsgZ2V0RGF0ZUZvcm1hdCB9IGZyb20gJy4vdXRpbGl0eS9kYXRlcyc7XG5cbi8qKlxuICogT2JqZWN0IGhvbGRpbmcgcHJpdmF0ZSBtZW1iZXJzIGZvciB0aGVcbiAqIFtTZXR0aW5nc117QGxpbmsgbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfSBjbGFzcy5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35wcml2YXRlc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0b3JhZ2VNZXRob2QgVGhlIG1ldGhvZCBmb3Igc3RvcmluZyBkYXRhOiAnbm9uZScgKG5vXG4gKiAgIHN0b3JhZ2UpIG9yICdsb2NhbCcgKGxvY2FsIHN0b3JhZ2UgaW4gdGhlIGJyb3dzZXIpLlxuICogQHByb3BlcnR5IHttb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+ZGF0ZUZvcm1hdH0gZGF0ZUZvcm1hdCBUaGUgZm9ybWF0IHRvIHVzZVxuICogICBmb3IgY2FsZW5kYXIgZGF0ZXMuXG4gKiBAcHJvcGVydHkgez9udW1iZXJ9IGRlbGV0ZUFmdGVyIERldGVybWluZXMgaG93IG1hbnkgZGF5cyBhZnRlciBhIHRhc2sgaXNcbiAqICAgY29tcGxldGVkIGJlZm9yZSB0aGUgdGFzayB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGVsZXRlZC4gSWYgc2V0IHRvIG51bGwsXG4gKiAgIGNvbXBsZXRlZCB0YXNrcyB3aWxsIG5ldmVyIGJlIGRlbGV0ZWQgYXV0b21hdGljYWxseS5cbiAqIEBwcm9wZXJ0eSB7TWFwfSBmaWx0ZXJHcm91cHMgQSBtYXAgYXNzb2NpYXRpbmcgdGhlIG5hbWUgb2YgYSBmaWx0ZXIgZ3JvdXAgdG9cbiAqICAgYSBbZmlsdGVyT3B0aW9uc117QGxpbmsgbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmZpbHRlck9wdGlvbnN9IG9iamVjdC5cbiAqIEBwcm9wZXJ0eSB7RXZlbnRFbWl0dGVyfSBldmVudEVtaXR0ZXIgSG9sZHMgdGhlIGV2ZW50IGVtaXR0ZXIgd2hpY2hcbiAqICAgZGlzcGF0Y2hlcyBldmVudHMgdG8gYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzLlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZSBkYXRhIGZvciB0aGUgW1NldHRpbmdzXXtAbGluayBtb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N9IGNsYXNzLlxuICogQHR5cGUge1dlYWtNYXB9XG4gKiBAc2VlIG1vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35wcml2YXRlc1xuICovXG5jb25zdCBwcml2YXRlTWVtYmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogSG9sZHMgdXNlciBhcHAgc2V0dGluZ3MuXG4gKi9cbmNsYXNzIFNldHRpbmdzIHtcbiAgLyoqXG4gICAqIEhvbGRzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBwYXR0ZXJuIHRvIHVzZSBmb3IgZm9ybWF0dGluZyBhbmQgcGFyc2luZ1xuICAgKiBjYWxlbmRhciBkYXRlcy5cbiAgICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmRhdGVGb3JtYXRcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IG91dHB1dFBhdHRlcm4gVGhlIGRhdGUgZm9ybWF0IHN0cmluZyB1c2VkIGZvclxuICAgKiAgIGZvcm1hdHRpbmcgZGF0ZXMgZm9yIG91dHB1dC5cbiAgICogQHByb3BlcnR5IHtzdHJpbmdbXX0gaW5wdXRQYXR0ZXJucyBBbiBhcnJheSBvZiBkYXRlIGZvcm1hdCBzdHJpbmdzIHVzZWRcbiAgICogICBmb3IgcGFyc2luZyBkYXRlcy4gRWFjaCBwYXR0ZXJuIHdpbGwgYmUgdHJpZWQgaW4gc2VxdWVuY2UgdW50aWwgYSB2YWxpZFxuICAgKiAgIG1hdGNoIGlzIG1hZGUuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB2aXN1YWxQYXR0ZXJuIEEgdmlzdWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBkYXRlXG4gICAqICAgZm9ybWF0IHN1aXRhYmxlIGZvciBkaXNwbGF5aW5nIHRvIHRoZSB1c2VyLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBkYXRlIGZvcm1hdC4gVmFsaWQgdmFsdWVzIGFyZSAnbG9jYWwnLFxuICAgKiAgICdpc28nLCAnbW9udGgtZGF5LXllYXInLCAnZGF5LW1vbnRoLXllYXInLCBhbmQgJ3llYXItbW9udGgtZGF5Jy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEhvbGRzIG9wdGlvbnMgZm9yIGRpc3BsYXlpbmcgYSB0YXNrIGZpbHRlci5cbiAgICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmZpbHRlck9wdGlvbnNcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGdyb3VwQnkgVGhlIGZpZWxkIHRvIGdyb3VwIHRoZSB0YXNrcyBieTogJ2RlZmF1bHQnLFxuICAgKiAgICdkdWUtZGF0ZScsICdwcmlvcml0eScsICdwcm9qZWN0Jywgb3IgJ25vbmUnLiBUaGUgZGVmYXVsdCBkZXBlbmRzIG9uIHRoZVxuICAgKiAgIHR5cGUgb2YgZmlsdGVyLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gc29ydEJ5IFRoZSBwcmltYXJ5IGZpZWxkIHRvIHNvcnQgdGhlIHRhc2tzIGJ5OiAnbmFtZScsXG4gICAqICAgJ2R1ZS1kYXRlJywgJ2NyZWF0ZS1kYXRlJywgJ3ByaW9yaXR5Jywgb3IgJ3Byb2plY3QnLlxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IHNvcnREZXNjZW5kaW5nIEluZGljYXRlcyB3aGV0aGVyIHRvIHNvcnQgaW4gZGVzY2VuZGluZ1xuICAgKiAgIG9yZGVyIHJhdGhlciB0aGFuIGFzY2VuZGluZyBvcmRlci5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSBzaG93Q29tcGxldGVkIEluZGljYXRlcyB3aGV0aGVyIHRvIGluY2x1ZGUgY29tcGxldGVkXG4gICAqICAgdGFza3MgaW4gdGhlIHJlc3VsdHMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFdmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSBzZXR0aW5nIGlzIG1vZGlmaWVkLlxuICAgKiBAZXZlbnQgbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfnVwZGF0ZVNldHRpbmdcbiAgICogQHR5cGUge09iamVjdH1cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGU6ICd1cGRhdGUtc2V0dGluZycuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBzZXR0aW5nLiBUaGlzIGlzIHRoZSBzYW1lIGFzIHRoZVxuICAgKiAgIG5hbWUgb2YgdGhlIGNvcnJlc3BvbmRpbmcgaW5zdGFuY2UgcHJvcGVydHksIGV4Y2VwdCBmb3IgZmlsdGVyIGdyb3VwXG4gICAqICAgc2V0dGluZ3MsIHdoaWNoIGhhdmUgdGhlIGZvcm0gJ2ZpbHRlckdyb3Vwcy5ncm91cC1uYW1lJywgd2hlcmVcbiAgICogICAnZ3JvdXAtbmFtZScgaXMgdGhlIG5hbWUgb2YgdGhlIGZpbHRlciBncm91cC5cbiAgICogQHByb3BlcnR5IHsqfSB2YWx1ZSBUaGUgbmV3IHZhbHVlIG9mIHRoZSBzZXR0aW5nLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gb2JqZWN0IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN0YXR1cyBvZiBhIGRhdGEgaW1wb3J0LlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+aW1wb3J0U3RhdHVzXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IGVycm9ycyBBbiBhcnJheSBvZiBlcnJvciBtZXNzYWdlcyBkZXNjcmliaW5nIGFueVxuICAgKiAgIGVycm9ycyB0aGF0IG9jY3VycmVkIGR1cmluZyB0aGUgaW1wb3J0LlxuICAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIG9iamVjdCBob2xkaW5nIHRoZSBkZWZhdWx0IHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSB7XG4gICAgICBzdG9yYWdlTWV0aG9kOiBudWxsLFxuICAgICAgZGF0ZUZvcm1hdDoge30sXG4gICAgICBkZWxldGVBZnRlcjogbnVsbCxcbiAgICAgIGZpbHRlckdyb3VwczogbmV3IE1hcCgpLFxuICAgICAgZXZlbnRFbWl0dGVyOiBuZXcgRXZlbnRFbWl0dGVyKCksXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuXG4gICAgdGhpcy5yZXNldFRvRGVmYXVsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2YgYSBzZXR0aW5nLiBBbHRob3VnaCBlYWNoIHNldHRpbmcgY2FuIGJlIHJldHJpZXZlZFxuICAgKiBkaXJlY3RseSB1c2luZyBvdGhlciBjbGFzcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzLCB0aGlzIG1ldGhvZCBjYW4gbWFrZVxuICAgKiBzdG9yYWdlIGFuZCBzZXJpYWxpemF0aW9uIGVhc2llci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNldHRpbmcuIFRoaXMgaXMgdGhlIHNhbWUgYXMgdGhlIG5hbWVcbiAgICogICBvZiB0aGUgY29ycmVzcG9uZGluZyBpbnN0YW5jZSBwcm9wZXJ0eSwgZXhjZXB0IGZvciBmaWx0ZXIgZ3JvdXBcbiAgICogICBzZXR0aW5ncywgd2hpY2ggaGF2ZSB0aGUgZm9ybSAnZmlsdGVyR3JvdXBzLmdyb3VwLW5hbWUnLCB3aGVyZVxuICAgKiAgICdncm91cC1uYW1lJyBpcyB0aGUgbmFtZSBvZiB0aGUgZmlsdGVyIGdyb3VwLlxuICAgKiBAcmV0dXJucyB7Kn0gVGhlIHZhbHVlIG9mIHRoZSBzZXR0aW5nLiBGb3IgZmlsdGVyIGdyb3VwIHNldHRpbmdzLCB0aGlzIGlzXG4gICAqICAgYSBbZmlsdGVyT3B0aW9uc117QGxpbmsgbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmZpbHRlck9wdGlvbnN9IG9iamVjdC5cbiAgICogICBGb3IgZGF0ZSBmb3JtYXQgc2V0dGluZ3MsIHRoaXMgaXMgYVxuICAgKiAgIFtkYXRlRm9ybWF0XXtAbGluayBtb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+ZGF0ZUZvcm1hdH0gb2JqZWN0LlxuICAgKi9cbiAgZ2V0U2V0dGluZyhuYW1lKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlICdzdG9yYWdlTWV0aG9kJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZU1ldGhvZDtcbiAgICAgIGNhc2UgJ2RhdGVGb3JtYXQnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRlRm9ybWF0O1xuICAgICAgY2FzZSAnZGVsZXRlQWZ0ZXInOlxuICAgICAgICByZXR1cm4gdGhpcy5kZWxldGVBZnRlcjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ2ZpbHRlckdyb3Vwcy4nKSkge1xuICAgICAgICAgIGNvbnN0IGdyb3VwID0gbmFtZS5zdWJzdHJpbmcoJ2ZpbHRlckdyb3Vwcy4nLmxlbmd0aCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmlsdGVyT3B0aW9ucyhncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgYSBzZXR0aW5nLiBBbHRob3VnaCBlYWNoIHNldHRpbmcgY2FuIGJlIHNldCBkaXJlY3RseVxuICAgKiB1c2luZyBvdGhlciBjbGFzcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzLCB0aGlzIG1ldGhvZCBjYW4gbWFrZSBzdG9yYWdlIGFuZFxuICAgKiBkZXNlcmlhbGl6YXRpb24gZWFzaWVyLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc2V0dGluZy4gVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgbmFtZVxuICAgKiAgIG9mIHRoZSBjb3JyZXNwb25kaW5nIGluc3RhbmNlIHByb3BlcnR5LCBleGNlcHQgZm9yIGZpbHRlciBncm91cFxuICAgKiAgIHNldHRpbmdzLCB3aGljaCBoYXZlIHRoZSBmb3JtICdmaWx0ZXJHcm91cHMuZ3JvdXAtbmFtZScsIHdoZXJlXG4gICAqICAgJ2dyb3VwLW5hbWUnIGlzIHRoZSBuYW1lIG9mIHRoZSBmaWx0ZXIgZ3JvdXAuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBzZXR0aW5nLiBGb3IgZmlsdGVyIGdyb3VwIHNldHRpbmdzLCB0aGlzXG4gICAqICAgc2hvdWxkIGJlIGFcbiAgICogICBbZmlsdGVyT3B0aW9uc117QGxpbmsgbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmZpbHRlck9wdGlvbnN9IG9iamVjdC5cbiAgICogICBGb3IgZGF0ZSBmb3JtYXQgc2V0dGluZ3MsIHRoaXMgY2FuIGJlIGVpdGhlciBhXG4gICAqICAgW2RhdGVGb3JtYXRde0BsaW5rIG1vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35kYXRlRm9ybWF0fSBvYmplY3Qgb3IgYVxuICAgKiAgIHN0cmluZyBzcGVjaWZ5aW5nIHRoZSBuYW1lIG9mIHRoZSBmb3JtYXQgdG8gdXNlLlxuICAgKiBAZmlyZXMgbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfnVwZGF0ZVNldHRpbmdcbiAgICovXG4gIHNldFNldHRpbmcobmFtZSwgdmFsdWUpIHtcbiAgICBsZXQgdmFsaWRTZXR0aW5nID0gdHJ1ZTtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3N0b3JhZ2VNZXRob2QnOlxuICAgICAgICB0aGlzLnN0b3JhZ2VNZXRob2QgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXRlRm9ybWF0JzpcbiAgICAgICAgdGhpcy5zZXREYXRlRm9ybWF0KHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkZWxldGVBZnRlcic6XG4gICAgICAgIHRoaXMuZGVsZXRlQWZ0ZXIgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobmFtZS5zdGFydHNXaXRoKCdmaWx0ZXJHcm91cHMuJykpIHtcbiAgICAgICAgICBjb25zdCBncm91cCA9IG5hbWUuc3Vic3RyaW5nKCdmaWx0ZXJHcm91cHMuJy5sZW5ndGgpO1xuICAgICAgICAgIHRoaXMuc2V0RmlsdGVyT3B0aW9ucyhncm91cCwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbGlkU2V0dGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICh2YWxpZFNldHRpbmcpIHtcbiAgICAgIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlLXNldHRpbmcnLCB7XG4gICAgICAgIHR5cGU6ICd1cGRhdGUtc2V0dGluZycsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHZhbHVlOiBfLmNsb25lRGVlcCh2YWx1ZSksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gZm9yIGVhY2ggYXZhaWxhYmxlIHNldHRpbmcuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBleGVjdXRlIGZvciBlYWNoIHNldHRpbmcuIFRoZVxuICAgKiAgIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkIHRoZSBuYW1lIG9mIGVhY2ggc2V0dGluZyBhbG9uZyB3aXRoIGl0cyB2YWx1ZS5cbiAgICovXG4gIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBjb25zdCBzZXR0aW5nTGlzdCA9IFtcbiAgICAgICdzdG9yYWdlTWV0aG9kJyxcbiAgICAgICdkYXRlRm9ybWF0JyxcbiAgICAgICdkZWxldGVBZnRlcicsXG4gICAgXTtcblxuICAgIGNvbnN0IGdyb3VwS2V5cyA9IFsuLi5wcml2YXRlcy5maWx0ZXJHcm91cHMua2V5cygpXS5tYXAoXG4gICAgICAoa2V5KSA9PiBgZmlsdGVyR3JvdXBzLiR7a2V5fWAsXG4gICAgKTtcbiAgICBzZXR0aW5nTGlzdC5wdXNoKC4uLmdyb3VwS2V5cyk7XG5cbiAgICBzZXR0aW5nTGlzdC5mb3JFYWNoKChzZXR0aW5nKSA9PiB7XG4gICAgICBjYWxsYmFjayhzZXR0aW5nLCB0aGlzLmdldFNldHRpbmcoc2V0dGluZykpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBtZXRob2QgZm9yIHN0b3JpbmcgZGF0YTogJ25vbmUnIChubyBzdG9yYWdlKSBvciAnbG9jYWwnIChsb2NhbCBzdG9yYWdlXG4gICAqIGluIHRoZSBicm93c2VyKS5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBzdG9yYWdlTWV0aG9kKCkge1xuICAgIHJldHVybiBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuc3RvcmFnZU1ldGhvZDtcbiAgfVxuXG4gIHNldCBzdG9yYWdlTWV0aG9kKG1ldGhvZCkge1xuICAgIGlmIChtZXRob2QgIT09ICdub25lJyAmJiBtZXRob2QgIT09ICdsb2NhbCcpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBVbnJlY29nbml6ZWQgc3RvcmFnZSBtZXRob2Q6IFwiJHttZXRob2R9XCJgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcbiAgICBwcml2YXRlcy5zdG9yYWdlTWV0aG9kID0gbWV0aG9kO1xuXG4gICAgcHJpdmF0ZXMuZXZlbnRFbWl0dGVyLmVtaXQoJ3VwZGF0ZS1zZXR0aW5nJywge1xuICAgICAgdHlwZTogJ3VwZGF0ZS1zZXR0aW5nJyxcbiAgICAgIG5hbWU6ICdzdG9yYWdlTWV0aG9kJyxcbiAgICAgIHZhbHVlOiBtZXRob2QsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQW4gb2JqZWN0IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGZvcm1hdCB0byB1c2UgZm9yIGNhbGVuZGFyIGRhdGVzLlxuICAgKiBAdHlwZSB7bW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmRhdGVGb3JtYXR9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGRhdGVGb3JtYXQoKSB7XG4gICAgcmV0dXJuIF8uY2xvbmVEZWVwKHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5kYXRlRm9ybWF0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGhvdyBtYW55IGRheXMgYWZ0ZXIgYSB0YXNrIGlzIGNvbXBsZXRlZCBiZWZvcmUgdGhlIHRhc2sgd2lsbCBiZVxuICAgKiBhdXRvbWF0aWNhbGx5IGRlbGV0ZWQuIElmIHNldCB0byBudWxsLCBjb21wbGV0ZWQgdGFza3Mgd2lsbCBuZXZlciBiZVxuICAgKiBkZWxldGVkIGF1dG9tYXRpY2FsbHkuXG4gICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRlbGV0ZUFmdGVyKCkge1xuICAgIHJldHVybiBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuZGVsZXRlQWZ0ZXI7XG4gIH1cblxuICBzZXQgZGVsZXRlQWZ0ZXIoZGF5cykge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuICAgIHByaXZhdGVzLmRlbGV0ZUFmdGVyID0gZGF5cztcblxuICAgIHByaXZhdGVzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUtc2V0dGluZycsIHtcbiAgICAgIHR5cGU6ICd1cGRhdGUtc2V0dGluZycsXG4gICAgICBuYW1lOiAnZGVsZXRlQWZ0ZXInLFxuICAgICAgdmFsdWU6IGRheXMsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIG9iamVjdCBob2xkaW5nIG9wdGlvbnMgZm9yIGRpc3BsYXlpbmcgdGFzayBmaWx0ZXJzIGJlbG9uZ2luZyB0byBhXG4gICAqIHBhcnRpY3VsYXIgZmlsdGVyIGdyb3VwLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVyR3JvdXAgVGhlIGZpbHRlciBncm91cCB3aG9zZSBvcHRpb25zIGFyZSB0byBiZVxuICAgKiAgIHJldHJpZXZlZC5cbiAgICogQHJldHVybnMgez9tb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+ZmlsdGVyT3B0aW9uc30gQW4gb2JqZWN0IGhvbGRpbmcgdGhlXG4gICAqICAgZmlsdGVyIG9wdGlvbnMsIG9yIG51bGwgaWYgdGhlIGZpbHRlciBncm91cCB3YXMgbm90IGZvdW5kLlxuICAgKi9cbiAgZ2V0RmlsdGVyT3B0aW9ucyhmaWx0ZXJHcm91cCkge1xuICAgIGNvbnN0IG9wdHMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuZmlsdGVyR3JvdXBzLmdldChmaWx0ZXJHcm91cCk7XG4gICAgcmV0dXJuIG9wdHMgPyBfLmNsb25lRGVlcChvcHRzKSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG9wdGlvbnMgZm9yIGRpc3BsYXlpbmcgdGFzayBmaWx0ZXJzIGJlbG9uZ2luZyB0byBhIHBhcnRpY3VsYXIgZmlsdGVyXG4gICAqIGdyb3VwLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVyR3JvdXAgVGhlIGZpbHRlciBncm91cCB3aG9zZSBvcHRpb25zIGFyZSB0byBiZVxuICAgKiAgIGNoYW5nZWQuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmZpbHRlck9wdGlvbnN9IFtvcHRpb25zPXt9XSBBbiBvYmplY3RcbiAgICogICBzcGVjaWZ5aW5nIHRoZSBmaWx0ZXIgb3B0aW9ucyB0byBzZXQuIEFueSB1bnNwZWNpZmllZCBvcHRpb25zIHdpbGxcbiAgICogICByZXRhaW4gdGhlaXIgcHJpb3IgdmFsdWVzLCBvciB3aWxsIGJlIHNldCB0byBkZWZhdWx0IHZhbHVlcyBpZiB0aGV5IHdlcmVcbiAgICogICBub3QgcHJldmlvdXNseSBzZXQuXG4gICAqIEBmaXJlcyBtb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+dXBkYXRlU2V0dGluZ1xuICAgKi9cbiAgc2V0RmlsdGVyT3B0aW9ucyhmaWx0ZXJHcm91cCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29uc3QgeyBmaWx0ZXJHcm91cHMgfSA9IHByaXZhdGVzO1xuXG4gICAgY29uc3Qgb2xkT3B0aW9ucyA9IGZpbHRlckdyb3Vwcy5nZXQoZmlsdGVyR3JvdXApO1xuXG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IHtcbiAgICAgIGdyb3VwQnk6IG9wdGlvbnMuZ3JvdXBCeSA/PyBvbGRPcHRpb25zPy5ncm91cEJ5ID8/ICdkZWZhdWx0JyxcbiAgICAgIHNvcnRCeTogb3B0aW9ucy5zb3J0QnkgPz8gb2xkT3B0aW9ucz8uc29ydEJ5ID8/ICdjcmVhdGUtZGF0ZScsXG4gICAgICBzb3J0RGVzY2VuZGluZzogb3B0aW9ucy5zb3J0RGVzY2VuZGluZyA/PyBvbGRPcHRpb25zPy5zb3J0RGVzY2VuZGluZ1xuICAgICAgICA/PyBmYWxzZSxcbiAgICAgIHNob3dDb21wbGV0ZWQ6IG9wdGlvbnMuc2hvd0NvbXBsZXRlZCA/PyBvbGRPcHRpb25zPy5zaG93Q29tcGxldGVkXG4gICAgICAgID8/IGZhbHNlLFxuICAgIH07XG5cbiAgICBmaWx0ZXJHcm91cHMuc2V0KGZpbHRlckdyb3VwLCBuZXdPcHRpb25zKTtcblxuICAgIHByaXZhdGVzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUtc2V0dGluZycsIHtcbiAgICAgIHR5cGU6ICd1cGRhdGUtc2V0dGluZycsXG4gICAgICBuYW1lOiBgZmlsdGVyR3JvdXBzLiR7ZmlsdGVyR3JvdXB9YCxcbiAgICAgIHZhbHVlOiBfLmNsb25lRGVlcChuZXdPcHRpb25zKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBhbGwgc2V0dGluZ3MgdG8gdGhlaXIgZGVmYXVsdCB2YWx1ZXMuXG4gICAqIEBmaXJlcyBtb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+dXBkYXRlU2V0dGluZ1xuICAgKi9cbiAgcmVzZXRUb0RlZmF1bHQoKSB7XG4gICAgdGhpcy5zdG9yYWdlTWV0aG9kID0gJ2xvY2FsJztcbiAgICB0aGlzLnNldERhdGVGb3JtYXQoJ2xvY2FsJyk7XG4gICAgdGhpcy5kZWxldGVBZnRlciA9IDE0O1xuXG4gICAgY29uc3QgZmlsdGVyT3B0aW9ucyA9IHtcbiAgICAgIGdyb3VwQnk6ICdkZWZhdWx0JyxcbiAgICAgIHNvcnRCeTogJ2NyZWF0ZS1kYXRlJyxcbiAgICAgIHNvcnREZXNjZW5kaW5nOiBmYWxzZSxcbiAgICAgIHNob3dDb21wbGV0ZWQ6IGZhbHNlLFxuICAgIH07XG4gICAgWydkZWZhdWx0JywgJ2RhdGVzJywgJ3Byb2plY3RzJywgJ3ByaW9yaXRpZXMnXS5mb3JFYWNoKChncm91cCkgPT4ge1xuICAgICAgdGhpcy5zZXRGaWx0ZXJPcHRpb25zKGdyb3VwLCBmaWx0ZXJPcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHBhdHRlcm4gdXNlZCBmb3IgZm9ybWF0dGluZyBhbmQgcGFyc2luZyBkYXRlcy5cbiAgICogQHBhcmFtIHtzdHJpbmd8bW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmRhdGVGb3JtYXR9IFtmb3JtYXQ9bG9jYWxdIFRoZVxuICAgKiAgIHR5cGUgb2YgZGF0ZSBmb3JtYXQgdG8gdXNlLiBUaGlzIGNhbiBlaXRoZXIgYmUgYSBzdHJpbmcgc3BlY2lmeWluZyB0aGVcbiAgICogICBmb3JtYXQgdHlwZSAoJ2xvY2FsJywgJ2lzbycsICdtb250aC1kYXkteWVhcicsICdkYXktbW9udGgteWVhcicsIG9yXG4gICAqICAgJ3llYXItbW9udGgtZGF5JyksIG9yIGl0IGNhbiBiZSBhIGZ1bGxcbiAgICogICBbZGF0ZUZvcm1hdF17QGxpbmsgbW9kdWxlOnNldHRpbmdzflNldHRpbmdzfmRhdGVGb3JtYXR9IG9iamVjdC5cbiAgICogQGZpcmVzIG1vZHVsZTpzZXR0aW5nc35TZXR0aW5nc351cGRhdGVTZXR0aW5nXG4gICAqL1xuICBzZXREYXRlRm9ybWF0KGZvcm1hdCA9ICdsb2NhbCcpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcblxuICAgIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJykge1xuICAgICAgcHJpdmF0ZXMuZGF0ZUZvcm1hdCA9IFNldHRpbmdzLmxvb2t1cERhdGVGb3JtYXQoZm9ybWF0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJpdmF0ZXMuZGF0ZUZvcm1hdCA9IF8uY2xvbmVEZWVwKGZvcm1hdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZXMuZXZlbnRFbWl0dGVyLmVtaXQoJ3VwZGF0ZS1zZXR0aW5nJywge1xuICAgICAgdHlwZTogJ3VwZGF0ZS1zZXR0aW5nJyxcbiAgICAgIG5hbWU6ICdkYXRlRm9ybWF0JyxcbiAgICAgIHZhbHVlOiB0aGlzLmRhdGVGb3JtYXQsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgZm9ybWF0dGluZyBpbmZvcm1hdGlvbiBmb3IgYSBwYXJ0aWN1bGFyIGRhdGUgZm9ybWF0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9bG9jYWxdIFRoZSB0eXBlIG9mIGRhdGUgZm9ybWF0IHRvIGxvb2t1cDogJ2xvY2FsJyxcbiAgICogICAnaXNvJywgJ21vbnRoLWRheS15ZWFyJywgJ2RheS1tb250aC15ZWFyJywgb3IgJ3llYXItbW9udGgtZGF5Jy5cbiAgICogQHJldHVybnMge21vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35kYXRlRm9ybWF0fSBBbiBvYmplY3QgaG9sZGluZ1xuICAgKiAgIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkYXRlIGZvcm1hdC5cbiAgICovXG4gIHN0YXRpYyBsb29rdXBEYXRlRm9ybWF0KHR5cGUgPSAnbG9jYWwnKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdpc28nOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG91dHB1dFBhdHRlcm46ICd5eXl5LU1NLWRkJyxcbiAgICAgICAgICBpbnB1dFBhdHRlcm5zOiBbJ3l5eXktTU0tZGQnXSxcbiAgICAgICAgICB2aXN1YWxQYXR0ZXJuOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgJ21vbnRoLWRheS15ZWFyJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvdXRwdXRQYXR0ZXJuOiAnTU0vZGQveXl5eScsXG4gICAgICAgICAgaW5wdXRQYXR0ZXJuczogWydNTS9kZC95eScsICdNTS9kZC95eXl5J10sXG4gICAgICAgICAgdmlzdWFsUGF0dGVybjogJ01NL0REL1lZWVknLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgIH07XG4gICAgICBjYXNlICdkYXktbW9udGgteWVhcic6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3V0cHV0UGF0dGVybjogJ2RkL01NL3l5eXknLFxuICAgICAgICAgIGlucHV0UGF0dGVybnM6IFsnZGQvTU0veXknLCAnZGQvTU0veXl5eSddLFxuICAgICAgICAgIHZpc3VhbFBhdHRlcm46ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICB9O1xuICAgICAgY2FzZSAneWVhci1tb250aC1kYXknOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG91dHB1dFBhdHRlcm46ICd5eXl5L01NL2RkJyxcbiAgICAgICAgICBpbnB1dFBhdHRlcm5zOiBbJ3l5L01NL2RkJywgJ3l5eXkvTU0vZGQnXSxcbiAgICAgICAgICB2aXN1YWxQYXR0ZXJuOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgJ2xvY2FsJzpcbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgY29uc3QgZm9ybWF0T3B0cyA9IHtcbiAgICAgICAgICB0b2tlblN0eWxlOiAnaW50ZXJuYWwnLFxuICAgICAgICAgIGZ1bGxZZWFyOiBmYWxzZSxcbiAgICAgICAgICBwYWRNb250aHM6IHRydWUsXG4gICAgICAgICAgcGFkRGF5czogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaW5wdXRQYXR0ZXJucyA9IFtnZXREYXRlRm9ybWF0KG51bGwsIGZvcm1hdE9wdHMpXTtcblxuICAgICAgICBmb3JtYXRPcHRzLmZ1bGxZZWFyID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgb3V0cHV0UGF0dGVybiA9IGdldERhdGVGb3JtYXQobnVsbCwgZm9ybWF0T3B0cyk7XG4gICAgICAgIGlucHV0UGF0dGVybnMucHVzaChvdXRwdXRQYXR0ZXJuKTtcblxuICAgICAgICBmb3JtYXRPcHRzLnRva2VuU3R5bGUgPSAndmlzdWFsJztcbiAgICAgICAgY29uc3QgdmlzdWFsUGF0dGVybiA9IGdldERhdGVGb3JtYXQobnVsbCwgZm9ybWF0T3B0cyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvdXRwdXRQYXR0ZXJuLFxuICAgICAgICAgIGlucHV0UGF0dGVybnMsXG4gICAgICAgICAgdmlzdWFsUGF0dGVybixcbiAgICAgICAgICB0eXBlOiAnbG9jYWwnLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gc2V0dGluZ3MgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIGV2ZW50IHRvIGxpc3RlbiBmb3IuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgaW52b2tlZCB3aGVuIHRoZVxuICAgKiAgIGV2ZW50IGlzIHRyaWdnZXJlZC5cbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuZXZlbnRFbWl0dGVyLm9uKHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGRhdGEgdG8gYW4gb2JqZWN0IHN1aXRhYmxlIGZvciBzZXJpYWxpemF0aW9uLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHNlcmlhbGl6YWJsZSBkYXRhIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICB0b0pTT04oKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgc3RvcmFnZU1ldGhvZDogdGhpcy5zdG9yYWdlTWV0aG9kLFxuICAgICAgZGF0ZUZvcm1hdDogdGhpcy5kYXRlRm9ybWF0LFxuICAgICAgZGVsZXRlQWZ0ZXI6IHRoaXMuZGVsZXRlQWZ0ZXIsXG4gICAgICBmaWx0ZXJHcm91cHM6IHt9LFxuICAgIH07XG5cbiAgICBwcml2YXRlTWVtYmVycy5nZXQodGhpcykuZmlsdGVyR3JvdXBzLmZvckVhY2goKG9wdGlvbnMsIGdyb3VwKSA9PiB7XG4gICAgICByZXN1bHQuZmlsdGVyR3JvdXBzW2dyb3VwXSA9IF8uY2xvbmVEZWVwKG9wdGlvbnMpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQgc2V0dGluZ3MgZnJvbSBhIEpTT04gb2JqZWN0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBUaGUgc2VyaWFsaXplZCBKU09OIG9iamVjdCB0byBpbXBvcnQuXG4gICAqIEByZXR1cm5zIHttb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+aW1wb3J0U3RhdHVzfSBBbiBvYmplY3QgaG9sZGluZ1xuICAgKiAgIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzdGF0dXMgb2YgdGhlIGltcG9ydC5cbiAgICogQGZpcmVzIG1vZHVsZTpzZXR0aW5nc35TZXR0aW5nc351cGRhdGVTZXR0aW5nXG4gICAqL1xuICBpbXBvcnRGcm9tSnNvbihkYXRhKSB7XG4gICAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgICBjb25zdCBoYW5kbGVFcnJvciA9IChlcnJvclR5cGUsIHZhbHVlLCBvcHRpb25zKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgc3dpdGNoIChlcnJvclR5cGUpIHtcbiAgICAgICAgY2FzZSAnYmFkLXR5cGUnOlxuICAgICAgICAgIGVycm9ycy5wdXNoKGBFcnJvcjogRXhwZWN0ZWQgdHlwZSBcIiR7b3B0aW9ucy5leHBlY3RlZFR5cGV9XCIgZm9yIHNldHRpbmcgXCIke29wdGlvbnMudmFsdWVOYW1lfVwiIChyZWNlaXZlZCBcIiR7Z2V0SnNvblR5cGUodmFsdWUpfVwiKS5gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndW5rbm93bi12YWx1ZSc6XG4gICAgICAgICAgZXJyb3JzLnB1c2goYEVycm9yOiBVbnJlY29nbml6ZWQgdmFsdWUgXCIke3ZhbHVlfVwiIGZvciBzZXR0aW5nIFwiJHtvcHRpb25zLnZhbHVlTmFtZX1cIi5gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbm90LWludGVnZXInOlxuICAgICAgICAgIGVycm9ycy5wdXNoKGBFcnJvcjogVmFsdWUgZm9yIHNldHRpbmcgXCIke29wdGlvbnMudmFsdWVOYW1lfVwiIG11c3QgYmUgYW4gaW50ZWdlciAocmVjZWl2ZWQgXCIke3ZhbHVlfVwiKS5gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndG9vLWxvdyc6XG4gICAgICAgICAgZXJyb3JzLnB1c2goYEVycm9yOiBWYWx1ZSBmb3Igc2V0dGluZyBcIiR7b3B0aW9ucy52YWx1ZU5hbWV9XCIgY2Fubm90IGJlIGJlbG93IFwiJHtvcHRpb25zLm1pbn1cIiAocmVjZWl2ZWQgXCIke3ZhbHVlfVwiKS5gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndG9vLWhpZ2gnOlxuICAgICAgICAgIGVycm9ycy5wdXNoKGBFcnJvcjogVmFsdWUgZm9yIHNldHRpbmcgXCIke29wdGlvbnMudmFsdWVOYW1lfVwiIGNhbm5vdCBiZSBhYm92ZSBcIiR7b3B0aW9ucy5tYXh9XCIgKHJlY2VpdmVkIFwiJHt2YWx1ZX1cIikuYCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZXJyb3JzLnB1c2goYEVycm9yOiBFbmNvdW50ZXJlZCB1bnJlY29nbml6ZWQgZXJyb3IgXCIke2Vycm9yVHlwZX1cIiBmb3Igc2V0dGluZyBcIiR7b3B0aW9ucy52YWx1ZU5hbWV9XCIuYCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh2YWxpZGF0ZVZhbHVlKGRhdGEuc3RvcmFnZU1ldGhvZCwge1xuICAgICAgdmFsdWVOYW1lOiAnc3RvcmFnZU1ldGhvZCcsXG4gICAgICBleHBlY3RlZFR5cGU6ICdzdHJpbmcnLFxuICAgICAgZXhwZWN0ZWRWYWx1ZXM6IFsnbm9uZScsICdsb2NhbCddLFxuICAgICAgZXJyb3JDYWxsYmFjazogaGFuZGxlRXJyb3IsXG4gICAgfSkpIHRoaXMuc3RvcmFnZU1ldGhvZCA9IGRhdGEuc3RvcmFnZU1ldGhvZDtcblxuICAgIGlmIChkYXRhLmRhdGVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgaWYgKHZhbGlkYXRlVmFsdWUoZGF0YS5kYXRlRm9ybWF0LnR5cGUsIHtcbiAgICAgICAgdmFsdWVOYW1lOiAnZGF0ZUZvcm1hdC50eXBlJyxcbiAgICAgICAgZXhwZWN0ZWRUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZXhwZWN0ZWRWYWx1ZXM6IFtcbiAgICAgICAgICAnbG9jYWwnLFxuICAgICAgICAgICdpc28nLFxuICAgICAgICAgICdtb250aC1kYXkteWVhcicsXG4gICAgICAgICAgJ2RheS1tb250aC15ZWFyJyxcbiAgICAgICAgICAneWVhci1tb250aC1kYXknLFxuICAgICAgICBdLFxuICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgIH0pKSB0aGlzLnNldERhdGVGb3JtYXQoZGF0YS5kYXRlRm9ybWF0LnR5cGUpO1xuICAgIH1cblxuICAgIGlmICh2YWxpZGF0ZVZhbHVlKGRhdGEuZGVsZXRlQWZ0ZXIsIHtcbiAgICAgIHZhbHVlTmFtZTogJ2RlbGV0ZUFmdGVyJyxcbiAgICAgIGV4cGVjdGVkVHlwZTogJ251bWJlcicsXG4gICAgICByZXF1aXJlSW50ZWdlcjogdHJ1ZSxcbiAgICAgIG1pbjogMCxcbiAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgIH0pKSB0aGlzLmRlbGV0ZUFmdGVyID0gZGF0YS5kZWxldGVBZnRlcjtcblxuICAgIGlmIChkYXRhLmZpbHRlckdyb3VwcyAhPSBudWxsKSB7XG4gICAgICBjb25zdCBwcm9jZXNzR3JvdXAgPSAobmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBmaWx0ZXJPcHRpb25zID0gZGF0YS5maWx0ZXJHcm91cHNbbmFtZV07XG4gICAgICAgIGlmIChmaWx0ZXJPcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBuZXdPcHRpb25zID0ge307XG5cbiAgICAgICAgICBpZiAodmFsaWRhdGVWYWx1ZShmaWx0ZXJPcHRpb25zLmdyb3VwQnksIHtcbiAgICAgICAgICAgIHZhbHVlTmFtZTogYGZpbHRlckdyb3Vwcy4ke25hbWV9Lmdyb3VwQnlgLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGV4cGVjdGVkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgJ2R1ZS1kYXRlJyxcbiAgICAgICAgICAgICAgJ3ByaW9yaXR5JyxcbiAgICAgICAgICAgICAgJ3Byb2plY3QnLFxuICAgICAgICAgICAgICAnbm9uZScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjazogaGFuZGxlRXJyb3IsXG4gICAgICAgICAgfSkpIG5ld09wdGlvbnMuZ3JvdXBCeSA9IGZpbHRlck9wdGlvbnMuZ3JvdXBCeTtcblxuICAgICAgICAgIGlmICh2YWxpZGF0ZVZhbHVlKGZpbHRlck9wdGlvbnMuc29ydEJ5LCB7XG4gICAgICAgICAgICB2YWx1ZU5hbWU6IGBmaWx0ZXJHcm91cHMuJHtuYW1lfS5zb3J0QnlgLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgIGV4cGVjdGVkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICduYW1lJyxcbiAgICAgICAgICAgICAgJ2R1ZS1kYXRlJyxcbiAgICAgICAgICAgICAgJ2NyZWF0ZS1kYXRlJyxcbiAgICAgICAgICAgICAgJ3ByaW9yaXR5JyxcbiAgICAgICAgICAgICAgJ3Byb2plY3QnLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICAgIH0pKSBuZXdPcHRpb25zLnNvcnRCeSA9IGZpbHRlck9wdGlvbnMuc29ydEJ5O1xuXG4gICAgICAgICAgaWYgKHZhbGlkYXRlVmFsdWUoZmlsdGVyT3B0aW9ucy5zb3J0RGVzY2VuZGluZywge1xuICAgICAgICAgICAgdmFsdWVOYW1lOiBgZmlsdGVyR3JvdXBzLiR7bmFtZX0uc29ydERlc2NlbmRpbmdgLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgICB9KSkgbmV3T3B0aW9ucy5zb3J0RGVzY2VuZGluZyA9IGZpbHRlck9wdGlvbnMuc29ydERlc2NlbmRpbmc7XG5cbiAgICAgICAgICBpZiAodmFsaWRhdGVWYWx1ZShmaWx0ZXJPcHRpb25zLnNob3dDb21wbGV0ZWQsIHtcbiAgICAgICAgICAgIHZhbHVlTmFtZTogYGZpbHRlckdyb3Vwcy4ke25hbWV9LnNob3dDb21wbGV0ZWRgLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgICB9KSkgbmV3T3B0aW9ucy5zaG93Q29tcGxldGVkID0gZmlsdGVyT3B0aW9ucy5zaG93Q29tcGxldGVkO1xuXG4gICAgICAgICAgdGhpcy5zZXRGaWx0ZXJPcHRpb25zKG5hbWUsIG5ld09wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBwcm9jZXNzR3JvdXAoJ2RlZmF1bHQnKTtcbiAgICAgIHByb2Nlc3NHcm91cCgnZGF0ZXMnKTtcbiAgICAgIHByb2Nlc3NHcm91cCgncHJvamVjdHMnKTtcbiAgICAgIHByb2Nlc3NHcm91cCgncHJpb3JpdGllcycpO1xuICAgIH1cblxuICAgIHJldHVybiB7IGVycm9ycyB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIiwiLyoqXG4gKiBEZWZpbmVzIHRoZSBbVGFza117QGxpbmsgbW9kdWxlOnRhc2t+VGFza30gY2xhc3MuXG4gKiBAbW9kdWxlIHRhc2tcbiAqL1xuXG5pbXBvcnQgUmVjdXJyaW5nRGF0ZSBmcm9tICcuL3JlY3VycmluZ0RhdGUnO1xuaW1wb3J0IHsgcGFyc2VJc29EYXRlVGltZSB9IGZyb20gJy4vdXRpbGl0eS9kYXRlcyc7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHRhc2suXG4gKi9cbmNsYXNzIFRhc2sge1xuICAvKipcbiAgICogQ3JlYXRlIGEgdGFzay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHRhc2suXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IHNwZWNpZnlpbmcgYWRkaXRpb25hbCBvcHRpb25zIGZvclxuICAgKiAgIHRoZSB0YXNrLlxuICAgKiBAcGFyYW0ge0RhdGV9IFtvcHRpb25zLmR1ZURhdGVdIFRoZSBkYXRlIHdoZW4gdGhlIHRhc2sgaXMgZHVlLCBpZiBhbnkuXG4gICAqIEBwYXJhbSB7RGF0ZX0gW29wdGlvbnMuY3JlYXRpb25EYXRlXSBUaGUgZGF0ZSB0aGUgdGFzayB3YXMgY3JlYXRlZC4gSWYgbm90XG4gICAqICAgZ2l2ZW4sIHRoZW4gdGhlIHByZXNlbnQgZGF0ZSBpcyB1c2VkLlxuICAgKiBAcGFyYW0ge0RhdGV9IFtvcHRpb25zLmNvbXBsZXRpb25EYXRlXSBUaGUgZGF0ZSB3aGVuIHRoZSB0YXNrIHdhc1xuICAgKiAgIGNvbXBsZXRlZCwgaWYgYW55LlxuICAgKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IFtvcHRpb25zLnByaW9yaXR5PTBdIFRoZSBwcmlvcml0eSBvZiB0aGUgdGFzay4gRm9yXG4gICAqICAgbnVtZXJpYyB2YWx1ZXMsIGEgbGFyZ2VyIHZhbHVlIGluZGljYXRlcyBhIGhpZ2hlciBwcmlvcml0eSwgd2l0aCAwXG4gICAqICAgcmVwcmVzZW50aW5nIG1lZGl1bSBwcmlvcml0eSwgcG9zaXRpdmUgdmFsdWVzIHJlcHJlc2VudGluZyBoaWdoZXItdGhhbi1cbiAgICogICBtZWRpdW0gcHJpb3JpdHksIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgcmVwcmVzZW50aW5nIGxvd2VyLXRoYW4tbWVkaXVtXG4gICAqICAgcHJpb3JpdHkuIEZvciBzdHJpbmcgdmFsdWVzLCBwb3NzaWJsZSBzZXR0aW5ncyBhcmUgJ3ZlcnktbG93JywgJ2xvdycsXG4gICAqICAgJ21lZGl1bScsICdoaWdoJywgYW5kICd2ZXJ5LWhpZ2gnLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZGVzY3JpcHRpb25dIEEgZGVzY3JpcHRpb24gZm9yIHRoZSB0YXNrLlxuICAgKiBAcGFyYW0ge21vZHVsZTpyZWN1cnJpbmdEYXRlflJlY3VycmluZ0RhdGV9IFtvcHRpb25zLnJlY3VycmluZ0RhdGVdIEFcbiAgICogICByZWN1cnJpbmcgZGF0ZSBmb3IgdGhlIHRhc2ssIGlmIGFueS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnByb2plY3RdIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBwcm9qZWN0IHRvIHdoaWNoXG4gICAqICAgdGhlIHRhc2sgYmVsb25ncywgaWYgYW55LlxuICAgKi9cbiAgY29uc3RydWN0b3IobmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHRhc2suXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgd2hlbiB0aGUgdGFzayBpcyBkdWUsIGlmIGFueS5cbiAgICAgKiBAdHlwZSB7P0RhdGV9XG4gICAgICovXG4gICAgdGhpcy5kdWVEYXRlID0gb3B0aW9ucy5kdWVEYXRlIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0ZSB3aGVuIHRoZSB0YXNrIHdhcyBjcmVhdGVkLlxuICAgICAqIEB0eXBlIHtEYXRlfVxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRpb25EYXRlID0gb3B0aW9ucy5jcmVhdGlvbkRhdGUgfHwgbmV3IERhdGUoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkYXRlIHdoZW4gdGhlIHRhc2sgd2FzIGNvbXBsZXRlZCwgb3IgbnVsbCBpZiBpdCBpcyBub3QgY29tcGxldGVkLlxuICAgICAqIEB0eXBlIHs/RGF0ZX1cbiAgICAgKi9cbiAgICB0aGlzLmNvbXBsZXRpb25EYXRlID0gb3B0aW9ucy5jb21wbGV0aW9uRGF0ZSB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHByaW9yaXR5IG9mIHRoZSB0YXNrLiBBIGxhcmdlciB2YWx1ZSBpbmRpY2F0ZXMgYSBoaWdoZXIgcHJpb3JpdHksXG4gICAgICogd2l0aCAwIHJlcHJlc2VudGluZyBtZWRpdW0gcHJpb3JpdHkuIFBvc2l0aXZlIHZhbHVlcyBhcmUgaGlnaGVyIHRoYW5cbiAgICAgKiBtZWRpdW0sIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGxvd2VyIHRoYW4gbWVkaXVtLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5wcmlvcml0eSA9IDA7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnByaW9yaXR5ID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy5wcmlvcml0eSA9IG9wdGlvbnMucHJpb3JpdHk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5wcmlvcml0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucHJpb3JpdHlTdHJpbmcgPSBvcHRpb25zLnByaW9yaXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIGRlc2NyaXB0aW9uIG9mIHRoZSB0YXNrLlxuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBvcHRpb25zLmRlc2NyaXB0aW9uID8/IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlY3VycmluZyBkYXRlIGZvciB0aGUgdGFzaywgaWYgYW55LlxuICAgICAqIEB0eXBlIHs/bW9kdWxlOnJlY3VycmluZ0RhdGV+UmVjdXJyaW5nRGF0ZX1cbiAgICAgKi9cbiAgICB0aGlzLnJlY3VycmluZ0RhdGUgPSBvcHRpb25zLnJlY3VycmluZ0RhdGUgfHwgbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpZGVudGlmaWVyIG9mIHRoZSBwcm9qZWN0IHRvIHdoaWNoIHRoaXMgdGFzayBiZWxvbmdzLCBpZiBhbnkuXG4gICAgICogQHR5cGUgez9zdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5wcm9qZWN0ID0gb3B0aW9ucy5wcm9qZWN0IHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHByaW9yaXR5IG9mIHRoZSB0YXNrIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nIHZhbHVlLiBUaGlzIGNvcnJlc3BvbmRzXG4gICAqIHRvIHRoZSBudW1lcmljYWwgW3ByaW9yaXR5XXtAbGluayBtb2R1bGU6dGFza35UYXNrfnByaW9yaXR5fSBwcm9wZXJ0eSxcbiAgICogd2l0aCB0aGUgZm9sbG93aW5nIGNvcnJlc3BvbmRlbmNlOiAndmVyeS1sb3cnID0gLTIsICdsb3cnID0gLTEsICdtZWRpdW0nID1cbiAgICogMCwgJ2hpZ2gnID0gMSwgYW5kICd2ZXJ5LWhpZ2gnID0gMi5cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGdldCBwcmlvcml0eVN0cmluZygpIHtcbiAgICByZXR1cm4gVGFzay5jb252ZXJ0UHJpb3JpdHlUb1N0cmluZyh0aGlzLnByaW9yaXR5KTtcbiAgfVxuXG4gIHNldCBwcmlvcml0eVN0cmluZyhwcmlvcml0eSkge1xuICAgIHRoaXMucHJpb3JpdHkgPSBUYXNrLmNvbnZlcnRTdHJpbmdUb1ByaW9yaXR5KHByaW9yaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSB0YXNrIGFzIGNvbXBsZXRlZC5cbiAgICogQHBhcmFtIHtEYXRlfSBbZGF0ZV0gVGhlIGRhdGUgYW5kIHRpbWUgb2YgY29tcGxldGlvbi4gSWYgbm90IGdpdmVuLCB0aGVuXG4gICAqICAgdGhlIHByZXNlbnQgdGltZSBpcyB1c2VkLlxuICAgKi9cbiAgbWFya0NvbXBsZXRlKGRhdGUpIHtcbiAgICB0aGlzLmNvbXBsZXRpb25EYXRlID0gZGF0ZSB8fCBuZXcgRGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIHRhc2sgYXMgaW5jb21wbGV0ZS5cbiAgICovXG4gIG1hcmtJbmNvbXBsZXRlKCkge1xuICAgIHRoaXMuY29tcGxldGlvbkRhdGUgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0aGUgdGFzayBoYXMgYmVlbiBjb21wbGV0ZWQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB0YXNrIGhhcyBiZWVuIGNvbXBsZXRlZCBhbmQgZmFsc2VcbiAgICogICBvdGhlcndpc2UuXG4gICAqL1xuICBpc0NvbXBsZXRlKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuY29tcGxldGlvbkRhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGFzay5cbiAgICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRhc2suXG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lID8gYFRhc2s6ICR7dGhpcy5uYW1lfWAgOiAnVGFzazogKHVudGl0bGVkKSc7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGFzayBmcm9tIGEgSlNPTiBvYmplY3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBKU09OIG9iamVjdCBob2xkaW5nIHRoZSBzZXJpYWxpemVkIGRhdGEuXG4gICAqIEByZXR1cm5zIHttb2R1bGU6dGFza35UYXNrfSBBIG5ldyB0YXNrIGNvbnZlcnRlZCBmcm9tIHRoZSBKU09OIGRhdGEuXG4gICAqL1xuICBzdGF0aWMgZnJvbUpzb24oZGF0YSkge1xuICAgIGNvbnN0IGNvbnZlcnREYXRlID0gKGRhdGUpID0+IChkYXRlID8gcGFyc2VJc29EYXRlVGltZShkYXRlKSA6IG51bGwpO1xuICAgIGNvbnN0IHJlY3VycmluZ0RhdGUgPSBkYXRhLnJlY3VycmluZ0RhdGVcbiAgICAgID8gUmVjdXJyaW5nRGF0ZS5mcm9tSnNvbihkYXRhLnJlY3VycmluZ0RhdGUpIDogbnVsbDtcbiAgICByZXR1cm4gbmV3IFRhc2soZGF0YS5uYW1lLCB7XG4gICAgICBkdWVEYXRlOiBjb252ZXJ0RGF0ZShkYXRhLmR1ZURhdGUpLFxuICAgICAgY3JlYXRpb25EYXRlOiBjb252ZXJ0RGF0ZShkYXRhLmNyZWF0aW9uRGF0ZSksXG4gICAgICBjb21wbGV0aW9uRGF0ZTogY29udmVydERhdGUoZGF0YS5jb21wbGV0aW9uRGF0ZSksXG4gICAgICBwcmlvcml0eTogZGF0YS5wcmlvcml0eSxcbiAgICAgIGRlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgcmVjdXJyaW5nRGF0ZSxcbiAgICAgIHByb2plY3Q6IGRhdGEucHJvamVjdCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgdGFzayBwcmlvcml0eSBudW1iZXIgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eSBUaGUgcHJpb3JpdHkgdmFsdWUgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJpb3JpdHkgdmFsdWUuXG4gICAqL1xuICBzdGF0aWMgY29udmVydFByaW9yaXR5VG9TdHJpbmcocHJpb3JpdHkpIHtcbiAgICBzd2l0Y2ggKHByaW9yaXR5KSB7XG4gICAgICBjYXNlIC0yOiByZXR1cm4gJ3ZlcnktbG93JztcbiAgICAgIGNhc2UgLTE6IHJldHVybiAnbG93JztcbiAgICAgIGNhc2UgMDogcmV0dXJuICdtZWRpdW0nO1xuICAgICAgY2FzZSAxOiByZXR1cm4gJ2hpZ2gnO1xuICAgICAgY2FzZSAyOiByZXR1cm4gJ3ZlcnktaGlnaCc7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gJ3Vua25vd24nO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgdGFzayBwcmlvcml0eSBudW1iZXIgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uIFVubGlrZVxuICAgKiBbY29udmVydFByaW9yaXR5VG9TdHJpbmdde0BsaW5rIG1vZHVsZTp0YXNrflRhc2suY29udmVydFByaW9yaXR5VG9TdHJpbmd9LFxuICAgKiB0aGlzIG1ldGhvZCByZXR1cm5zIGEgc3RyaW5nIHRoYXQgaXMgc3VpdGFibGUgZm9yIGRpc3BsYXkgdG8gdGhlIHVzZXIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eSBUaGUgcHJpb3JpdHkgdmFsdWUgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJpb3JpdHkgdmFsdWUuXG4gICAqL1xuICBzdGF0aWMgY29udmVydFByaW9yaXR5VG9QcmV0dHlTdHJpbmcocHJpb3JpdHkpIHtcbiAgICBzd2l0Y2ggKHByaW9yaXR5KSB7XG4gICAgICBjYXNlIC0yOiByZXR1cm4gJ1ZlcnkgTG93JztcbiAgICAgIGNhc2UgLTE6IHJldHVybiAnTG93JztcbiAgICAgIGNhc2UgMDogcmV0dXJuICdNZWRpdW0nO1xuICAgICAgY2FzZSAxOiByZXR1cm4gJ0hpZ2gnO1xuICAgICAgY2FzZSAyOiByZXR1cm4gJ1ZlcnkgSGlnaCc7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gJ1Vua25vd24nO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdGFzayBwcmlvcml0eSB0byB0aGUgc3RhbmRhcmQgbnVtZXJpY1xuICAgKiBlcXVpdmFsZW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJpb3JpdHlTdHIgVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcHJpb3JpdHkgdG9cbiAgICogICBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcHJpb3JpdHkgdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgc3RyaW5nLlxuICAgKi9cbiAgc3RhdGljIGNvbnZlcnRTdHJpbmdUb1ByaW9yaXR5KHByaW9yaXR5U3RyKSB7XG4gICAgc3dpdGNoIChwcmlvcml0eVN0ci50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICd2ZXJ5LWxvdyc6XG4gICAgICBjYXNlICd2ZXJ5IGxvdyc6XG4gICAgICAgIHJldHVybiAtMjtcbiAgICAgIGNhc2UgJ2xvdyc6XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSAnaGlnaCc6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSAndmVyeS1oaWdoJzpcbiAgICAgIGNhc2UgJ3ZlcnkgaGlnaCc6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRhc2s7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtUYXNrRGlzcGxheV17QGxpbmsgbW9kdWxlOnRhc2tEaXNwbGF5flRhc2tEaXNwbGF5fSBjbGFzcy5cbiAqIEBtb2R1bGUgdGFza0Rpc3BsYXlcbiAqL1xuXG5pbXBvcnQgeyBpc1NhbWVEYXkgfSBmcm9tICdkYXRlLWZucyc7XG5cbmltcG9ydCBDaGVja2VkSWNvbiBmcm9tICcuLi9pbWFnZXMvcmFkaW8tY2hlY2tlZC5zdmcnO1xuaW1wb3J0IENvcHlJY29uIGZyb20gJy4uL2ltYWdlcy9jb3B5LnN2Zyc7XG5pbXBvcnQgRGVsZXRlSWNvbiBmcm9tICcuLi9pbWFnZXMvZGVsZXRlLnN2Zyc7XG5pbXBvcnQgRWRpdEljb24gZnJvbSAnLi4vaW1hZ2VzL2VkaXQuc3ZnJztcbmltcG9ydCBNb3JlSWNvbiBmcm9tICcuLi9pbWFnZXMvbW9yZS5zdmcnO1xuaW1wb3J0IFByb2plY3RJY29uIGZyb20gJy4uL2ltYWdlcy9wcm9qZWN0LnN2Zyc7XG5pbXBvcnQgVW5jaGVja2VkSWNvbiBmcm9tICcuLi9pbWFnZXMvcmFkaW8tdW5jaGVja2VkLnN2Zyc7XG5cbmltcG9ydCBQb3B1cE1lbnUgZnJvbSAnLi9wb3B1cE1lbnUnO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IFRhc2sgZnJvbSAnLi90YXNrJztcbmltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICcuL3V0aWxpdHkvZGF0ZXMnO1xuaW1wb3J0IHsgY3JlYXRlSW1hZ2VCdXR0b24gfSBmcm9tICcuL3V0aWxpdHkvZG9tJztcblxuY29uc3QgSUNPTl9XSURUSCA9IDI0O1xuY29uc3QgSUNPTl9IRUlHSFQgPSAyNDtcblxuY29uc3QgU1RBTkRBUkRfTUVOVV9JVEVNUyA9IFtcbiAge1xuICAgIGxhYmVsOiAnRWRpdCBUYXNrLi4uJyxcbiAgICBpZDogJ2VkaXQnLFxuICAgIGljb246IHsgc291cmNlOiBFZGl0SWNvbiwgd2lkdGg6IElDT05fV0lEVEgsIGhlaWdodDogSUNPTl9IRUlHSFQgfSxcbiAgfSxcbiAge1xuICAgIGxhYmVsOiAnQ2xvbmUgVGFzaycsXG4gICAgaWQ6ICdjbG9uZScsXG4gICAgaWNvbjogeyBzb3VyY2U6IENvcHlJY29uLCB3aWR0aDogSUNPTl9XSURUSCwgaGVpZ2h0OiBJQ09OX0hFSUdIVCB9LFxuICB9LFxuICB7XG4gICAgbGFiZWw6ICdEZWxldGUgVGFzay4uLicsXG4gICAgaWQ6ICdkZWxldGUnLFxuICAgIGljb246IHsgc291cmNlOiBEZWxldGVJY29uLCB3aWR0aDogSUNPTl9XSURUSCwgaGVpZ2h0OiBJQ09OX0hFSUdIVCB9LFxuICB9LFxuXTtcbmNvbnN0IFBST0pFQ1RfTUVOVV9JVEVNUyA9IFtcbiAge1xuICAgIGxhYmVsOiAnR28gVG8gUHJvamVjdCcsXG4gICAgaWQ6ICdnby10by1wcm9qZWN0JyxcbiAgICBpY29uOiB7IHNvdXJjZTogUHJvamVjdEljb24sIHdpZHRoOiBJQ09OX1dJRFRILCBoZWlnaHQ6IElDT05fSEVJR0hUIH0sXG4gIH0sXG5dO1xuXG4vKipcbiAqIE9iamVjdCBob2xkaW5nIHByaXZhdGUgbWVtYmVycyBmb3IgdGhlXG4gKiBbVGFza0Rpc3BsYXlde0BsaW5rIG1vZHVsZTp0YXNrRGlzcGxheX5UYXNrRGlzcGxheX0gY2xhc3MuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6dGFza0Rpc3BsYXl+VGFza0Rpc3BsYXl+cHJpdmF0ZXNcbiAqIEBwcm9wZXJ0eSB7SFRNTEVsZW1lbnR9IGNvbnRhaW5lciBUaGUgdG9wLWxldmVsIGNvbnRhaW5lciBob2xkaW5nIHRoZVxuICogICBkaXNwbGF5IHBhbmVsLlxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gY29udGVudCBUaGUgY29udGFpbmVyIGhvbGRpbmcgdGhlIHBhbmVsIGNvbnRlbnQuXG4gKiBAcHJvcGVydHkge21vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH0gdGFza3MgVGhlIHRhc2sgY29udGFpbmVyLlxuICogQHByb3BlcnR5IHttb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IHByb2plY3RzIFRoZSBwcm9qZWN0IGNvbnRhaW5lci5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOnRhc2tEaXNwbGF5flRhc2tEaXNwbGF5fnRhc2tDYWxsYmFja30gW3Rhc2tDYWxsYmFja10gQVxuICogICBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGludm9rZWQgd2hlbiB0aGUgdXNlciBwZXJmb3JtcyBhbiBhY3Rpb24gb24gYVxuICogICB0YXNrLlxuICogQHByb3BlcnR5IHttb2R1bGU6c2V0dGluZ3N+U2V0dGluZ3N+ZGF0ZUZvcm1hdH0gZGF0ZUZvcm1hdCBBbiBvYmplY3QgaG9sZGluZ1xuICogICBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZm9ybWF0IHRvIHVzZSBmb3IgY2FsZW5kYXIgZGF0ZXMuXG4gKiBAcHJvcGVydHkge21vZHVsZTpwb3B1cE1lbnV+UG9wdXBNZW51fSB0YXNrTWVudSBUaGUgcG9wdXAgbWVudSB0aGF0IGlzIHNob3duXG4gKiAgIHdoZW4gdGhlIHVzZXIgY2xpY2tzIHRoZSAnbW9yZScgYnV0dG9uIG5leHQgdG8gYSB0YXNrLlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZSBkYXRhIGZvciB0aGVcbiAqIFtUYXNrRGlzcGxheV17QGxpbmsgbW9kdWxlOnRhc2tEaXNwbGF5flRhc2tEaXNwbGF5fSBjbGFzcy5cbiAqIEB0eXBlIHtXZWFrTWFwfVxuICogQHNlZSBtb2R1bGU6dGFza0Rpc3BsYXl+VGFza0Rpc3BsYXl+cHJpdmF0ZXNcbiAqL1xuY29uc3QgcHJpdmF0ZU1lbWJlcnMgPSBuZXcgV2Vha01hcCgpO1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdHdvIHRhc2tzIGJlbG9uZyB0byB0aGUgc2FtZSB0YXNrIGdyb3VwLlxuICogQHBhcmFtIHtzdHJpbmd9IGdyb3VwQnkgVGhlIHR5cGUgb2YgZ3JvdXBpbmcgYmVpbmcgZG9uZTogJ2R1ZS1kYXRlJyxcbiAqICAgJ3Byb2plY3QnLCAncHJpb3JpdHknLCBvciAnbm9uZScuXG4gKiBAcGFyYW0ge21vZHVsZTp0YXNrflRhc2t9IHRhc2sxIFRoZSBmaXJzdCB0YXNrIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge21vZHVsZTp0YXNrflRhc2t9IHRhc2syIFRoZSBzZWNvbmQgdGFzayB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHRhc2tzIGJlbG9uZyB0byB0aGUgc2FtZSBncm91cCBhbmQgZmFsc2VcbiAqICAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1NhbWVHcm91cChncm91cEJ5LCB0YXNrMSwgdGFzazIpIHtcbiAgc3dpdGNoIChncm91cEJ5KSB7XG4gICAgY2FzZSAnZHVlLWRhdGUnOlxuICAgICAgaWYgKCF0YXNrMS5kdWVEYXRlICYmICF0YXNrMi5kdWVEYXRlKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICghdGFzazEuZHVlRGF0ZSAmJiB0YXNrMi5kdWVEYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAodGFzazEuZHVlRGF0ZSAmJiAhdGFzazIuZHVlRGF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIGlzU2FtZURheSh0YXNrMS5kdWVEYXRlLCB0YXNrMi5kdWVEYXRlKTtcbiAgICBjYXNlICdwcmlvcml0eSc6XG4gICAgICByZXR1cm4gdGFzazEucHJpb3JpdHkgPT09IHRhc2syLnByaW9yaXR5O1xuICAgIGNhc2UgJ3Byb2plY3QnOlxuICAgICAgaWYgKCF0YXNrMS5wcm9qZWN0ICYmICF0YXNrMi5wcm9qZWN0KSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICghdGFzazEucHJvamVjdCAmJiB0YXNrMi5wcm9qZWN0KSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAodGFzazEucHJvamVjdCAmJiAhdGFzazIucHJvamVjdCkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRhc2sxLnByb2plY3QgPT09IHRhc2syLnByb2plY3Q7XG4gICAgY2FzZSAnbm9uZSc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogRW1wdHkgdGhlIGRpc3BsYXkgcGFuZWwuXG4gKiBAcGFyYW0ge21vZHVsZTp0YXNrRGlzcGxheX5UYXNrRGlzcGxheX0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoXG4gKiAgIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY2xlYXIoaW5zdGFuY2UpIHtcbiAgcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKS5jb250ZW50LmlubmVySFRNTCA9ICcnO1xufVxuXG4vKipcbiAqIEFkZCBhIGxpc3QgZWxlbWVudCBhbmQgb3B0aW9uYWwgaGVhZGluZyB0byB0aGUgcGFuZWwgZm9yIGhvbGRpbmcgdGFza3MuXG4gKiBAcGFyYW0ge21vZHVsZTp0YXNrRGlzcGxheX5UYXNrRGlzcGxheX0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoXG4gKiAgIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbbGFiZWxdIFRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGhlYWRpbmcsIGlmIGFueS5cbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIGxpc3QgZWxlbWVudCB3aGVyZSB0aGUgdGFzayBpdGVtcyBjYW4gYmVcbiAqICAgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxpc3QoaW5zdGFuY2UsIGxhYmVsKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBpZiAobGFiZWwpIHtcbiAgICBjb25zdCBoZWFkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDQnKTtcbiAgICBoZWFkaW5nLmNsYXNzTGlzdC5hZGQoJ3Rhc2stbGlzdC1oZWFkaW5nJyk7XG4gICAgaGVhZGluZy50ZXh0Q29udGVudCA9IGxhYmVsO1xuICAgIHByaXZhdGVzLmNvbnRlbnQuYXBwZW5kQ2hpbGQoaGVhZGluZyk7XG4gIH1cblxuICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgbGlzdC5jbGFzc0xpc3QuYWRkKCd0YXNrLWxpc3QnKTtcbiAgcHJpdmF0ZXMuY29udGVudC5hcHBlbmRDaGlsZChsaXN0KTtcbiAgcmV0dXJuIGxpc3Q7XG59XG5cbi8qKlxuICogQWRkIGEgdGFzayBlbnRyeSB0byBhIGdyb3VwIGxpc3QuXG4gKiBAcGFyYW0ge21vZHVsZTp0YXNrRGlzcGxheX5UYXNrRGlzcGxheX0gaW5zdGFuY2UgVGhlIGNsYXNzIGluc3RhbmNlIG9uIHdoaWNoXG4gKiAgIHRvIGFwcGx5IHRoZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGxpc3QgVGhlIGxpc3QgZWxlbWVudCBpbiB3aGljaCB0aGUgdGFzayBpbmZvcm1hdGlvblxuICogICBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFza0lkIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgdGFzay5cbiAqIEBwYXJhbSB7bW9kdWxlOnRhc2t+VGFza30gdGFzayBUaGUgdGFzayB0byBiZSBhZGRlZC5cbiAqL1xuZnVuY3Rpb24gYWRkVGFzayhpbnN0YW5jZSwgbGlzdCwgdGFza0lkLCB0YXNrKSB7XG4gIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KGluc3RhbmNlKTtcblxuICBjb25zdCBpdGVtRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gIGl0ZW1FbGVtLmNsYXNzTGlzdC5hZGQoJ3Rhc2stbGlzdC1pdGVtJyk7XG4gIGxpc3QuYXBwZW5kQ2hpbGQoaXRlbUVsZW0pO1xuXG4gIGNvbnN0IGljb25TcmMgPSB0YXNrLmlzQ29tcGxldGUoKSA/IENoZWNrZWRJY29uIDogVW5jaGVja2VkSWNvbjtcbiAgY29uc3QgaWNvbkFsdCA9IHRhc2suaXNDb21wbGV0ZSgpID8gJ01hcmsgYXMgaW5jb21wbGV0ZScgOiAnTWFyayBhcyBjb21wbGV0ZSc7XG4gIGNvbnN0IGNoZWNrQnV0dG9uID0gY3JlYXRlSW1hZ2VCdXR0b24oaWNvblNyYywge1xuICAgIGFsdFRleHQ6IGljb25BbHQsXG4gICAgd2lkdGg6IElDT05fV0lEVEgsXG4gICAgaGVpZ2h0OiBJQ09OX0hFSUdIVCxcbiAgICBjbGFzc0xpc3Q6IFsndGFzay1saXN0LWl0ZW0tY2hlY2tib3gnXSxcbiAgfSk7XG4gIGl0ZW1FbGVtLmFwcGVuZENoaWxkKGNoZWNrQnV0dG9uKTtcbiAgaWYgKHByaXZhdGVzLnRhc2tDYWxsYmFjaykge1xuICAgIGNoZWNrQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgdHlwZSA9IHRhc2suaXNDb21wbGV0ZSgpID8gJ21hcmstaW5jb21wbGV0ZScgOiAnbWFyay1jb21wbGV0ZSc7XG4gICAgICBwcml2YXRlcy50YXNrQ2FsbGJhY2sodHlwZSwgdGFza0lkLCB0YXNrKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGluZm9Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaW5mb0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd0YXNrLWxpc3QtaXRlbS1pbmZvLWNvbnRhaW5lcicpO1xuICBpdGVtRWxlbS5hcHBlbmRDaGlsZChpbmZvQ29udGFpbmVyKTtcblxuICBjb25zdCBuYW1lRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBuYW1lRWxlbS5jbGFzc0xpc3QuYWRkKCd0YXNrLWxpc3QtaXRlbS1uYW1lJyk7XG4gIG5hbWVFbGVtLnRleHRDb250ZW50ID0gdGFzay5uYW1lO1xuICBpbmZvQ29udGFpbmVyLmFwcGVuZENoaWxkKG5hbWVFbGVtKTtcblxuICBpZiAodGFzay5kZXNjcmlwdGlvbikge1xuICAgIGNvbnN0IGRlc2NFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGVzY0VsZW0uY2xhc3NMaXN0LmFkZCgndGFzay1saXN0LWl0ZW0tZGVzY3JpcHRpb24nKTtcbiAgICBkZXNjRWxlbS50ZXh0Q29udGVudCA9IHRhc2suZGVzY3JpcHRpb247XG4gICAgaW5mb0NvbnRhaW5lci5hcHBlbmRDaGlsZChkZXNjRWxlbSk7XG4gIH1cblxuICBjb25zdCBkZXRhaWxzQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGluZm9Db250YWluZXIuYXBwZW5kQ2hpbGQoZGV0YWlsc0NvbnRhaW5lcik7XG4gIGNvbnN0IGFkZERldGFpbCA9IChjb250ZW50LCBzdHlsZUNsYXNzKSA9PiB7XG4gICAgaWYgKGRldGFpbHNDb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICBjb25zdCBjb21tYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgIGNvbW1hLmNsYXNzTGlzdC5hZGQoJ3Rhc2stbGlzdC1pdGVtLWRldGFpbHMnKTtcbiAgICAgIGNvbW1hLnRleHRDb250ZW50ID0gJywgJztcbiAgICAgIGRldGFpbHNDb250YWluZXIuYXBwZW5kQ2hpbGQoY29tbWEpO1xuICAgIH1cblxuICAgIGNvbnN0IGRldGFpbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBkZXRhaWwuY2xhc3NMaXN0LmFkZCgndGFzay1saXN0LWl0ZW0tZGV0YWlscycsIHN0eWxlQ2xhc3MpO1xuICAgIGRldGFpbC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG4gICAgZGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChkZXRhaWwpO1xuICB9O1xuXG4gIGlmICh0YXNrLmR1ZURhdGUpIHtcbiAgICBjb25zdCBkYXRlRm9ybWF0ID0gcHJpdmF0ZXMuZGF0ZUZvcm1hdC5vdXRwdXRQYXR0ZXJuO1xuICAgIGNvbnN0IGRhdGVTdHIgPSBmb3JtYXREYXRlKHRhc2suZHVlRGF0ZSwgZGF0ZUZvcm1hdCk7XG4gICAgYWRkRGV0YWlsKGRhdGVTdHIsICd0YXNrLWxpc3QtaXRlbS1kdWUtZGF0ZScpO1xuICB9XG5cbiAgaWYgKHRhc2sucmVjdXJyaW5nRGF0ZSkge1xuICAgIGNvbnN0IHJlY3VycmVuY2VTdHIgPSB0YXNrLnJlY3VycmluZ0RhdGUudG9TdHJpbmcoKTtcbiAgICBhZGREZXRhaWwocmVjdXJyZW5jZVN0ciwgJ3Rhc2stbGlzdC1pdGVtLXJlY3VycmluZy1kYXRlJyk7XG4gIH1cblxuICBpZiAodGFzay5wcm9qZWN0KSB7XG4gICAgY29uc3QgcHJvamVjdCA9IHByaXZhdGVzLnByb2plY3RzLmdldFByb2plY3QodGFzay5wcm9qZWN0KTtcbiAgICBhZGREZXRhaWwocHJvamVjdC5uYW1lLCAndGFzay1saXN0LWl0ZW0tcHJvamVjdCcpO1xuICB9XG5cbiAgY29uc3QgcHJpb3JpdHlTdHIgPSBUYXNrLmNvbnZlcnRQcmlvcml0eVRvUHJldHR5U3RyaW5nKHRhc2sucHJpb3JpdHkpO1xuICBhZGREZXRhaWwoYCR7cHJpb3JpdHlTdHJ9IFByaW9yaXR5YCwgJ3Rhc2stbGlzdC1pdGVtLXByaW9yaXR5Jyk7XG5cbiAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGJ1dHRvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdpY29uLWNvbnRhaW5lcicpO1xuICBpdGVtRWxlbS5hcHBlbmRDaGlsZChidXR0b25Db250YWluZXIpO1xuXG4gIGNvbnN0IGVkaXRCdXR0b24gPSBjcmVhdGVJbWFnZUJ1dHRvbihFZGl0SWNvbiwge1xuICAgIGFsdFRleHQ6ICdFZGl0IHRhc2snLFxuICAgIHdpZHRoOiBJQ09OX1dJRFRILFxuICAgIGhlaWdodDogSUNPTl9IRUlHSFQsXG4gICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgIGlmIChwcml2YXRlcy50YXNrQ2FsbGJhY2spIHByaXZhdGVzLnRhc2tDYWxsYmFjaygnZWRpdCcsIHRhc2tJZCwgdGFzayk7XG4gICAgfSxcbiAgfSk7XG4gIGJ1dHRvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChlZGl0QnV0dG9uKTtcblxuICBjb25zdCBtb3JlQnV0dG9uID0gY3JlYXRlSW1hZ2VCdXR0b24oTW9yZUljb24sIHtcbiAgICBhbHRUZXh0OiAnTW9yZSBhY3Rpb25zJyxcbiAgICB3aWR0aDogSUNPTl9XSURUSCxcbiAgICBoZWlnaHQ6IElDT05fSEVJR0hULFxuICAgIGNhbGxiYWNrOiAoZSkgPT4ge1xuICAgICAgcHJpdmF0ZXMudGFza01lbnUub3BlbigoaWQpID0+IHtcbiAgICAgICAgaWYgKHByaXZhdGVzLnRhc2tDYWxsYmFjaykge1xuICAgICAgICAgIHByaXZhdGVzLnRhc2tDYWxsYmFjayhpZCwgdGFza0lkLCB0YXNrKTtcbiAgICAgICAgfVxuICAgICAgfSwgeyByZWZlcmVuY2VFbGVtZW50OiBlLnRhcmdldCB9KTtcbiAgICB9LFxuICB9KTtcbiAgYnV0dG9uQ29udGFpbmVyLmFwcGVuZENoaWxkKG1vcmVCdXR0b24pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgaGVhZGluZyBsYWJlbCBmb3IgYSB0YXNrIGdyb3VwLlxuICogQHBhcmFtIHttb2R1bGU6dGFza0Rpc3BsYXl+VGFza0Rpc3BsYXl9IGluc3RhbmNlIFRoZSBjbGFzcyBpbnN0YW5jZSBvbiB3aGljaFxuICogICB0byBhcHBseSB0aGUgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gZ3JvdXBCeSBUaGUgdHlwZSBvZiBncm91cGluZyBiZWluZyBkb25lOiAnZHVlLWRhdGUnLFxuICogICAncHJvamVjdCcsICdwcmlvcml0eScsIG9yICdub25lJy5cbiAqIEBwYXJhbSB7bW9kdWxlOnRhc2t+VGFza30gdGFzayBBIHRhc2sgYmVsb25naW5nIHRvIHRoZSBncm91cC5cbiAqIEByZXR1cm5zIHs/c3RyaW5nfSBUaGUgbGFiZWwgZm9yIHRoZSBoZWFkaW5nLCBvciBudWxsIGlmIG5vIGdyb3VwaW5nIGlzXG4gKiAgIGJlaW5nIGRvbmUuXG4gKi9cbmZ1bmN0aW9uIGdldEdyb3VwSGVhZGluZyhpbnN0YW5jZSwgZ3JvdXBCeSwgdGFzaykge1xuICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldChpbnN0YW5jZSk7XG4gIHN3aXRjaCAoZ3JvdXBCeSkge1xuICAgIGNhc2UgJ2R1ZS1kYXRlJzpcbiAgICAgIGlmICh0YXNrLmR1ZURhdGUpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gcHJpdmF0ZXMuZGF0ZUZvcm1hdC5vdXRwdXRQYXR0ZXJuO1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZSh0YXNrLmR1ZURhdGUsIGZvcm1hdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ05vIER1ZSBEYXRlJztcbiAgICBjYXNlICdwcmlvcml0eSc6XG4gICAgICByZXR1cm4gYCR7VGFzay5jb252ZXJ0UHJpb3JpdHlUb1ByZXR0eVN0cmluZyh0YXNrLnByaW9yaXR5KX0gUHJpb3JpdHlgO1xuICAgIGNhc2UgJ3Byb2plY3QnOlxuICAgICAgaWYgKHRhc2sucHJvamVjdCkgcmV0dXJuIHByaXZhdGVzLnByb2plY3RzLmdldFByb2plY3QodGFzay5wcm9qZWN0KS5uYW1lO1xuICAgICAgcmV0dXJuICdVbmNhdGVnb3JpemVkJztcbiAgICBjYXNlICdub25lJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBBIGRpc3BsYXkgcGFuZWwgc2hvd2luZyBhIGxpc3Qgb2YgdGFza3MuXG4gKi9cbmNsYXNzIFRhc2tEaXNwbGF5IHtcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNob29zZXMgdG8gcGVyZm9ybSBhblxuICAgKiBhY3Rpb24gb24gYSB0YXNrLlxuICAgKiBAY2FsbGJhY2sgbW9kdWxlOnRhc2tEaXNwbGF5flRhc2tEaXNwbGF5fnRhc2tDYWxsYmFja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBhY3Rpb24gdGhhdCBpcyBiZWluZyBwZXJmb3JtZWQ6XG4gICAqICAgJ21hcmstY29tcGxldGUnLCAnbWFyay1pbmNvbXBsZXRlJywgJ2VkaXQnLCAnY2xvbmUnLCAnZGVsZXRlJywgb3JcbiAgICogICAnZ28tdG8tcHJvamVjdCcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWRlbnRpZmllciBmb3IgdGhlIHRhc2sgb24gd2hpY2ggdGhlIGFjdGlvbiBpc1xuICAgKiAgIGJlaW5nIHBlcmZvcm1lZC5cbiAgICogQHBhcmFtIHttb2R1bGU6dGFza35UYXNrfSB0YXNrIFRoZSB0YXNrIG9uIHdoaWNoIHRoZSBhY3Rpb24gaXMgYmVpbmdcbiAgICogICBwZXJmb3JtZWQuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgaG9sZGluZyBvcHRpb25zIGZvciBjcmVhdGluZyB0aGUgdGFzayBkaXNwbGF5IHBhbmVsLlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6dGFza0Rpc3BsYXl+VGFza0Rpc3BsYXl+b3B0aW9uc1xuICAgKiBAcHJvcGVydHkge21vZHVsZTp0YXNrRGlzcGxheX5UYXNrRGlzcGxheX50YXNrQ2FsbGJhY2t9IFt0YXNrQ2FsbGJhY2tdIEFcbiAgICogICBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSB1c2VyIHBlcmZvcm1zIGFuIGFjdGlvblxuICAgKiAgIG9uIGEgdGFzay5cbiAgICovXG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBob2xkaW5nIG9wdGlvbnMgZm9yIHVwZGF0aW5nIHRoZSB0YXNrIGRpc3BsYXkgcGFuZWwuXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTp0YXNrRGlzcGxheX5UYXNrRGlzcGxheX51cGRhdGVPcHRpb25zXG4gICAqIEBwcm9wZXJ0eSB7RGF0ZX0gW3N0YXJ0RGF0ZV0gSWYgcHJvdmlkZWQsIHRhc2tzIHdpdGggZHVlIGRhdGVzIGJlZm9yZSB0aGVcbiAgICogICBnaXZlbiBkYXRlIHdpbGwgYmUgZXhjbHVkZWQuXG4gICAqIEBwcm9wZXJ0eSB7RGF0ZX0gW2VuZERhdGVdIElmIHByb3ZpZGVkLCB0YXNrcyB3aXRoIGR1ZSBkYXRlcyBhZnRlciB0aGVcbiAgICogICBnaXZlbiBkYXRlIHdpbGwgYmUgZXhjbHVkZWQuXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NvbXBsZXRlZD1mYWxzZV0gSWYgc2V0IHRvIHRydWUsIHRoZW4gY29tcGxldGVkIHRhc2tzXG4gICAqICAgd2lsbCBiZSBpbmNsdWRlZC5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbcmVxdWlyZUR1ZURhdGU9ZmFsc2VdIElmIHNldCB0byB0cnVlLCB0aGVuIHRhc2tzIHRoYXRcbiAgICogICBkbyBub3QgaGF2ZSBhIGR1ZSBkYXRlIHdpbGwgYmUgZXhjbHVkZWQuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJvamVjdF0gSWYgcHJvdmlkZWQsIHRoZW4gb25seSB0YXNrcyB3aXRoIHRoZVxuICAgKiAgIHNwZWNpZmllZCBwcm9qZWN0IHdpbGwgYmUgaW5jbHVkZWQuIFRoaXMgY2FuIGVpdGhlciBiZSBhIHByb2plY3RcbiAgICogICBpZGVudGlmaWVyLCBvciB0aGUgc3RyaW5nICdub25lJy5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtwcmlvcml0eV0gSWYgcHJvdmlkZWQsIHRoZW4gb25seSB0YXNrcyB3aXRoIHRoZSBnaXZlblxuICAgKiAgIHByaW9yaXR5IHdpbGwgYmUgaW5jbHVkZWQuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZ3JvdXBCeT1ub25lXSBUaGUgZmllbGQgdG8gZ3JvdXAgdGhlIHRhc2tzIGJ5OlxuICAgKiAgICdkdWUtZGF0ZScsICdwcmlvcml0eScsICdwcm9qZWN0Jywgb3IgJ25vbmUnLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NvcnRCeT1jcmVhdGUtZGF0ZV0gVGhlIHByaW1hcnkgZmllbGQgdG8gc29ydCB0aGVcbiAgICogICB0YXNrcyBieTogJ25hbWUnLCAnZHVlLWRhdGUnLCAnY3JlYXRlLWRhdGUnLCAncHJpb3JpdHknLCBvciAncHJvamVjdCcuXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3NvcnREZXNjZW5kaW5nPWZhbHNlXSBJZiBzZXQgdG8gdHJ1ZSwgdGhlbiByZXN1bHRzXG4gICAqICAgd2lsbCBiZSBzb3J0ZWQgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbY2FzZVNlbnNpdGl2ZT1mYWxzZV0gSWYgc2V0IHRvIHRydWUsIHRoZW4gc29ydGluZyBmb3JcbiAgICogICB0ZXh0LWJhc2VkIGZpZWxkcyB3aWxsIGJlIGNhc2Utc2Vuc2l0aXZlLlxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFttaXNzaW5nTGFzdD1mYWxzZV0gSWYgc2V0IHRvIHRydWUsIHRoZW4gdGFza3MgdGhhdFxuICAgKiAgIGFyZSBtaXNzaW5nIGEgY2VydGFpbiBmaWVsZCB3aWxsIGJlIHNvcnRlZCBhdCB0aGUgZW5kIG9mIHRoZSBsaXN0LCB3aGVuXG4gICAqICAgc29ydGluZyBieSB0aGF0IGZpZWxkLlxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXNldFNjcm9sbD10cnVlXSBJZiBzZXQgdG8gdHJ1ZSAodGhlIGRlZmF1bHQpLCB0aGVcbiAgICogICBwYW5lbCdzIHNjcm9sbCBwb3NpdGlvbiB3aWxsIGJlIHJlc2V0IGJhY2sgdG8gdGhlIHRvcC4gT3RoZXJ3aXNlIHRoZVxuICAgKiAgIHNjcm9sbCBwb3NpdGlvbiB3aWxsIG5vdCBiZSBjaGFuZ2VkLlxuICAgKiBAcHJvcGVydHkge21vZHVsZTpzZXR0aW5nc35TZXR0aW5nc35kYXRlRm9ybWF0fSBbZGF0ZUZvcm1hdF0gQW4gb2JqZWN0XG4gICAqICAgaG9sZGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY2FsZW5kYXIgZGF0ZSBmb3JtYXQgdG8gdXNlIHdoZW5cbiAgICogICBkaXNwbGF5aW5nIGRhdGVzLlxuICAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGFzayBkaXNwbGF5LlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwYXJlbnQgVGhlIHBhcmVudCBET00gbm9kZSB0aGF0IHdpbGwgY29udGFpbiB0aGVcbiAgICogICBwYW5lbC5cbiAgICogQHBhcmFtIHttb2R1bGU6dGFza0xpc3R+VGFza0xpc3R9IHRhc2tMaXN0IFRoZVxuICAgKiAgIFtUYXNrTGlzdF17QGxpbmsgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fSBob2xkaW5nIGFsbCBvZiB0aGUgdGFza3MuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnByb2plY3RMaXN0flByb2plY3RMaXN0fSBwcm9qZWN0TGlzdCBUaGVcbiAgICogICBbUHJvamVjdExpc3Rde0BsaW5rIG1vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH0gaG9sZGluZyBhbGwgb2YgdGhlXG4gICAqICAgcHJvamVjdHMuXG4gICAqIEBwYXJhbSB7bW9kdWxlOnRhc2tEaXNwbGF5flRhc2tEaXNwbGF5fm9wdGlvbnN9IFtvcHRpb25zPXt9XSBBbiBvYmplY3RcbiAgICogICBob2xkaW5nIGFkZGl0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIGRpc3BsYXkgcGFuZWwuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHRhc2tMaXN0LCBwcm9qZWN0TGlzdCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwYW5lbC5jbGFzc0xpc3QuYWRkKCd0YXNrLXBhbmVsJyk7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKHBhbmVsKTtcblxuICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250ZW50LmNsYXNzTGlzdC5hZGQoJ3Rhc2stcGFuZWwtY29udGVudCcpO1xuICAgIHBhbmVsLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gICAgY29uc3QgcHJpdmF0ZXMgPSB7XG4gICAgICBjb250YWluZXI6IHBhbmVsLFxuICAgICAgY29udGVudCxcbiAgICAgIHRhc2tzOiB0YXNrTGlzdCxcbiAgICAgIHByb2plY3RzOiBwcm9qZWN0TGlzdCxcbiAgICAgIHRhc2tDYWxsYmFjazogb3B0aW9ucy50YXNrQ2FsbGJhY2sgfHwgbnVsbCxcbiAgICAgIGRhdGVGb3JtYXQ6IFNldHRpbmdzLmxvb2t1cERhdGVGb3JtYXQoJ2lzbycpLFxuICAgICAgdGFza01lbnU6IG51bGwsXG4gICAgfTtcbiAgICBwcml2YXRlTWVtYmVycy5zZXQodGhpcywgcHJpdmF0ZXMpO1xuXG4gICAgcHJpdmF0ZXMudGFza01lbnUgPSBuZXcgUG9wdXBNZW51KHsgY2xvc2VJZlNjcm9sbGVkOiBwYW5lbCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoIHRoZSBkaXNwbGF5IHBhbmVsIHdpdGggYSBuZXcgbGlzdCBvZiB0YXNrcy5cbiAgICogQHBhcmFtIHttb2R1bGU6dGFza0Rpc3BsYXl+VGFza0Rpc3BsYXl+dXBkYXRlT3B0aW9uc30gW29wdGlvbnM9e31dIEFuXG4gICAqICAgb2JqZWN0IGhvbGRpbmcgb3B0aW9ucyBmb3IgdXBkYXRpbmcgdGhlIHBhbmVsLlxuICAgKi9cbiAgdXBkYXRlKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHByaXZhdGVzID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpO1xuXG4gICAgcHJpdmF0ZXMuZGF0ZUZvcm1hdCA9IG9wdGlvbnMuZGF0ZUZvcm1hdCA/PyBTZXR0aW5ncy5sb29rdXBEYXRlRm9ybWF0KCk7XG4gICAgY2xlYXIodGhpcyk7XG5cbiAgICBjb25zdCBsaXN0T3B0aW9ucyA9IHtcbiAgICAgIHByb2plY3RMaXN0OiBwcml2YXRlcy5wcm9qZWN0cyxcbiAgICAgIHN0YXJ0RGF0ZTogb3B0aW9ucy5zdGFydERhdGUgfHwgbnVsbCxcbiAgICAgIGVuZERhdGU6IG9wdGlvbnMuZW5kRGF0ZSB8fCBudWxsLFxuICAgICAgY29tcGxldGVkOiBvcHRpb25zLmNvbXBsZXRlZCA/PyBmYWxzZSxcbiAgICAgIHJlcXVpcmVEdWVEYXRlOiBvcHRpb25zLnJlcXVpcmVEdWVEYXRlID8/IGZhbHNlLFxuICAgICAgcHJvamVjdDogb3B0aW9ucy5wcm9qZWN0IHx8IG51bGwsXG4gICAgfTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wcmlvcml0eSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGxpc3RPcHRpb25zLnByaW9yaXR5ID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgICB9XG5cbiAgICBjb25zdCBncm91cEJ5ID0gb3B0aW9ucy5ncm91cEJ5IHx8ICdub25lJztcbiAgICBjb25zdCBkZXNjZW5kaW5nID0gb3B0aW9ucy5zb3J0RGVzY2VuZGluZyA/PyBmYWxzZTtcbiAgICBjb25zdCBjYXNlU2Vuc2l0aXZlID0gb3B0aW9ucy5jYXNlU2Vuc2l0aXZlID8/IGZhbHNlO1xuICAgIGNvbnN0IG1pc3NpbmdMYXN0ID0gb3B0aW9ucy5taXNzaW5nTGFzdCA/PyBmYWxzZTtcbiAgICBjb25zdCBwdXNoU29ydEZpZWxkID0gKGZpZWxkKSA9PiB7XG4gICAgICBpZiAoIWxpc3RPcHRpb25zLnNvcnRCeSkgbGlzdE9wdGlvbnMuc29ydEJ5ID0gW107XG4gICAgICBsaXN0T3B0aW9ucy5zb3J0QnkucHVzaCh7XG4gICAgICAgIGZpZWxkLFxuICAgICAgICBkZXNjZW5kaW5nLFxuICAgICAgICBjYXNlU2Vuc2l0aXZlLFxuICAgICAgICBtaXNzaW5nTGFzdCxcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoZ3JvdXBCeSAhPT0gJ25vbmUnKSBwdXNoU29ydEZpZWxkKGdyb3VwQnkpO1xuICAgIGlmIChvcHRpb25zLnNvcnRCeSkgcHVzaFNvcnRGaWVsZChvcHRpb25zLnNvcnRCeSk7XG4gICAgaWYgKG9wdGlvbnMuc29ydEJ5ICE9PSAnY3JlYXRlLWRhdGUnKSBwdXNoU29ydEZpZWxkKCdjcmVhdGUtZGF0ZScpO1xuXG4gICAgY29uc3QgZW50cmllcyA9IHByaXZhdGVzLnRhc2tzLmVudHJpZXMobGlzdE9wdGlvbnMpO1xuXG4gICAgbGV0IGxpc3QgPSBudWxsO1xuICAgIGxldCBwcmV2VGFzayA9IG51bGw7XG4gICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgaWYgKCFwcmV2VGFzayB8fCAhaXNTYW1lR3JvdXAoZ3JvdXBCeSwgZW50cnkudGFzaywgcHJldlRhc2spKSB7XG4gICAgICAgIGxpc3QgPSBjcmVhdGVMaXN0KHRoaXMsIGdldEdyb3VwSGVhZGluZyh0aGlzLCBncm91cEJ5LCBlbnRyeS50YXNrKSk7XG4gICAgICB9XG5cbiAgICAgIGFkZFRhc2sodGhpcywgbGlzdCwgZW50cnkuaWQsIGVudHJ5LnRhc2spO1xuICAgICAgcHJldlRhc2sgPSBlbnRyeS50YXNrO1xuICAgIH0pO1xuXG4gICAgaWYgKGVudHJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBtZXNzYWdlLmNsYXNzTGlzdC5hZGQoJ3Rhc2stbGlzdC1lbXB0eScpO1xuICAgICAgbWVzc2FnZS50ZXh0Q29udGVudCA9ICdObyBUYXNrcyBGb3VuZCc7XG4gICAgICBwcml2YXRlcy5jb250ZW50LmFwcGVuZENoaWxkKG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8vIFNldCBtZW51IGl0ZW1zIGZvciB0aGUgJ21vcmUnIGJ1dHRvblxuICAgIGlmIChvcHRpb25zLnByb2plY3QpIHtcbiAgICAgIHByaXZhdGVzLnRhc2tNZW51LnNldE1lbnVJdGVtcyhTVEFOREFSRF9NRU5VX0lURU1TKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWVudUl0ZW1zID0gWy4uLlBST0pFQ1RfTUVOVV9JVEVNUywgLi4uU1RBTkRBUkRfTUVOVV9JVEVNU107XG4gICAgICBwcml2YXRlcy50YXNrTWVudS5zZXRNZW51SXRlbXMobWVudUl0ZW1zKTtcbiAgICB9XG5cbiAgICAvLyBSZXNldCB0aGUgc2Nyb2xsIHBvc2l0aW9uXG4gICAgaWYgKG9wdGlvbnMucmVzZXRTY3JvbGwgIT09IGZhbHNlKSB7XG4gICAgICBwcml2YXRlcy5jb250YWluZXIuc2Nyb2xsVG9wID0gMDtcbiAgICAgIHByaXZhdGVzLmNvbnRhaW5lci5zY3JvbGxMZWZ0ID0gMDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFza0Rpc3BsYXk7XG4iLCIvKipcbiAqIERlZmluZXMgdGhlIFtUYXNrTGlzdF17QGxpbmsgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fSBjbGFzcy5cbiAqIEBtb2R1bGUgdGFza0xpc3RcbiAqL1xuXG5pbXBvcnQgeyBpc0JlZm9yZSBhcyBpc0RhdGVCZWZvcmUsIGlzU2FtZURheSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnZXZlbnRzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB2NCBhcyBnZW5lcmF0ZVV1aWQgfSBmcm9tICd1dWlkJztcblxuaW1wb3J0IFJlY3VycmluZ0RhdGUgZnJvbSAnLi9yZWN1cnJpbmdEYXRlJztcbmltcG9ydCBUYXNrIGZyb20gJy4vdGFzayc7XG5pbXBvcnQge1xuICBhZGRUb01hcEFycmF5LFxuICBmaW5kSW5NYXBBcnJheSxcbiAgZ2V0SnNvblR5cGUsXG4gIGlzVXVpZFZhbGlkLFxuICByZW1vdmVGcm9tTWFwQXJyYXlCeSxcbiAgdmFsaWRhdGVWYWx1ZSxcbn0gZnJvbSAnLi91dGlsaXR5L2RhdGEnO1xuaW1wb3J0IHtcbiAgZm9ybWF0SXNvRGF0ZSxcbiAgZ2V0TW9udGhJbmRleCxcbiAgZ2V0TW9udGhOYW1lLFxuICBnZXRXZWVrZGF5SW5kZXgsXG4gIGdldFdlZWtkYXlOYW1lLFxufSBmcm9tICcuL3V0aWxpdHkvZGF0ZXMnO1xuaW1wb3J0IHsgYXJyYXlUb0NzdlJlY29yZCB9IGZyb20gJy4vdXRpbGl0eS9zdG9yYWdlJztcblxuLyoqXG4gKiBPYmplY3QgaG9sZGluZyBwcml2YXRlIG1lbWJlcnMgZm9yIHRoZVxuICogW1Rhc2tMaXN0XXtAbGluayBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R9IGNsYXNzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fnByaXZhdGVzXG4gKiBAcHJvcGVydHkge01hcH0gdGFza3MgSG9sZHMgYSBtYXAgYXNzb2NpYXRpbmcgVVVJRHMgdG8gdGFza3MuXG4gKiBAcHJvcGVydHkge01hcH0gdGFza3NCeUR1ZURhdGUgSG9sZHMgYSBtYXAgYXNzb2NpYXRpbmcgSVNPIGRhdGUgc3RyaW5ncyB0b1xuICogICBhcnJheXMgb2YgW3Rhc2tXcmFwcGVyXXtAbGluayBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+dGFza1dyYXBwZXJ9XG4gKiAgIG9iamVjdHMgYmFzZWQgb24gdGhlIGR1ZSBkYXRlcyBvZiB0aGUgdGFza3MuIFRhc2tzIHdpdGggbm8gZHVlIGRhdGUgYXJlXG4gKiAgIGFzc2lnbmVkIHRvIHRoZSBhcnJheSBhc3NvY2lhdGVkIHdpdGggdGhlIHN0cmluZyAnbm9uZScuXG4gKiBAcHJvcGVydHkge01hcH0gdGFza3NCeVByb2plY3QgSG9sZHMgYSBtYXAgYXNzb2NpYXRpbmcgcHJvamVjdCBpZGVudGlmaWVyc1xuICogICB0byBhcnJheXMgb2YgW3Rhc2tXcmFwcGVyXXtAbGluayBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+dGFza1dyYXBwZXJ9XG4gKiAgIG9iamVjdHMgYmFzZWQgb24gdGhlIHByb2plY3RzIGFzc29jaWF0ZWQgd2l0aCB0aGUgdGFza3MuIFRhc2tzIG5vdFxuICogICBiZWxvbmdpbmcgdG8gYW55IHByb2plY3QgYXJlIGFzc2lnbmVkIHRvIHRoZSBhcnJheSBhc3NvY2lhdGVkIHdpdGggdGhlXG4gKiAgIHN0cmluZyAnbm9uZScuXG4gKiBAcHJvcGVydHkge01hcH0gdGFza3NCeVByaW9yaXR5IEhvbGRzIGEgbWFwIGFzc29jaWF0aW5nIHByaW9yaXR5IG51bWJlcnMgdG9cbiAqICAgYXJyYXlzIG9mIFt0YXNrV3JhcHBlcl17QGxpbmsgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fnRhc2tXcmFwcGVyfVxuICogICBvYmplY3RzIGJhc2VkIG9uIHRoZSBwcmlvcml0aWVzIG9mIHRoZSB0YXNrcy5cbiAqIEBwcm9wZXJ0eSB7RXZlbnRFbWl0dGVyfSBldmVudEVtaXR0ZXIgSG9sZHMgdGhlIGV2ZW50IGVtaXR0ZXIgd2hpY2hcbiAqICAgZGlzcGF0Y2hlcyBldmVudHMgdG8gYXR0YWNoZWQgZXZlbnQgbGlzdGVuZXJzLlxuICovXG5cbi8qKlxuICogSG9sZHMgcHJpdmF0ZSBkYXRhIGZvciB0aGUgW1Rhc2tMaXN0XXtAbGluayBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R9IGNsYXNzLlxuICogQHR5cGUge1dlYWtNYXB9XG4gKiBAc2VlIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH5wcml2YXRlc1xuICovXG5jb25zdCBwcml2YXRlTWVtYmVycyA9IG5ldyBXZWFrTWFwKCk7XG5cbi8qKlxuICogQ29udGFpbmVyIGhvbGRpbmcgYSBsaXN0IG9mIHRhc2tzLlxuICovXG5jbGFzcyBUYXNrTGlzdCB7XG4gIC8qKlxuICAgKiBXcmFwcGVyIG9iamVjdCBob2xkaW5nIGEgdGFzayBhbG9uZyB3aXRoIGl0cyBVVUlELlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+dGFza1dyYXBwZXJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIHRhc2suXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOnRhc2t+VGFza30gdGFzayBUaGUgdGFzayBpbnN0YW5jZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEV2ZW50IHRoYXQgaXMgZmlyZWQgd2hlbiBhIHRhc2sgaXMgYWRkZWQgdG8gdGhlIHRhc2sgbGlzdC5cbiAgICogQGV2ZW50IG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH5hZGRUYXNrXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlOiAnYWRkLXRhc2snLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBuZXdseS1hZGRlZCB0YXNrLlxuICAgKiBAcHJvcGVydHkge21vZHVsZTp0YXNrflRhc2t9IHRhc2sgQSBjb3B5IG9mIHRoZSBuZXdseS1hZGRlZCB0YXNrLlxuICAgKi9cblxuICAvKipcbiAgICogRXZlbnQgdGhhdCBpcyBmaXJlZCB3aGVuIGEgdGFzayBpbiB0aGUgbGlzdCBpcyBtb2RpZmllZC5cbiAgICogQGV2ZW50IG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH51cGRhdGVUYXNrXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlOiAndXBkYXRlLXRhc2snLlxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSB1cGRhdGVkIHRhc2suXG4gICAqIEBwcm9wZXJ0eSB7bW9kdWxlOnRhc2t+VGFza30gdGFzayBBIGNvcHkgb2YgdGhlIG1vZGlmaWVkIHRhc2suXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFdmVudCB0aGF0IGlzIGZpcmVkIHdoZW4gYSB0YXNrIGluIHRoZSBsaXN0IGlzIGRlbGV0ZWQuXG4gICAqIEBldmVudCBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+ZGVsZXRlVGFza1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZTogJ2RlbGV0ZS10YXNrJy5cbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGRlbGV0ZWQgdGFzay5cbiAgICogQHByb3BlcnR5IHttb2R1bGU6dGFza35UYXNrfSB0YXNrIEEgY29weSBvZiB0aGUgdGFzayB0aGF0IHdhcyBkZWxldGVkLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gb2JqZWN0IHNwZWNpZnlpbmcgb3B0aW9ucyBmb3Igc29ydGluZyB0YXNrcy5cbiAgICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fnNvcnRPcHRpb25zXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmaWVsZCBUaGUgZmllbGQgdG8gc29ydCBieS4gQ2FuIGJlIG9uZSBvZiAnbmFtZScsXG4gICAqICAgJ2R1ZS1kYXRlJywgJ2NyZWF0ZS1kYXRlJywgJ3ByaW9yaXR5Jywgb3IgJ3Byb2plY3QnLlxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkZXNjZW5kaW5nPWZhbHNlXSBJZiBzZXQgdG8gdHJ1ZSwgdGhlbiB0aGUgdGFza3Mgd2lsbFxuICAgKiAgIGJlIHNvcnRlZCBpbiBkZXNjZW5kaW5nIG9yZGVyLCByYXRoZXIgdGhhbiBpbiBhc2NlbmRpbmcgb3JkZXIuXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Nhc2VTZW5zaXRpdmU9ZmFsc2VdIElmIHNldCB0byB0cnVlLCB0aGVuIHRoZSBzb3J0aW5nXG4gICAqICAgd2lsbCBiZSBjYXNlLXNlbnNpdGl2ZSAob25seSBhcHBsaWVzIHRvIHRleHQtYmFzZWQgZmllbGRzKS5cbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbbWlzc2luZ0xhc3Q9ZmFsc2VdIElmIHNldCB0byB0cnVlLCB0aGVuIHRhc2tzIHRoYXQgZG9cbiAgICogICBub3QgaGF2ZSB0aGUgc3BlY2lmaWVkIGZpZWxkIHdpbGwgYmUgc29ydGVkIGF0IHRoZSBlbmQgKG9yIGF0IHRoZVxuICAgKiAgIGJlZ2lubmluZyBpZiBkZXNjZW5kaW5nIGlzIHRydWUpLiBPdGhlcndpc2UsIHRhc2tzIHRoYXQgYXJlIG1pc3NpbmcgdGhlXG4gICAqICAgc3BlY2lmaWVkIGZpZWxkIGFyZSBzb3J0ZWQgYXQgdGhlIGJlZ2lubmluZyAob3IgZW5kIGlmIGRlc2NlbmRpbmcpLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gb2JqZWN0IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN0YXR1cyBvZiBhIGRhdGEgaW1wb3J0LlxuICAgKiBAdHlwZWRlZiB7T2JqZWN0fSBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+aW1wb3J0U3RhdHVzXG4gICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSB0YXNrcyBBbiBvYmplY3QgaG9sZGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbnVtYmVyIG9mXG4gICAqICAgdGFza3MgdGhhdCB3ZXJlIGltcG9ydGVkLlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gdGFza3MuYWRkZWQgVGhlIG51bWJlciBvZiBuZXcgdGFza3MgdGhhdCB3ZXJlIGFkZGVkIHRvXG4gICAqICAgdGhlIHRhc2sgbGlzdC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRhc2tzLnVwZGF0ZWQgVGhlIG51bWJlciBvZiBleGlzdGluZyB0YXNrcyBpbiB0aGUgdGFza1xuICAgKiAgIGxpc3QgdGhhdCB3ZXJlIHVwZGF0ZWQuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0YXNrcy5mYWlsZWQgVGhlIG51bWJlciBvZiB0YXNrcyB0aGF0IGZhaWxlZCB0byBpbXBvcnQuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0YXNrcy50b3RhbCBUaGUgdG90YWwgbnVtYmVyIG9mIHRhc2tzIHRoYXQgd2VyZVxuICAgKiAgIHByb2Nlc3NlZC5cbiAgICogQHByb3BlcnR5IHtPYmplY3R9IFtwcm9qZWN0c10gQW4gb2JqZWN0IGhvbGRpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlXG4gICAqICAgbnVtYmVyIG9mIHByb2plY3RzIHRoYXQgd2VyZSBpbXBvcnRlZC4gVGhpcyBpcyBub3QgdXNlZCBmb3IgSlNPTlxuICAgKiAgIGltcG9ydHMuXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwcm9qZWN0cy5hZGRlZCBUaGUgbnVtYmVyIG9mIG5ldyBwcm9qZWN0cyB0aGF0IHdlcmVcbiAgICogICBhZGRlZCB0byB0aGUgcHJvamVjdCBsaXN0LlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gcHJvamVjdHMudXBkYXRlZCBUaGUgbnVtYmVyIG9mIGV4aXN0aW5nIHByb2plY3RzIGluIHRoZVxuICAgKiAgIHByb2plY3QgbGlzdCB0aGF0IHdlcmUgdXBkYXRlZC5cbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHByb2plY3RzLmZhaWxlZCBUaGUgbnVtYmVyIG9mIHByb2plY3RzIHRoYXQgZmFpbGVkIHRvXG4gICAqICAgaW1wb3J0LlxuICAgKiBAcHJvcGVydHkge251bWJlcn0gcHJvamVjdHMudG90YWwgVGhlIHRvdGFsIG51bWJlciBvZiBwcm9qZWN0cyB0aGF0IHdlcmVcbiAgICogICBwcm9jZXNzZWQuXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IGVycm9ycyBBbiBhcnJheSBvZiBlcnJvciBtZXNzYWdlcyBkZXNjcmliaW5nIGFueVxuICAgKiAgIGVycm9ycyB0aGF0IG9jY3VycmVkIGR1cmluZyB0aGUgaW1wb3J0LlxuICAgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEgdGFzayBsaXN0LlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSB7XG4gICAgICB0YXNrczogbmV3IE1hcCgpLFxuICAgICAgdGFza3NCeUR1ZURhdGU6IG5ldyBNYXAoKSxcbiAgICAgIHRhc2tzQnlQcm9qZWN0OiBuZXcgTWFwKCksXG4gICAgICB0YXNrc0J5UHJpb3JpdHk6IG5ldyBNYXAoKSxcbiAgICAgIGV2ZW50RW1pdHRlcjogbmV3IEV2ZW50RW1pdHRlcigpLFxuICAgIH07XG4gICAgcHJpdmF0ZU1lbWJlcnMuc2V0KHRoaXMsIHByaXZhdGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSB0YXNrIGluIHRoZSB0YXNrIGxpc3QuIFRoaXMgbWV0aG9kIG9ubHkgcmV0dXJucyBhIGNvcHkgb2YgdGhlIHRhc2ssXG4gICAqIG5vdCBhbiBhY3R1YWwgcmVmZXJlbmNlIHRvIHRoZSB0YXNrIGl0c2VsZi4gVG8gbW9kaWZ5IGEgdGFzayBpbiB0aGUgbGlzdCxcbiAgICogdXNlIHRoZSBbdXBkYXRlVGFza117QGxpbmsgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0I3VwZGF0ZVRhc2t9IG1ldGhvZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgdGFzayB0byByZXRyaWV2ZS5cbiAgICogQHJldHVybnMgez9tb2R1bGU6dGFza35UYXNrfSBUaGUgcmVxdWVzdGVkIHRhc2ssIG9yIHVuZGVmaW5lZCBpZiBpdCBjb3VsZFxuICAgKiAgIG5vdCBiZSBmb3VuZC5cbiAgICovXG4gIGdldFRhc2soaWQpIHtcbiAgICBjb25zdCB0YXNrID0gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLnRhc2tzLmdldChpZCk7XG4gICAgaWYgKHRhc2spIHJldHVybiBfLmNsb25lRGVlcCh0YXNrKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBhIHRhc2sgaW4gdGhlIHRhc2sgbGlzdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgdGFzayB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0ge21vZHVsZTp0YXNrflRhc2t9IHRhc2sgVGhlIG5ldyB0YXNrIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBnaXZlblxuICAgKiAgIGlkZW50aWZpZXIuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlIHRhc2sgd2FzIHJlcGxhY2VkIHN1Y2Nlc3NmdWxseS4gSWZcbiAgICogICB0aGUgZ2l2ZW4gaWQgaXMgaW52YWxpZCwgcmV0dXJucyBmYWxzZS5cbiAgICogQGZpcmVzIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH51cGRhdGVUYXNrXG4gICAqL1xuICB1cGRhdGVUYXNrKGlkLCB0YXNrKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29uc3Qgb2xkVGFzayA9IHByaXZhdGVzLnRhc2tzLmdldChpZCk7XG4gICAgaWYgKCFvbGRUYXNrKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBjb3B5ID0gXy5jbG9uZURlZXAodGFzayk7XG4gICAgcHJpdmF0ZXMudGFza3Muc2V0KGlkLCBjb3B5KTtcblxuICAgIGNvbnN0IHVwZGF0ZUluZGV4ID0gKG1hcCwgb2xkS2V5LCBuZXdLZXkpID0+IHtcbiAgICAgIGlmIChvbGRLZXkgPT09IG5ld0tleSkge1xuICAgICAgICBjb25zdCBlbnRyeSA9IGZpbmRJbk1hcEFycmF5KG1hcCwgbmV3S2V5LCAoZWxlbSkgPT4gZWxlbS5pZCA9PT0gaWQpO1xuICAgICAgICBlbnRyeS50YXNrID0gY29weTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZUZyb21NYXBBcnJheUJ5KG1hcCwgb2xkS2V5LCAoZWxlbSkgPT4gZWxlbS5pZCA9PT0gaWQpO1xuICAgICAgICBhZGRUb01hcEFycmF5KG1hcCwgbmV3S2V5LCB7IGlkLCB0YXNrOiBjb3B5IH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsZXQgb2xkS2V5ID0gJ25vbmUnO1xuICAgIGxldCBuZXdLZXkgPSAnbm9uZSc7XG4gICAgaWYgKG9sZFRhc2suZHVlRGF0ZSkgb2xkS2V5ID0gZm9ybWF0SXNvRGF0ZShvbGRUYXNrLmR1ZURhdGUpO1xuICAgIGlmIChjb3B5LmR1ZURhdGUpIG5ld0tleSA9IGZvcm1hdElzb0RhdGUoY29weS5kdWVEYXRlKTtcbiAgICB1cGRhdGVJbmRleChwcml2YXRlcy50YXNrc0J5RHVlRGF0ZSwgb2xkS2V5LCBuZXdLZXkpO1xuXG4gICAgb2xkS2V5ID0gb2xkVGFzay5wcm9qZWN0IHx8ICdub25lJztcbiAgICBuZXdLZXkgPSBjb3B5LnByb2plY3QgfHwgJ25vbmUnO1xuICAgIHVwZGF0ZUluZGV4KHByaXZhdGVzLnRhc2tzQnlQcm9qZWN0LCBvbGRLZXksIG5ld0tleSk7XG5cbiAgICBvbGRLZXkgPSBvbGRUYXNrLnByaW9yaXR5O1xuICAgIG5ld0tleSA9IGNvcHkucHJpb3JpdHk7XG4gICAgdXBkYXRlSW5kZXgocHJpdmF0ZXMudGFza3NCeVByaW9yaXR5LCBvbGRLZXksIG5ld0tleSk7XG5cbiAgICBwcml2YXRlcy5ldmVudEVtaXR0ZXIuZW1pdCgndXBkYXRlLXRhc2snLCB7XG4gICAgICB0eXBlOiAndXBkYXRlLXRhc2snLFxuICAgICAgaWQsXG4gICAgICB0YXNrOiBfLmNsb25lRGVlcCh0YXNrKSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBvciB1cGRhdGUgYSB0YXNrLiBJZiBhIHRhc2sgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllciBleGlzdHMsIHRoZW4gaXRcbiAgICogaXMgcmVwbGFjZWQgd2l0aCB0aGUgZ2l2ZW4gdGFzay4gT3RoZXJ3aXNlLCB0aGUgdGFzayBpcyBhZGRlZCB0byB0aGUgbGlzdFxuICAgKiBhcyBhIG5ldyB0YXNrLiBJZiB0aGUgZ2l2ZW4gaWRlbnRpZmllciBpcyBub3QgYSB2YWxpZCBVVUlELCB0aGVuIHRoZVxuICAgKiBtZXRob2QgcmV0dXJucyBmYWxzZSBhbmQgbm90aGluZyBoYXBwZW5zLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSB0YXNrLlxuICAgKiBAcGFyYW0ge21vZHVsZTp0YXNrflRhc2t9IHRhc2sgVGhlIHRhc2sgdGhhdCBzaG91bGQgYmUgYWRkZWQgb3Igd2l0aCB3aGljaFxuICAgKiAgIGFuIGV4aXN0aW5nIHRhc2sgc2hvdWxkIGJlIHJlcGxhY2VkLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdGFzayB3YXMgc3VjY2Vzc2Z1bGx5IGFkZGVkIG9yIHVwZGF0ZWQsIG9yXG4gICAqICAgZmFsc2UgaWYgdGhlIGdpdmVuIGlkZW50aWZpZXIgaXMgbm90IGEgdmFsaWQgVVVJRC5cbiAgICogQGZpcmVzIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH5hZGRUYXNrXG4gICAqIEBmaXJlcyBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+dXBkYXRlVGFza1xuICAgKi9cbiAgYWRkT3JVcGRhdGVUYXNrKGlkLCB0YXNrKSB7XG4gICAgaWYgKCFpc1V1aWRWYWxpZChpZCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmICghdGhpcy51cGRhdGVUYXNrKGlkLCB0YXNrKSkge1xuICAgICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG5cbiAgICAgIC8vIEFkZCB0YXNrIHRvIHRhc2sgbWFwXG4gICAgICBjb25zdCBjb3B5ID0gXy5jbG9uZURlZXAodGFzayk7XG4gICAgICBwcml2YXRlcy50YXNrcy5zZXQoaWQsIGNvcHkpO1xuXG4gICAgICAvLyBBZGQgdGFzayB0byBsb29rdXAgbWFwc1xuICAgICAgY29uc3Qgd3JhcHBlciA9IHsgaWQsIHRhc2s6IGNvcHkgfTtcbiAgICAgIGxldCBkYXRlU3RyID0gJ25vbmUnO1xuICAgICAgaWYgKHRhc2suZHVlRGF0ZSkgZGF0ZVN0ciA9IGZvcm1hdElzb0RhdGUodGFzay5kdWVEYXRlKTtcbiAgICAgIGNvbnN0IHByb2plY3RTdHIgPSB0YXNrLnByb2plY3QgfHwgJ25vbmUnO1xuICAgICAgY29uc3QgeyBwcmlvcml0eSB9ID0gdGFzaztcbiAgICAgIGFkZFRvTWFwQXJyYXkoXG4gICAgICAgIHByaXZhdGVzLnRhc2tzQnlEdWVEYXRlLFxuICAgICAgICBkYXRlU3RyLFxuICAgICAgICB7IC4uLndyYXBwZXIgfSxcbiAgICAgICk7XG4gICAgICBhZGRUb01hcEFycmF5KFxuICAgICAgICBwcml2YXRlcy50YXNrc0J5UHJvamVjdCxcbiAgICAgICAgcHJvamVjdFN0cixcbiAgICAgICAgeyAuLi53cmFwcGVyIH0sXG4gICAgICApO1xuICAgICAgYWRkVG9NYXBBcnJheShcbiAgICAgICAgcHJpdmF0ZXMudGFza3NCeVByaW9yaXR5LFxuICAgICAgICBwcmlvcml0eSxcbiAgICAgICAgeyAuLi53cmFwcGVyIH0sXG4gICAgICApO1xuXG4gICAgICBwcml2YXRlcy5ldmVudEVtaXR0ZXIuZW1pdCgnYWRkLXRhc2snLCB7XG4gICAgICAgIHR5cGU6ICdhZGQtdGFzaycsXG4gICAgICAgIGlkLFxuICAgICAgICB0YXNrOiBfLmNsb25lRGVlcCh0YXNrKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSB0YXNrIHRvIHRoZSB0YXNrIGxpc3QgYW5kIHJldHVybnMgaXRzIHVuaXF1ZSBpZGVudGlmaWVyLiBJbiBvcmRlclxuICAgKiB0byBwcmV2ZW50IHVuaW50ZW50aW9uYWwgZXh0ZXJuYWwgbW9kaWZpY2F0aW9uIG9mIHRoZSB0YXNrLCBhIGRlZXAgY29weSBpc1xuICAgKiBtYWRlLCBhbmQgdGhlIG9yaWdpbmFsIG9iamVjdCBpcyBub3Qga2VwdC5cbiAgICogQHBhcmFtIHttb2R1bGU6dGFza35UYXNrfSB0YXNrIFRoZSB0YXNrIHRvIGJlIGFkZGVkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgaWRlbnRpZmllciBvZiB0aGUgbmV3bHktYWRkZWQgdGFzay5cbiAgICogQGZpcmVzIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH5hZGRUYXNrXG4gICAqL1xuICBhZGRUYXNrKHRhc2spIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcblxuICAgIC8vIEdlbmVyYXRlIFVVSUQgKGxvb3AganVzdCBpbiBjYXNlIHRoZXJlJ3MgYSBjb2xsaXNpb24pXG4gICAgbGV0IGlkO1xuICAgIGRvIHtcbiAgICAgIGlkID0gZ2VuZXJhdGVVdWlkKCk7XG4gICAgfSB3aGlsZSAocHJpdmF0ZXMudGFza3MuaGFzKGlkKSk7XG5cbiAgICB0aGlzLmFkZE9yVXBkYXRlVGFzayhpZCwgdGFzayk7XG4gICAgcmV0dXJuIGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBhIHRhc2sgd2l0aCB0aGUgZ2l2ZW4gaWRlbnRpZmllciBleGlzdHMgd2l0aGluIHRoZSB0YXNrXG4gICAqIGxpc3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHRhc2sgdG8gbG9vayBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB0YXNrIGV4aXN0cywgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGhhc1Rhc2soaWQpIHtcbiAgICByZXR1cm4gcHJpdmF0ZU1lbWJlcnMuZ2V0KHRoaXMpLnRhc2tzLmhhcyhpZCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgdGFzayBmcm9tIHRoZSB0YXNrIGxpc3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHRhc2sgdG8gcmVtb3ZlLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSB0YXNrIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZFxuICAgKiAgIHN1Y2Nlc3NmdWxseS4gT3RoZXJ3aXNlLCBpZiB0aGUgZ2l2ZW4gaWQgd2FzIG5vdCBmb3VuZCwgcmV0dXJucyBmYWxzZS5cbiAgICogQGZpcmVzIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH5kZWxldGVUYXNrXG4gICAqL1xuICBkZWxldGVUYXNrKGlkKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29uc3QgdGFzayA9IHByaXZhdGVzLnRhc2tzLmdldChpZCk7XG4gICAgaWYgKCF0YXNrKSByZXR1cm4gZmFsc2U7XG5cbiAgICBsZXQgZGF0ZVN0ciA9ICdub25lJztcbiAgICBpZiAodGFzay5kdWVEYXRlKSBkYXRlU3RyID0gZm9ybWF0SXNvRGF0ZSh0YXNrLmR1ZURhdGUpO1xuICAgIGNvbnN0IHByb2plY3RTdHIgPSB0YXNrLnByb2plY3QgfHwgJ25vbmUnO1xuICAgIGNvbnN0IHsgcHJpb3JpdHkgfSA9IHRhc2s7XG5cbiAgICBwcml2YXRlcy50YXNrcy5kZWxldGUoaWQpO1xuICAgIHJlbW92ZUZyb21NYXBBcnJheUJ5KHByaXZhdGVzLnRhc2tzQnlEdWVEYXRlLCBkYXRlU3RyLCAoZWxlbSkgPT4gKFxuICAgICAgZWxlbS5pZCA9PT0gaWRcbiAgICApKTtcbiAgICByZW1vdmVGcm9tTWFwQXJyYXlCeShwcml2YXRlcy50YXNrc0J5UHJvamVjdCwgcHJvamVjdFN0ciwgKGVsZW0pID0+IChcbiAgICAgIGVsZW0uaWQgPT09IGlkXG4gICAgKSk7XG4gICAgcmVtb3ZlRnJvbU1hcEFycmF5QnkocHJpdmF0ZXMudGFza3NCeVByaW9yaXR5LCBwcmlvcml0eSwgKGVsZW0pID0+IChcbiAgICAgIGVsZW0uaWQgPT09IGlkXG4gICAgKSk7XG5cbiAgICBwcml2YXRlcy5ldmVudEVtaXR0ZXIuZW1pdCgnZGVsZXRlLXRhc2snLCB7XG4gICAgICB0eXBlOiAnZGVsZXRlLXRhc2snLFxuICAgICAgaWQsXG4gICAgICB0YXNrLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIGFsbCB0YXNrcyBpbiB0aGUgdGFzayBsaXN0LlxuICAgKiBAZmlyZXMgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fmRlbGV0ZVRhc2tcbiAgICovXG4gIGRlbGV0ZUFsbCgpIHtcbiAgICBjb25zdCBwcml2YXRlcyA9IHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKTtcblxuICAgIC8vIFNhdmUgdGFzayBpbmZvcm1hdGlvbiBpbiBvcmRlciB0byBlbWl0IGRlbGV0ZSBldmVudHMgbGF0ZXJcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xuICAgIHByaXZhdGVzLnRhc2tzLmZvckVhY2goKHRhc2ssIGlkKSA9PiB0YXNrcy5wdXNoKHsgaWQsIHRhc2sgfSkpO1xuXG4gICAgcHJpdmF0ZXMudGFza3MuY2xlYXIoKTtcbiAgICBwcml2YXRlcy50YXNrc0J5RHVlRGF0ZS5jbGVhcigpO1xuICAgIHByaXZhdGVzLnRhc2tzQnlQcm9qZWN0LmNsZWFyKCk7XG4gICAgcHJpdmF0ZXMudGFza3NCeVByaW9yaXR5LmNsZWFyKCk7XG5cbiAgICB0YXNrcy5mb3JFYWNoKCh7IGlkLCB0YXNrIH0pID0+IHtcbiAgICAgIHByaXZhdGVzLmV2ZW50RW1pdHRlci5lbWl0KCdkZWxldGUtdGFzaycsIHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZS10YXNrJyxcbiAgICAgICAgaWQsXG4gICAgICAgIHRhc2ssXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgZWFjaCB0YXNrIGJlbG9uZ2luZyB0byBhIGdpdmVuIHByb2plY3QsIHJlbW92ZSB0aGUgdGFzayBmcm9tIHRoYXRcbiAgICogcHJvamVjdC4gQWZ0ZXJ3YXJkLCB0aGVyZSB3aWxsIGJlIG5vIHRhc2tzIGFzc2lnbmVkIHRvIHRoZSBwcm9qZWN0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvamVjdElkIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgcHJvamVjdCB0byBjbGVhci5cbiAgICogQGZpcmVzIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH51cGRhdGVUYXNrXG4gICAqL1xuICBjbGVhclByb2plY3QocHJvamVjdElkKSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29uc3QgbWFwID0gcHJpdmF0ZXMudGFza3NCeVByb2plY3Q7XG4gICAgY29uc3QgdGFza3MgPSBtYXAuZ2V0KHByb2plY3RJZCk7XG4gICAgaWYgKCF0YXNrcykgcmV0dXJuO1xuXG4gICAgLy8gU2F2ZSBtb2RpZmllZCB0YXNrcyBpbiBvcmRlciB0byBlbWl0IGV2ZW50cyBsYXRlclxuICAgIGNvbnN0IHVwZGF0ZWRUYXNrcyA9IFtdO1xuXG4gICAgdGFza3MuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgIGNvbnN0IHsgdGFzayB9ID0gZW50cnk7XG4gICAgICB0YXNrLnByb2plY3QgPSBudWxsO1xuICAgICAgYWRkVG9NYXBBcnJheShtYXAsICdub25lJywgZW50cnkpO1xuICAgICAgdXBkYXRlZFRhc2tzLnB1c2goZW50cnkpO1xuICAgIH0pO1xuICAgIG1hcC5kZWxldGUocHJvamVjdElkKTtcblxuICAgIHVwZGF0ZWRUYXNrcy5mb3JFYWNoKCh7IGlkLCB0YXNrIH0pID0+IHtcbiAgICAgIHByaXZhdGVzLmV2ZW50RW1pdHRlci5lbWl0KCd1cGRhdGUtdGFzaycsIHtcbiAgICAgICAgdHlwZTogJ3VwZGF0ZS10YXNrJyxcbiAgICAgICAgaWQsXG4gICAgICAgIHRhc2s6IF8uY2xvbmVEZWVwKHRhc2spLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gb24gZWFjaCB0YXNrIGluIHRoZSBsaXN0LiBOb3RlIHRoYXQgdGhlIHRhc2tcbiAgICogaW5zdGFuY2UgcGFzc2VkIHRvIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBvbmx5IGEgY29weSBvZiB0aGUgdGFzayBpbiB0aGVcbiAgICogbGlzdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gZWFjaCB0YXNrLiBUaGVcbiAgICogICBmdW5jdGlvbiB3aWxsIGJlIHBhc3NlZCBhXG4gICAqICAgW3dyYXBwZXJde0BsaW5rIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH50YXNrV3JhcHBlcn0gY29udGFpbmluZyB0aGVcbiAgICogICB0YXNrIGFuZCBpdHMgaWRlbnRpZmllci5cbiAgICovXG4gIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICBwcml2YXRlTWVtYmVycy5nZXQodGhpcykudGFza3MuZm9yRWFjaCgodGFzaywgaWQpID0+IHtcbiAgICAgIGNvbnN0IGNvcHkgPSBfLmNsb25lRGVlcCh0YXNrKTtcbiAgICAgIGNhbGxiYWNrKHsgaWQsIHRhc2s6IGNvcHkgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIGFycmF5IG9mIFt0YXNrV3JhcHBlcl17QGxpbmsgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fnRhc2tXcmFwcGVyfVxuICAgKiBvYmplY3RzIGZpbHRlcmVkIGFuZCBzb3J0ZWQgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBvcHRpb25zLlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIEFuIG9iamVjdCBob2xkaW5nIG9wdGlvbnMgdG8gY29udHJvbCB3aGljaFxuICAgKiAgIHRhc2tzIHRvIGluY2x1ZGUgaW4gdGhlIEl0ZXJhdG9yLlxuICAgKiBAcGFyYW0ge21vZHVsZTpwcm9qZWN0TGlzdH5Qcm9qZWN0TGlzdH0gW29wdGlvbnMucHJvamVjdExpc3RdIFRoZSBwcm9qZWN0XG4gICAqICAgY29udGFpbmVyLiBJZiBub3QgcHJvdmlkZWQsIHRoZW4gc29ydGluZyBieSBwcm9qZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqIEBwYXJhbSB7RGF0ZX0gW29wdGlvbnMuc3RhcnREYXRlXSBJZiBwcm92aWRlZCwgYWxsIHRhc2tzIHdpdGggZHVlIGRhdGVzXG4gICAqICAgYmVmb3JlIHRoZSBnaXZlbiBkYXRlIHdpbGwgYmUgZXhjbHVkZWQuXG4gICAqIEBwYXJhbSB7RGF0ZX0gW29wdGlvbnMuZW5kRGF0ZV0gSWYgcHJvdmlkZWQsIGFsbCB0YXNrcyB3aXRoIGR1ZSBkYXRlc1xuICAgKiAgIGFmdGVyIHRoZSBnaXZlbiBkYXRlIHdpbGwgYmUgZXhjbHVkZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY29tcGxldGVkPWZhbHNlXSBJZiBzZXQgdG8gdHJ1ZSwgdGhlbiB0YXNrcyB0aGF0XG4gICAqICAgaGF2ZSBiZWVuIGNvbXBsZXRlZCB3aWxsIGJlIGluY2x1ZGVkLiBPdGhlcndpc2UgdGhleSBhcmUgZXhjbHVkZWQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVxdWlyZUR1ZURhdGU9ZmFsc2VdIElmIHNldCB0byB0cnVlLCB0aGVuIHRhc2tzXG4gICAqICAgdGhhdCBkbyBub3QgaGF2ZSBhIGR1ZSBkYXRlIHdpbGwgYmUgZXhjbHVkZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5wcm9qZWN0XSBJZiBwcm92aWRlZCwgb25seSB0YXNrcyBiZWxvbmdpbmcgdG8gdGhlXG4gICAqICAgc3BlY2lmaWVkIHByb2plY3Qgd2lsbCBiZSBpbmNsdWRlZC4gSWYgc2V0IHRvICdub25lJywgdGhlbiBvbmx5IHRhc2tzXG4gICAqICAgdGhhdCBkbyBub3QgaGF2ZSBhIHByb2plY3QgYXNzaWduZWQgd2lsbCBiZSBpbmNsdWRlZC5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnByaW9yaXR5XSBJZiBwcm92aWRlZCwgb25seSB0YXNrcyB3aXRoIHRoZVxuICAgKiAgIHNwZWNpZmllZCBwcmlvcml0eSB3aWxsIGJlIGluY2x1ZGVkLlxuICAgKiBAcGFyYW0ge21vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH5zb3J0T3B0aW9uc1tdfSBbb3B0aW9ucy5zb3J0QnldIEFuIGFycmF5XG4gICAqICAgb2Ygb2JqZWN0cyBzcGVjaWZ5aW5nIHRoZSBzb3J0IG9yZGVyLiBUaGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgYXJyYXlcbiAgICogICBkZXRlcm1pbmVzIHRoZSBwcmltYXJ5IGZpZWxkIG9uIHdoaWNoIHRvIHNvcnQgdGhlIHRhc2tzLCB0aGUgc2Vjb25kXG4gICAqICAgZWxlbWVudCBkZXRlcm1pbmVzIHRoZSBmaWVsZCB1c2VkIHRvIGJyZWFrIHRpZXMsIHRoZSB0aGlyZCBlbGVtZW50XG4gICAqICAgZGV0ZXJtaW5lcyB0aGUgZmllbGQgdXNlZCB0byBicmVhayBmdXJ0aGVyIHRpZXMsIGFuZCBzbyBvbi5cbiAgICogQHJldHVybnMge21vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH50YXNrV3JhcHBlcltdfSBUaGUgYXJyYXkgb2ZcbiAgICogICBbdGFza1dyYXBwZXJde0BsaW5rIG1vZHVsZTp0YXNrTGlzdH5UYXNrTGlzdH50YXNrV3JhcHBlcn0gb2JqZWN0cy5cbiAgICovXG4gIGVudHJpZXMob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcHJpdmF0ZXMgPSBwcml2YXRlTWVtYmVycy5nZXQodGhpcyk7XG4gICAgY29uc3Qgc29ydEJ5ID0gb3B0aW9ucy5zb3J0QnkgfHwgW107XG5cbiAgICAvLyBXaGljaCBpbmRleCB0byB1c2U6IGRlZmF1bHQgfCBkdWUtZGF0ZSB8IHByb2plY3QgfCBwcmlvcml0eVxuICAgIGxldCBsb29rdXBUeXBlID0gJ2RlZmF1bHQnO1xuICAgIGlmIChvcHRpb25zLnByb2plY3QpIHtcbiAgICAgIGxvb2t1cFR5cGUgPSAncHJvamVjdCc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5wcmlvcml0eSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGxvb2t1cFR5cGUgPSAncHJpb3JpdHknO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5zdGFydERhdGUgfHwgb3B0aW9ucy5lbmREYXRlKSB7XG4gICAgICBsb29rdXBUeXBlID0gJ2R1ZS1kYXRlJztcbiAgICB9XG5cbiAgICBsZXQgb3V0cHV0ID0gW107XG4gICAgY29uc3QgY29weVRhc2tzID0gKG1hcCwga2V5KSA9PiB7XG4gICAgICBjb25zdCB0YXNrcyA9IG1hcC5nZXQoa2V5KTtcbiAgICAgIGlmICh0YXNrcykgdGFza3MuZm9yRWFjaCgodGFzaykgPT4gb3V0cHV0LnB1c2goXy5jbG9uZURlZXAodGFzaykpKTtcbiAgICB9O1xuICAgIHN3aXRjaCAobG9va3VwVHlwZSkge1xuICAgICAgY2FzZSAnZHVlLWRhdGUnOiB7XG4gICAgICAgIGNvbnN0IGRhdGVzID0gWy4uLnByaXZhdGVzLnRhc2tzQnlEdWVEYXRlLmtleXMoKV07XG4gICAgICAgIGRhdGVzLnNvcnQoKTtcblxuICAgICAgICBsZXQgc3RhcnRLZXkgPSBudWxsO1xuICAgICAgICBsZXQgZW5kS2V5ID0gbnVsbDtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnREYXRlKSB7XG4gICAgICAgICAgc3RhcnRLZXkgPSBmb3JtYXRJc29EYXRlKG9wdGlvbnMuc3RhcnREYXRlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5lbmREYXRlKSB7XG4gICAgICAgICAgZW5kS2V5ID0gZm9ybWF0SXNvRGF0ZShvcHRpb25zLmVuZERhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxvd0luZGV4ID0gMDtcbiAgICAgICAgbGV0IGhpZ2hJbmRleCA9IGRhdGVzLmxlbmd0aDtcbiAgICAgICAgaWYgKHN0YXJ0S2V5KSB7XG4gICAgICAgICAgbG93SW5kZXggPSBfLnNvcnRlZEluZGV4KGRhdGVzLCBzdGFydEtleSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZEtleSkge1xuICAgICAgICAgIGhpZ2hJbmRleCA9IF8uc29ydGVkTGFzdEluZGV4KGRhdGVzLCBlbmRLZXkpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGVzLmxlbmd0aCA+IDAgJiYgZGF0ZXNbZGF0ZXMubGVuZ3RoIC0gMV0gPT09ICdub25lJykge1xuICAgICAgICAgIGhpZ2hJbmRleCAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0ZXMuc2xpY2UobG93SW5kZXgsIGhpZ2hJbmRleCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgY29weVRhc2tzKHByaXZhdGVzLnRhc2tzQnlEdWVEYXRlLCBrZXkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29weVRhc2tzKHByaXZhdGVzLnRhc2tzQnlEdWVEYXRlLCAnbm9uZScpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ3ByaW9yaXR5Jzoge1xuICAgICAgICBjb3B5VGFza3MocHJpdmF0ZXMudGFza3NCeVByaW9yaXR5LCBvcHRpb25zLnByaW9yaXR5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdwcm9qZWN0JzpcbiAgICAgICAgY29weVRhc2tzKHByaXZhdGVzLnRhc2tzQnlQcm9qZWN0LCBvcHRpb25zLnByb2plY3QpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RlZmF1bHQnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcHJpdmF0ZXMudGFza3MuZm9yRWFjaCgodGFzaywgaWQpID0+IHtcbiAgICAgICAgICBvdXRwdXQucHVzaCh7IGlkLCB0YXNrOiBfLmNsb25lRGVlcCh0YXNrKSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIG91dHB1dCA9IG91dHB1dC5maWx0ZXIoKGVudHJ5KSA9PiB7XG4gICAgICBjb25zdCB7IHRhc2sgfSA9IGVudHJ5O1xuICAgICAgaWYgKHRhc2suZHVlRGF0ZSkge1xuICAgICAgICBpZiAob3B0aW9ucy5zdGFydERhdGVcbiAgICAgICAgICAmJiBpc0RhdGVCZWZvcmUodGFzay5kdWVEYXRlLCBvcHRpb25zLnN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kRGF0ZSAmJiBpc0RhdGVCZWZvcmUob3B0aW9ucy5lbmREYXRlLCB0YXNrLmR1ZURhdGUpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIW9wdGlvbnMuY29tcGxldGVkICYmIHRhc2suaXNDb21wbGV0ZSgpKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAob3B0aW9ucy5yZXF1aXJlRHVlRGF0ZSAmJiAhdGFzay5kdWVEYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAob3B0aW9ucy5wcm9qZWN0KSB7XG4gICAgICAgIGlmIChvcHRpb25zLnByb2plY3QgPT09ICdub25lJyAmJiB0YXNrLnByb2plY3QpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKG9wdGlvbnMucHJvamVjdCAhPT0gJ25vbmUnICYmIHRhc2sucHJvamVjdCAhPT0gb3B0aW9ucy5wcm9qZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJpb3JpdHkgPT09ICdudW1iZXInXG4gICAgICAgICYmIHRhc2sucHJpb3JpdHkgIT09IG9wdGlvbnMucHJpb3JpdHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIG91dHB1dCA9IG91dHB1dC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBjb25zdCBsZWZ0VGFzayA9IGEudGFzaztcbiAgICAgIGNvbnN0IHJpZ2h0VGFzayA9IGIudGFzaztcbiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzb3J0QnkubGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IGNhc2VTZW5zaXRpdmUgPSBzb3J0QnlbaW5kZXhdLmNhc2VTZW5zaXRpdmUgPz8gZmFsc2U7XG4gICAgICAgIGNvbnN0IGRlc2NlbmRpbmcgPSBzb3J0QnlbaW5kZXhdLmRlc2NlbmRpbmcgPz8gZmFsc2U7XG4gICAgICAgIGNvbnN0IG1pc3NpbmdMYXN0ID0gc29ydEJ5W2luZGV4XS5taXNzaW5nTGFzdCA/PyBmYWxzZTtcbiAgICAgICAgY29uc3QgTEVTUyA9IGRlc2NlbmRpbmcgPyAxIDogLTE7XG4gICAgICAgIGNvbnN0IE1PUkUgPSBkZXNjZW5kaW5nID8gLTEgOiAxO1xuICAgICAgICBzd2l0Y2ggKHNvcnRCeVtpbmRleF0uZmllbGQpIHtcbiAgICAgICAgICBjYXNlICduYW1lJzoge1xuICAgICAgICAgICAgbGV0IGxlZnROYW1lID0gbGVmdFRhc2submFtZTtcbiAgICAgICAgICAgIGxldCByaWdodE5hbWUgPSByaWdodFRhc2submFtZTtcbiAgICAgICAgICAgIGlmICghY2FzZVNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgICBsZWZ0TmFtZSA9IGxlZnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgIHJpZ2h0TmFtZSA9IHJpZ2h0TmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxlZnROYW1lIDwgcmlnaHROYW1lKSByZXR1cm4gTEVTUztcbiAgICAgICAgICAgIGlmIChsZWZ0TmFtZSA+IHJpZ2h0TmFtZSkgcmV0dXJuIE1PUkU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnZHVlLWRhdGUnOiB7XG4gICAgICAgICAgICBjb25zdCBsZWZ0RGF0ZSA9IGxlZnRUYXNrLmR1ZURhdGU7XG4gICAgICAgICAgICBjb25zdCByaWdodERhdGUgPSByaWdodFRhc2suZHVlRGF0ZTtcbiAgICAgICAgICAgIGlmICghbGVmdERhdGUgJiYgcmlnaHREYXRlKSByZXR1cm4gbWlzc2luZ0xhc3QgPyBNT1JFIDogTEVTUztcbiAgICAgICAgICAgIGlmIChsZWZ0RGF0ZSAmJiAhcmlnaHREYXRlKSByZXR1cm4gbWlzc2luZ0xhc3QgPyBMRVNTIDogTU9SRTtcbiAgICAgICAgICAgIGlmIChsZWZ0RGF0ZSAmJiByaWdodERhdGUgJiYgIWlzU2FtZURheShsZWZ0RGF0ZSwgcmlnaHREYXRlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gaXNEYXRlQmVmb3JlKGxlZnREYXRlLCByaWdodERhdGUpID8gTEVTUyA6IE1PUkU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnY3JlYXRlLWRhdGUnOlxuICAgICAgICAgICAgaWYgKGlzRGF0ZUJlZm9yZShsZWZ0VGFzay5jcmVhdGlvbkRhdGUsIHJpZ2h0VGFzay5jcmVhdGlvbkRhdGUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBMRVNTO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzRGF0ZUJlZm9yZShyaWdodFRhc2suY3JlYXRpb25EYXRlLCBsZWZ0VGFzay5jcmVhdGlvbkRhdGUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBNT1JFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncHJpb3JpdHknOlxuICAgICAgICAgICAgaWYgKGxlZnRUYXNrLnByaW9yaXR5ID4gcmlnaHRUYXNrLnByaW9yaXR5KSByZXR1cm4gTEVTUztcbiAgICAgICAgICAgIGlmIChsZWZ0VGFzay5wcmlvcml0eSA8IHJpZ2h0VGFzay5wcmlvcml0eSkgcmV0dXJuIE1PUkU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdwcm9qZWN0Jzoge1xuICAgICAgICAgICAgY29uc3QgbGVmdFByb2ogPSBsZWZ0VGFzay5wcm9qZWN0O1xuICAgICAgICAgICAgY29uc3QgcmlnaHRQcm9qID0gcmlnaHRUYXNrLnByb2plY3Q7XG4gICAgICAgICAgICBpZiAoIWxlZnRQcm9qICYmIHJpZ2h0UHJvaikgcmV0dXJuIG1pc3NpbmdMYXN0ID8gTU9SRSA6IExFU1M7XG4gICAgICAgICAgICBpZiAobGVmdFByb2ogJiYgIXJpZ2h0UHJvaikgcmV0dXJuIG1pc3NpbmdMYXN0ID8gTEVTUyA6IE1PUkU7XG4gICAgICAgICAgICBpZiAobGVmdFByb2ogJiYgcmlnaHRQcm9qKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHsgcHJvamVjdExpc3QgfSA9IG9wdGlvbnM7XG4gICAgICAgICAgICAgIGlmICghcHJvamVjdExpc3QpIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGxldCBsZWZ0TmFtZSA9IHByb2plY3RMaXN0LmdldFByb2plY3QobGVmdFByb2opLm5hbWU7XG4gICAgICAgICAgICAgIGxldCByaWdodE5hbWUgPSBwcm9qZWN0TGlzdC5nZXRQcm9qZWN0KHJpZ2h0UHJvaikubmFtZTtcbiAgICAgICAgICAgICAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgICAgICAgICAgICAgbGVmdE5hbWUgPSBsZWZ0TmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJpZ2h0TmFtZSA9IHJpZ2h0TmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChsZWZ0TmFtZSA8IHJpZ2h0TmFtZSkgcmV0dXJuIExFU1M7XG4gICAgICAgICAgICAgIGlmIChsZWZ0TmFtZSA+IHJpZ2h0TmFtZSkgcmV0dXJuIE1PUkU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdG8gdGhlIHRhc2sgbGlzdC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgZXZlbnQgdG8gbGlzdGVuIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBpbnZva2VkIHdoZW4gdGhlXG4gICAqICAgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS5ldmVudEVtaXR0ZXIub24odHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgZGF0YSB0byBhbiBvYmplY3Qgc3VpdGFibGUgZm9yIHNlcmlhbGl6YXRpb24uXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEFuIG9iamVjdCByZXByZXNlbnRpbmcgc2VyaWFsaXphYmxlIGRhdGEgZm9yIHRoZSBjbGFzcy5cbiAgICovXG4gIHRvSlNPTigpIHtcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xuICAgIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS50YXNrcy5mb3JFYWNoKCh0YXNrLCBpZCkgPT4ge1xuICAgICAgY29uc3QgY29weSA9IF8uY2xvbmVEZWVwKHRhc2spO1xuICAgICAgY29weS5pZCA9IGlkO1xuICAgICAgdGFza3MucHVzaChjb3B5KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFza3M7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBkYXRhIHRvIGEgc3RyaW5nIGluIENTViAoY29tbWEtc2VwYXJhdGVkIHZhbHVlcykgZm9ybWF0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIEFuIG9iamVjdCBob2xkaW5nIGFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm5ld2xpbmVTZXF1ZW5jZV0gVGhlIGNoYXJhY3RlciBzZXF1ZW5jZSB0byB1c2VcbiAgICogICBmb3IgbmV3bGluZXMuIElmIG5vdCBnaXZlbiwgdGhlbiBhIGNhcnJpYWdlIHJldHVybi9saW5lIGZlZWQgcGFpciAoQ1JMRilcbiAgICogICBpcyB1c2VkLCBhcyBzdWdnZXN0ZWQgYnkgdGhlXG4gICAqICAgW1JGQyA0MTgwXXtAbGluayBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzQxODB9XG4gICAqICAgc3BlY2lmaWNhdGlvbi5cbiAgICogQHBhcmFtIHttb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IFtvcHRpb25zLnByb2plY3RMaXN0XSBUaGUgcHJvamVjdFxuICAgKiAgIGNvbnRhaW5lci4gSWYgbm90IHByb3ZpZGVkLCB0aGVuIG5vIHByb2plY3QgaW5mb3JtYXRpb24gYmVzaWRlcyB0aGVcbiAgICogICBwcm9qZWN0IGlkZW50aWZpZXIgd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgQ1NWIGZpZWxkcy5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIHRhc2sgZGF0YSBpbiBDU1YgZm9ybWF0LlxuICAgKi9cbiAgdG9Dc3Yob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgcHJvamVjdEZpZWxkcyA9IFtdO1xuICAgIGlmIChvcHRpb25zLnByb2plY3RMaXN0KSBwcm9qZWN0RmllbGRzLnB1c2goJ1Byb2plY3QgTmFtZScpO1xuICAgIHByb2plY3RGaWVsZHMucHVzaCgnUHJvamVjdCBVVUlEJyk7XG4gICAgaWYgKG9wdGlvbnMucHJvamVjdExpc3QpIHByb2plY3RGaWVsZHMucHVzaCgnUHJvamVjdCBEZXNjcmlwdGlvbicpO1xuXG4gICAgY29uc3QgaGVhZGVyID0gW1xuICAgICAgJ05hbWUnLFxuICAgICAgJ1VVSUQnLFxuICAgICAgJ0R1ZSBEYXRlJyxcbiAgICAgICdEYXRlIEFkZGVkJyxcbiAgICAgICdEYXRlIENvbXBsZXRlZCcsXG4gICAgICAnUHJpb3JpdHknLFxuICAgICAgJ0Rlc2NyaXB0aW9uJyxcbiAgICAgIC4uLnByb2plY3RGaWVsZHMsXG4gICAgICAnUmVjdXJyZW5jZSBJbnRlcnZhbCBVbml0JyxcbiAgICAgICdSZWN1cnJlbmNlIEludGVydmFsIExlbmd0aCcsXG4gICAgICAnUmVjdXJyZW5jZSBTdGFydCBEYXRlJyxcbiAgICAgICdSZWN1cnJlbmNlIEJhc2VkIG9uIENvbXBsZXRpb24/JyxcbiAgICAgICdSZWN1cnJlbmNlIFdlZWsgTnVtYmVyJyxcbiAgICAgICdSZWN1cnJlbmNlIFdlZWsgRGF5cycsXG4gICAgICAnUmVjdXJyZW5jZSBNb250aCcsXG4gICAgICAnUmVjdXJyZW5jZSBEYXknLFxuICAgICAgJ1JlY3VycmVuY2UgV2Vla2VuZCBCZWhhdmlvcicsXG4gICAgICAnUmVjdXJyZW5jZSBFbmQgRGF0ZScsXG4gICAgICAnUmVjdXJyZW5jZSBNYXggQ291bnQnLFxuICAgIF07XG5cbiAgICBjb25zdCBuZXdsaW5lU2VxdWVuY2UgPSBvcHRpb25zLm5ld2xpbmVTZXF1ZW5jZSA/PyAnXFxyXFxuJztcbiAgICBjb25zdCBjc3ZPcHRpb25zID0geyBuZXdsaW5lU2VxdWVuY2UgfTtcbiAgICBjb25zdCBjb252ZXJ0RGF0ZSA9IChkYXRlKSA9PiBkYXRlPy50b0pTT04oKSA/PyAnJztcbiAgICBjb25zdCBsaW5lcyA9IFthcnJheVRvQ3N2UmVjb3JkKGhlYWRlciwgY3N2T3B0aW9ucyldO1xuICAgIHByaXZhdGVNZW1iZXJzLmdldCh0aGlzKS50YXNrcy5mb3JFYWNoKCh0YXNrLCBpZCkgPT4ge1xuICAgICAgY29uc3QgZmllbGRzID0gW1xuICAgICAgICB0YXNrLm5hbWUsXG4gICAgICAgIGlkLFxuICAgICAgICBjb252ZXJ0RGF0ZSh0YXNrLmR1ZURhdGUpLFxuICAgICAgICBjb252ZXJ0RGF0ZSh0YXNrLmNyZWF0aW9uRGF0ZSksXG4gICAgICAgIGNvbnZlcnREYXRlKHRhc2suY29tcGxldGlvbkRhdGUpLFxuICAgICAgICBUYXNrLmNvbnZlcnRQcmlvcml0eVRvUHJldHR5U3RyaW5nKHRhc2sucHJpb3JpdHkpLFxuICAgICAgICB0YXNrLmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgXTtcblxuICAgICAgaWYgKG9wdGlvbnMucHJvamVjdExpc3QpIHtcbiAgICAgICAgbGV0IHByb2plY3QgPSBudWxsO1xuICAgICAgICBpZiAodGFzay5wcm9qZWN0KSB7XG4gICAgICAgICAgcHJvamVjdCA9IG9wdGlvbnMucHJvamVjdExpc3QuZ2V0UHJvamVjdCh0YXNrLnByb2plY3QpO1xuICAgICAgICB9XG4gICAgICAgIGZpZWxkcy5wdXNoKFxuICAgICAgICAgIHByb2plY3Q/Lm5hbWUgPz8gJycsXG4gICAgICAgICAgdGFzay5wcm9qZWN0ID8/ICcnLFxuICAgICAgICAgIHByb2plY3Q/LmRlc2NyaXB0aW9uID8/ICcnLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGRzLnB1c2godGFzay5wcm9qZWN0ID8/ICcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyByZWN1cnJpbmdEYXRlIH0gPSB0YXNrO1xuICAgICAgbGV0IGludGVydmFsVW5pdCA9ICcnO1xuICAgICAgc3dpdGNoIChyZWN1cnJpbmdEYXRlPy5pbnRlcnZhbFVuaXQpIHtcbiAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICBpbnRlcnZhbFVuaXQgPSAnRGF5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgaW50ZXJ2YWxVbml0ID0gJ1dlZWsnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgaW50ZXJ2YWxVbml0ID0gJ01vbnRoJztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgaW50ZXJ2YWxVbml0ID0gJ1llYXInO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbGV0IGRheXNPZldlZWsgPSAnJztcbiAgICAgIGlmIChyZWN1cnJpbmdEYXRlPy5kYXlzT2ZXZWVrKSB7XG4gICAgICAgIGRheXNPZldlZWsgPSByZWN1cnJpbmdEYXRlLmRheXNPZldlZWsubWFwKGdldFdlZWtkYXlOYW1lKS5qb2luKCcsICcpO1xuICAgICAgfVxuICAgICAgbGV0IG1vbnRoID0gJyc7XG4gICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihyZWN1cnJpbmdEYXRlPy5tb250aCkpIHtcbiAgICAgICAgbW9udGggPSBnZXRNb250aE5hbWUocmVjdXJyaW5nRGF0ZS5tb250aCk7XG4gICAgICB9XG4gICAgICBsZXQgb25XZWVrZW5kID0gJyc7XG4gICAgICBzd2l0Y2ggKHJlY3VycmluZ0RhdGU/Lm9uV2Vla2VuZCkge1xuICAgICAgICBjYXNlICduby1jaGFuZ2UnOlxuICAgICAgICAgIG9uV2Vla2VuZCA9ICdObyBDaGFuZ2UnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwcmV2aW91cy13ZWVrZGF5JzpcbiAgICAgICAgICBvbldlZWtlbmQgPSAnVXNlIFByZXZpb3VzIFdlZWtkYXknO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICduZXh0LXdlZWtkYXknOlxuICAgICAgICAgIG9uV2Vla2VuZCA9ICdVc2UgTmV4dCBXZWVrZGF5JztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbmVhcmVzdC13ZWVrZGF5JzpcbiAgICAgICAgICBvbldlZWtlbmQgPSAnVXNlIE5lYXJlc3QgV2Vla2RheSc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBmaWVsZHMucHVzaChcbiAgICAgICAgaW50ZXJ2YWxVbml0LFxuICAgICAgICByZWN1cnJpbmdEYXRlPy5pbnRlcnZhbExlbmd0aC50b1N0cmluZygpID8/ICcnLFxuICAgICAgICBjb252ZXJ0RGF0ZShyZWN1cnJpbmdEYXRlPy5zdGFydERhdGUpLFxuICAgICAgICByZWN1cnJpbmdEYXRlPy5iYXNlT25Db21wbGV0aW9uLnRvU3RyaW5nKCkgPz8gJycsXG4gICAgICAgIHJlY3VycmluZ0RhdGU/LndlZWtOdW1iZXI/LnRvU3RyaW5nKCkgPz8gJycsXG4gICAgICAgIGRheXNPZldlZWssXG4gICAgICAgIG1vbnRoLFxuICAgICAgICByZWN1cnJpbmdEYXRlPy5kYXlPZk1vbnRoPy50b1N0cmluZygpID8/ICcnLFxuICAgICAgICBvbldlZWtlbmQsXG4gICAgICAgIGNvbnZlcnREYXRlKHJlY3VycmluZ0RhdGU/LmVuZERhdGUpLFxuICAgICAgICByZWN1cnJpbmdEYXRlPy5tYXhDb3VudD8udG9TdHJpbmcoKSA/PyAnJyxcbiAgICAgICk7XG4gICAgICBsaW5lcy5wdXNoKGFycmF5VG9Dc3ZSZWNvcmQoZmllbGRzLCBjc3ZPcHRpb25zKSk7XG4gICAgfSk7XG4gICAgbGluZXMucHVzaCgnJyk7XG5cbiAgICByZXR1cm4gbGluZXMuam9pbihuZXdsaW5lU2VxdWVuY2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEltcG9ydCB0YXNrcyBmcm9tIGEgSlNPTiBvYmplY3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBzZXJpYWxpemVkIEpTT04gb2JqZWN0IHRvIGltcG9ydC5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBbiBvYmplY3QgaG9sZGluZyBhZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZVxuICAgKiAgIGltcG9ydC5cbiAgICogQHBhcmFtIHttb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IFtvcHRpb25zLnByb2plY3RMaXN0XSBUaGUgcHJvamVjdFxuICAgKiAgIGNvbnRhaW5lci4gSWYgbm90IHByb3ZpZGVkLCB0aGVuIGZ1bGwgdmFsaWRhdGlvbiB3aWxsIG5vdCBiZSBwZXJmb3JtZWRcbiAgICogICBvbiBwcm9qZWN0IGlkZW50aWZpZXJzLlxuICAgKiBAcmV0dXJucyB7bW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fmltcG9ydFN0YXR1c30gQW4gb2JqZWN0IGhvbGRpbmdcbiAgICogICBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RhdHVzIG9mIHRoZSBpbXBvcnQuXG4gICAqIEBmaXJlcyBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+YWRkVGFza1xuICAgKiBAZmlyZXMgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fnVwZGF0ZVRhc2tcbiAgICovXG4gIGltcG9ydEZyb21Kc29uKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGNvdW50cyA9IHtcbiAgICAgIGFkZGVkOiAwLFxuICAgICAgdXBkYXRlZDogMCxcbiAgICAgIGZhaWxlZDogMCxcbiAgICAgIHRvdGFsOiAwLFxuICAgIH07XG4gICAgY29uc3QgZXJyb3JzID0gW107XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIGVycm9ycy5wdXNoKCdFcnJvcjogRXhwZWN0ZWQgXCJ0YXNrc1wiIHByb3BlcnR5IHRvIGJlIGFuIGFycmF5LicpO1xuICAgICAgcmV0dXJuIHsgdGFza3M6IGNvdW50cywgZXJyb3JzIH07XG4gICAgfVxuXG4gICAgZGF0YS5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICBjb25zdCBoYW5kbGVFcnJvciA9IChlcnJvclR5cGUsIHZhbHVlLCBvcHRzKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IG1zZ1ByZWZpeCA9IGBXYXJuaW5nOiBUYXNrIFwiJHt0YXNrLm5hbWV9XCJgO1xuICAgICAgICBsZXQgbXNnO1xuICAgICAgICBzd2l0Y2ggKGVycm9yVHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2JhZC10eXBlJzpcbiAgICAgICAgICAgIGlmIChvcHRzLmFsbG93Q29udmVyc2lvbiAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIG1zZyA9IGBFeHBlY3RlZCB0eXBlIFwiJHtvcHRzLmV4cGVjdGVkVHlwZX1cIiBmb3IgcHJvcGVydHkgXCIke29wdHMudmFsdWVOYW1lfVwiIChjb252ZXJzaW9uIGZyb20gdHlwZSBcInN0cmluZ1wiIGZhaWxlZCkuYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1zZyA9IGBFeHBlY3RlZCB0eXBlIFwiJHtvcHRzLmV4cGVjdGVkVHlwZX1cIiBmb3IgcHJvcGVydHkgXCIke29wdHMudmFsdWVOYW1lfVwiIChyZWNlaXZlZCBcIiR7Z2V0SnNvblR5cGUodmFsdWUpfVwiKS5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndW5rbm93bi12YWx1ZSc6XG4gICAgICAgICAgICBtc2cgPSBgVW5yZWNvZ25pemVkIHZhbHVlIFwiJHt2YWx1ZX1cIiBmb3IgcHJvcGVydHkgXCIke29wdHMudmFsdWVOYW1lfVwiLmA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdub3QtaW50ZWdlcic6XG4gICAgICAgICAgICBtc2cgPSBgVmFsdWUgZm9yIHByb3BlcnR5IFwiJHtvcHRzLnZhbHVlTmFtZX1cIiBtdXN0IGJlIGFuIGludGVnZXIgKHJlY2VpdmVkIFwiJHt2YWx1ZX1cIikuYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rvby1sb3cnOlxuICAgICAgICAgICAgbXNnID0gYFZhbHVlIGZvciBwcm9wZXJ0eSBcIiR7b3B0cy52YWx1ZU5hbWV9XCIgY2Fubm90IGJlIGJlbG93IFwiJHtvcHRzLm1pbn1cIiAocmVjZWl2ZWQgXCIke3ZhbHVlfVwiKS5gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndG9vLWhpZ2gnOlxuICAgICAgICAgICAgbXNnID0gYFZhbHVlIGZvciBwcm9wZXJ0eSBcIiR7b3B0cy52YWx1ZU5hbWV9XCIgY2Fubm90IGJlIGFib3ZlIFwiJHtvcHRzLm1heH1cIiAocmVjZWl2ZWQgXCIke3ZhbHVlfVwiKS5gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYmFkLWRhdGUnOlxuICAgICAgICAgICAgbXNnID0gYEV4cGVjdGVkIGEgZGF0ZSBpbiBJU08gZm9ybWF0IGZvciBwcm9wZXJ0eSBcIiR7b3B0cy52YWx1ZU5hbWV9XCIgKHJlY2VpdmVkIFwiJHt2YWx1ZX1cIikuYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2JhZC1pZCc6XG4gICAgICAgICAgICBtc2cgPSBgRXhwZWN0ZWQgYSB2ZXJzaW9uIDQgVVVJRCBmb3IgcHJvcGVydHkgXCIke29wdHMudmFsdWVOYW1lfVwiIChyZWNlaXZlZCBcIiR7dmFsdWV9XCIpLmA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdmYWlsZWQtcHJlZGljYXRlJzpcbiAgICAgICAgICAgIGlmIChvcHRzLnZhbHVlTmFtZSA9PT0gJ3Byb2plY3QnKSB7XG4gICAgICAgICAgICAgIG1zZyA9IGBVbnJlY29nbml6ZWQgcHJvamVjdCBpZGVudGlmaWVyIFwiJHt2YWx1ZX1cIiBmb3IgcHJvcGVydHkgXCIke29wdHMudmFsdWVOYW1lfVwiLmA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtc2cgPSBgRmFpbGVkIGN1c3RvbSB2YWxpZGF0aW9uIGZvciBwcm9wZXJ0eSBcIiR7b3B0cy52YWx1ZU5hbWV9LmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbXNnID0gYEVuY291bnRlcmVkIHVucmVjb2duaXplZCBlcnJvciBcIiR7ZXJyb3JUeXBlfVwiIGZvciBwcm9wZXJ0eSBcIiR7b3B0cy52YWx1ZU5hbWV9XCIuYDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZXJyb3JzLnB1c2goYCR7bXNnUHJlZml4fTogJHttc2d9YCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGFzay5uYW1lID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ0Vycm9yOiBUYXNrIG11c3QgaGF2ZSBhIG5hbWUuJyk7XG4gICAgICAgIGNvdW50cy5mYWlsZWQgKz0gMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhc2submFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZXJyb3JzLnB1c2goYEVycm9yOiBFeHBlY3RlZCB0eXBlIFwic3RyaW5nXCIgZm9yIHRhc2sgbmFtZSAocmVjZWl2ZWQgXCIke2dldEpzb25UeXBlKHRhc2submFtZSl9XCIpLmApO1xuICAgICAgICBjb3VudHMuZmFpbGVkICs9IDE7XG4gICAgICB9IGVsc2UgaWYgKHRhc2submFtZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZXJyb3JzLnB1c2goJ0Vycm9yOiBUYXNrIG5hbWUgbXVzdCBub3QgYmUgZW1wdHkuJyk7XG4gICAgICAgIGNvdW50cy5mYWlsZWQgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRhc2tPcHRpb25zID0ge307XG5cbiAgICAgICAgbGV0IG5ld0lkID0gbnVsbDtcbiAgICAgICAgaWYgKHZhbGlkYXRlVmFsdWUodGFzay5pZCwge1xuICAgICAgICAgIHZhbHVlTmFtZTogJ2lkJyxcbiAgICAgICAgICBleHBlY3RlZFR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIHJlcXVpcmVVdWlkOiB0cnVlLFxuICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICB9KSkgbmV3SWQgPSB0YXNrLmlkO1xuXG4gICAgICAgIHZhbGlkYXRlVmFsdWUodGFzay5kdWVEYXRlLCB7XG4gICAgICAgICAgdmFsdWVOYW1lOiAnZHVlRGF0ZScsXG4gICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnZGF0ZScsXG4gICAgICAgICAgYWxsb3dDb252ZXJzaW9uOiB0cnVlLFxuICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0YXNrT3B0aW9ucy5kdWVEYXRlID0gdmFsdWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFsaWRhdGVWYWx1ZSh0YXNrLmNyZWF0aW9uRGF0ZSwge1xuICAgICAgICAgIHZhbHVlTmFtZTogJ2NyZWF0aW9uRGF0ZScsXG4gICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnZGF0ZScsXG4gICAgICAgICAgYWxsb3dDb252ZXJzaW9uOiB0cnVlLFxuICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0YXNrT3B0aW9ucy5jcmVhdGlvbkRhdGUgPSB2YWx1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YWxpZGF0ZVZhbHVlKHRhc2suY29tcGxldGlvbkRhdGUsIHtcbiAgICAgICAgICB2YWx1ZU5hbWU6ICdjb21wbGV0aW9uRGF0ZScsXG4gICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnZGF0ZScsXG4gICAgICAgICAgYWxsb3dDb252ZXJzaW9uOiB0cnVlLFxuICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0YXNrT3B0aW9ucy5jb21wbGV0aW9uRGF0ZSA9IHZhbHVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3JDYWxsYmFjazogaGFuZGxlRXJyb3IsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0YXNrLnByaW9yaXR5ICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBzZXRQcmlvcml0eSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGFza09wdGlvbnMucHJpb3JpdHkgPSB2YWx1ZTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmICh0eXBlb2YgdGFzay5wcmlvcml0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlVmFsdWUodGFzay5wcmlvcml0eSwge1xuICAgICAgICAgICAgICB2YWx1ZU5hbWU6ICdwcmlvcml0eScsXG4gICAgICAgICAgICAgIGV4cGVjdGVkVmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgJ3ZlcnktbG93JyxcbiAgICAgICAgICAgICAgICAnbG93JyxcbiAgICAgICAgICAgICAgICAnbWVkaXVtJyxcbiAgICAgICAgICAgICAgICAnaGlnaCcsXG4gICAgICAgICAgICAgICAgJ3ZlcnktaGlnaCcsXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogc2V0UHJpb3JpdHksXG4gICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbGlkYXRlVmFsdWUodGFzay5wcmlvcml0eSwge1xuICAgICAgICAgICAgICB2YWx1ZU5hbWU6ICdwcmlvcml0eScsXG4gICAgICAgICAgICAgIGV4cGVjdGVkVHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgIHJlcXVpcmVJbnRlZ2VyOiB0cnVlLFxuICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IHNldFByaW9yaXR5LFxuICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWxpZGF0ZVZhbHVlKHRhc2suZGVzY3JpcHRpb24sIHtcbiAgICAgICAgICB2YWx1ZU5hbWU6ICdkZXNjcmlwdGlvbicsXG4gICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgfSkpIHRhc2tPcHRpb25zLmRlc2NyaXB0aW9uID0gdGFzay5kZXNjcmlwdGlvbjtcblxuICAgICAgICBpZiAodmFsaWRhdGVWYWx1ZSh0YXNrLnJlY3VycmluZ0RhdGUsIHtcbiAgICAgICAgICB2YWx1ZU5hbWU6ICdyZWN1cnJpbmdEYXRlJyxcbiAgICAgICAgICBleHBlY3RlZFR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICB9KSAmJiB2YWxpZGF0ZVZhbHVlKHRhc2sucmVjdXJyaW5nRGF0ZS5pbnRlcnZhbFVuaXQsIHtcbiAgICAgICAgICB2YWx1ZU5hbWU6ICdyZWN1cnJpbmdEYXRlLmludGVydmFsVW5pdCcsXG4gICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICBleHBlY3RlZFZhbHVlczogW1xuICAgICAgICAgICAgJ2RheScsXG4gICAgICAgICAgICAnd2VlaycsXG4gICAgICAgICAgICAnbW9udGgnLFxuICAgICAgICAgICAgJ3llYXInLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgZXJyb3JDYWxsYmFjazogaGFuZGxlRXJyb3IsXG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgY29uc3QgeyByZWN1cnJpbmdEYXRlIH0gPSB0YXNrO1xuICAgICAgICAgIGNvbnN0IHJlY09wdGlvbnMgPSB7fTtcblxuICAgICAgICAgIGlmICh2YWxpZGF0ZVZhbHVlKHJlY3VycmluZ0RhdGUuaW50ZXJ2YWxMZW5ndGgsIHtcbiAgICAgICAgICAgIHZhbHVlTmFtZTogJ3JlY3VycmluZ0RhdGUuaW50ZXJ2YWxMZW5ndGgnLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIHJlcXVpcmVJbnRlZ2VyOiB0cnVlLFxuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjazogaGFuZGxlRXJyb3IsXG4gICAgICAgICAgfSkpIHJlY09wdGlvbnMuaW50ZXJ2YWxMZW5ndGggPSByZWN1cnJpbmdEYXRlLmludGVydmFsTGVuZ3RoO1xuXG4gICAgICAgICAgdmFsaWRhdGVWYWx1ZShyZWN1cnJpbmdEYXRlLnN0YXJ0RGF0ZSwge1xuICAgICAgICAgICAgdmFsdWVOYW1lOiAncmVjdXJyaW5nRGF0ZS5zdGFydERhdGUnLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnZGF0ZScsXG4gICAgICAgICAgICBhbGxvd0NvbnZlcnNpb246IHRydWUsXG4gICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICByZWNPcHRpb25zLnN0YXJ0RGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHZhbGlkYXRlVmFsdWUocmVjdXJyaW5nRGF0ZS5iYXNlT25Db21wbGV0aW9uLCB7XG4gICAgICAgICAgICB2YWx1ZU5hbWU6ICdyZWN1cnJpbmdEYXRlLmJhc2VPbkNvbXBsZXRpb24nLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgICB9KSkgcmVjT3B0aW9ucy5iYXNlT25Db21wbGV0aW9uID0gcmVjdXJyaW5nRGF0ZS5iYXNlT25Db21wbGV0aW9uO1xuXG4gICAgICAgICAgaWYgKHZhbGlkYXRlVmFsdWUocmVjdXJyaW5nRGF0ZS53ZWVrTnVtYmVyLCB7XG4gICAgICAgICAgICB2YWx1ZU5hbWU6ICdyZWN1cnJpbmdEYXRlLndlZWtOdW1iZXInLFxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgIHJlcXVpcmVJbnRlZ2VyOiB0cnVlLFxuICAgICAgICAgICAgbWluOiAxLFxuICAgICAgICAgICAgbWF4OiA1LFxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjazogaGFuZGxlRXJyb3IsXG4gICAgICAgICAgfSkpIHJlY09wdGlvbnMud2Vla051bWJlciA9IHJlY3VycmluZ0RhdGUud2Vla051bWJlcjtcblxuICAgICAgICAgIGlmICh2YWxpZGF0ZVZhbHVlKHJlY3VycmluZ0RhdGUuZGF5c09mV2Vlaywge1xuICAgICAgICAgICAgdmFsdWVOYW1lOiAncmVjdXJyaW5nRGF0ZS5kYXlzT2ZXZWVrJyxcbiAgICAgICAgICAgIGV4cGVjdGVkVHlwZTogJ2FycmF5JyxcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zdCBkYXlzT2ZXZWVrID0gW107XG4gICAgICAgICAgICByZWN1cnJpbmdEYXRlLmRheXNPZldlZWsuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIGlmICh2YWxpZGF0ZVZhbHVlKHZhbHVlLCB7XG4gICAgICAgICAgICAgICAgdmFsdWVOYW1lOiBgcmVjdXJyaW5nRGF0ZS5kYXlzT2ZXZWVrWyR7aW5kZXh9XWAsXG4gICAgICAgICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICByZXF1aXJlSW50ZWdlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiA2LFxuICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICAgICAgICB9KSkgZGF5c09mV2Vlay5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVjT3B0aW9ucy5kYXlzT2ZXZWVrID0gZGF5c09mV2VlaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodmFsaWRhdGVWYWx1ZShyZWN1cnJpbmdEYXRlLm1vbnRoLCB7XG4gICAgICAgICAgICB2YWx1ZU5hbWU6ICdyZWN1cnJpbmdEYXRlLm1vbnRoJyxcbiAgICAgICAgICAgIGV4cGVjdGVkVHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICByZXF1aXJlSW50ZWdlcjogdHJ1ZSxcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMTEsXG4gICAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgICB9KSkgcmVjT3B0aW9ucy5tb250aCA9IHJlY3VycmluZ0RhdGUubW9udGg7XG5cbiAgICAgICAgICBpZiAodmFsaWRhdGVWYWx1ZShyZWN1cnJpbmdEYXRlLmRheU9mTW9udGgsIHtcbiAgICAgICAgICAgIHZhbHVlTmFtZTogJ3JlY3VycmluZ0RhdGUuZGF5T2ZNb250aCcsXG4gICAgICAgICAgICBleHBlY3RlZFR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgcmVxdWlyZUludGVnZXI6IHRydWUsXG4gICAgICAgICAgICBtaW46IDEsXG4gICAgICAgICAgICBtYXg6IDMxLFxuICAgICAgICAgICAgZXJyb3JDYWxsYmFjazogaGFuZGxlRXJyb3IsXG4gICAgICAgICAgfSkpIHJlY09wdGlvbnMuZGF5T2ZNb250aCA9IHJlY3VycmluZ0RhdGUuZGF5T2ZNb250aDtcblxuICAgICAgICAgIGlmICh2YWxpZGF0ZVZhbHVlKHJlY3VycmluZ0RhdGUub25XZWVrZW5kLCB7XG4gICAgICAgICAgICB2YWx1ZU5hbWU6ICdyZWN1cnJpbmdEYXRlLm9uV2Vla2VuZCcsXG4gICAgICAgICAgICBleHBlY3RlZFR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgZXhwZWN0ZWRWYWx1ZXM6IFtcbiAgICAgICAgICAgICAgJ25vLWNoYW5nZScsXG4gICAgICAgICAgICAgICdwcmV2aW91cy13ZWVrZGF5JyxcbiAgICAgICAgICAgICAgJ25leHQtd2Vla2RheScsXG4gICAgICAgICAgICAgICduZWFyZXN0LXdlZWtkYXknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICAgIH0pKSByZWNPcHRpb25zLm9uV2Vla2VuZCA9IHJlY3VycmluZ0RhdGUub25XZWVrZW5kO1xuXG4gICAgICAgICAgdmFsaWRhdGVWYWx1ZShyZWN1cnJpbmdEYXRlLmVuZERhdGUsIHtcbiAgICAgICAgICAgIHZhbHVlTmFtZTogJ3JlY3VycmluZ0RhdGUuZW5kRGF0ZScsXG4gICAgICAgICAgICBleHBlY3RlZFR5cGU6ICdkYXRlJyxcbiAgICAgICAgICAgIGFsbG93Q29udmVyc2lvbjogdHJ1ZSxcbiAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjazogKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIHJlY09wdGlvbnMuZW5kRGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2s6IGhhbmRsZUVycm9yLFxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKHZhbGlkYXRlVmFsdWUocmVjdXJyaW5nRGF0ZS5tYXhDb3VudCwge1xuICAgICAgICAgICAgdmFsdWVOYW1lOiAncmVjdXJyaW5nRGF0ZS5tYXhDb3VudCcsXG4gICAgICAgICAgICBleHBlY3RlZFR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgcmVxdWlyZUludGVnZXI6IHRydWUsXG4gICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgICB9KSkgcmVjT3B0aW9ucy5tYXhDb3VudCA9IHJlY3VycmluZ0RhdGUubWF4Q291bnQ7XG5cbiAgICAgICAgICBjb25zdCByZWN1cnJlbmNlID0gbmV3IFJlY3VycmluZ0RhdGUoXG4gICAgICAgICAgICB0YXNrLnJlY3VycmluZ0RhdGUuaW50ZXJ2YWxVbml0LFxuICAgICAgICAgICAgcmVjT3B0aW9ucyxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRhc2tPcHRpb25zLnJlY3VycmluZ0RhdGUgPSByZWN1cnJlbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbGlkYXRlVmFsdWUodGFzay5wcm9qZWN0LCB7XG4gICAgICAgICAgdmFsdWVOYW1lOiAncHJvamVjdCcsXG4gICAgICAgICAgZXhwZWN0ZWRUeXBlOiAnc3RyaW5nJyxcbiAgICAgICAgICByZXF1aXJlVXVpZDogdHJ1ZSxcbiAgICAgICAgICBjdXN0b21QcmVkaWNhdGU6ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBwcm9qZWN0TGlzdCB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiAhcHJvamVjdExpc3QgfHwgcHJvamVjdExpc3QuaGFzUHJvamVjdCh2YWx1ZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvckNhbGxiYWNrOiBoYW5kbGVFcnJvcixcbiAgICAgICAgfSkpIHRhc2tPcHRpb25zLnByb2plY3QgPSB0YXNrLnByb2plY3Q7XG5cbiAgICAgICAgaWYgKG5ld0lkICYmIHRoaXMuaGFzVGFzayhuZXdJZCkpIGNvdW50cy51cGRhdGVkICs9IDE7XG4gICAgICAgIGVsc2UgY291bnRzLmFkZGVkICs9IDE7XG5cbiAgICAgICAgY29uc3QgbmV3VGFzayA9IG5ldyBUYXNrKHRhc2submFtZSwgdGFza09wdGlvbnMpO1xuICAgICAgICBpZiAobmV3SWQpIHRoaXMuYWRkT3JVcGRhdGVUYXNrKG5ld0lkLCBuZXdUYXNrKTtcbiAgICAgICAgZWxzZSB0aGlzLmFkZFRhc2sobmV3VGFzayk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb3VudHMudG90YWwgPSBjb3VudHMuYWRkZWQgKyBjb3VudHMudXBkYXRlZCArIGNvdW50cy5mYWlsZWQ7XG5cbiAgICByZXR1cm4geyB0YXNrczogY291bnRzLCBlcnJvcnMgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbXBvcnQgdGFza3MgZnJvbSBwYXJzZWQgQ1NWIGRhdGEuXG4gICAqIEBwYXJhbSB7c3RyaW5nW11bXX0gZGF0YSBBbiBhcnJheSBvZiBzdHJpbmcgYXJyYXlzLiBFYWNoIG1lbWJlciBvZiB0aGVcbiAgICogICBvdXRlciBhcnJheSByZXByZXNlbnRzIGEgc2luZ2xlIHRhc2ssIGFuZCBlYWNoIG1lbWJlciBvZiBlYWNoIGlubmVyXG4gICAqICAgYXJyYXkgaXMgYSBkYXRhIGZpZWxkIGZvciB0aGF0IHBhcnRpY3VsYXIgdGFzay4gVGhlIGZpcnN0IG1lbWJlciBvZiB0aGVcbiAgICogICBvdXRlciBhcnJheSBzaG91bGQgYmUgYSBoZWFkZXIgaG9sZGluZyBmaWVsZCBuYW1lcy5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBBbiBvYmplY3QgaG9sZGluZyBhZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZVxuICAgKiAgIGltcG9ydC5cbiAgICogQHBhcmFtIHttb2R1bGU6cHJvamVjdExpc3R+UHJvamVjdExpc3R9IFtvcHRpb25zLnByb2plY3RMaXN0XSBUaGUgcHJvamVjdFxuICAgKiAgIGNvbnRhaW5lci4gSWYgbm90IHByb3ZpZGVkLCB0aGVuIGZ1bGwgdmFsaWRhdGlvbiB3aWxsIG5vdCBiZSBwZXJmb3JtZWRcbiAgICogICBvbiBwcm9qZWN0IGlkZW50aWZpZXJzLlxuICAgKiBAcmV0dXJucyB7bW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fmltcG9ydFN0YXR1c30gQW4gb2JqZWN0IGhvbGRpbmdcbiAgICogICBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3RhdHVzIG9mIHRoZSBpbXBvcnQuXG4gICAqIEBmaXJlcyBtb2R1bGU6dGFza0xpc3R+VGFza0xpc3R+YWRkVGFza1xuICAgKiBAZmlyZXMgbW9kdWxlOnRhc2tMaXN0flRhc2tMaXN0fnVwZGF0ZVRhc2tcbiAgICovXG4gIGltcG9ydEZyb21Dc3YoZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgaGVhZGVyID0gKGRhdGEubGVuZ3RoID4gMCkgPyBkYXRhWzBdIDogW107XG4gICAgY29uc3QgZW50cmllcyA9IFtdO1xuXG4gICAgZGF0YS5mb3JFYWNoKChjc3ZSZWNvcmQsIGNzdkluZGV4KSA9PiB7XG4gICAgICBpZiAoY3N2SW5kZXggPT09IDApIHJldHVybjtcblxuICAgICAgY29uc3QgZW50cnkgPSB7fTtcbiAgICAgIGNvbnN0IHJlY3VycmluZ0RhdGUgPSB7fTtcbiAgICAgIGNzdlJlY29yZC5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID49IGhlYWRlci5sZW5ndGggfHwgdmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgc3dpdGNoIChoZWFkZXJbaW5kZXhdLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICAgIGVudHJ5Lm5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3V1aWQnOlxuICAgICAgICAgICAgZW50cnkuaWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2R1ZSBkYXRlJzpcbiAgICAgICAgICBjYXNlICdkdWUtZGF0ZSc6XG4gICAgICAgICAgICBlbnRyeS5kdWVEYXRlID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdkYXRlIGFkZGVkJzpcbiAgICAgICAgICBjYXNlICdkYXRlLWFkZGVkJzpcbiAgICAgICAgICAgIGVudHJ5LmNyZWF0aW9uRGF0ZSA9IHZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZGF0ZSBjb21wbGV0ZWQnOlxuICAgICAgICAgIGNhc2UgJ2RhdGUtY29tcGxldGVkJzpcbiAgICAgICAgICAgIGVudHJ5LmNvbXBsZXRpb25EYXRlID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdwcmlvcml0eSc6XG4gICAgICAgICAgICBlbnRyeS5wcmlvcml0eSA9IFRhc2suY29udmVydFN0cmluZ1RvUHJpb3JpdHkodmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZGVzY3JpcHRpb24nOlxuICAgICAgICAgICAgZW50cnkuZGVzY3JpcHRpb24gPSB2YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Byb2plY3QgdXVpZCc6XG4gICAgICAgICAgY2FzZSAncHJvamVjdC11dWlkJzpcbiAgICAgICAgICAgIGVudHJ5LnByb2plY3QgPSB2YWx1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JlY3VycmVuY2UgaW50ZXJ2YWwgdW5pdCc6XG4gICAgICAgICAgY2FzZSAncmVjdXJyZW5jZS1pbnRlcnZhbC11bml0JzpcbiAgICAgICAgICAgIHJlY3VycmluZ0RhdGUuaW50ZXJ2YWxVbml0ID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JlY3VycmVuY2UgaW50ZXJ2YWwgbGVuZ3RoJzpcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlLWludGVydmFsLWxlbmd0aCc6XG4gICAgICAgICAgICByZWN1cnJpbmdEYXRlLmludGVydmFsTGVuZ3RoID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JlY3VycmVuY2Ugc3RhcnQgZGF0ZSc6XG4gICAgICAgICAgY2FzZSAncmVjdXJyZW5jZS1zdGFydC1kYXRlJzpcbiAgICAgICAgICAgIHJlY3VycmluZ0RhdGUuc3RhcnREYXRlID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlIGJhc2VkIG9uIGNvbXBsZXRpb24/JzpcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlIGJhc2VkIG9uIGNvbXBsZXRpb24nOlxuICAgICAgICAgIGNhc2UgJ3JlY3VycmVuY2UtYmFzZWQtb24tY29tcGxldGlvbic6XG4gICAgICAgICAgICByZWN1cnJpbmdEYXRlLmJhc2VPbkNvbXBsZXRpb24gPSB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlIHdlZWsgbnVtYmVyJzpcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlLXdlZWstbnVtYmVyJzpcbiAgICAgICAgICAgIHJlY3VycmluZ0RhdGUud2Vla051bWJlciA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlIHdlZWsgZGF5cyc6XG4gICAgICAgICAgY2FzZSAncmVjdXJyZW5jZS13ZWVrLWRheXMnOlxuICAgICAgICAgICAgcmVjdXJyaW5nRGF0ZS5kYXlzT2ZXZWVrID0gdmFsdWUuc3BsaXQoJywnKS5tYXAoKGRheSkgPT4gKFxuICAgICAgICAgICAgICBnZXRXZWVrZGF5SW5kZXgoZGF5LnRyaW0oKSlcbiAgICAgICAgICAgICkpLmZpbHRlcigoZGF5KSA9PiBkYXkgIT0gbnVsbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlIG1vbnRoJzpcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlLW1vbnRoJzpcbiAgICAgICAgICAgIHJlY3VycmluZ0RhdGUubW9udGggPSBnZXRNb250aEluZGV4KHZhbHVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3JlY3VycmVuY2UgZGF5JzpcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlLWRheSc6XG4gICAgICAgICAgICByZWN1cnJpbmdEYXRlLmRheU9mTW9udGggPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAncmVjdXJyZW5jZSB3ZWVrZW5kIGJlaGF2aW9yJzpcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlLXdlZWtlbmQtYmVoYXZpb3InOiB7XG4gICAgICAgICAgICBsZXQgYmVoYXZpb3IgPSBudWxsO1xuICAgICAgICAgICAgc3dpdGNoICh2YWx1ZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgIGNhc2UgJ25vIGNoYW5nZSc6XG4gICAgICAgICAgICAgIGNhc2UgJ25vLWNoYW5nZSc6XG4gICAgICAgICAgICAgICAgYmVoYXZpb3IgPSAnbm8tY2hhbmdlJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAndXNlIHByZXZpb3VzIHdlZWtkYXknOlxuICAgICAgICAgICAgICBjYXNlICdwcmV2aW91cyB3ZWVrZGF5JzpcbiAgICAgICAgICAgICAgY2FzZSAncHJldmlvdXMtd2Vla2RheSc6XG4gICAgICAgICAgICAgICAgYmVoYXZpb3IgPSAncHJldmlvdXMtd2Vla2RheSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3VzZSBuZXh0IHdlZWtkYXknOlxuICAgICAgICAgICAgICBjYXNlICduZXh0IHdlZWtkYXknOlxuICAgICAgICAgICAgICBjYXNlICduZXh0LXdlZWtkYXknOlxuICAgICAgICAgICAgICAgIGJlaGF2aW9yID0gJ25leHQtd2Vla2RheSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ3VzZSBuZWFyZXN0IHdlZWtkYXknOlxuICAgICAgICAgICAgICBjYXNlICduZWFyZXN0IHdlZWtkYXknOlxuICAgICAgICAgICAgICBjYXNlICduZWFyZXN0LXdlZWtkYXknOlxuICAgICAgICAgICAgICAgIGJlaGF2aW9yID0gJ25lYXJlc3Qtd2Vla2RheSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWN1cnJpbmdEYXRlLm9uV2Vla2VuZCA9IGJlaGF2aW9yO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgJ3JlY3VycmVuY2UgZW5kIGRhdGUnOlxuICAgICAgICAgIGNhc2UgJ3JlY3VycmVuY2UtZW5kLWRhdGUnOlxuICAgICAgICAgICAgcmVjdXJyaW5nRGF0ZS5lbmREYXRlID0gdmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyZWN1cnJlbmNlIG1heCBjb3VudCc6XG4gICAgICAgICAgY2FzZSAncmVjdXJyZW5jZS1tYXgtY291bnQnOlxuICAgICAgICAgICAgcmVjdXJyaW5nRGF0ZS5tYXhDb3VudCA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCFfLmlzRW1wdHkocmVjdXJyaW5nRGF0ZSkpIGVudHJ5LnJlY3VycmluZ0RhdGUgPSByZWN1cnJpbmdEYXRlO1xuICAgICAgaWYgKCFfLmlzRW1wdHkoZW50cnkpKSBlbnRyaWVzLnB1c2goZW50cnkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuaW1wb3J0RnJvbUpzb24oZW50cmllcywgb3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFza0xpc3Q7XG4iLCIvKipcbiAqIERlZmluZXMgZnVuY3Rpb25zIGZvciBtYW5pcHVsYXRpbmcgZGF0YS5cbiAqIEBtb2R1bGUgZGF0YVxuICovXG5cbmltcG9ydCB7XG4gIHZhbGlkYXRlIGFzIHZhbGlkYXRlVXVpZCxcbiAgdmVyc2lvbiBhcyB1dWlkVmVyc2lvbixcbn0gZnJvbSAndXVpZCc7XG5cbmltcG9ydCB7IGlzRGF0ZVZhbGlkLCBwYXJzZUlzb0RhdGVUaW1lIH0gZnJvbSAnLi9kYXRlcyc7XG5cbi8qKlxuICogQWRkIGEgdmFsdWUgdG8gYW4gYXJyYXkgYmVsb25naW5nIHRvIGEgTWFwIGhhdmluZyBhcnJheSB2YWx1ZXMuIElmIHRoZSBnaXZlblxuICoga2V5IGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAsIHRoZW4gYSBuZXcgYXJyYXkgd2lsbCBiZSBpbnNlcnRlZCBhdCB0aGF0XG4gKiBrZXkuXG4gKiBAcGFyYW0ge01hcH0gbWFwIFRoZSBtYXAgb2YgYXJyYXlzLlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSBjb3JyZXNwb25kaW5nIHRvIHRoZSBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgaXMgdG9cbiAqICAgYmUgaW5zZXJ0ZWQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNlcnQgaW50byB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFkZFRvTWFwQXJyYXkobWFwLCBrZXksIHZhbHVlKSB7XG4gIGxldCBhcnIgPSBtYXAuZ2V0KGtleSk7XG4gIGlmICghYXJyKSB7XG4gICAgYXJyID0gW107XG4gICAgbWFwLnNldChrZXksIGFycik7XG4gIH1cbiAgYXJyLnB1c2godmFsdWUpO1xufVxuXG4vKipcbiAqIENvbXBhcmUgdHdvIHNlbWFudGljIHZlcnNpb24gc3RyaW5ncy4gVGhlIHZlcnNpb24gc3RyaW5ncyBzaG91bGQgYmVcbiAqIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIFtTZW1hbnRpYyBWZXJzaW9uaW5nIDIuMC4wXShodHRwczovL3NlbXZlci5vcmcvKVxuICogc3BlY2lmaWNhdGlvbnMuIFByZS1yZWxlYXNlIGluZm9ybWF0aW9uIGFuZCBidWlsZCBtZXRhZGF0YSBhcmUgaWdub3JlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2MSBUaGUgZmlyc3QgdmVyc2lvbiBzdHJpbmcgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB2MiBUaGUgc2Vjb25kIHZlcnNpb24gc3RyaW5nIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBJZiB2MSBoYXMgYSBsb3dlciB2ZXJzaW9uIG51bWJlciB0aGFuIHYyICh0aGF0IGlzLCB2MSBpc1xuICogICBhbiBvbGRlciB2ZXJzaW9uKSwgdGhlbiBhIHZhbHVlIGxlc3MgdGhhbiAwIGlzIHJldHVybmVkLiBJZiB2MSBoYXMgaGlnaGVyXG4gKiAgIHZlcnNpb24gbnVtYmVyIHRoYW4gdjIgKHRoYXQgaXMsIHYxIGlzIGEgbmV3ZXIgdmVyc2lvbiksIHRoZW4gYSB2YWx1ZVxuICogICBncmVhdGVyIHRoYW4gMCBpcyByZXR1cm5lZC4gT3RoZXJ3aXNlLCBpZiBib3RoIHYxIGFuZCB2MiBhcmUgZXF1aXZhbGVudFxuICogICB2ZXJzaW9ucywgdGhlbiAwIGlzIHJldHVybmVkLlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gSWYgZWl0aGVyIHN0cmluZyBpcyBub3QgYSB2YWxpZCBzZW1hbnRpYyB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBjb21wYXJlVmVyc2lvbnModjEsIHYyKSB7XG4gIGNvbnN0IHNwbGl0VmVyc2lvbiA9ICh2ZXJzaW9uKSA9PiB7XG4gICAgY29uc3QgY29tcG9uZW50cyA9IHZlcnNpb24ubWF0Y2goL14oWzAtOV0rKShcXC4oWzAtOV0rKShcXC4oWzAtOV0rKSk/KT8vKTtcbiAgICBpZiAoIWNvbXBvbmVudHMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBJbnZhbGlkIHNlbWFudGljIHZlcnNpb24gXCIke3ZlcnNpb259XCJgKTtcbiAgICB9XG5cbiAgICBjb25zdCBtYWpvciA9IE51bWJlcihjb21wb25lbnRzWzFdKTtcbiAgICBjb25zdCBtaW5vciA9IChjb21wb25lbnRzWzNdICE9IG51bGwpID8gTnVtYmVyKGNvbXBvbmVudHNbM10pIDogMDtcbiAgICBjb25zdCBwYXRjaCA9IChjb21wb25lbnRzWzVdICE9IG51bGwpID8gTnVtYmVyKGNvbXBvbmVudHNbNV0pIDogMDtcblxuICAgIHJldHVybiB7IG1ham9yLCBtaW5vciwgcGF0Y2ggfTtcbiAgfTtcblxuICBjb25zdCBsZWZ0VmVyID0gc3BsaXRWZXJzaW9uKHYxKTtcbiAgY29uc3QgcmlnaHRWZXIgPSBzcGxpdFZlcnNpb24odjIpO1xuXG4gIGlmIChsZWZ0VmVyLm1ham9yICE9PSByaWdodFZlci5tYWpvcikge1xuICAgIHJldHVybiAobGVmdFZlci5tYWpvciA8IHJpZ2h0VmVyLm1ham9yKSA/IC0xIDogMTtcbiAgfVxuXG4gIGlmIChsZWZ0VmVyLm1pbm9yICE9PSByaWdodFZlci5taW5vcikge1xuICAgIHJldHVybiAobGVmdFZlci5taW5vciA8IHJpZ2h0VmVyLm1pbm9yKSA/IC0xIDogMTtcbiAgfVxuXG4gIGlmIChsZWZ0VmVyLnBhdGNoICE9PSByaWdodFZlci5wYXRjaCkge1xuICAgIHJldHVybiAobGVmdFZlci5wYXRjaCA8IHJpZ2h0VmVyLnBhdGNoKSA/IC0xIDogMTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIEZpbmQgYSB2YWx1ZSBpbiBhbiBhcnJheSBiZWxvbmdpbmcgdG8gYSBNYXAgaGF2aW5nIGFycmF5IHZhbHVlcy4gVGhlIGZpcnN0XG4gKiB2YWx1ZSBpbiB0aGUgYXBwcm9wcmlhdGUgYXJyYXkgZm9yIHdoaWNoIHRoZSBwcmVkaWNhdGUgcmV0dXJucyB0cnVlIGlzXG4gKiByZXR1cm5lZC5cbiAqIEBwYXJhbSB7TWFwfSBtYXAgVGhlIG1hcCBvZiBhcnJheXMuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGFycmF5IGluIHdoaWNoIHRoZSBlbGVtZW50IGlzIHRvXG4gKiAgIGJlIGZvdW5kLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZmluZFxuICogICB0aGUgYXJyYXkgZWxlbWVudC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIHRoZVxuICogICBhcnJheSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGtleS4gV2hlbiBpbnZva2VkLCB0aGUgZnVuY3Rpb24gd2lsbCBiZVxuICogICBwYXNzZWQgdGhlIGFycmF5IGVsZW1lbnQsIHRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgYXJyYXksIGFuZCB0aGVcbiAqICAgYXJyYXkgaXRzZWxmLCBpbiB0aGF0IG9yZGVyLCBhcyBhcmd1bWVudHMuXG4gKiBAcmV0dXJuIHsqfSBUaGUgbWF0Y2hpbmcgdmFsdWUsIG9yIHVuZGVmaW5lZCBpZiBub3QgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbk1hcEFycmF5KG1hcCwga2V5LCBwcmVkaWNhdGUpIHtcbiAgY29uc3QgYXJyID0gbWFwLmdldChrZXkpO1xuICBpZiAoIWFycikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgcmV0dXJuIGFyci5maW5kKHByZWRpY2F0ZSk7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgdmFsdWUgZnJvbSBhbiBhcnJheSBiZWxvbmdpbmcgdG8gYSBNYXAgaGF2aW5nIGFycmF5IHZhbHVlcy4gVGhpc1xuICogZnVuY3Rpb24gaXMgc2ltaWxhciB0b1xuICogW3JlbW92ZUZyb21NYXBBcnJheV17QGxpbmsgbW9kdWxlOmRhdGF+cmVtb3ZlRnJvbU1hcEFycmF5fSwgZXhjZXB0IHRoYXQgaXRcbiAqIHRha2VzIGEgcHJlZGljYXRlIGZ1bmN0aW9uIGluc3RlYWQgb2YgYSB2YWx1ZS4gVGhlIGZpcnN0IHZhbHVlIGluIHRoZSBhcnJheVxuICogZm9yIHdoaWNoIHRoZSBwcmVkaWNhdGUgcmV0dXJucyB0cnVlIGlzIHJlbW92ZWQuXG4gKiBAcGFyYW0ge01hcH0gbWFwIFRoZSBtYXAgb2YgYXJyYXlzLlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSBjb3JyZXNwb25kaW5nIHRvIHRoZSBhcnJheSBmcm9tIHdoaWNoIHRoZSB2YWx1ZSBpcyB0b1xuICogICBiZSByZW1vdmVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZmluZFxuICogICBhIG1hdGNoaW5nIGFycmF5IGVsZW1lbnQuIFRoZSBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpblxuICogICB0aGUgYXJyYXkgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXkuIFdoZW4gaW52b2tlZCwgdGhlIGZ1bmN0aW9uIHdpbGxcbiAqICAgYmUgcGFzc2VkIHRoZSBhcnJheSBlbGVtZW50LCB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgaW4gdGhlIGFycmF5LCBhbmRcbiAqICAgdGhlIGFycmF5IGl0c2VsZiwgaW4gdGhhdCBvcmRlciwgYXMgYXJndW1lbnRzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBhIHZhbHVlIHdhcyBzdWNjZXNzZnVsbHkgcmVtb3ZlZCwgb3JcbiAqICAgZmFsc2UgaWYgYSBtYXRjaGluZyBhcnJheSBlbGVtZW50IGNvdWxkIG5vdCBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRnJvbU1hcEFycmF5QnkobWFwLCBrZXksIHByZWRpY2F0ZSkge1xuICBjb25zdCBhcnIgPSBtYXAuZ2V0KGtleSk7XG4gIGlmICghYXJyKSByZXR1cm4gZmFsc2U7XG5cbiAgY29uc3QgaW5kZXggPSBhcnIuZmluZEluZGV4KHByZWRpY2F0ZSk7XG4gIGlmIChpbmRleCA8IDApIHJldHVybiBmYWxzZTtcblxuICBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgaWYgKGFyci5sZW5ndGggPT09IDApIG1hcC5kZWxldGUoa2V5KTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogUmVtb3ZlIGEgdmFsdWUgZnJvbSBhbiBhcnJheSBiZWxvbmdpbmcgdG8gYSBNYXAgaGF2aW5nIGFycmF5IHZhbHVlcy5cbiAqIEBwYXJhbSB7TWFwfSBtYXAgVGhlIG1hcCBvZiBhcnJheXMuXG4gKiBAcGFyYW0geyp9IGtleSBUaGUga2V5IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGFycmF5IGZyb20gd2hpY2ggdGhlIHZhbHVlIGlzIHRvXG4gKiAgIGJlIHJlbW92ZWQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZW1vdmUgZnJvbSB0aGUgYXJyYXkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoZSB2YWx1ZSB3YXMgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQsIG9yXG4gKiAgIGZhbHNlIGlmIGEgbWF0Y2hpbmcgYXJyYXkgZWxlbWVudCBjb3VsZCBub3QgYmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUZyb21NYXBBcnJheShtYXAsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHJlbW92ZUZyb21NYXBBcnJheUJ5KG1hcCwga2V5LCAoZWxlbSkgPT4gZWxlbSA9PT0gdmFsdWUpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgdHlwZSBvZiBhIEpTT04gdmFsdWU6ICdvYmplY3QnLCAnYXJyYXknLCAnc3RyaW5nJywgJ251bWJlcicsXG4gKiAnYm9vbGVhbicsIG9yICdudWxsJy4gVHlwZXMgdGhhdCBhcmUgbm90IHN1cHBvcnRlZCBpbiBKU09OLCBzdWNoIGFzXG4gKiBmdW5jdGlvbnMgb3IgdW5kZWZpbmVkLCB3aWxsIHJldHVybiAnbnVsbCcuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB3aG9zZSB0eXBlIGlzIHRvIGJlIGNoZWNrZWQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmFsdWUncyB0eXBlLlxuICovXG5mdW5jdGlvbiBnZXRKc29uVHlwZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gJ2FycmF5JyA6ICdvYmplY3QnO1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBhIHN0cmluZyBpcyBhIHZhbGlkIHZlcnNpb24gNCBVVUlELlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBzdHJpbmcgdG8gdGVzdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBVVUlEIGlzIHZhbGlkLCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc1V1aWRWYWxpZChpZCkge1xuICByZXR1cm4gdHlwZW9mIGlkID09PSAnc3RyaW5nJyAmJiB2YWxpZGF0ZVV1aWQoaWQpICYmIHV1aWRWZXJzaW9uKGlkKSA9PT0gNDtcbn1cblxuLyoqXG4gKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gYSB2YWx1ZSBwYXNzZXMgdmFsaWRhdGlvbi5cbiAqIEBjYWxsYmFjayBtb2R1bGU6ZGF0YX52YWxpZGF0aW9uU3VjY2Vzc1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCBwYXNzZWQgdmFsaWRhdGlvbi4gSWYgdGhlIGFsbG93Q29udmVyc2lvblxuICogICBvcHRpb24gd2FzIHNldCwgdGhlbiB0aGlzIHdpbGwgYmUgdGhlIGNvbnZlcnRlZCB2YWx1ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIEFuIG9iamVjdCBzcGVjaWZ5aW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFsdWVOYW1lXSBUaGUgbmFtZSBmb3IgdGhlIGRhdGEgZmllbGQgdGhhdCB0aGVcbiAqICAgdmFsdWUgY29ycmVzcG9uZHMgdG8uXG4gKi9cblxuLyoqXG4gKiBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIHdoZW4gYSB2YWx1ZSBmYWlscyB2YWxpZGF0aW9uLlxuICogQGNhbGxiYWNrIG1vZHVsZTpkYXRhfnZhbGlkYXRpb25FcnJvclxuICogQHBhcmFtIHtzdHJpbmd9IGVycm9yVHlwZSBBIHN0cmluZyBzcGVjaWZ5aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoYXRcbiAqICAgb2NjdXJyZWQ6ICdiYWQtdHlwZScgaW5kaWNhdGVzIGEgdHlwZSBlcnJvciwgJ3Vua25vd24tdmFsdWUnIGluZGljYXRlcyBhblxuICogICB1bnJlY29nbml6ZWQgdmFsdWUsICdub3QtaW50ZWdlcicgaW5kaWNhdGVzIGEgdmFsdWUgdGhhdCBpcyBub3QgYW5cbiAqICAgaW50ZWdlciwgJ3Rvby1sb3cnIGluZGljYXRlcyBhIHZhbHVlIGJlbG93IHRoZSBtaW5pbXVtLCAndG9vLWhpZ2gnXG4gKiAgIGluZGljYXRlcyBhIHZhbHVlIGFib3ZlIHRoZSBtYXhpbXVtLCAnYmFkLWRhdGUnIGluZGljYXRlcyBhbiBpbnZhbGlkIGRhdGUsXG4gKiAgICdiYWQtaWQnIGluZGljYXRlcyBhbiBpbnZhbGlkIFVVSUQsIGFuZCAnZmFpbGVkLXByZWRpY2F0ZScgaW5kaWNhdGVzIHRoYXRcbiAqICAgdGhlIHZhbHVlIHdhcyByZWplY3RlZCBieSB0aGUgY3VzdG9tIHByZWRpY2F0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRoYXQgZmFpbGVkIHZhbGlkYXRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBBbiBvYmplY3Qgc3BlY2lmeWluZyB0aGUgY3JpdGVyaWEgdGhhdCB3ZXJlIHVzZWQgdG9cbiAqICAgdmFsaWRhdGUgdGhlIHZhbHVlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhbHVlTmFtZV0gVGhlIG5hbWUgZm9yIHRoZSBkYXRhIGZpZWxkIHRoYXQgdGhlXG4gKiAgIHZhbHVlIGNvcnJlc3BvbmRzIHRvLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmV4cGVjdGVkVHlwZV0gVGhlIGV4cGVjdGVkIHR5cGUgb2YgdGhlIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd0NvbnZlcnNpb25dIEluZGljYXRlcyB3aGV0aGVyIGNvbnZlcnNpb24gZnJvbVxuICogICBzdHJpbmcgd2FzIGFsbG93ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy5leHBlY3RlZFZhbHVlc10gQW4gYXJyYXkgb2YgYWNjZXB0YWJsZSBzdHJpbmdzXG4gKiAgIHRoYXQgdGhlIHZhbHVlIHNob3VsZCBoYXZlIG1hdGNoZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlcXVpcmVVdWlkXSBJbmRpY2F0ZXMgd2hldGhlciBhIFVVSUQgd2FzXG4gKiAgIHJlcXVpcmVkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXF1aXJlSW50ZWdlcl0gSW5kaWNhdGVzIHdoZXRoZXIgYW4gaW50ZWdlciB3YXNcbiAqICAgcmVxdWlyZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluXSBUaGUgbWluaW11bSBhY2NlcHRhYmxlIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heF0gVGhlIG1heGltdW0gYWNjZXB0YWJsZSB2YWx1ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLmN1c3RvbVByZWRpY2F0ZV0gVGhlIGN1c3RvbSBwcmVkaWNhdGUgZnVuY3Rpb25cbiAqICAgdGhhdCB3YXMgdXNlZCBmb3IgdmFsaWRhdGlvbi5cbiAqL1xuXG4vKipcbiAqIEFuIG9iamVjdCBzcGVjaWZ5aW5nIG9wdGlvbnMgZm9yIHZhbGlkYXRpbmcgYSB2YWx1ZS5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpkYXRhfnZhbGlkYXRpb25PcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3ZhbHVlTmFtZV0gQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIGRhdGEgZmllbGQgdGhhdCB0aGVcbiAqICAgdmFsdWUgaXMgcmVhZCBmcm9tIG9yIGJlaW5nIGFzc2lnbmVkIHRvLiBUaGlzIGlzIHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcbiAqICAgZnVuY3Rpb25zIGJ1dCBpcyBvdGhlcndpc2UgaWdub3JlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZXhwZWN0ZWRUeXBlXSBUaGUgdHlwZSB0aGF0IHRoZSB2YWx1ZSBzaG91bGQgaGF2ZS4gVGhpc1xuICogICBjYW4gYmUgb25lIG9mICdvYmplY3QnLCAnYXJyYXknLCAnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJywgJ251bGwnLCBvclxuICogICAnZGF0ZScuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFthbGxvd0NvbnZlcnNpb249ZmFsc2VdIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBpblxuICogICBjb25qdW5jdGlvbiB3aXRoIGV4cGVjdGVkVHlwZS4gSWYgdGhpcyBpcyBzZXQgdG8gdHJ1ZSwgdGhlbiB0aGUgdmFsdWUgaXNcbiAqICAgYWxsb3dlZCB0byBoYXZlIHN0cmluZyB0eXBlIGFzIGxvbmcgYXMgaXQgY2FuIGJlIGNvbnZlcnRlZCB0byB0aGUgZXhwZWN0ZWRcbiAqICAgdHlwZS4gT2JqZWN0cyBhbmQgYXJyYXlzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgZnJvbSBzdHJpbmcuXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbZXhwZWN0ZWRWYWx1ZXNdIEZvciBzdHJpbmcgdmFsdWVzLCB0aGlzIHByb3BlcnR5XG4gKiAgIHNwZWNpZmllcyBhbiBvcHRpb25hbCBsaXN0IG9mIGFjY2VwdGFibGUgdmFsdWVzLiBWYWx1ZXMgdGhhdCBkbyBtYXRjaCBhblxuICogICBpdGVtIGluIHRoZSBnaXZlbiBhcnJheSB3aWxsIGZhaWwgdmFsaWRhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlcXVpcmVVdWlkPWZhbHNlXSBGb3Igc3RyaW5nIHZhbHVlcywgaWYgdGhpcyBwcm9wZXJ0eVxuICogICBpcyBzZXQgdG8gdHJ1ZSwgdGhlbiB0aGUgc3RyaW5nIG11c3QgY29udGFpbiBhIFVVSUQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtyZXF1aXJlSW50ZWdlcj1mYWxzZV0gRm9yIHZhbHVlcyBvZiBudW1iZXIgdHlwZSwgaWZcbiAqICAgdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gdHJ1ZSwgdGhlbiB0aGUgbnVtYmVyIG11c3QgYmUgYW4gaW50ZWdlci5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWluXSBGb3IgbnVtZXJpYyB2YWx1ZXMsIHRoaXMgcHJvcGVydHkgc3BlY2lmaWVzIHRoZVxuICogICBtaW5pbXVtIGFjY2VwdGFibGUgdmFsdWUuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW21heF0gRm9yIG51bWVyaWMgdmFsdWVzLCB0aGlzIHByb3BlcnR5IHNwZWNpZmllcyB0aGVcbiAqICAgbWF4aW11bSBhY2NlcHRhYmxlIHZhbHVlLlxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2N1c3RvbVByZWRpY2F0ZV0gQSBwcmVkaWNhdGUgZnVuY3Rpb24gdGhhdCBjYW4gcGVyZm9ybVxuICogICBjdXN0b20gdmFsaWRhdGlvbi4gSWYgdGhlIHZhbHVlIHBhc3NlcyBhbGwgb3RoZXIgY29uc3RyYWludHMsIHRoZW4gaXQgaXNcbiAqICAgcGFzc2VkIHRvIHRoaXMgZnVuY3Rpb24uIFRoZSBmdW5jdGlvbiBzaG91bGQgcmV0dXJuIHRydWUgb3IgZmFsc2UgdG9cbiAqICAgaW5kaWNhdGUgd2hldGhlciB0aGUgdmFsdWUgcGFzc2VzIHZhbGlkYXRpb24uXG4gKiBAcHJvcGVydHkge21vZHVsZTpkYXRhfnZhbGlkYXRpb25TdWNjZXNzfSBbc3VjY2Vzc0NhbGxiYWNrXSBBIGNhbGxiYWNrXG4gKiAgIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIGlmIHRoZSB2YWx1ZSBwYXNzZXMgdmFsaWRhdGlvbi5cbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRhdGF+dmFsaWRhdGlvbkVycm9yfSBbZXJyb3JDYWxsYmFja10gQSBjYWxsYmFja1xuICogICBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCBpZiB0aGUgdmFsdWUgZmFpbHMgdmFsaWRhdGlvbi5cbiAqL1xuXG4vKipcbiAqIFZhbGlkYXRlIGEgdmFsdWUgYWNjb3JkaW5nIHRvIGEgc2V0IG9mIGNyaXRlcmlhLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge21vZHVsZTpkYXRhfnZhbGlkYXRpb25PcHRpb25zfSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IHNwZWNpZnlpbmdcbiAqICAgdmFsaWRhdGlvbiBvcHRpb25zLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIHBhc3NlcyB2YWxpZGF0aW9uLCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVZhbHVlKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgZmFpbCA9IChlcnJvclR5cGUpID0+IHtcbiAgICBvcHRpb25zLmVycm9yQ2FsbGJhY2s/LihlcnJvclR5cGUsIHZhbHVlLCB7XG4gICAgICB2YWx1ZU5hbWU6IG9wdGlvbnMudmFsdWVOYW1lID8/IG51bGwsXG4gICAgICBleHBlY3RlZFR5cGU6IG9wdGlvbnMuZXhwZWN0ZWRUeXBlID8/IG51bGwsXG4gICAgICBhbGxvd0NvbnZlcnNpb246IG9wdGlvbnMuYWxsb3dDb252ZXJzaW9uIHx8IGZhbHNlLFxuICAgICAgZXhwZWN0ZWRWYWx1ZXM6IG9wdGlvbnMuZXhwZWN0ZWRWYWx1ZXMgfHwgbnVsbCxcbiAgICAgIHJlcXVpcmVVdWlkOiBvcHRpb25zLnJlcXVpcmVVdWlkIHx8IGZhbHNlLFxuICAgICAgcmVxdWlyZUludGVnZXI6IG9wdGlvbnMucmVxdWlyZUludGVnZXIgfHwgZmFsc2UsXG4gICAgICBtaW46IG9wdGlvbnMubWluID8/IG51bGwsXG4gICAgICBtYXg6IG9wdGlvbnMubWF4ID8/IG51bGwsXG4gICAgICBjdXN0b21QcmVkaWNhdGU6IG9wdGlvbnMuY3VzdG9tUHJlZGljYXRlIHx8IG51bGwsXG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgYWxsb3dDb252ZXJzaW9uID0gb3B0aW9ucy5hbGxvd0NvbnZlcnNpb24gfHwgZmFsc2U7XG4gIGxldCBjb252ZXJ0ZWRWYWx1ZSA9IHZhbHVlO1xuICBpZiAob3B0aW9ucy5leHBlY3RlZFR5cGUpIHtcbiAgICBpZiAob3B0aW9ucy5leHBlY3RlZFR5cGUgIT09ICdudWxsJyAmJiB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBmYWlsKCdiYWQtdHlwZScpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHN3aXRjaCAob3B0aW9ucy5leHBlY3RlZFR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZmFpbCgnYmFkLXR5cGUnKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIGlmICghYWxsb3dDb252ZXJzaW9uIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZhaWwoJ2JhZC10eXBlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnZlcnRlZFZhbHVlID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGNvbnZlcnRlZFZhbHVlKSkge1xuICAgICAgICAgIGZhaWwoJ2JhZC10eXBlJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgIGlmICghYWxsb3dDb252ZXJzaW9uIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZhaWwoJ2JhZC10eXBlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpdGNoICh2YWx1ZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlICd0cnVlJzpcbiAgICAgICAgICAgICAgY29udmVydGVkVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2ZhbHNlJzpcbiAgICAgICAgICAgICAgY29udmVydGVkVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmYWlsKCdiYWQtdHlwZScpO1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbnVsbCc6XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgZmFpbCgnYmFkLXR5cGUnKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgIGlmICghYWxsb3dDb252ZXJzaW9uIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZhaWwoJ2JhZC10eXBlJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnZlcnRlZFZhbHVlID0gcGFyc2VJc29EYXRlVGltZSh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzRGF0ZVZhbGlkKGNvbnZlcnRlZFZhbHVlKSkge1xuICAgICAgICAgIGZhaWwoJ2JhZC1kYXRlJyk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGdldEpzb25UeXBlKHZhbHVlKSAhPT0gb3B0aW9ucy5leHBlY3RlZFR5cGUpIHtcbiAgICAgICAgICBmYWlsKCdiYWQtdHlwZScpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbnZlcnRlZFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIGlmIChvcHRpb25zLmV4cGVjdGVkVmFsdWVzXG4gICAgICAmJiAhb3B0aW9ucy5leHBlY3RlZFZhbHVlcy5pbmNsdWRlcyhjb252ZXJ0ZWRWYWx1ZSkpIHtcbiAgICAgIGZhaWwoJ3Vua25vd24tdmFsdWUnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5yZXF1aXJlVXVpZCAmJiAhaXNVdWlkVmFsaWQoY29udmVydGVkVmFsdWUpKSB7XG4gICAgICBmYWlsKCdiYWQtaWQnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbnZlcnRlZFZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIGlmIChvcHRpb25zLnJlcXVpcmVJbnRlZ2VyICYmICFOdW1iZXIuaXNJbnRlZ2VyKGNvbnZlcnRlZFZhbHVlKSkge1xuICAgICAgZmFpbCgnbm90LWludGVnZXInKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5taW4gIT0gbnVsbCAmJiBjb252ZXJ0ZWRWYWx1ZSA8IG9wdGlvbnMubWluKSB7XG4gICAgICBmYWlsKCd0b28tbG93Jyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWF4ICE9IG51bGwgJiYgY29udmVydGVkVmFsdWUgPiBvcHRpb25zLm1heCkge1xuICAgICAgZmFpbCgndG9vLWhpZ2gnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAob3B0aW9ucy5jdXN0b21QcmVkaWNhdGUpIHtcbiAgICBpZiAoIW9wdGlvbnMuY3VzdG9tUHJlZGljYXRlKGNvbnZlcnRlZFZhbHVlKSkge1xuICAgICAgZmFpbCgnZmFpbGVkLXByZWRpY2F0ZScpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG9wdGlvbnMuc3VjY2Vzc0NhbGxiYWNrPy4oY29udmVydGVkVmFsdWUsIHtcbiAgICB2YWx1ZU5hbWU6IG9wdGlvbnMudmFsdWVOYW1lID8/IG51bGwsXG4gIH0pO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IHtcbiAgYWRkVG9NYXBBcnJheSxcbiAgY29tcGFyZVZlcnNpb25zLFxuICBmaW5kSW5NYXBBcnJheSxcbiAgZ2V0SnNvblR5cGUsXG4gIGlzVXVpZFZhbGlkLFxuICByZW1vdmVGcm9tTWFwQXJyYXksXG4gIHJlbW92ZUZyb21NYXBBcnJheUJ5LFxuICB2YWxpZGF0ZVZhbHVlLFxufTtcbiIsIi8qKlxuICogRGVmaW5lcyB1dGlsaXR5IGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgZGF0ZXMgYW5kIHRpbWVzLlxuICogQG1vZHVsZSBkYXRlc1xuICovXG5cbmltcG9ydCB7XG4gIGZvcm1hdCBhcyBkZkZvcm1hdCxcbiAgZm9ybWF0SVNPLFxuICBpc1ZhbGlkLFxuICBwYXJzZSBhcyBkZlBhcnNlLFxuICBwYXJzZUlTTyxcbn0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5jb25zdCBXRUVLREFZUyA9IFtcbiAgJ1N1bmRheScsXG4gICdNb25kYXknLFxuICAnVHVlc2RheScsXG4gICdXZWRuZXNkYXknLFxuICAnVGh1cnNkYXknLFxuICAnRnJpZGF5JyxcbiAgJ1NhdHVyZGF5Jyxcbl07XG5jb25zdCBNT05USFMgPSBbXG4gIHsgbmFtZTogJ0phbnVhcnknLCBtYXhEYXlzOiAzMSB9LFxuICB7IG5hbWU6ICdGZWJydWFyeScsIG1heERheXM6IDI5IH0sXG4gIHsgbmFtZTogJ01hcmNoJywgbWF4RGF5czogMzEgfSxcbiAgeyBuYW1lOiAnQXByaWwnLCBtYXhEYXlzOiAzMCB9LFxuICB7IG5hbWU6ICdNYXknLCBtYXhEYXlzOiAzMSB9LFxuICB7IG5hbWU6ICdKdW5lJywgbWF4RGF5czogMzAgfSxcbiAgeyBuYW1lOiAnSnVseScsIG1heERheXM6IDMxIH0sXG4gIHsgbmFtZTogJ0F1Z3VzdCcsIG1heERheXM6IDMxIH0sXG4gIHsgbmFtZTogJ1NlcHRlbWJlcicsIG1heERheXM6IDMwIH0sXG4gIHsgbmFtZTogJ09jdG9iZXInLCBtYXhEYXlzOiAzMSB9LFxuICB7IG5hbWU6ICdOb3ZlbWJlcicsIG1heERheXM6IDMwIH0sXG4gIHsgbmFtZTogJ0RlY2VtYmVyJywgbWF4RGF5czogMzEgfSxcbl07XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGRhdGUgZm9ybWF0IGZvciBhIGdpdmVuIGxvY2FsZSwgb3IgZm9yIHRoZSBkZWZhdWx0IGxvY2FsZS5cbiAqIEZvciBleGFtcGxlLCB0aGUgZm9ybWF0IHN0cmluZyBmb3IgZW4tVVMgc2hvdWxkIGxvb2sgbGlrZSBNL2QveXkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2xvY2FsZV0gVGhlIGxvY2FsZSB3aG9zZSBkYXRlIGZvcm1hdCBpcyB0byBiZSByZXRyaWV2ZWQuXG4gKiAgIElmIG5vdCBnaXZlbiwgdGhlbiB0aGUgYnJvd3NlcidzIGRlZmF1bHQgbG9jYWxlIGlzIHVzZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIEFuIG9iamVjdCB3aXRoIGZvcm1hdHRpbmcgb3B0aW9ucy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5kYXRlU3R5bGU9c2hvcnRdIFRoZSBkYXRlIGZvcm1hdHRpbmcgc3R5bGU6XG4gKiAgICdzaG9ydCcsICdtZWRpdW0nLCAnbG9uZycsICdmdWxsJywgb3IgJ25vbmUnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnRpbWVTdHlsZT1ub25lXSBUaGUgdGltZSBmb3JtYXR0aW5nIHN0eWxlOiAnc2hvcnQnLFxuICogICAnbWVkaXVtJywgJ2xvbmcnLCAnZnVsbCcsIG9yICdub25lJy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50b2tlblN0eWxlPWludGVybmFsXSBUaGUgdHlwZSBvZiBmb3JtYXQgdG9rZW5zIHRvXG4gKiAgIHVzZS4gVmFsaWQgdmFsdWVzIGFyZSAnaW50ZXJuYWwnIGFuZCAndmlzdWFsJy4gSWYgc2V0IHRvICdpbnRlcm5hbCcgKHRoZVxuICogICBkZWZhdWx0KSwgdGhlbiB0aGUgZnVuY3Rpb24gdXNlcyB0aGUgc2FtZSBmb3JtYXQgdG9rZW5zIHRoYXQgdGhlXG4gKiAgIFtkYXRlLWZuc117QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvfSBsaWJyYXJ5IHVzZXMuIElmIHNldCB0byAndmlzdWFsJyxcbiAqICAgdGhlbiBtb3JlIGh1bWFuLXJlYWRhYmxlIHRva2VucyBhcmUgdXNlZDogZm9yIGV4YW1wbGUsIGEgaHVtYW4tcmVhZGFibGVcbiAqICAgZm9ybWF0IHN0cmluZyBtaWdodCBsb29rIGxpa2UgJ1lZWVktTU0tREQgaGg6bW06c3MnIG9yXG4gKiAgICdNTS9ERC9ZWVlZIGhoOm1tIGEnLlxuICogQHBhcmFtIHtib29sZWFufHN0cmluZ30gW29wdGlvbnMuZnVsbFllYXI9YXV0b10gSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvXG4gKiAgIHVzZSBhIGZ1bGwgZm91ci1kaWdpdCB5ZWFyIGluc3RlYWQgb2YgYSB0d28tZGlnaXQgYWJicmV2aWF0aW9uLiBJZiBzZXQgdG9cbiAqICAgJ2F1dG8nLCB0aGVuIHRoZSBsb2NhbCBkZWZhdWx0IGlzIHVzZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBbb3B0aW9ucy5wYWRNb250aHM9YXV0b10gSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvXG4gKiAgIHBhZCBzaW5nbGUtZGlnaXQgbW9udGhzIHdpdGggYSBsZWFkaW5nIHplcm8uIElmIHNldCB0byAnYXV0bycsIHRoZW4gdGhlXG4gKiAgIGxvY2FsIGRlZmF1bHQgaXMgdXNlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnxzdHJpbmd9IFtvcHRpb25zLnBhZERheXM9YXV0b10gSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvXG4gKiAgIHBhZCBzaW5nbGUtZGlnaXQgZGF5cyB3aXRoIGEgbGVhZGluZyB6ZXJvLiBJZiBzZXQgdG8gJ2F1dG8nLCB0aGVuIHRoZVxuICogICBsb2NhbCBkZWZhdWx0IGlzIHVzZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBbb3B0aW9ucy5wYWRIb3Vycz1hdXRvXSBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG9cbiAqICAgcGFkIHNpbmdsZS1kaWdpdCBob3VycyB3aXRoIGEgbGVhZGluZyB6ZXJvLiBJZiBzZXQgdG8gJ2F1dG8nLCB0aGVuIHRoZVxuICogICBsb2NhbCBkZWZhdWx0IGlzIHVzZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW58c3RyaW5nfSBbb3B0aW9ucy5wYWRNaW51dGVzPWF1dG9dIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdFxuICogICB0byBwYWQgc2luZ2xlLWRpZ2l0IG1pbnV0ZXMgd2l0aCBhIGxlYWRpbmcgemVyby4gSWYgc2V0IHRvICdhdXRvJywgdGhlblxuICogICB0aGUgbG9jYWwgZGVmYXVsdCBpcyB1c2VkLlxuICogQHBhcmFtIHtib29sZWFufHN0cmluZ30gW29wdGlvbnMucGFkU2Vjb25kcz1hdXRvXSBJbmRpY2F0ZXMgd2hldGhlciBvciBub3RcbiAqICAgdG8gcGFkIHNpbmdsZS1kaWdpdCBzZWNvbmRzIHdpdGggYSBsZWFkaW5nIHplcm8uIElmIHNldCB0byAnYXV0bycsIHRoZW5cbiAqICAgdGhlIGxvY2FsIGRlZmF1bHQgaXMgdXNlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW29wdGlvbnMuaG91clN5c3RlbT1hdXRvXSBJbmRpY2F0ZXMgd2hldGhlciB0byB1c2UgYVxuICogICAxMi0gb3IgMjQtaG91ciBjbG9jay4gVmFsaWQgdmFsdWVzIGFyZSAxMiBmb3IgYSAxMi1ob3VyIGNsb2NrLCAyNCBmb3IgYVxuICogICAyNC1ob3VyIGNsb2NrLCBvciB0aGUgc3RyaW5nICdhdXRvJyB0byB1c2UgdGhlIGxvY2FsIGRlZmF1bHQuXG4gKiBAcmV0dXJucyBUaGUgZGF0ZSBmb3JtYXQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBnZXREYXRlRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IFJFRkVSRU5DRV9EQVRFID0gbmV3IERhdGUoMjAyMCwgMCwgMSwgMTQsIDUsIDUpO1xuXG4gIGNvbnN0IGZvcm1hdHRlck9wdGlvbnMgPSB7fTtcbiAgY29uc3QgZGF0ZVN0eWxlID0gb3B0aW9ucy5kYXRlU3R5bGUgfHwgJ3Nob3J0JztcbiAgY29uc3QgdGltZVN0eWxlID0gb3B0aW9ucy50aW1lU3R5bGUgfHwgJ25vbmUnO1xuICBpZiAoZGF0ZVN0eWxlICE9PSAnbm9uZScpIHtcbiAgICBmb3JtYXR0ZXJPcHRpb25zLmRhdGVTdHlsZSA9IGRhdGVTdHlsZTtcbiAgfVxuICBpZiAodGltZVN0eWxlICE9PSAnbm9uZScpIHtcbiAgICBmb3JtYXR0ZXJPcHRpb25zLnRpbWVTdHlsZSA9IHRpbWVTdHlsZTtcbiAgfVxuICBpZiAob3B0aW9ucy5ob3VyU3lzdGVtICYmIG9wdGlvbnMuaG91clN5c3RlbSAhPT0gJ2F1dG8nKSB7XG4gICAgZm9ybWF0dGVyT3B0aW9ucy5ob3VyMTIgPSBvcHRpb25zLmhvdXJTeXN0ZW0gPT09IDEyO1xuICB9XG5cbiAgY29uc3QgZm9ybWF0dGVyID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQobG9jYWxlIHx8IFtdLCBmb3JtYXR0ZXJPcHRpb25zKTtcblxuICBsZXQgcGFydHM7XG5cbiAgLy8gRmFsbGJhY2sgaWYgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgZm9ybWF0VG9QYXJ0cyAtIHVzZSBlbi1VU1xuICBpZiAoISgnZm9ybWF0VG9QYXJ0cycgaW4gZm9ybWF0dGVyKSkge1xuICAgIGNvbnN0IGRhdGVQYXJ0cyA9IFtcbiAgICAgIHsgdHlwZTogJ21vbnRoJywgdmFsdWU6ICcxJyB9LFxuICAgICAgeyB0eXBlOiAnbGl0ZXJhbCcsIHZhbHVlOiAnLycgfSxcbiAgICAgIHsgdHlwZTogJ2RheScsIHZhbHVlOiAnMScgfSxcbiAgICAgIHsgdHlwZTogJ2xpdGVyYWwnLCB2YWx1ZTogJy8nIH0sXG4gICAgICB7IHR5cGU6ICd5ZWFyJywgdmFsdWU6ICcyMCcgfSxcbiAgICBdO1xuXG4gICAgbGV0IHRpbWVQYXJ0cyA9IFtcbiAgICAgIHsgdHlwZTogJ2hvdXInLCB2YWx1ZTogJzInIH0sXG4gICAgICB7IHR5cGU6ICdsaXRlcmFsJywgdmFsdWU6ICc6JyB9LFxuICAgICAgeyB0eXBlOiAnbWludXRlJywgdmFsdWU6ICcwNScgfSxcbiAgICBdO1xuXG4gICAgaWYgKGZvcm1hdHRlci5yZXNvbHZlZE9wdGlvbnMoKS5ob3VyMTIpIHtcbiAgICAgIHRpbWVQYXJ0cyA9IHRpbWVQYXJ0cy5jb25jYXQoW1xuICAgICAgICB7IHR5cGU6ICdsaXRlcmFsJywgdmFsdWU6ICcgJyB9LFxuICAgICAgICB7IHR5cGU6ICdkYXlQZXJpb2QnLCB2YWx1ZTogJ2FtJyB9LFxuICAgICAgXSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFzRGF0ZSA9IGRhdGVTdHlsZSAhPT0gJ25vbmUnO1xuICAgIGNvbnN0IGhhc1RpbWUgPSB0aW1lU3R5bGUgIT09ICdub25lJztcbiAgICBpZiAoaGFzRGF0ZSAmJiBoYXNUaW1lKSB7XG4gICAgICBwYXJ0cyA9IFtcbiAgICAgICAgLi4uZGF0ZVBhcnRzLFxuICAgICAgICB7IHR5cGU6ICdsaXRlcmFsJywgdmFsdWU6ICcgJyB9LFxuICAgICAgICAuLi50aW1lUGFydHMsXG4gICAgICBdO1xuICAgIH0gZWxzZSBpZiAoaGFzVGltZSkge1xuICAgICAgcGFydHMgPSB0aW1lUGFydHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnRzID0gZGF0ZVBhcnRzO1xuICAgIH1cbiAgfSBlbHNlIHsgLy8gQnJvd3NlciBzdXBwb3J0cyBmb3JtYXRUb1BhcnRzXG4gICAgcGFydHMgPSBmb3JtYXR0ZXIuZm9ybWF0VG9QYXJ0cyhSRUZFUkVOQ0VfREFURSk7XG4gIH1cblxuICByZXR1cm4gcGFydHMubWFwKCh7IHR5cGUsIHZhbHVlIH0pID0+IHtcbiAgICBsZXQgdG9rZW4gPSAnJztcbiAgICBsZXQgY291bnQgPSAxO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnbGl0ZXJhbCc6XG4gICAgICAgIGlmIChvcHRpb25zLnRva2VuU3R5bGUgIT09ICd2aXN1YWwnICYmIC9bQS1aYS16XS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICB0b2tlbiA9IGAnJHt2YWx1ZS5yZXBsYWNlKC8nL2csIFwiJydcIil9J2A7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW4gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIHRva2VuID0gb3B0aW9ucy50b2tlblN0eWxlID09PSAndmlzdWFsJyA/ICdEJyA6ICdkJztcbiAgICAgICAgaWYgKG9wdGlvbnMucGFkRGF5cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvdW50ID0gMjtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnBhZERheXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgY291bnQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZXJhJzpcbiAgICAgICAgdG9rZW4gPSAnRyc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICB0b2tlbiA9ICdNJztcbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICBjb3VudCA9IDQ7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgY291bnQgPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFkTW9udGhzID09PSB0cnVlKSB7XG4gICAgICAgICAgY291bnQgPSAyO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFkTW9udGhzID09PSBmYWxzZSkge1xuICAgICAgICAgIGNvdW50ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlbGF0ZWRZZWFyJzpcbiAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICB0b2tlbiA9IG9wdGlvbnMudG9rZW5TdHlsZSA9PT0gJ3Zpc3VhbCcgPyAnWScgOiAneSc7XG4gICAgICAgIGlmIChvcHRpb25zLmZ1bGxZZWFyID09PSB0cnVlKSB7XG4gICAgICAgICAgY291bnQgPSA0O1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZnVsbFllYXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgY291bnQgPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZGF5UGVyaW9kJzpcbiAgICAgICAgdG9rZW4gPSAnYSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZnJhY3Rpb25hbFNlY29uZCc6XG4gICAgICAgIHRva2VuID0gJ1MnO1xuICAgICAgICBjb3VudCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgaWYgKG9wdGlvbnMudG9rZW5TdHlsZSA9PT0gJ3Zpc3VhbCcpIHtcbiAgICAgICAgICB0b2tlbiA9ICdoJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0b2tlbiA9IGZvcm1hdHRlci5yZXNvbHZlZE9wdGlvbnMoKS5ob3VyMTIgPyAnaCcgOiAnSCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5wYWRIb3VycyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvdW50ID0gMjtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnBhZEhvdXJzID09PSBmYWxzZSkge1xuICAgICAgICAgIGNvdW50ID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgIHRva2VuID0gJ20nO1xuICAgICAgICBpZiAob3B0aW9ucy5wYWRNaW51dGVzID09PSB0cnVlKSB7XG4gICAgICAgICAgY291bnQgPSAyO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucGFkTWludXRlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBjb3VudCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY291bnQgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZWNvbmQnOlxuICAgICAgICB0b2tlbiA9ICdzJztcbiAgICAgICAgaWYgKG9wdGlvbnMucGFkU2Vjb25kcyA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvdW50ID0gMjtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnBhZFNlY29uZHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgY291bnQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnd2Vla2RheSc6XG4gICAgICAgIHRva2VuID0gJ2UnO1xuICAgICAgICBjb3VudCA9IDQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiB0b2tlbi5yZXBlYXQoY291bnQpO1xuICB9KS5qb2luKCcnKTtcbn1cblxuLyoqXG4gKiBGb3JtYXQgYSBkYXRlIGludG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gYWNjb3JkaW5nIHRvIGEgZ2l2ZW4gcGF0dGVybi5cbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSBUaGUgZGF0ZSB0byBiZSBmb3JtYXR0ZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2Zvcm1hdF0gVGhlIGZvcm1hdCBzdHJpbmcgdG8gdXNlIGFzIGEgcGF0dGVybi4gSWYgbm90XG4gKiAgIGdpdmVuLCB0aGVuIHRoZSBmb3JtYXQgZnJvbSB0aGUgYnJvd3NlcidzIGRlZmF1bHQgbG9jYWxlIGlzIHVzZWQuIFRoZVxuICogICBmb3JtYXQgdG9rZW5zIGFyZSB0aGUgc2FtZSBhcyB1c2VkIGJ5IHRoZVxuICogICBbZGF0ZS1mbnNde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL30gbGlicmFyeSwgYXMgc3BlY2lmaWVkIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGZvciB0aGVcbiAqICAgW2Zvcm1hdCBmdW5jdGlvbl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvdjIuMjguMC9kb2NzL2Zvcm1hdH0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCkge1xuICByZXR1cm4gZGZGb3JtYXQoZGF0ZSwgZm9ybWF0ID8/IGdldERhdGVGb3JtYXQoKSk7XG59XG5cbi8qKlxuICogRm9ybWF0IGEgZGF0ZSBpbnRvIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIGluIElTTyA4NjAxIGZvcm1hdC4gVGhlIHJldHVybmVkXG4gKiBkYXRlIHN0cmluZyB3aWxsIG5vdCBpbmNsdWRlIGEgdGltZSBjb21wb25lbnQuIFRvIGluY2x1ZGUgdGhlIHRpbWUgYW5kIHRpbWVcbiAqIHpvbmUsIHVzZSBbZm9ybWF0SXNvRGF0ZVRpbWVde0BsaW5rIG1vZHVsZTpkYXRlc35mb3JtYXRJc29EYXRlVGltZX1cbiAqIGluc3RlYWQuXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGRhdGUgdG8gYmUgZm9ybWF0dGVkLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZm9ybWF0SXNvRGF0ZShkYXRlKSB7XG4gIHJldHVybiBmb3JtYXRJU08oZGF0ZSwgeyByZXByZXNlbnRhdGlvbjogJ2RhdGUnIH0pO1xufVxuXG4vKipcbiAqIEZvcm1hdCBhIGRhdGUgYW5kIHRpbWUgaW50byBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBpbiBJU08gODYwMSBmb3JtYXQuIFRoZVxuICogcmV0dXJuZWQgZGF0ZSBzdHJpbmcgd2lsbCBpbmNsdWRlIHRoZSB0aW1lIGFuZCB0aW1lIHpvbmUuXG4gKiBAcGFyYW0ge0RhdGV9IGRhdGUgVGhlIGRhdGUgdG8gYmUgZm9ybWF0dGVkLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZm9ybWF0SXNvRGF0ZVRpbWUoZGF0ZSkge1xuICByZXR1cm4gZm9ybWF0SVNPKGRhdGUpO1xufVxuXG4vKipcbiAqIFBhcnNlIGEgZGF0ZSBmcm9tIGEgc3RyaW5nIGFjY29yZGluZyB0byBhIHBhdHRlcm4gb3Igc2VxdWVuY2Ugb2YgcGF0dGVybnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0ZVN0cmluZyBUaGUgc3RyaW5nIHRvIHBhcnNlLlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IFtmb3JtYXRdIFRoZSBmb3JtYXQgc3RyaW5nIG9yIHNlcXVlbmNlIG9mIGZvcm1hdFxuICogICBzdHJpbmdzIHRvIHVzZSBhcyBwYXR0ZXJucy4gSWYgYW4gYXJyYXkgaXMgZ2l2ZW4sIHRoZW4gZWFjaCBzdHJpbmcgaW4gdGhlXG4gKiAgIGFycmF5IGlzIGF0dGVtcHRlZCB0byBiZSB1c2VkIGFzIGEgcGF0dGVybiB1bnRpbCBhIG1hdGNoIGlzIGZvdW5kLiBJZiBub1xuICogICBwYXR0ZXJuIGlzIGdpdmVuLCB0aGVuIHRoZSBmb3JtYXQgZnJvbSB0aGUgYnJvd3NlcidzIGRlZmF1bHQgbG9jYWxlIGlzXG4gKiAgIHVzZWQuIFRoZSBmb3JtYXQgdG9rZW5zIGFyZSB0aGUgc2FtZSBhcyB1c2VkIGJ5IHRoZVxuICogICBbZGF0ZS1mbnNde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL30gbGlicmFyeSwgYXMgc3BlY2lmaWVkIGluIHRoZVxuICogICBkb2N1bWVudGF0aW9uIGZvciB0aGVcbiAqICAgW2Zvcm1hdCBmdW5jdGlvbl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvdjIuMjguMC9kb2NzL2Zvcm1hdH0uXG4gKiBAcmV0dXJucyB7RGF0ZX0gVGhlIHBhcnNlZCBkYXRlLCBvciBudWxsIGlmIHRoZSBzdHJpbmcgZG9lcyBub3QgbWF0Y2ggdGhlXG4gKiAgIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlRGF0ZShkYXRlU3RyaW5nLCBmb3JtYXQpIHtcbiAgbGV0IHBhdHRlcm5zO1xuICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycpIHBhdHRlcm5zID0gW2Zvcm1hdF07XG4gIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZm9ybWF0KSAmJiBmb3JtYXQubGVuZ3RoID4gMCkgcGF0dGVybnMgPSBmb3JtYXQ7XG4gIGVsc2UgcGF0dGVybnMgPSBbZ2V0RGF0ZUZvcm1hdCgpXTtcblxuICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0dGVybnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCByZXN1bHQgPSBkZlBhcnNlKGRhdGVTdHJpbmcsIHBhdHRlcm5zW2ldLCB0b2RheSk7XG4gICAgaWYgKGlzVmFsaWQocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIFBhcnNlIGEgZGF0ZSBmcm9tIGFuIElTTyA4NjAxIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRlU3RyaW5nIFRoZSBzdHJpbmcgdG8gcGFyc2UuXG4gKiBAcmV0dXJucyB7RGF0ZX0gVGhlIHBhcnNlZCBkYXRlLCBvciBudWxsIGlmIHRoZSBzdHJpbmcgZG9lcyBub3QgbWF0Y2ggdGhlXG4gKiAgIHBhdHRlcm4uXG4gKi9cbmZ1bmN0aW9uIHBhcnNlSXNvRGF0ZVRpbWUoZGF0ZVN0cmluZykge1xuICBjb25zdCByZXN1bHQgPSBwYXJzZUlTTyhkYXRlU3RyaW5nKTtcblxuICByZXR1cm4gaXNWYWxpZChyZXN1bHQpID8gcmVzdWx0IDogbnVsbDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBhIERhdGUgb2JqZWN0IGhvbGRzIGEgdmFsaWQgZGF0ZS5cbiAqIEBwYXJhbSB7RGF0ZX0gZGF0ZSBUaGUgZGF0ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBkYXRlIGlzIHZhbGlkIChpdCBpcyBhIERhdGUgb2JqZWN0IGhvbGRpbmcgYVxuICogICB2YWxpZCBkYXRlKSwgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNEYXRlVmFsaWQoZGF0ZSkge1xuICByZXR1cm4gKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSAmJiBpc1ZhbGlkKGRhdGUpO1xufVxuXG4vKipcbiAqIEdldCB0aGUgbmFtZSBvZiBhIGRheSBvZiB0aGUgd2Vlay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkYXlJbmRleCBUaGUgaW5kZXggb2YgdGhlIHdlZWtkYXkgYXMgYW4gaW50ZWdlciBmcm9tIDAgdG8gNixcbiAqICAgd2l0aCAwIHJlcHJlc2VudGluZyBTdW5kYXksIDEgcmVwcmVzZW50aW5nIE1vbmRheSwgYW5kIHNvIG9uLlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIEVuZ2xpc2ggbmFtZSBvZiB0aGUgd2Vla2RheS5cbiAqL1xuZnVuY3Rpb24gZ2V0V2Vla2RheU5hbWUoZGF5SW5kZXgpIHtcbiAgcmV0dXJuIFdFRUtEQVlTW2RheUluZGV4XSB8fCAnVW5rbm93bic7XG59XG5cbi8qKlxuICogR2V0IHRoZSBpbmRleCBvZiB0aGUgZGF5IG9mIGEgd2Vlaywgd2l0aCBTdW5kYXkgY29ycmVzcG9uZGluZyB0byAwLlxuICogQHBhcmFtIHtzdHJpbmd9IGRheSBUaGUgbmFtZSBvZiB0aGUgd2Vla2RheS5cbiAqIEByZXR1cm5zIHs/bnVtYmVyfSBUaGUgaW5kZXggb2YgdGhlIHdlZWtkYXkgYXMgYW4gaW50ZWdlciBmcm9tIDAgdG8gNiwgd2l0aFxuICogICAwIHJlcHJlc2VudGluZyBTdW5kYXksIDEgcmVwcmVzZW50aW5nIE1vbmRheSwgYW5kIHNvIG9uLiBJZiB0aGUgd2Vla2RheSBpc1xuICogICBub3QgcmVjb2duaXplZCwgbnVsbCBpcyByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0V2Vla2RheUluZGV4KGRheSkge1xuICBjb25zdCBkYXlMb3dlciA9IGRheS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBpbmRleCA9IFdFRUtEQVlTLmZpbmRJbmRleCgoZWxlbSkgPT4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSBkYXlMb3dlcik7XG4gIGlmIChpbmRleCA8IDApIHJldHVybiBudWxsO1xuICByZXR1cm4gaW5kZXg7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuYW1lIG9mIGEgbW9udGguXG4gKiBAcGFyYW0ge251bWJlcn0gbW9udGhJbmRleCBUaGUgaW5kZXggb2YgdGhlIG1vbnRoIGFzIGFuIGludGVnZXIgZnJvbSAwIHRvXG4gKiAgIDExLCB3aXRoIDAgcmVwcmVzZW50aW5nIEphbnVhcnksIDEgcmVwcmVzZW50aW5nIEZlYnJ1YXJ5LCBhbmQgc28gb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgRW5nbGlzaCBuYW1lIG9mIHRoZSBtb250aC5cbiAqL1xuZnVuY3Rpb24gZ2V0TW9udGhOYW1lKG1vbnRoSW5kZXgpIHtcbiAgcmV0dXJuIE1PTlRIU1ttb250aEluZGV4XT8ubmFtZSB8fCAnVW5rbm93bic7XG59XG5cbi8qKlxuICogR2V0IHRoZSBpbmRleCBvZiBhIG1vbnRoIG9mIHRoZSB5ZWFyLCB3aXRoIEphbnVhcnkgY29ycmVzcG9uZGluZyB0byAwLlxuICogQHBhcmFtIHtzdHJpbmd9IG1vbnRoIFRoZSBuYW1lIG9mIHRoZSBtb250aC5cbiAqIEByZXR1cm5zIHs/bnVtYmVyfSBUaGUgaW5kZXggb2YgdGhlIG1vbnRoIGFzIGFuIGludGVnZXIgZnJvbSAwIHRvIDExLCB3aXRoIDBcbiAqICAgcmVwcmVzZW50aW5nIEphbnVhcnksIDEgcmVwcmVzZW50aW5nIEZlYnJ1YXJ5LCBhbmQgc28gb24uIElmIHRoZSBtb250aCBpc1xuICogICBub3QgcmVjb2duaXplZCwgbnVsbCBpcyByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0TW9udGhJbmRleChtb250aCkge1xuICBjb25zdCBtb250aExvd2VyID0gbW9udGgudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgaW5kZXggPSBNT05USFMuZmluZEluZGV4KChlbGVtKSA9PiAoXG4gICAgZWxlbS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG1vbnRoTG93ZXJcbiAgKSk7XG4gIGlmIChpbmRleCA8IDApIHJldHVybiBudWxsO1xuICByZXR1cm4gaW5kZXg7XG59XG5cbi8qKlxuICogR2V0IHRoZSAobWF4aW11bSkgbnVtYmVyIG9mIGRheXMgaW4gYSBwYXJ0aWN1bGFyIG1vbnRoLlxuICogQHBhcmFtIHtudW1iZXJ9IG1vbnRoSW5kZXggVGhlIGluZGV4IG9mIHRoZSBtb250aCBhcyBhbiBpbnRlZ2VyIGZyb20gMCB0b1xuICogICAxMSwgd2l0aCAwIHJlcHJlc2VudGluZyBKYW51YXJ5LCAxIHJlcHJlc2VudGluZyBGZWJydWFyeSwgYW5kIHNvIG9uLlxuICogQHJldHVybnMge251bWJlcn0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGRheXMgaW4gdGhlIG1vbnRoLiBGb3IgZXhhbXBsZSwgdGhlXG4gKiAgIHZhbHVlIHJldHVybmVkIGZvciBGZWJydWFyeSB3aWxsIGJlIDI5LCBub3QgMjguIFJldHVybnMgYSB2YWx1ZSBvZiAwIGlmXG4gKiAgIGFuIGludmFsaWQgaW5kZXggaXMgZ2l2ZW4uXG4gKi9cbmZ1bmN0aW9uIGdldERheXNJbk1vbnRoKG1vbnRoSW5kZXgpIHtcbiAgcmV0dXJuIE1PTlRIU1ttb250aEluZGV4XT8ubWF4RGF5cyA/PyAwO1xufVxuXG5leHBvcnQge1xuICBmb3JtYXREYXRlLFxuICBmb3JtYXRJc29EYXRlLFxuICBmb3JtYXRJc29EYXRlVGltZSxcbiAgZ2V0RGF0ZUZvcm1hdCxcbiAgZ2V0RGF5c0luTW9udGgsXG4gIGdldE1vbnRoSW5kZXgsXG4gIGdldE1vbnRoTmFtZSxcbiAgZ2V0V2Vla2RheUluZGV4LFxuICBnZXRXZWVrZGF5TmFtZSxcbiAgaXNEYXRlVmFsaWQsXG4gIHBhcnNlRGF0ZSxcbiAgcGFyc2VJc29EYXRlVGltZSxcbn07XG4iLCIvKipcbiAqIERlZmluZXMgZnVuY3Rpb25zIGZvciBtYW5pcHVsYXRpbmcgdGhlIERPTS5cbiAqIEBtb2R1bGUgZG9tXG4gKi9cblxuLyoqXG4gKiBTcGVjaWZpZXMgb3B0aW9ucyBmb3IgY3JlYXRpbmcgaW5wdXQgY29udHJvbHMgaW4gYSBmb3JtLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmRvbX5mb3JtQ29udHJvbE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZT10ZXh0XSBUaGUgdHlwZSBvZiBpbnB1dC4gRm9yIG1vc3QgdGV4dCBvciBudW1lcmljXG4gKiAgIGZvcm1zIG9mIGlucHV0LCB0aGlzIHZhbHVlIGlzIHVzZWQgYXMgdGhlICd0eXBlJyBhdHRyaWJ1dGUgb24gYW4gJ2lucHV0J1xuICogICBlbGVtZW50LiBTZXR0aW5nIHRoaXMgdG8gJ3NlbGVjdCcgaW5kaWNhdGVzIHRoYXQgYSAnc2VsZWN0JyBlbGVtZW50IHNob3VsZFxuICogICBiZSBjcmVhdGVkLiBTZXR0aW5nIHRoaXMgdG8gJ3RleHRhcmVhJyBpbmRpY2F0ZXMgdGhhdCBhICd0ZXh0YXJlYScgZWxlbWVudFxuICogICBzaG91bGQgYmUgY3JlYXRlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbmFtZV0gVGhlIG5hbWUgb2YgdGhlIGlucHV0IGVsZW1lbnQsIHVzZWQgaW4gZm9ybVxuICogICBzdWJtaXNzaW9uIGFuZCBmb3IgZ3JvdXBpbmcgcmFkaW8gYnV0dG9ucy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdIFRoZSB0aXRsZSBvZiB0aGUgaW5wdXQgZWxlbWVudCwgdXN1YWxseSBkaXNwbGF5ZWRcbiAqICAgYnkgdGhlIGJyb3dzZXIgYXMgYSB0b29sdGlwLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt2YWx1ZV0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIGlucHV0IGVsZW1lbnQsIG9yIGFcbiAqICAgdmFsdWUgaWRlbnRpZnlpbmcgYSBjaGVja2JveCBvciByYWRpbyBidXR0b24gb3B0aW9uLiBUaGlzIHByb3BlcnR5IGlzXG4gKiAgIGlnbm9yZWQgZm9yIHRoZSAnc2VsZWN0JyBpbnB1dCB0eXBlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwbGFjZWhvbGRlcl0gQSBoaW50IHN0cmluZyB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yXG4gKiAgIHRleHQtYmFzZWQgaW5wdXQgZWxlbWVudHMuXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbY2xhc3NMaXN0PVtdXSBBbiBhcnJheSBvZiBjbGFzcyBuYW1lcyB0byBhcHBseSB0byB0aGVcbiAqICAgaW5wdXQgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NoZWNrZWQ9ZmFsc2VdIElmIHRydWUsIGluZGljYXRlcyB0aGF0IHRoZSBjb250cm9sXG4gKiAgIHNob3VsZCBiZSBjaGVja2VkIGJ5IGRlZmF1bHQuIFRoaXMgYXBwbGllcyBvbmx5IHRvIHRoZSAnY2hlY2tib3gnIGFuZFxuICogICAncmFkaW8nIGlucHV0IHR5cGVzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbcmVxdWlyZWQ9ZmFsc2VdIElmIHRydWUsIGluZGljYXRlcyB0aGF0IHRoZSBjb250cm9sXG4gKiAgIGlzIGEgcmVxdWlyZWQgZmllbGQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3BhdHRlcm5dIFNwZWNpZmllcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IHRoZSBpbnB1dFxuICogICBjb250cm9sJ3MgdmFsdWUgc2hvdWxkIG1hdGNoIGluIG9yZGVyIHRvIGJlIGNvbnNpZGVyZWQgdmFsaWQuXG4gKiBAcHJvcGVydHkge251bWJlcnxzdHJpbmd9IFttaW5dIFNldHMgdGhlIG1pbmltdW0gYWNjZXB0YWJsZSB2YWx1ZSBmb3IgYVxuICogICBudW1lcmljIGlucHV0IGZpZWxkLlxuICogQHByb3BlcnR5IHtudW1iZXJ8c3RyaW5nfSBbbWF4XSBTZXRzIHRoZSBtYXhpbXVtIGFjY2VwdGFibGUgdmFsdWUgZm9yIGFcbiAqICAgbnVtZXJpYyBpbnB1dCBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfHN0cmluZ30gW3N0ZXBdIFNldHMgdGhlIGFjY2VwdGFibGUgaW5jcmVtZW50cyBmb3IgdmFsdWVzXG4gKiAgIGluIGEgbnVtZXJpYyBpbnB1dCBmaWVsZC4gVGhpcyBjYW4gYmUgYSBudW1iZXIgb3IgdGhlIHN0cmluZyAnYW55Jy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWluTGVuZ3RoXSBTZXRzIHRoZSBtaW5pbXVtIGFjY2VwdGFibGUgbGVuZ3RoIGZvciBhblxuICogICBpbnB1dCBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4TGVuZ3RoXSBTZXRzIHRoZSBtYXhpbXVtIGFjY2VwdGFibGUgbGVuZ3RoIGZvciBhblxuICogICBpbnB1dCBmaWVsZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfHN0cmluZ1tdfSBbYWNjZXB0XSBTZXRzIHRoZSBhY2NlcHRhYmxlIGZpbGUgdHlwZXMgZm9yIGFcbiAqICAgZmlsZSBpbnB1dCBmaWVsZC4gQ2FuIGJlIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZlxuICogICBmaWxlIGV4dGVuc2lvbnMgYW5kL29yIG1lZGlhIHR5cGVzLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIGVhY2ggc3BlY2lmeWluZ1xuICogICBvbmUgZmlsZSBleHRlbnNpb24gb3IgbWVkaWEgdHlwZS5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbbGFiZWxdIEFuIG9iamVjdCBzcGVjaWZ5aW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsYWJlbFxuICogICBmb3IgdGhlIGlucHV0IGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2xhYmVsLnZhbHVlXSBUaGUgdGV4dCBjb250ZW50IG9mIHRoZSBsYWJlbCB0aGF0IHNob3VsZFxuICogICBiZSBkaXNwbGF5ZWQgb24gdGhlIHBhZ2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2xhYmVsLnBsYWNlbWVudD1hdXRvXSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGxhYmVsXG4gKiAgIHNob3VsZCBiZSBwbGFjZWQgYmVmb3JlIG9yIGFmdGVyIHRoZSBpbnB1dCBjb250cm9sLiBWYWxpZCB2YWx1ZXMgYXJlXG4gKiAgICdiZWZvcmUnLCAnYWZ0ZXInLCBhbmQgJ2F1dG8nICh0aGUgZGVmYXVsdCkuIElmIHNldCB0byAnYXV0bycsIHRoZW4gdGhlXG4gKiAgIGxhYmVsIGlzIHBsYWNlZCBhZnRlciB0aGUgZWxlbWVudCBpZiB0aGUgaW5wdXQgdHlwZSBpcyAncmFkaW8nIG9yXG4gKiAgICdjaGVja2JveCcsIGFuZCBiZWZvcmUgdGhlIGVsZW1lbnQgaW4gYWxsIG90aGVyIGNhc2VzLlxuICogQHByb3BlcnR5IHtzdHJpbmdbXX0gW2xhYmVsLmNsYXNzTGlzdD1bXV0gQW4gYXJyYXkgb2YgY2xhc3MgbmFtZXMgdG8gYXBwbHlcbiAqICAgdG8gdGhlIGxhYmVsIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3NpemVdIEFuIG9iamVjdCBjb250YWluaW5nIHNpemUgaW5mb3JtYXRpb24gZm9yIHRoZVxuICogICBpbnB1dCBlbGVtZW50LiBUaGlzIGlzIG9ubHkgdXNlZCBmb3IgdGhlICd0ZXh0YXJlYScgaW5wdXQgdHlwZS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbc2l6ZS5yb3dzXSBUaGUgbnVtYmVyIG9mIHJvd3MgdGhhdCBhIHRleHRhcmVhIHNob3VsZFxuICogICBoYXZlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtzaXplLmNvbHNdIFRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGF0IGEgdGV4dGFyZWEgc2hvdWxkXG4gKiAgIGhhdmUuXG4gKiBAcHJvcGVydHkge09iamVjdH0gW2NvbnRhaW5lcl0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlXG4gKiAgIGNvbnRhaW5lciBob2xkaW5nIHRoZSBpbnB1dCBlbGVtZW50IGFuZCBpdHMgbGFiZWwuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2NvbnRhaW5lci5pZF0gVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBjb250YWluZXIuXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbY29udGFpbmVyLmNsYXNzTGlzdD1bXV0gQW4gYXJyYXkgb2YgY2xhc3MgbmFtZXMgdG9cbiAqICAgYXBwbHkgdG8gdGhlIGNvbnRhaW5lci5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NvbnRhaW5lci5pbmxpbmU9ZmFsc2VdIElmIHNldCB0byB0cnVlLCBpbmRpY2F0ZXMgdGhhdFxuICogICB0aGUgY29udGFpbmVyIHNob3VsZCBiZSBhbiBpbmxpbmUgZWxlbWVudCByYXRoZXIgdGhhbiBhIGJsb2NrIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge09iamVjdFtdfSBbbWVudUl0ZW1zXSBBbiBhcnJheSBvZiBvYmplY3RzIGNvbnRhaW5pbmcgaW5mb3JtYXRpb25cbiAqICAgYWJvdXQgb3B0aW9ucyBmb3IgYSBzZWxlY3QgY29udHJvbC4gVGhpcyBwcm9wZXJ0eSBpcyBpZ25vcmVkIHVubGVzcyB0aGVcbiAqICAgaW5wdXQgdHlwZSBpcyAnc2VsZWN0Jy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbWVudUl0ZW1zLnZhbHVlXSBUaGUgZm9ybSB2YWx1ZSBpZGVudGlmeWluZyB0aGUgaXRlbS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZW51SXRlbXMubGFiZWwgVGhlIGxhYmVsIHRoYXQgd2lsbCBiZSBkaXNwbGF5ZWQgZm9yXG4gKiAgIHRoZSBpdGVtLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbbWVudUl0ZW1zLnNlbGVjdGVkPWZhbHNlXSBJZiB0cnVlLCBpbmRpY2F0ZXMgdGhhdCB0aGVcbiAqICAgaXRlbSBzaG91bGQgYmUgc2VsZWN0ZWQgYnkgZGVmYXVsdC5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnB1dCBjb250cm9sIGluIGEgZm9ybSwgb3B0aW9uYWxseSBpbmNsdWRpbmcgYSBsYWJlbC5cbiAqIEBwYXJhbSB7bW9kdWxlOmRvbX5mb3JtQ29udHJvbE9wdGlvbnN9IFtvcHRpb25zPXt9XSBBbiBvYmplY3Qgc3BlY2lmeWluZ1xuICogICBvcHRpb25zIGZvciB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIGNvbnRhaW5lciBob2xkaW5nIHRoZSBpbnB1dCBlbGVtZW50IGFuZCBpdHNcbiAqICAgbGFiZWwuIElmIG5vIGxhYmVsIGFuZCBubyBjb250YWluZXIgaWQgd2VyZSBzcGVjaWZpZWQsIHRoZW4gdGhlIGZvcm1cbiAqICAgZWxlbWVudCBpcyBub3QgcGxhY2VkIGluIGEgY29udGFpbmVyIGFuZCBpcyBpbnN0ZWFkIHJldHVybmVkIGRpcmVjdGx5LlxuICovXG5mdW5jdGlvbiBjcmVhdGVGb3JtQ29udHJvbChvcHRpb25zID0ge30pIHtcbiAgY29uc3QgdHlwZSA9IG9wdGlvbnMudHlwZT8udG9Mb3dlckNhc2UoKSB8fCAndGV4dCc7XG4gIGxldCBjb250YWluZXIgPSBudWxsO1xuICBpZiAob3B0aW9ucy5sYWJlbCB8fCBvcHRpb25zLmNvbnRhaW5lcikge1xuICAgIGNvbnN0IGNvbnRhaW5lclRhZyA9IG9wdGlvbnMuY29udGFpbmVyPy5pbmxpbmUgPyAnc3BhbicgOiAnZGl2JztcbiAgICBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGNvbnRhaW5lclRhZyk7XG4gICAgaWYgKG9wdGlvbnMuY29udGFpbmVyPy5pZCkgY29udGFpbmVyLmlkID0gb3B0aW9ucy5jb250YWluZXIuaWQ7XG4gICAgaWYgKG9wdGlvbnMuY29udGFpbmVyPy5jbGFzc0xpc3QpIHtcbiAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKC4uLm9wdGlvbnMuY29udGFpbmVyLmNsYXNzTGlzdCk7XG4gICAgfVxuICB9XG5cbiAgbGV0IGxhYmVsID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMubGFiZWwpIHtcbiAgICBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSBvcHRpb25zLmxhYmVsLnZhbHVlIHx8ICcnO1xuICAgIGlmIChvcHRpb25zLmxhYmVsLmNsYXNzTGlzdCkge1xuICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZCguLi5vcHRpb25zLmxhYmVsLmNsYXNzTGlzdCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmlkKSBsYWJlbC5odG1sRm9yID0gb3B0aW9ucy5pZDtcbiAgfVxuXG4gIGxldCBpbnB1dCA9IG51bGw7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xuICAgICAgaWYgKG9wdGlvbnMubWVudUl0ZW1zKSB7XG4gICAgICAgIG9wdGlvbnMubWVudUl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICBjb25zdCBvcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICBpZiAoaXRlbS52YWx1ZSkgb3B0LnZhbHVlID0gaXRlbS52YWx1ZTtcbiAgICAgICAgICBpZiAoaXRlbS5zZWxlY3RlZCkge1xuICAgICAgICAgICAgb3B0LmRlZmF1bHRTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICBvcHQuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcHQudGV4dENvbnRlbnQgPSBpdGVtLmxhYmVsO1xuICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKG9wdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgaW5wdXQudGV4dENvbnRlbnQgPSBvcHRpb25zLnZhbHVlIHx8ICcnO1xuICAgICAgaWYgKG9wdGlvbnMuc2l6ZSkge1xuICAgICAgICBpZiAob3B0aW9ucy5zaXplLnJvd3MpIGlucHV0LnJvd3MgPSBvcHRpb25zLnNpemUucm93cztcbiAgICAgICAgaWYgKG9wdGlvbnMuc2l6ZS5jb2xzKSBpbnB1dC5jb2xzID0gb3B0aW9ucy5zaXplLmNvbHM7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgICBpZiAob3B0aW9ucy52YWx1ZSkge1xuICAgICAgICBpbnB1dC5kZWZhdWx0VmFsdWUgPSBvcHRpb25zLnZhbHVlO1xuICAgICAgICBpbnB1dC52YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnBhdHRlcm4pIGlucHV0LnBhdHRlcm4gPSBvcHRpb25zLnBhdHRlcm47XG4gICAgICBpZiAob3B0aW9ucy5taW4gIT0gbnVsbCkgaW5wdXQubWluID0gb3B0aW9ucy5taW47XG4gICAgICBpZiAob3B0aW9ucy5tYXggIT0gbnVsbCkgaW5wdXQubWF4ID0gb3B0aW9ucy5tYXg7XG4gICAgICBpZiAob3B0aW9ucy5zdGVwICE9IG51bGwpIGlucHV0LnN0ZXAgPSBvcHRpb25zLnN0ZXA7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmIChvcHRpb25zLmlkKSBpbnB1dC5pZCA9IG9wdGlvbnMuaWQ7XG4gIGlmIChvcHRpb25zLm5hbWUpIGlucHV0Lm5hbWUgPSBvcHRpb25zLm5hbWU7XG4gIGlmIChvcHRpb25zLnRpdGxlKSBpbnB1dC50aXRsZSA9IG9wdGlvbnMudGl0bGU7XG4gIGlmIChvcHRpb25zLmNsYXNzTGlzdCkgaW5wdXQuY2xhc3NMaXN0LmFkZCguLi5vcHRpb25zLmNsYXNzTGlzdCk7XG4gIGlmIChvcHRpb25zLnJlcXVpcmVkKSBpbnB1dC5yZXF1aXJlZCA9IHRydWU7XG4gIGlmICh0eXBlICE9PSAnc2VsZWN0JyAmJiBvcHRpb25zLm1pbkxlbmd0aCAhPSBudWxsKSB7XG4gICAgaW5wdXQubWluTGVuZ3RoID0gb3B0aW9ucy5taW5MZW5ndGg7XG4gIH1cbiAgaWYgKHR5cGUgIT09ICdzZWxlY3QnICYmIG9wdGlvbnMubWF4TGVuZ3RoICE9IG51bGwpIHtcbiAgICBpbnB1dC5tYXhMZW5ndGggPSBvcHRpb25zLm1heExlbmd0aDtcbiAgfVxuICBpZiAodHlwZSA9PT0gJ2ZpbGUnICYmIG9wdGlvbnMuYWNjZXB0KSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5hY2NlcHQpKSBpbnB1dC5hY2NlcHQgPSBvcHRpb25zLmFjY2VwdC5qb2luKCcsJyk7XG4gICAgZWxzZSBpbnB1dC5hY2NlcHQgPSBvcHRpb25zLmFjY2VwdDtcbiAgfVxuXG4gIGNvbnN0IGNoZWNrYWJsZSA9IHR5cGUgPT09ICdjaGVja2JveCcgfHwgdHlwZSA9PT0gJ3JhZGlvJztcbiAgaWYgKGNoZWNrYWJsZSAmJiBvcHRpb25zLmNoZWNrZWQpIHtcbiAgICBpbnB1dC5kZWZhdWx0Q2hlY2tlZCA9IHRydWU7XG4gICAgaW5wdXQuY2hlY2tlZCA9IHRydWU7XG4gIH1cblxuICBpZiAob3B0aW9ucy5wbGFjZWhvbGRlciAmJiAhY2hlY2thYmxlICYmIHR5cGUgIT09ICdzZWxlY3QnKSB7XG4gICAgaW5wdXQucGxhY2Vob2xkZXIgPSBvcHRpb25zLnBsYWNlaG9sZGVyO1xuICB9XG5cbiAgaWYgKGxhYmVsKSB7XG4gICAgbGV0IHBsYWNlbWVudCA9IG9wdGlvbnMubGFiZWwucGxhY2VtZW50IHx8ICdhdXRvJztcbiAgICBpZiAocGxhY2VtZW50ID09PSAnYXV0bycpIHBsYWNlbWVudCA9IGNoZWNrYWJsZSA/ICdhZnRlcicgOiAnYmVmb3JlJztcblxuICAgIGlmIChwbGFjZW1lbnQgPT09ICdhZnRlcicpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lcikge1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgfVxuXG4gIHJldHVybiBpbnB1dDtcbn1cblxuLyoqXG4gKiBTcGVjaWZpZXMgb3B0aW9ucyBmb3IgY3JlYXRpbmcgYSBkYXRlIGlucHV0IGZpZWxkIGluIGEgZm9ybS5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpkb21+ZGF0ZUlucHV0T3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZF0gVGhlIGlkZW50aWZpZXIgZm9yIHRoZSB0ZXh0IGlucHV0IGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIFRoZSBuYW1lIG9mIHRoZSB0ZXh0IGlucHV0IGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW3RpdGxlXSBUaGUgdGl0bGUgb2YgdGhlIHRleHQgaW5wdXQgZWxlbWVudCwgdXN1YWxseVxuICogICBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgYXMgYSB0b29sdGlwLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt2YWx1ZV0gVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhlIHRleHQgaW5wdXQgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGxhY2Vob2xkZXJdIEEgaGludCBzdHJpbmcgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciB0aGVcbiAqICAgdGV4dCBpbnB1dCBlbGVtZW50LlxuICogQHByb3BlcnR5IHtzdHJpbmdbXX0gW2NsYXNzTGlzdD1bXV0gQW4gYXJyYXkgb2YgY2xhc3MgbmFtZXMgdG8gYXBwbHkgdG8gdGhlXG4gKiAgIHRleHQgaW5wdXQgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3JlcXVpcmVkPWZhbHNlXSBJZiB0cnVlLCBpbmRpY2F0ZXMgdGhhdCB0aGUgaW5wdXRcbiAqICAgY29udHJvbCBpcyBhIHJlcXVpcmVkIGZpZWxkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtwYXR0ZXJuXSBTcGVjaWZpZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCB0aGUgaW5wdXRcbiAqICAgY29udHJvbCdzIHZhbHVlIHNob3VsZCBtYXRjaCBpbiBvcmRlciB0byBiZSBjb25zaWRlcmVkIHZhbGlkLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFttaW5MZW5ndGhdIFNldHMgdGhlIG1pbmltdW0gYWNjZXB0YWJsZSBsZW5ndGggZm9yIHRoZVxuICogICB0ZXh0IGlucHV0IGZpZWxkLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFttYXhMZW5ndGhdIFNldHMgdGhlIG1heGltdW0gYWNjZXB0YWJsZSBsZW5ndGggZm9yIHRoZVxuICogICB0ZXh0IGlucHV0IGZpZWxkLlxuICogQHByb3BlcnR5IHtPYmplY3R9IFtsYWJlbF0gQW4gb2JqZWN0IHNwZWNpZnlpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxhYmVsXG4gKiAgIGZvciB0aGUgaW5wdXQgZmllbGQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2xhYmVsLnZhbHVlXSBUaGUgdGV4dCBjb250ZW50IG9mIHRoZSBsYWJlbCB0aGF0IHNob3VsZFxuICogICBiZSBkaXNwbGF5ZWQgb24gdGhlIHBhZ2UuXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbbGFiZWwuY2xhc3NMaXN0PVtdXSBBbiBhcnJheSBvZiBjbGFzcyBuYW1lcyB0byBhcHBseVxuICogICB0byB0aGUgbGFiZWwgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbY29udGFpbmVyXSBBbiBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGVcbiAqICAgY29udGFpbmVyIGhvbGRpbmcgdGhlIGlucHV0IGZpZWxkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb250YWluZXIuaWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgY29udGFpbmVyLlxuICogQHByb3BlcnR5IHtzdHJpbmdbXX0gW2NvbnRhaW5lci5jbGFzc0xpc3Q9W11dIEFuIGFycmF5IG9mIGNsYXNzIG5hbWVzIHRvXG4gKiAgIGFwcGx5IHRvIHRoZSBjb250YWluZXIuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtjb250YWluZXIuaW5saW5lPWZhbHNlXSBJZiBzZXQgdG8gdHJ1ZSwgaW5kaWNhdGVzIHRoYXRcbiAqICAgdGhlIGNvbnRhaW5lciBzaG91bGQgYmUgYW4gaW5saW5lIGVsZW1lbnQgcmF0aGVyIHRoYW4gYSBibG9jayBlbGVtZW50LlxuICogQHByb3BlcnR5IHtPYmplY3R9IFtidXR0b25dIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZVxuICogICBidXR0b24gZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYnV0dG9uLmlkXSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGJ1dHRvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYnV0dG9uLm5hbWVdIFRoZSBmb3JtIG5hbWUgZm9yIHRoZSBidXR0b24uXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2J1dHRvbi50aXRsZV0gVGhlIHRpdGxlIGZvciB0aGUgYnV0dG9uLCB1c3VhbGx5XG4gKiAgIGRpc3BsYXllZCBieSB0aGUgYnJvd3NlciBhcyBhIHRvb2x0aXAuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2J1dHRvbi5sYWJlbD1DaG9vc2UuLi5dIFRoZSBsYWJlbCB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlXG4gKiAgIGJ1dHRvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtidXR0b24uY2xhc3NMaXN0XSBBbiBhcnJheSBvZiBjbGFzcyBuYW1lcyB0byBhcHBseSB0b1xuICogICB0aGUgYnV0dG9uIGVsZW1lbnQuXG4gKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbYnV0dG9uLmNhbGxiYWNrXSBBIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGJlIGludm9rZWRcbiAqICAgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgb3IgYWN0aXZhdGVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBwYXNzZWQgYVxuICogICByZWZlcmVuY2UgdG8gdGhlIHRleHQgaW5wdXQgZWxlbWVudCBhcyBhbiBhcmd1bWVudC5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnB1dCBmaWVsZCBmb3IgZW50ZXJpbmcgZGF0ZXMuIFRoaXMgd2lsbCBjcmVhdGUgYSB0ZXh0IGlucHV0XG4gKiBjb250cm9sIHRvZ2V0aGVyIHdpdGggYSBidXR0b24gdGhhdCBjYW4gaW52b2tlIGEgY2FsbGJhY2sgYWxsb3dpbmcgZm9yIHRoZVxuICogY2FsbGVyIHRvIG9wZW4gYSBkYXRlIHBpY2tlci5cbiAqIEBwYXJhbSB7bW9kdWxlOmRvbX5kYXRlSW5wdXRPcHRpb25zfSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IHNwZWNpZnlpbmdcbiAqICAgb3B0aW9ucyBmb3IgdGhlIGlucHV0IGZpZWxkLlxuICogQHJldHVybnMge0hUTUxFbGVtZW50fSBUaGUgY29udGFpbmVyIGhvbGRpbmcgdGhlIGlucHV0IGVsZW1lbnRzIGFuZCBsYWJlbC5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGF0ZUlucHV0RmllbGQob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGNvbnRhaW5lclRhZyA9IG9wdGlvbnMuY29udGFpbmVyPy5pbmxpbmUgPyAnc3BhbicgOiAnZGl2JztcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb250YWluZXJUYWcpO1xuICBpZiAob3B0aW9ucy5jb250YWluZXI/LmlkKSBjb250YWluZXIuaWQgPSBvcHRpb25zLmNvbnRhaW5lci5pZDtcbiAgaWYgKG9wdGlvbnMuY29udGFpbmVyPy5jbGFzc0xpc3QpIHtcbiAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZCguLi5vcHRpb25zLmNvbnRhaW5lci5jbGFzc0xpc3QpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMubGFiZWwpIHtcbiAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgaWYgKG9wdGlvbnMuaWQpIGxhYmVsLmh0bWxGb3IgPSBvcHRpb25zLmlkO1xuICAgIGlmIChvcHRpb25zLmxhYmVsLmNsYXNzTGlzdCkge1xuICAgICAgbGFiZWwuY2xhc3NMaXN0LmFkZCguLi5vcHRpb25zLmxhYmVsLmNsYXNzTGlzdCk7XG4gICAgfVxuICAgIGxhYmVsLnRleHRDb250ZW50ID0gb3B0aW9ucy5sYWJlbC52YWx1ZSB8fCAnJztcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICB9XG5cbiAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNyZWF0ZUZvcm1Db250cm9sKHtcbiAgICB0eXBlOiAndGV4dCcsXG4gICAgaWQ6IG9wdGlvbnMuaWQgPz8gbnVsbCxcbiAgICBuYW1lOiBvcHRpb25zLm5hbWUgPz8gbnVsbCxcbiAgICB0aXRsZTogb3B0aW9ucy50aXRsZSA/PyBudWxsLFxuICAgIHZhbHVlOiBvcHRpb25zLnZhbHVlID8/IG51bGwsXG4gICAgcGxhY2Vob2xkZXI6IG9wdGlvbnMucGxhY2Vob2xkZXIgPz8gbnVsbCxcbiAgICBjbGFzc0xpc3Q6IG9wdGlvbnMuY2xhc3NMaXN0IHx8IG51bGwsXG4gICAgcmVxdWlyZWQ6IG9wdGlvbnMucmVxdWlyZWQgPz8gZmFsc2UsXG4gICAgcGF0dGVybjogb3B0aW9ucy5wYXR0ZXJuID8/IG51bGwsXG4gICAgbWluTGVuZ3RoOiBvcHRpb25zLm1pbkxlbmd0aCA/PyBudWxsLFxuICAgIG1heExlbmd0aDogb3B0aW9ucy5tYXhMZW5ndGggPz8gbnVsbCxcbiAgfSkpO1xuXG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBpZiAob3B0aW9ucy5idXR0b24/LmlkKSBidXR0b24uaWQgPSBvcHRpb25zLmJ1dHRvbi5pZDtcbiAgaWYgKG9wdGlvbnMuYnV0dG9uPy5uYW1lKSBidXR0b24ubmFtZSA9IG9wdGlvbnMuYnV0dG9uLm5hbWU7XG4gIGlmIChvcHRpb25zLmJ1dHRvbj8udGl0bGUpIGJ1dHRvbi50aXRsZSA9IG9wdGlvbnMuYnV0dG9uLnRpdGxlO1xuICBpZiAob3B0aW9ucy5idXR0b24/LmNsYXNzTGlzdCkge1xuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKC4uLm9wdGlvbnMuYnV0dG9uLmNsYXNzTGlzdCk7XG4gIH1cbiAgYnV0dG9uLnRleHRDb250ZW50ID0gb3B0aW9ucy5idXR0b24/LmxhYmVsIHx8ICdDaG9vc2UuLi4nO1xuICBpZiAob3B0aW9ucy5idXR0b24/LmNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5wdXQgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBvcHRpb25zLmJ1dHRvbi5jYWxsYmFjayhpbnB1dCkpO1xuICB9XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChidXR0b24pO1xuXG4gIHJldHVybiBjb250YWluZXI7XG59XG5cbi8qKlxuICogU3BlY2lmaWVzIG9wdGlvbnMgZm9yIGNyZWF0aW5nIGFuIGltYWdlIGJ1dHRvbi5cbiAqIEB0eXBlZGVmIHtPYmplY3R9IG1vZHVsZTpkb21+aW1hZ2VCdXR0b25PcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2lkXSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGJ1dHRvbi5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdGl0bGVdIFRoZSB0aXRsZSBvZiB0aGUgYnV0dG9uLCB1c3VhbGx5IGRpc3BsYXllZCBieSB0aGVcbiAqICAgYnJvd3NlciBhcyBhIHRvb2x0aXAuXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbY2xhc3NMaXN0XSBBbiBhcnJheSBvZiBjbGFzcyBuYW1lcyB0byBhcHBseSB0byB0aGVcbiAqICAgYnV0dG9uLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFthbHRUZXh0XSBUaGUgYWx0ZXJuYXRpdmUgdGV4dCBkZXNjcmlwdGlvbiBvZiB0aGUgaW1hZ2UsXG4gKiAgIHVzZWQgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMgb3IgYXMgYSBmYWxsYmFjay4gSWYgbm90IHByb3ZpZGVkLCB0aGVuIGFuXG4gKiAgIGVtcHR5IGFsdCBhdHRyaWJ1dGUgaXMgdXNlZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbd2lkdGhdIFRoZSBpbnRyaW5zaWMgd2lkdGggb2YgdGhlIGltYWdlIGluIHBpeGVscy5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbaGVpZ2h0XSBUaGUgaW50cmluc2ljIGhlaWdodCBvZiB0aGUgaW1hZ2UgaW4gcGl4ZWxzLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtpbWdJZF0gVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBpbWFnZS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtpbWdDbGFzc0xpc3RdIEFuIGFycmF5IG9mIGNsYXNzIG5hbWVzIHRvIGFwcGx5IHRvIHRoZVxuICogICBpbWFnZS5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IFtjYWxsYmFja10gQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZFxuICogICB0aGUgYnV0dG9uIGlzIGNsaWNrZWQuIFRoZSBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgdGhlIHN0YW5kYXJkIEV2ZW50IG9iamVjdFxuICogICBhcyBhbiBhcmd1bWVudCB3aGVuIGludm9rZWQuXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBidXR0b24gZWxlbWVudCBjb250YWluaW5nIGFuIGltYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIFVSTCBvZiB0aGUgaW1hZ2UgdG8gZGlzcGxheS5cbiAqIEBwYXJhbSB7bW9kdWxlOmRvbX5pbWFnZUJ1dHRvbk9wdGlvbnN9IFtvcHRpb25zPXt9XSBBbiBvYmplY3QgaG9sZGluZ1xuICogICBjb25maWd1cmF0aW9uIG9wdGlvbnMgY29udHJvbGxpbmcgdGhlIGJ1dHRvbiBjcmVhdGlvbi5cbiAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH0gVGhlIG5ld2x5LWNyZWF0ZWQgYnV0dG9uIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUltYWdlQnV0dG9uKHNvdXJjZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBpZiAob3B0aW9ucy5pZCkgYnV0dG9uLmlkID0gb3B0aW9ucy5pZDtcbiAgaWYgKG9wdGlvbnMudGl0bGUpIGJ1dHRvbi50aXRsZSA9IG9wdGlvbnMudGl0bGU7XG4gIGlmIChvcHRpb25zLmNsYXNzTGlzdCkgYnV0dG9uLmNsYXNzTGlzdC5hZGQoLi4ub3B0aW9ucy5jbGFzc0xpc3QpO1xuXG4gIGNvbnN0IGltYWdlRWxlbSA9IG5ldyBJbWFnZSgpO1xuICBpbWFnZUVsZW0uc3JjID0gc291cmNlO1xuICBpbWFnZUVsZW0uYWx0ID0gb3B0aW9ucy5hbHRUZXh0ID8/ICcnO1xuICBpZiAob3B0aW9ucy53aWR0aCAhPSBudWxsKSBpbWFnZUVsZW0ud2lkdGggPSBvcHRpb25zLndpZHRoO1xuICBpZiAob3B0aW9ucy5oZWlnaHQgIT0gbnVsbCkgaW1hZ2VFbGVtLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuICBpZiAob3B0aW9ucy5pbWdJZCkgaW1hZ2VFbGVtLmlkID0gb3B0aW9ucy5pbWdJZDtcbiAgaWYgKG9wdGlvbnMuaW1nQ2xhc3NMaXN0KSBpbWFnZUVsZW0uY2xhc3NMaXN0LmFkZCguLi5vcHRpb25zLmltZ0NsYXNzTGlzdCk7XG4gIGJ1dHRvbi5hcHBlbmRDaGlsZChpbWFnZUVsZW0pO1xuXG4gIGlmIChvcHRpb25zLmNhbGxiYWNrKSBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvcHRpb25zLmNhbGxiYWNrKTtcblxuICByZXR1cm4gYnV0dG9uO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGJ1dHRvbiB0aGF0IGNhbiBiZSB0b2dnbGVkIG9uIGFuZCBvZmYuXG4gKiBAcGFyYW0ge3N0cmluZ30gbGFiZWwgVGhlIGJ1dHRvbiBsYWJlbC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IGhvbGRpbmcgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gKiAgIGNvbnRyb2xsaW5nIHRoZSBidXR0b24gY3JlYXRpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRdIFRoZSBpZGVudGlmaWVyIGZvciB0aGUgYnV0dG9uLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm5hbWVdIFRoZSBmb3JtIG5hbWUgZm9yIHRoZSBidXR0b24uXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudGl0bGVdIFRoZSB0aXRsZSBvZiB0aGUgYnV0dG9uLCB1c3VhbGx5IGRpc3BsYXllZFxuICogICBieSB0aGUgYnJvd3NlciBhcyBhIHRvb2x0aXAuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFsdWVdIFRoZSBmb3JtIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUgYnV0dG9uLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWZhdWx0QWN0aXZlPWZhbHNlXSBTZXRzIHRoZSBpbml0aWFsIHN0YXRlIG9mIHRoZVxuICogICBidXR0b24uIElmIHNldCB0byB0cnVlLCB0aGVuIHRoZSBidXR0b24gd2lsbCBiZSBhY3RpdmUgKG9uKSBieSBkZWZhdWx0LlxuICogQHBhcmFtIHtzdHJpbmdbXX0gW29wdGlvbnMuY2xhc3NMaXN0XSBBbiBhcnJheSBvZiBjbGFzcyBuYW1lcyB0byBhcHBseSB0b1xuICogICB0aGUgYnV0dG9uLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgYnV0dG9uIHdpbGwgcmVjZWl2ZSB0aGUgJ3RvZ2dsZS1idXR0b24nXG4gKiAgIGNsYXNzLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFjdGl2ZUNsYXNzPWFjdGl2ZV0gVGhlIENTUyBjbGFzcyB0byBhcHBseSB3aGVuXG4gKiAgIHRoZSBidXR0b24gaXMgYWN0aXZlIChvbikuXG4gKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBuZXdseS1jcmVhdGVkIGJ1dHRvbiBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBjcmVhdGVUb2dnbGVCdXR0b24obGFiZWwsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgaWYgKG9wdGlvbnMuaWQpIGJ1dHRvbi5pZCA9IG9wdGlvbnMuaWQ7XG4gIGlmIChvcHRpb25zLm5hbWUpIGJ1dHRvbi5uYW1lID0gb3B0aW9ucy5uYW1lO1xuICBpZiAob3B0aW9ucy50aXRsZSkgYnV0dG9uLnRpdGxlID0gb3B0aW9ucy50aXRsZTtcbiAgaWYgKG9wdGlvbnMudmFsdWUpIGJ1dHRvbi52YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG4gIGlmIChvcHRpb25zLmNsYXNzTGlzdCkgYnV0dG9uLmNsYXNzTGlzdC5hZGQoLi4ub3B0aW9ucy5jbGFzc0xpc3QpO1xuICBlbHNlIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCd0b2dnbGUtYnV0dG9uJyk7XG4gIGJ1dHRvbi50ZXh0Q29udGVudCA9IGxhYmVsO1xuXG4gIGNvbnN0IGFjdGl2ZUNsYXNzID0gb3B0aW9ucy5hY3RpdmVDbGFzcyB8fCAnYWN0aXZlJztcbiAgaWYgKG9wdGlvbnMuZGVmYXVsdEFjdGl2ZSkgYnV0dG9uLmNsYXNzTGlzdC5hZGQoYWN0aXZlQ2xhc3MpO1xuXG4gIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKGFjdGl2ZUNsYXNzKSk7XG4gIHJldHVybiBidXR0b247XG59XG5cbi8qKlxuICogRGVzY3JpYmVzIGEgcGFyYWdyYXBoIGZyYWdtZW50LlxuICogQHR5cGVkZWYge09iamVjdHxzdHJpbmd9IG1vZHVsZTpkb21+cGFyYWdyYXBoRnJhZ21lbnRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29udGVudF0gVGhlIHRleHQgY29udGVudCB0aGF0IGlzIHRvIGJlIGRpc3BsYXllZCBpbiB0aGVcbiAqICAgcGFyYWdyYXBoLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt1cmxdIElmIHByb3ZpZGVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBhIGh5cGVybGlua1xuICogICBwb2ludGluZyB0byB0aGUgZ2l2ZW4gVVJMLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFt0YXJnZXRdIElmIGEgVVJMIHdhcyBwcm92aWRlZCwgdGhpcyBwcm9wZXJ0eSBkZXRlcm1pbmVzXG4gKiAgIHRoZSB2YWx1ZSBvZiB0aGUgXCJ0YXJnZXRcIiBhdHRyaWJ1dGUgZm9yIHRoZSBhbmNob3IgdGFnLiBUaGF0IGlzLCBpdFxuICogICBkZXRlcm1pbmVzIHdoZXJlIHRvIGRpc3BsYXkgdGhlIGxpbmtlZCBVUkwuXG4gKi9cblxuLyoqXG4gKiBEZXNjcmliZXMgYSBwYXJhZ3JhcGggZWxlbWVudCBhbmQgaXRzIGNvbnRlbnQuXG4gKiBAdHlwZWRlZiB7T2JqZWN0fHN0cmluZ3xzdHJpbmdbXX0gbW9kdWxlOmRvbX5wYXJhZ3JhcGhcbiAqIEBwcm9wZXJ0eSB7bW9kdWxlOmRvbX5wYXJhZ3JhcGhGcmFnbWVudHxtb2R1bGU6ZG9tfnBhcmFncmFwaEZyYWdtZW50W119IFtjb250ZW50XVxuICogICBUaGUgY29udGVudCBvZiB0aGUgcGFyYWdyYXBoLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtpZF0gVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBwYXJhZ3JhcGggZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtjbGFzc0xpc3Q9W11dIEFuIGFycmF5IG9mIGNsYXNzIG5hbWVzIHRvIGFwcGx5IHRvIHRoZVxuICogICBwYXJhZ3JhcGggZWxlbWVudC5cbiAqL1xuXG4vKipcbiAqIFNwZWNpZmllcyBvcHRpb25zIGZvciBjcmVhdGluZyBwYXJhZ3JhcGhzLlxuICogQHR5cGVkZWYge09iamVjdH0gbW9kdWxlOmRvbX5wYXJhZ3JhcGhPcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ1tdfSBbY2xhc3NMaXN0PVtdXSBBbiBhcnJheSBvZiBjbGFzcyBuYW1lcyB0byBhcHBseSB0byBlYWNoXG4gKiAgIHBhcmFncmFwaCBlbGVtZW50LlxuICogQHByb3BlcnR5IHtPYmplY3R9IFtjb250YWluZXJdIEFuIG9iamVjdCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZVxuICogICBjb250YWluZXIgaG9sZGluZyB0aGUgcGFyYWdyYXBocy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbY29udGFpbmVyLmlkXSBUaGUgaWRlbnRpZmllciBmb3IgdGhlIGNvbnRhaW5lci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtjb250YWluZXIuY2xhc3NMaXN0PVtdXSBBbiBhcnJheSBvZiBjbGFzcyBuYW1lcyB0b1xuICogICBhcHBseSB0byB0aGUgY29udGFpbmVyLlxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgc2VyaWVzIG9mIHBhcmFncmFwaCBlbGVtZW50cy5cbiAqIEBwYXJhbSB7bW9kdWxlOmRvbX5wYXJhZ3JhcGh8bW9kdWxlOmRvbX5wYXJhZ3JhcGhbXX0gcGFyYWdyYXBocyBEZXNjcmliZXNcbiAqICAgdGhlIHBhcmFncmFwaCBvciBwYXJhZ3JhcGhzIHRvIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0ge21vZHVsZTpkb21+cGFyYWdyYXBoT3B0aW9uc30gW29wdGlvbnM9e31dIEFuIG9iamVjdCBob2xkaW5nXG4gKiAgIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBjb250cm9sbGluZyB0aGUgcGFyYWdyYXBoIGNyZWF0aW9uLlxuICogQHJldHVybnMge0hUTUxFbGVtZW50fSBBIGNvbnRhaW5lciBob2xkaW5nIHRoZSBuZXdseS1jcmVhdGVkIHBhcmFncmFwaFxuICogICBlbGVtZW50cy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUGFyYWdyYXBocyhwYXJhZ3JhcGhzLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGlmIChvcHRpb25zPy5jb250YWluZXI/LmlkKSBjb250YWluZXIuaWQgPSBvcHRpb25zLmNvbnRhaW5lci5pZDtcbiAgaWYgKG9wdGlvbnM/LmNvbnRhaW5lcj8uY2xhc3NMaXN0KSB7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoLi4ub3B0aW9ucy5jb250YWluZXIuY2xhc3NMaXN0KTtcbiAgfVxuICBjb25zdCBwQXJyYXkgPSBBcnJheS5pc0FycmF5KHBhcmFncmFwaHMpID8gcGFyYWdyYXBocyA6IFtwYXJhZ3JhcGhzXTtcbiAgcEFycmF5LmZvckVhY2goKHBhcmFncmFwaCkgPT4ge1xuICAgIGNvbnN0IHBFbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGlmIChvcHRpb25zPy5jbGFzc0xpc3QpIHBFbGVtLmNsYXNzTGlzdC5hZGQoLi4ub3B0aW9ucy5jbGFzc0xpc3QpO1xuXG4gICAgbGV0IGZyYWdtZW50cyA9IG51bGw7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYWdyYXBoKSkge1xuICAgICAgLy8gQ29udmVydCBhcnJheSBvZiBzdHJpbmdzIHRvIGFycmF5IG9mIGZyYWdtZW50IG9iamVjdHNcbiAgICAgIGZyYWdtZW50cyA9IHBhcmFncmFwaC5tYXAoKGZyYWdtZW50KSA9PiAoe1xuICAgICAgICBjb250ZW50OiBmcmFnbWVudCxcbiAgICAgIH0pKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJhZ3JhcGggPT09ICdzdHJpbmcnKSB7XG4gICAgICBmcmFnbWVudHMgPSBbeyBjb250ZW50OiBwYXJhZ3JhcGggfV07XG4gICAgfSBlbHNlIGlmIChwYXJhZ3JhcGguY29udGVudCA9PSBudWxsKSB7XG4gICAgICBmcmFnbWVudHMgPSBbXTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYWdyYXBoLmNvbnRlbnQpKSB7XG4gICAgICBmcmFnbWVudHMgPSBwYXJhZ3JhcGguY29udGVudC5tYXAoKGZyYWdtZW50KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZnJhZ21lbnQgPT09ICdzdHJpbmcnKSByZXR1cm4geyBjb250ZW50OiBmcmFnbWVudCB9O1xuICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhlIHBhcmFncmFwaCBpcyBhbiBvYmplY3RcbiAgICAgIGlmIChwYXJhZ3JhcGguaWQpIHBFbGVtLmlkID0gcGFyYWdyYXBoLmlkO1xuICAgICAgaWYgKHBhcmFncmFwaC5jbGFzc0xpc3QpIHBFbGVtLmNsYXNzTGlzdC5hZGQoLi4ucGFyYWdyYXBoLmNsYXNzTGlzdCk7XG5cbiAgICAgIGlmICh0eXBlb2YgcGFyYWdyYXBoLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZyYWdtZW50cyA9IFt7IGNvbnRlbnQ6IHBhcmFncmFwaC5jb250ZW50IH1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJhZ21lbnRzID0gW3BhcmFncmFwaC5jb250ZW50XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmcmFnbWVudHMuZm9yRWFjaCgoZnJhZ21lbnQpID0+IHtcbiAgICAgIGxldCBub2RlID0gbnVsbDtcblxuICAgICAgaWYgKGZyYWdtZW50LnVybCAhPSBudWxsKSB7XG4gICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIG5vZGUudGV4dENvbnRlbnQgPSBmcmFnbWVudC5jb250ZW50ID8/ICcnO1xuICAgICAgICBub2RlLmhyZWYgPSBmcmFnbWVudC51cmw7XG4gICAgICAgIGlmIChmcmFnbWVudC50YXJnZXQgIT0gbnVsbCkgbm9kZS50YXJnZXQgPSBmcmFnbWVudC50YXJnZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZnJhZ21lbnQuY29udGVudCA/PyAnJyk7XG4gICAgICB9XG5cbiAgICAgIHBFbGVtLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH0pO1xuXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBFbGVtKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRhaW5lcjtcbn1cblxuZXhwb3J0IHtcbiAgY3JlYXRlRGF0ZUlucHV0RmllbGQsXG4gIGNyZWF0ZUZvcm1Db250cm9sLFxuICBjcmVhdGVJbWFnZUJ1dHRvbixcbiAgY3JlYXRlUGFyYWdyYXBocyxcbiAgY3JlYXRlVG9nZ2xlQnV0dG9uLFxufTtcbiIsIi8qKlxuICogRGVmaW5lcyBzdG9yYWdlLXJlbGF0ZWQgdXRpbGl0eSBmdW5jdGlvbnMuXG4gKiBAbW9kdWxlIHN0b3JhZ2VcbiAqL1xuXG5sZXQgc3RvcmFnZVN1cHBvcnRlZCA9IG51bGw7XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IGxvY2FsIHN0b3JhZ2UgaXMgc3VwcG9ydGVkIGFuZCBlbmFibGVkIGluIHRoZVxuICogYnJvd3Nlci4gVGhlIGNoZWNrIGlzIG9ubHkgcGVyZm9ybWVkIG9uY2U6IHN1YnNlcXVlbnQgY2FsbHMgd2lsbCBpbW1lZGlhdGVseVxuICogcmV0dXJuIHRoZSBzYW1lIHZhbHVlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgbG9jYWwgc3RvcmFnZSBpcyBzdXBwb3J0ZWQgYW5kIGVuYWJsZWQsIGFuZCBmYWxzZVxuICogICBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGlzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkge1xuICBpZiAoc3RvcmFnZVN1cHBvcnRlZCAhPT0gbnVsbCkgcmV0dXJuIHN0b3JhZ2VTdXBwb3J0ZWQ7XG5cbiAgbGV0IHN0b3JhZ2U7XG4gIHRyeSB7XG4gICAgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2U7XG4gICAgY29uc3QgdGVzdEl0ZW0gPSAnX19zdG9yYWdlLXRlc3QnO1xuICAgIHN0b3JhZ2Uuc2V0SXRlbSh0ZXN0SXRlbSwgdGVzdEl0ZW0pO1xuICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh0ZXN0SXRlbSk7XG4gICAgc3RvcmFnZVN1cHBvcnRlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzdG9yYWdlU3VwcG9ydGVkID0gZSBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiAoXG4gICAgICBlLmNvZGUgPT09IDIyIHx8IGUuY29kZSA9PT0gMTAxNCB8fCBlLm5hbWUgPT09ICdRdW90YUV4Y2VlZGVkRXJyb3InXG4gICAgICB8fCBlLm5hbWUgPT09ICdOU19FUlJPUl9ET01fUVVPVEFfUkVBQ0hFRCdcbiAgICApICYmIChzdG9yYWdlICYmIHN0b3JhZ2UubGVuZ3RoICE9PSAwKTtcbiAgfVxuXG4gIHJldHVybiBzdG9yYWdlU3VwcG9ydGVkO1xufVxuXG4vKipcbiAqIFN0b3JlIGRhdGEgaW4gdGhlIGJyb3dzZXIncyBsb2NhbCBzdG9yYWdlLCBpZiBhdmFpbGFibGUuIFRoaXMgZnVuY3Rpb24gd2lsbFxuICogYXNzb2NpYXRlIHRoZSBnaXZlbiBrZXkgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUgaW4gc3RvcmFnZS4gVGhlIHZhbHVlIGlzIGZpcnN0XG4gKiBjb252ZXJ0ZWQgdG8gSlNPTiBmb3JtYXQgYmVmb3JlIGJlaW5nIHN0b3JlZC5cbiAqIEBwYXJhbSB7P3N0cmluZ30gcHJlZml4IEEgcHJlZml4IHRvIHVzZSBmb3IgdGhlIGtleSBuYW1lIHRvIGF2b2lkIGNsYXNoZXNcbiAqICAgd2l0aCBvdGhlciB3ZWIgYXBwcyBob3N0ZWQgb24gdGhlIHNhbWUgb3JpZ2luLiBJZiBnaXZlbiwgdGhlIGFjdHVhbCBrZXlcbiAqICAgdXNlZCB3aWxsIGhhdmUgdGhlIGZvcm0gJ3ByZWZpeC5rZXknLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNyZWF0ZSBvciB1cGRhdGUuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBkYXRhIHdhcyBzdWNjZXNzZnVsbHkgc3RvcmVkLCBhbmQgZmFsc2VcbiAqICAgb3RoZXJ3aXNlLiBQb3NzaWJsZSByZWFzb25zIGZvciByZXR1cm5pbmcgZmFsc2UgaW5jbHVkZSBsb2NhbCBzdG9yYWdlXG4gKiAgIGJlaW5nIHVuc3VwcG9ydGVkIG9yIGRpc2FibGVkLCBvciBzdG9yYWdlIGxpbWl0cyBiZWluZyBleGNlZWRlZC5cbiAqL1xuZnVuY3Rpb24gc3RvcmVEYXRhKHByZWZpeCwga2V5LCB2YWx1ZSkge1xuICBpZiAoIWlzTG9jYWxTdG9yYWdlU3VwcG9ydGVkKCkpIHJldHVybiBmYWxzZTtcblxuICBjb25zdCBmdWxsS2V5ID0gcHJlZml4ID8gYCR7cHJlZml4fS4ke2tleX1gIDoga2V5O1xuXG4gIHRyeSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKGZ1bGxLZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHJpZXZlIGRhdGEgZnJvbSB0aGUgYnJvd3NlcidzIGxvY2FsIHN0b3JhZ2UsIGlmIGF2YWlsYWJsZS4gVGhpcyBmdW5jdGlvblxuICogd2lsbCByZXR1cm4gdGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBnaXZlbiBrZXkuIFRoZSBkYXRhIGlzIGNvbnZlcnRlZFxuICogZnJvbSBKU09OIGZvcm1hdCBhbmQgdGhlIHJlc3VsdGluZyB2YWx1ZSBvciBvYmplY3QgaXMgdXNlZCBhcyB0aGUgcmV0dXJuXG4gKiB2YWx1ZS4gSWYgdGhlIGtleSBkb2VzIG5vdCBleGlzdCBvciBpZiBsb2NhbCBzdG9yYWdlIGlzIG5vdCBhdmFpbGFibGUsIG51bGxcbiAqIGlzIHJldHVybmVkLlxuICogQHBhcmFtIHs/c3RyaW5nfSBwcmVmaXggVGhlIHByZWZpeCBmb3IgdGhlIGtleSBuYW1lIHdob3NlIHZhbHVlIGlzIHRvIGJlXG4gKiAgIHJldHJpZXZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSB3aG9zZSB2YWx1ZSBpcyB0byBiZSByZXRyaWV2ZWQuXG4gKiBAcmV0dXJucyB7Kn0gVGhlIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXksIG9yIG51bGwgaWYgbm90IGZvdW5kLlxuICovXG5mdW5jdGlvbiByZXRyaWV2ZURhdGEocHJlZml4LCBrZXkpIHtcbiAgaWYgKCFpc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSByZXR1cm4gbnVsbDtcblxuICBjb25zdCBmdWxsS2V5ID0gcHJlZml4ID8gYCR7cHJlZml4fS4ke2tleX1gIDoga2V5O1xuXG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGZ1bGxLZXkpKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZGF0YSBmcm9tIHRoZSBicm93c2VyJ3MgbG9jYWwgc3RvcmFnZS4gSWYgaXQgZXhpc3RzLCB0aGUgZ2l2ZW4ga2V5XG4gKiBhbmQgaXRzIGFzc29jaWF0ZWQgZGF0YSB3aWxsIGJlIHJlbW92ZWQgZnJvbSBzdG9yYWdlLlxuICogQHBhcmFtIHs/c3RyaW5nfSBwcmVmaXggVGhlIHByZWZpeCBmb3IgdGhlIGtleSB0byBiZSByZW1vdmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IHRvIGJlIHJlbW92ZWQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUga2V5IHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC4gSWYgdGhlIGtleSB3YXMgbm90XG4gKiAgIGZvdW5kIG9yIGlmIGxvY2FsIHN0b3JhZ2UgaXMgdW5hdmFpbGFibGUsIHJldHVybnMgZmFsc2UuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZURhdGEocHJlZml4LCBrZXkpIHtcbiAgaWYgKCFpc0xvY2FsU3RvcmFnZVN1cHBvcnRlZCgpKSByZXR1cm4gZmFsc2U7XG5cbiAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHByZWZpeCA/IGAke3ByZWZpeH0uJHtrZXl9YCA6IGtleSk7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEV4ZWN1dGUgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIG9uIGVhY2ggaXRlbSBpbiB0aGUgYnJvd3NlcidzIGxvY2FsIHN0b3JhZ2VcbiAqIGFyZWEsIG9yIG9uIGVhY2ggaXRlbSBoYXZpbmcgYSBnaXZlbiBwcmVmaXguXG4gKiBAcGFyYW0gez9zdHJpbmd9IHByZWZpeCBUaGUgcHJlZml4IGZvciB0aGUga2V5cyB0byBpdGVyYXRlIG92ZXIuIElmIG5vdFxuICogICBnaXZlbiwgdGhlbiBhbGwgaXRlbXMgd2lsbCBiZSBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiAgIG1hdGNoaW5nIHN0b3JhZ2UgaXRlbS4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgcGFzc2VkIHRoZSBrZXkgKGJ5IGRlZmF1bHRcbiAqICAgd2l0aG91dCB0aGUgcHJlZml4KSwgdGhlIHZhbHVlICh1bmxlc3MgdXNpbmcgdGhlIG5vVmFsdWUgb3B0aW9uKSwgYW5kIHRoZVxuICogICBpbmRleC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gQW4gb2JqZWN0IGhvbGRpbmcgYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGVcbiAqICAgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmluY2x1ZGVQcmVmaXhdIElmIHNldCB0byB0cnVlLCB0aGVuIHRoZSBjYWxsYmFja1xuICogICBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgdGhlIGZ1bGwga2V5LCB3aXRoIHRoZSBwcmVmaXggaW5jbHVkZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLm5vVmFsdWVdIElmIHNldCB0byB0cnVlLCB0aGVuIG9ubHkgdGhlIGtleSBhbmRcbiAqICAgaW5kZXggZm9yIHRoZSBkYXRhIGl0ZW0gd2lsbCBiZSBwYXNzZWQgdG8gdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLiBCeSBub3RcbiAqICAgcmV0cmlldmluZyBhbmQgZGVzZXJpYWxpemluZyBldmVyeSB2YWx1ZSwgdGhpcyBjYW4gc2F2ZSB0aW1lIGlmIHRoZSBjYWxsZXJcbiAqICAgZG9lcyBub3QgbmVlZCBldmVyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaERhdGFJdGVtKHByZWZpeCwgY2FsbGJhY2ssIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgIGNvbnN0IHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdG9yYWdlLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBrZXkgPSBzdG9yYWdlLmtleShpKTtcbiAgICAgIGlmICghcHJlZml4IHx8IGtleS5zdGFydHNXaXRoKGAke3ByZWZpeH0uYCkpIHtcbiAgICAgICAgY29uc3QgbG9jYWxLZXkgPSAocHJlZml4ICYmICFvcHRpb25zLmluY2x1ZGVQcmVmaXgpXG4gICAgICAgICAgPyBrZXkuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGggKyAxKSA6IGtleTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLm5vVmFsdWUgPyBudWxsIDogcmV0cmlldmVEYXRhKG51bGwsIGtleSk7XG5cbiAgICAgICAgaWYgKHZhbHVlKSBjYWxsYmFjayhsb2NhbEtleSwgdmFsdWUsIGkpO1xuICAgICAgICBlbHNlIGNhbGxiYWNrKGxvY2FsS2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDbGVhciBhbGwgZGF0YSBmcm9tIHRoZSBicm93c2VyJ3MgbG9jYWwgc3RvcmFnZS4gSWYgbG9jYWwgc3RvcmFnZSBpc1xuICogdW5zdXBwb3J0ZWQgb3IgZGlzYWJsZWQsIG5vdGhpbmcgaGFwcGVucy5cbiAqIEBwYXJhbSB7P3N0cmluZ30gcHJlZml4IFRoZSBwcmVmaXggZm9yIHRoZSBrZXlzIHRvIGJlIHJlbW92ZWQuIElmIG5vdCBnaXZlbixcbiAqICAgdGhlbiBldmVyeXRoaW5nIHN0b3JlZCBpbiBsb2NhbCBzdG9yYWdlIHdpbGwgYmUgcmVtb3ZlZC5cbiAqL1xuZnVuY3Rpb24gY2xlYXJEYXRhKHByZWZpeCkge1xuICBpZiAoaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQoKSkge1xuICAgIGNvbnN0IHN0b3JhZ2UgPSB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICAgIGlmIChwcmVmaXgpIHtcbiAgICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICAgIGZvckVhY2hEYXRhSXRlbShcbiAgICAgICAgcHJlZml4LFxuICAgICAgICAoa2V5KSA9PiBrZXlzLnB1c2goa2V5KSxcbiAgICAgICAgeyBpbmNsdWRlUHJlZml4OiB0cnVlLCBub1ZhbHVlOiB0cnVlIH0sXG4gICAgICApO1xuICAgICAga2V5cy5mb3JFYWNoKChrZXkpID0+IHJlbW92ZURhdGEobnVsbCwga2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3JhZ2UuY2xlYXIoKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHRleHQgZmlsZSwgYW5kIHByZXNlbnQgaXQgdG8gdGhlIHVzZXIgYXMgYSBkb3dubG9hZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IFRoZSB0ZXh0IGRhdGEgdG8gc3RvcmUgaW4gdGhlIGZpbGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgVGhlIGRlZmF1bHQgZmlsZSBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlPXRleHQvcGxhaW5dIFRoZSBJbnRlcm5ldCBtZWRpYSB0eXBlIGZvciB0aGUgZmlsZS4gRm9yXG4gKiAgIGV4YW1wbGUsICdhcHBsaWNhdGlvbi9qc29uJyB3b3VsZCBpbmRpY2F0ZSBhIEpTT04gZmlsZSwgYW5kICd0ZXh0L2NzdidcbiAqICAgd291bGQgaW5kaWNhdGUgYSBmaWxlIGNvbnRhaW5pbmcgY29tbWEtc2VwYXJhdGVkIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVGaWxlKGNvbnRlbnQsIGZpbGVuYW1lLCB0eXBlID0gJ3RleHQvcGxhaW4nKSB7XG4gIGNvbnN0IGRhdGEgPSBuZXcgQmxvYihbY29udGVudF0sIHsgdHlwZSB9KTtcbiAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChkYXRhKTtcblxuICBjb25zdCBsaW5rRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgbGlua0VsZW0uaHJlZiA9IHVybDtcbiAgbGlua0VsZW0uZG93bmxvYWQgPSBmaWxlbmFtZTtcbiAgbGlua0VsZW0uY2xpY2soKTtcbiAgc2V0VGltZW91dCgoKSA9PiBVUkwucmV2b2tlT2JqZWN0VVJMKHVybCksIDApO1xufVxuXG4vKipcbiAqIFJlYWQgdGhlIGNvbnRlbnRzIG9mIGEgdGV4dCBmaWxlLiBUaGUgZmlsZSBjb250ZW50cyBhcmUgcGFzc2VkIHRvIHRoZVxuICogc3BlY2lmaWVkIGNhbGxiYWNrIGZ1bmN0aW9uIG9uY2UgdGhlIHJlYWQgb3BlcmF0aW9uIGlzIGNvbXBsZXRlLlxuICogQHBhcmFtIHtCbG9ifSBmaWxlIFRoZSBmaWxlIHRvIGJlIHJlYWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIHJlY2VpdmUgdGhlIGZpbGVcbiAqICAgY29udGVudHMuIElmIGFuIGVycm9yIG9jY3VycywgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIGFcbiAqICAgbnVsbCBhcmd1bWVudCBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiByZWFkRmlsZShmaWxlLCBjYWxsYmFjaykge1xuICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IGNhbGxiYWNrKHJlYWRlci5yZXN1bHQpKTtcbiAgcmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKCkgPT4gY2FsbGJhY2sobnVsbCkpO1xuICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiBjYWxsYmFjayhudWxsKSk7XG4gIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2Ygc3RyaW5ncyB0byBjb21tYS1zZXBhcmF0ZWQgdmFsdWVzIChDU1YgZm9ybWF0LCBhc1xuICogZGVzY3JpYmVkIGJ5IHRoZVxuICogW1JGQyA0MTgwXXtAbGluayBodHRwczovL2RhdGF0cmFja2VyLmlldGYub3JnL2RvYy9odG1sL3JmYzQxODB9XG4gKiBzcGVjaWZpY2F0aW9uKS4gVGhpcyBmdW5jdGlvbiB3aWxsIGNyZWF0ZSBvbmUgQ1NWIHJlY29yZCwgd2hpY2ggY2FuIHRoZW4gYmVcbiAqIGNvbWJpbmVkIHdpdGggb3RoZXIgcmVjb3JkcyB0byBmb3JtIGEgY29tcGxldGUgQ1NWIGZpbGUuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBkYXRhIEFuIGFycmF5IG9mIHN0cmluZ3Mgc3BlY2lmeWluZyB0aGUgdmFsdWVzIGZvciB0aGVcbiAqICAgZmllbGRzIGluIHRoZSByZWNvcmQuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIEFuIG9iamVjdCBzcGVjaWZ5aW5nIG9wdGlvbnMgZm9yIHRoZVxuICogICBjb252ZXJzaW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm5ld2xpbmVTZXF1ZW5jZV0gVGhlIGNoYXJhY3RlciBzZXF1ZW5jZSB0byB1c2UgZm9yXG4gKiAgIG5ld2xpbmVzLiBJZiBub3QgcHJvdmlkZWQsIGEgY2FycmlhZ2UgcmV0dXJuL2xpbmUgZmVlZCBwYWlyIChDUkxGKSBpc1xuICogICB1c2VkLiBBbGwgbmV3bGluZSBjaGFyYWN0ZXJzIHdpdGhpbiBlYWNoIGZpZWxkIHdpbGwgYmUgcmVwbGFjZWQgYnkgdGhpc1xuICogICBzZXF1ZW5jZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSByZWNvcmQgaW4gQ1NWIGZvcm1hdC4gVGhlIHJldHVybmVkIHN0cmluZyBpcyBub3RcbiAqICAgdGVybWluYXRlZCBieSBhIG5ld2xpbmUsIGJ1dCBtYXkgY29udGFpbiBxdW90ZWQgbmV3bGluZXMgd2l0aGluIHRoZSBmaWVsZFxuICogICBkYXRhLlxuICovXG5mdW5jdGlvbiBhcnJheVRvQ3N2UmVjb3JkKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBuZXdsaW5lU2VxdWVuY2UgPSBvcHRpb25zLm5ld2xpbmVTZXF1ZW5jZSA/PyAnXFxyXFxuJztcblxuICBjb25zdCBmaWVsZHMgPSBbXTtcbiAgZGF0YS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgIGxldCBuZWVkUXVvdGVzID0gZmFsc2U7XG4gICAgY29uc3QgcmVzdWx0ID0gdmFsdWUucmVwbGFjZSgvLHxcInxcXHJcXG58XFxufFxcci9nLCAobWF0Y2gpID0+IHtcbiAgICAgIG5lZWRRdW90ZXMgPSB0cnVlO1xuICAgICAgc3dpdGNoIChtYXRjaCkge1xuICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgcmV0dXJuICdcIlwiJztcbiAgICAgICAgY2FzZSAnXFxyXFxuJzpcbiAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICByZXR1cm4gbmV3bGluZVNlcXVlbmNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZpZWxkcy5wdXNoKG5lZWRRdW90ZXMgPyBgXCIke3Jlc3VsdH1cImAgOiByZXN1bHQpO1xuICB9KTtcblxuICByZXR1cm4gZmllbGRzLmpvaW4oJywnKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGRhdGEgaW4gY29tbWEtc2VwYXJhdGVkIHZhbHVlIChDU1YpIGZvcm1hdCBpbnRvIGFuIGFycmF5IG9mIGFycmF5c1xuICogb2Ygc3RyaW5ncy4gRWFjaCBkYXRhIHJlY29yZCBpcyBzdG9yZWQgYXMgYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoaW4gdGhlXG4gKiBvdXRlciBhcnJheSwgd2l0aCBlYWNoIHN0cmluZyBjb3JyZXNwb25kaW5nIHRvIGEgZmllbGQgaW4gdGhlIHJlY29yZC4gQW55XG4gKiBuZXdsaW5lIHNlcXVlbmNlcyAoQ1JMRiwgTEYsIG9yIENSKSBhcmUgY29udmVydGVkIHRvIGxpbmVmZWVkIChMRilcbiAqIGNoYXJhY3RlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YSBUaGUgZGF0YSBpbiBDU1YgZm9ybWF0LlxuICogQHJldHVybnMge3N0cmluZ1tdW119IEFuIGFycmF5IG9mIHN0cmluZyBhcnJheXMuIEVhY2ggaW5uZXIgYXJyYXkgY29udGFpbnNcbiAqICAgdGhlIGZpZWxkcyBmb3Igb25lIHJlY29yZC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VDc3YoZGF0YSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcblxuICBsZXQgY3VycmVudFJvdyA9IFtdO1xuICBsZXQgY3VycmVudEZpZWxkID0gJyc7XG5cbiAgY29uc3QgY29tbWl0RmllbGQgPSAoKSA9PiB7XG4gICAgY3VycmVudFJvdy5wdXNoKGN1cnJlbnRGaWVsZCk7XG4gICAgY3VycmVudEZpZWxkID0gJyc7XG4gIH07XG4gIGNvbnN0IGNvbW1pdFJvdyA9ICgpID0+IHtcbiAgICByZXN1bHQucHVzaChjdXJyZW50Um93KTtcbiAgICBjdXJyZW50Um93ID0gW107XG4gIH07XG5cbiAgbGV0IHF1b3RlZCA9IGZhbHNlO1xuICBmb3IgKGxldCBwb3MgPSAwOyBwb3MgPCBkYXRhLmxlbmd0aDsgcG9zICs9IDEpIHtcbiAgICBzd2l0Y2ggKGRhdGFbcG9zXSkge1xuICAgICAgY2FzZSAnXCInOlxuICAgICAgICBpZiAoIXF1b3RlZCkge1xuICAgICAgICAgIHF1b3RlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zICsgMSA8IGRhdGEubGVuZ3RoICYmIGRhdGFbcG9zICsgMV0gPT09ICdcIicpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgZG91YmxlIGRvdWJsZSBxdW90ZSwgc28gY29udmVydCBpdCBhbmQgbW92ZSB0byBuZXh0IGNoYXJcbiAgICAgICAgICBjdXJyZW50RmllbGQgKz0gJ1wiJztcbiAgICAgICAgICBwb3MgKz0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBOb3QgYSBkb3VibGUgZG91YmxlIHF1b3RlLCBzbyB0aGUgcXVvdGluZyBlbmRzIGhlcmVcbiAgICAgICAgICBxdW90ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1xccic6XG4gICAgICBjYXNlICdcXG4nOlxuICAgICAgICAvLyBIYW5kbGUgQ1JMRiBzZXF1ZW5jZVxuICAgICAgICBpZiAoZGF0YVtwb3NdID09PSAnXFxyJ1xuICAgICAgICAgICYmIHBvcyArIDEgPCBkYXRhLmxlbmd0aCAmJiBkYXRhW3BvcyArIDFdID09PSAnXFxuJykge1xuICAgICAgICAgIHBvcyArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1b3RlZCkge1xuICAgICAgICAgIGN1cnJlbnRGaWVsZCArPSAnXFxuJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21taXRGaWVsZCgpO1xuICAgICAgICAgIGNvbW1pdFJvdygpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnLCc6XG4gICAgICAgIGlmIChxdW90ZWQpIGN1cnJlbnRGaWVsZCArPSAnLCc7XG4gICAgICAgIGVsc2UgY29tbWl0RmllbGQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjdXJyZW50RmllbGQgKz0gZGF0YVtwb3NdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyBDb21taXQgbGFzdCBlbnRyeSBpZiBsYXN0IGNoYXJhY3RlciB3YXMgbm90IGEgbmV3bGluZVxuICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgbGFzdENoYXIgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV07XG4gICAgaWYgKGxhc3RDaGFyICE9PSAnXFxyJyAmJiBsYXN0Q2hhciAhPT0gJ1xcbicpIHtcbiAgICAgIGNvbW1pdEZpZWxkKCk7XG4gICAgICBjb21taXRSb3coKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dHJhY3QgdGhlIGV4dGVuc2lvbiBmcm9tIGEgZmlsZSBuYW1lLiBUaGUgZXh0ZW5zaW9uLCBmb3IgdGhlIHB1cnBvc2VzIG9mXG4gKiB0aGlzIGZ1bmN0aW9uLCBpcyBjb25zaWRlcmVkIHRvIGJlIHRoZSBwb3J0aW9uIG9mIHRoZSBmaWxlbmFtZSBzdGFydGluZyBmcm9tXG4gKiAoYW5kIGluY2x1ZGluZykgdGhlIGxhc3QgcGVyaW9kIGluIHRoZSBuYW1lIGFuZCBleHRlbmRpbmcgdG8gdGhlIGVuZCBvZiB0aGVcbiAqIG5hbWUuIElmIHRoZXJlIGlzIG5vIHBlcmlvZCBpbiB0aGUgbmFtZSwgb3IgaWYgdGhlIG9ubHkgcGVyaW9kIGlzIGxvY2F0ZWQgYXRcbiAqIHRoZSB2ZXJ5IHN0YXJ0IG9mIHRoZSBuYW1lIChhcyBzZWVuIHdpdGggZG90ZmlsZXMgb24gVW5peCBzeXN0ZW1zLCBmb3JcbiAqIGV4YW1wbGUpLCB0aGVuIHRoZSBmaWxlIGlzIGNvbnNpZGVyZWQgdG8gaGF2ZSBubyBleHRlbnNpb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgVGhlIG5hbWUgb2YgdGhlIGZpbGUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZmlsZSdzIGV4dGVuc2lvbiwgaW5jbHVkaW5nIHRoZSBwZXJpb2QuIElmIHRoZSBmaWxlXG4gKiAgIGhhcyBubyBleHRlbnNpb24sIGFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gZ2V0RmlsZUV4dGVuc2lvbihmaWxlbmFtZSkge1xuICBjb25zdCBpbmRleCA9IGZpbGVuYW1lLmxhc3RJbmRleE9mKCcuJyk7XG4gIHJldHVybiAoaW5kZXggPiAwKSA/IGZpbGVuYW1lLnN1YnN0cmluZyhpbmRleCkgOiAnJztcbn1cblxuZXhwb3J0IHtcbiAgYXJyYXlUb0NzdlJlY29yZCxcbiAgY2xlYXJEYXRhLFxuICBmb3JFYWNoRGF0YUl0ZW0sXG4gIGdlbmVyYXRlRmlsZSxcbiAgZ2V0RmlsZUV4dGVuc2lvbixcbiAgaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQsXG4gIHBhcnNlQ3N2LFxuICByZWFkRmlsZSxcbiAgcmVtb3ZlRGF0YSxcbiAgcmV0cmlldmVEYXRhLFxuICBzdG9yZURhdGEsXG59O1xuIiwiLypcbiAqIGNsYXNzTGlzdC5qczogQ3Jvc3MtYnJvd3NlciBmdWxsIGVsZW1lbnQuY2xhc3NMaXN0IGltcGxlbWVudGF0aW9uLlxuICogMS4yLjIwMTcxMjEwXG4gKlxuICogQnkgRWxpIEdyZXksIGh0dHA6Ly9lbGlncmV5LmNvbVxuICogTGljZW5zZTogRGVkaWNhdGVkIHRvIHRoZSBwdWJsaWMgZG9tYWluLlxuICogICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvY2xhc3NMaXN0LmpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbiAqL1xuXG4vKmdsb2JhbCBzZWxmLCBkb2N1bWVudCwgRE9NRXhjZXB0aW9uICovXG5cbi8qISBAc291cmNlIGh0dHA6Ly9wdXJsLmVsaWdyZXkuY29tL2dpdGh1Yi9jbGFzc0xpc3QuanMvYmxvYi9tYXN0ZXIvY2xhc3NMaXN0LmpzICovXG5cbmlmIChcImRvY3VtZW50XCIgaW4gc2VsZikge1xuXG4vLyBGdWxsIHBvbHlmaWxsIGZvciBicm93c2VycyB3aXRoIG5vIGNsYXNzTGlzdCBzdXBwb3J0XG4vLyBJbmNsdWRpbmcgSUUgPCBFZGdlIG1pc3NpbmcgU1ZHRWxlbWVudC5jbGFzc0xpc3RcbmlmIChcblx0ICAgIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpKVxuXHR8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlNcblx0JiYgIShcImNsYXNzTGlzdFwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXCJnXCIpKVxuKSB7XG5cbihmdW5jdGlvbiAodmlldykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaWYgKCEoJ0VsZW1lbnQnIGluIHZpZXcpKSByZXR1cm47XG5cbnZhclxuXHQgIGNsYXNzTGlzdFByb3AgPSBcImNsYXNzTGlzdFwiXG5cdCwgcHJvdG9Qcm9wID0gXCJwcm90b3R5cGVcIlxuXHQsIGVsZW1DdHJQcm90byA9IHZpZXcuRWxlbWVudFtwcm90b1Byb3BdXG5cdCwgb2JqQ3RyID0gT2JqZWN0XG5cdCwgc3RyVHJpbSA9IFN0cmluZ1twcm90b1Byb3BdLnRyaW0gfHwgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpO1xuXHR9XG5cdCwgYXJySW5kZXhPZiA9IEFycmF5W3Byb3RvUHJvcF0uaW5kZXhPZiB8fCBmdW5jdGlvbiAoaXRlbSkge1xuXHRcdHZhclxuXHRcdFx0ICBpID0gMFxuXHRcdFx0LCBsZW4gPSB0aGlzLmxlbmd0aFxuXHRcdDtcblx0XHRmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fVxuXHQvLyBWZW5kb3JzOiBwbGVhc2UgYWxsb3cgY29udGVudCBjb2RlIHRvIGluc3RhbnRpYXRlIERPTUV4Y2VwdGlvbnNcblx0LCBET01FeCA9IGZ1bmN0aW9uICh0eXBlLCBtZXNzYWdlKSB7XG5cdFx0dGhpcy5uYW1lID0gdHlwZTtcblx0XHR0aGlzLmNvZGUgPSBET01FeGNlcHRpb25bdHlwZV07XG5cdFx0dGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcblx0fVxuXHQsIGNoZWNrVG9rZW5BbmRHZXRJbmRleCA9IGZ1bmN0aW9uIChjbGFzc0xpc3QsIHRva2VuKSB7XG5cdFx0aWYgKHRva2VuID09PSBcIlwiKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXgoXG5cdFx0XHRcdCAgXCJTWU5UQVhfRVJSXCJcblx0XHRcdFx0LCBcIlRoZSB0b2tlbiBtdXN0IG5vdCBiZSBlbXB0eS5cIlxuXHRcdFx0KTtcblx0XHR9XG5cdFx0aWYgKC9cXHMvLnRlc3QodG9rZW4pKSB7XG5cdFx0XHR0aHJvdyBuZXcgRE9NRXgoXG5cdFx0XHRcdCAgXCJJTlZBTElEX0NIQVJBQ1RFUl9FUlJcIlxuXHRcdFx0XHQsIFwiVGhlIHRva2VuIG11c3Qgbm90IGNvbnRhaW4gc3BhY2UgY2hhcmFjdGVycy5cIlxuXHRcdFx0KTtcblx0XHR9XG5cdFx0cmV0dXJuIGFyckluZGV4T2YuY2FsbChjbGFzc0xpc3QsIHRva2VuKTtcblx0fVxuXHQsIENsYXNzTGlzdCA9IGZ1bmN0aW9uIChlbGVtKSB7XG5cdFx0dmFyXG5cdFx0XHQgIHRyaW1tZWRDbGFzc2VzID0gc3RyVHJpbS5jYWxsKGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIilcblx0XHRcdCwgY2xhc3NlcyA9IHRyaW1tZWRDbGFzc2VzID8gdHJpbW1lZENsYXNzZXMuc3BsaXQoL1xccysvKSA6IFtdXG5cdFx0XHQsIGkgPSAwXG5cdFx0XHQsIGxlbiA9IGNsYXNzZXMubGVuZ3RoXG5cdFx0O1xuXHRcdGZvciAoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHRoaXMucHVzaChjbGFzc2VzW2ldKTtcblx0XHR9XG5cdFx0dGhpcy5fdXBkYXRlQ2xhc3NOYW1lID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLnRvU3RyaW5nKCkpO1xuXHRcdH07XG5cdH1cblx0LCBjbGFzc0xpc3RQcm90byA9IENsYXNzTGlzdFtwcm90b1Byb3BdID0gW11cblx0LCBjbGFzc0xpc3RHZXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIG5ldyBDbGFzc0xpc3QodGhpcyk7XG5cdH1cbjtcbi8vIE1vc3QgRE9NRXhjZXB0aW9uIGltcGxlbWVudGF0aW9ucyBkb24ndCBhbGxvdyBjYWxsaW5nIERPTUV4Y2VwdGlvbidzIHRvU3RyaW5nKClcbi8vIG9uIG5vbi1ET01FeGNlcHRpb25zLiBFcnJvcidzIHRvU3RyaW5nKCkgaXMgc3VmZmljaWVudCBoZXJlLlxuRE9NRXhbcHJvdG9Qcm9wXSA9IEVycm9yW3Byb3RvUHJvcF07XG5jbGFzc0xpc3RQcm90by5pdGVtID0gZnVuY3Rpb24gKGkpIHtcblx0cmV0dXJuIHRoaXNbaV0gfHwgbnVsbDtcbn07XG5jbGFzc0xpc3RQcm90by5jb250YWlucyA9IGZ1bmN0aW9uICh0b2tlbikge1xuXHRyZXR1cm4gfmNoZWNrVG9rZW5BbmRHZXRJbmRleCh0aGlzLCB0b2tlbiArIFwiXCIpO1xufTtcbmNsYXNzTGlzdFByb3RvLmFkZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyXG5cdFx0ICB0b2tlbnMgPSBhcmd1bWVudHNcblx0XHQsIGkgPSAwXG5cdFx0LCBsID0gdG9rZW5zLmxlbmd0aFxuXHRcdCwgdG9rZW5cblx0XHQsIHVwZGF0ZWQgPSBmYWxzZVxuXHQ7XG5cdGRvIHtcblx0XHR0b2tlbiA9IHRva2Vuc1tpXSArIFwiXCI7XG5cdFx0aWYgKCF+Y2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKSkge1xuXHRcdFx0dGhpcy5wdXNoKHRva2VuKTtcblx0XHRcdHVwZGF0ZWQgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHR3aGlsZSAoKytpIDwgbCk7XG5cblx0aWYgKHVwZGF0ZWQpIHtcblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0dmFyXG5cdFx0ICB0b2tlbnMgPSBhcmd1bWVudHNcblx0XHQsIGkgPSAwXG5cdFx0LCBsID0gdG9rZW5zLmxlbmd0aFxuXHRcdCwgdG9rZW5cblx0XHQsIHVwZGF0ZWQgPSBmYWxzZVxuXHRcdCwgaW5kZXhcblx0O1xuXHRkbyB7XG5cdFx0dG9rZW4gPSB0b2tlbnNbaV0gKyBcIlwiO1xuXHRcdGluZGV4ID0gY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKTtcblx0XHR3aGlsZSAofmluZGV4KSB7XG5cdFx0XHR0aGlzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0XHR1cGRhdGVkID0gdHJ1ZTtcblx0XHRcdGluZGV4ID0gY2hlY2tUb2tlbkFuZEdldEluZGV4KHRoaXMsIHRva2VuKTtcblx0XHR9XG5cdH1cblx0d2hpbGUgKCsraSA8IGwpO1xuXG5cdGlmICh1cGRhdGVkKSB7XG5cdFx0dGhpcy5fdXBkYXRlQ2xhc3NOYW1lKCk7XG5cdH1cbn07XG5jbGFzc0xpc3RQcm90by50b2dnbGUgPSBmdW5jdGlvbiAodG9rZW4sIGZvcmNlKSB7XG5cdHZhclxuXHRcdCAgcmVzdWx0ID0gdGhpcy5jb250YWlucyh0b2tlbilcblx0XHQsIG1ldGhvZCA9IHJlc3VsdCA/XG5cdFx0XHRmb3JjZSAhPT0gdHJ1ZSAmJiBcInJlbW92ZVwiXG5cdFx0OlxuXHRcdFx0Zm9yY2UgIT09IGZhbHNlICYmIFwiYWRkXCJcblx0O1xuXG5cdGlmIChtZXRob2QpIHtcblx0XHR0aGlzW21ldGhvZF0odG9rZW4pO1xuXHR9XG5cblx0aWYgKGZvcmNlID09PSB0cnVlIHx8IGZvcmNlID09PSBmYWxzZSkge1xuXHRcdHJldHVybiBmb3JjZTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gIXJlc3VsdDtcblx0fVxufTtcbmNsYXNzTGlzdFByb3RvLnJlcGxhY2UgPSBmdW5jdGlvbiAodG9rZW4sIHJlcGxhY2VtZW50X3Rva2VuKSB7XG5cdHZhciBpbmRleCA9IGNoZWNrVG9rZW5BbmRHZXRJbmRleCh0b2tlbiArIFwiXCIpO1xuXHRpZiAofmluZGV4KSB7XG5cdFx0dGhpcy5zcGxpY2UoaW5kZXgsIDEsIHJlcGxhY2VtZW50X3Rva2VuKTtcblx0XHR0aGlzLl91cGRhdGVDbGFzc05hbWUoKTtcblx0fVxufVxuY2xhc3NMaXN0UHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLmpvaW4oXCIgXCIpO1xufTtcblxuaWYgKG9iakN0ci5kZWZpbmVQcm9wZXJ0eSkge1xuXHR2YXIgY2xhc3NMaXN0UHJvcERlc2MgPSB7XG5cdFx0ICBnZXQ6IGNsYXNzTGlzdEdldHRlclxuXHRcdCwgZW51bWVyYWJsZTogdHJ1ZVxuXHRcdCwgY29uZmlndXJhYmxlOiB0cnVlXG5cdH07XG5cdHRyeSB7XG5cdFx0b2JqQ3RyLmRlZmluZVByb3BlcnR5KGVsZW1DdHJQcm90bywgY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0UHJvcERlc2MpO1xuXHR9IGNhdGNoIChleCkgeyAvLyBJRSA4IGRvZXNuJ3Qgc3VwcG9ydCBlbnVtZXJhYmxlOnRydWVcblx0XHQvLyBhZGRpbmcgdW5kZWZpbmVkIHRvIGZpZ2h0IHRoaXMgaXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL2VsaWdyZXkvY2xhc3NMaXN0LmpzL2lzc3Vlcy8zNlxuXHRcdC8vIG1vZGVybmllIElFOC1NU1c3IG1hY2hpbmUgaGFzIElFOCA4LjAuNjAwMS4xODcwMiBhbmQgaXMgYWZmZWN0ZWRcblx0XHRpZiAoZXgubnVtYmVyID09PSB1bmRlZmluZWQgfHwgZXgubnVtYmVyID09PSAtMHg3RkY1RUM1NCkge1xuXHRcdFx0Y2xhc3NMaXN0UHJvcERlc2MuZW51bWVyYWJsZSA9IGZhbHNlO1xuXHRcdFx0b2JqQ3RyLmRlZmluZVByb3BlcnR5KGVsZW1DdHJQcm90bywgY2xhc3NMaXN0UHJvcCwgY2xhc3NMaXN0UHJvcERlc2MpO1xuXHRcdH1cblx0fVxufSBlbHNlIGlmIChvYmpDdHJbcHJvdG9Qcm9wXS5fX2RlZmluZUdldHRlcl9fKSB7XG5cdGVsZW1DdHJQcm90by5fX2RlZmluZUdldHRlcl9fKGNsYXNzTGlzdFByb3AsIGNsYXNzTGlzdEdldHRlcik7XG59XG5cbn0oc2VsZikpO1xuXG59XG5cbi8vIFRoZXJlIGlzIGZ1bGwgb3IgcGFydGlhbCBuYXRpdmUgY2xhc3NMaXN0IHN1cHBvcnQsIHNvIGp1c3QgY2hlY2sgaWYgd2UgbmVlZFxuLy8gdG8gbm9ybWFsaXplIHRoZSBhZGQvcmVtb3ZlIGFuZCB0b2dnbGUgQVBJcy5cblxuKGZ1bmN0aW9uICgpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0dmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIik7XG5cblx0dGVzdEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImMxXCIsIFwiYzJcIik7XG5cblx0Ly8gUG9seWZpbGwgZm9yIElFIDEwLzExIGFuZCBGaXJlZm94IDwyNiwgd2hlcmUgY2xhc3NMaXN0LmFkZCBhbmRcblx0Ly8gY2xhc3NMaXN0LnJlbW92ZSBleGlzdCBidXQgc3VwcG9ydCBvbmx5IG9uZSBhcmd1bWVudCBhdCBhIHRpbWUuXG5cdGlmICghdGVzdEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYzJcIikpIHtcblx0XHR2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24obWV0aG9kKSB7XG5cdFx0XHR2YXIgb3JpZ2luYWwgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlW21ldGhvZF07XG5cblx0XHRcdERPTVRva2VuTGlzdC5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHRva2VuKSB7XG5cdFx0XHRcdHZhciBpLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdHRva2VuID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0XHRcdG9yaWdpbmFsLmNhbGwodGhpcywgdG9rZW4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0Y3JlYXRlTWV0aG9kKCdhZGQnKTtcblx0XHRjcmVhdGVNZXRob2QoJ3JlbW92ZScpO1xuXHR9XG5cblx0dGVzdEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcImMzXCIsIGZhbHNlKTtcblxuXHQvLyBQb2x5ZmlsbCBmb3IgSUUgMTAgYW5kIEZpcmVmb3ggPDI0LCB3aGVyZSBjbGFzc0xpc3QudG9nZ2xlIGRvZXMgbm90XG5cdC8vIHN1cHBvcnQgdGhlIHNlY29uZCBhcmd1bWVudC5cblx0aWYgKHRlc3RFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImMzXCIpKSB7XG5cdFx0dmFyIF90b2dnbGUgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZTtcblxuXHRcdERPTVRva2VuTGlzdC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24odG9rZW4sIGZvcmNlKSB7XG5cdFx0XHRpZiAoMSBpbiBhcmd1bWVudHMgJiYgIXRoaXMuY29udGFpbnModG9rZW4pID09PSAhZm9yY2UpIHtcblx0XHRcdFx0cmV0dXJuIGZvcmNlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIF90b2dnbGUuY2FsbCh0aGlzLCB0b2tlbik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHR9XG5cblx0Ly8gcmVwbGFjZSgpIHBvbHlmaWxsXG5cdGlmICghKFwicmVwbGFjZVwiIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpLmNsYXNzTGlzdCkpIHtcblx0XHRET01Ub2tlbkxpc3QucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiAodG9rZW4sIHJlcGxhY2VtZW50X3Rva2VuKSB7XG5cdFx0XHR2YXJcblx0XHRcdFx0ICB0b2tlbnMgPSB0aGlzLnRvU3RyaW5nKCkuc3BsaXQoXCIgXCIpXG5cdFx0XHRcdCwgaW5kZXggPSB0b2tlbnMuaW5kZXhPZih0b2tlbiArIFwiXCIpXG5cdFx0XHQ7XG5cdFx0XHRpZiAofmluZGV4KSB7XG5cdFx0XHRcdHRva2VucyA9IHRva2Vucy5zbGljZShpbmRleCk7XG5cdFx0XHRcdHRoaXMucmVtb3ZlLmFwcGx5KHRoaXMsIHRva2Vucyk7XG5cdFx0XHRcdHRoaXMuYWRkKHJlcGxhY2VtZW50X3Rva2VuKTtcblx0XHRcdFx0dGhpcy5hZGQuYXBwbHkodGhpcywgdG9rZW5zLnNsaWNlKDEpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR0ZXN0RWxlbWVudCA9IG51bGw7XG59KCkpO1xuXG59XG4iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG59O1xuIiwidmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArICRTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHkoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFByb3RvdHlwZSkge1xuICBpZiAoaXNQcm90b3R5cGVPZihQcm90b3R5cGUsIGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyAkVHlwZUVycm9yKCRTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiLy8gRkYyNi0gYnVnOiBBcnJheUJ1ZmZlcnMgYXJlIG5vbi1leHRlbnNpYmxlLCBidXQgT2JqZWN0LmlzRXh0ZW5zaWJsZSBkb2VzIG5vdCByZXBvcnQgaXRcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtaXNleHRlbnNpYmxlLCBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUoYnVmZmVyKSkgT2JqZWN0LmRlZmluZVByb3BlcnR5KGJ1ZmZlciwgJ2EnLCB7IHZhbHVlOiA4IH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1hcnJheS1wcm90b3R5cGUtZm9yZWFjaCAtLSBzYWZlXG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PT0gJEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG4gICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9LCAxKTtcbiAgfSk7XG59O1xuIiwidmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciAkQXJyYXkgPSBBcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICB2YXIgcmVzdWx0ID0gJEFycmF5KG1heChmaW4gLSBrLCAwKSk7XG4gIGZvciAodmFyIG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsInZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG52YXIgbWVyZ2VTb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICByZXR1cm4gbGVuZ3RoIDwgOCA/IGluc2VydGlvblNvcnQoYXJyYXksIGNvbXBhcmVmbikgOiBtZXJnZShcbiAgICBhcnJheSxcbiAgICBtZXJnZVNvcnQoYXJyYXlTbGljZShhcnJheSwgMCwgbWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBtZXJnZVNvcnQoYXJyYXlTbGljZShhcnJheSwgbWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBjb21wYXJlZm5cbiAgKTtcbn07XG5cbnZhciBpbnNlcnRpb25Tb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIGkgPSAxO1xuICB2YXIgZWxlbWVudCwgajtcblxuICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgIGogPSBpO1xuICAgIGVsZW1lbnQgPSBhcnJheVtpXTtcbiAgICB3aGlsZSAoaiAmJiBjb21wYXJlZm4oYXJyYXlbaiAtIDFdLCBlbGVtZW50KSA+IDApIHtcbiAgICAgIGFycmF5W2pdID0gYXJyYXlbLS1qXTtcbiAgICB9XG4gICAgaWYgKGogIT09IGkrKykgYXJyYXlbal0gPSBlbGVtZW50O1xuICB9IHJldHVybiBhcnJheTtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIChhcnJheSwgbGVmdCwgcmlnaHQsIGNvbXBhcmVmbikge1xuICB2YXIgbGxlbmd0aCA9IGxlZnQubGVuZ3RoO1xuICB2YXIgcmxlbmd0aCA9IHJpZ2h0Lmxlbmd0aDtcbiAgdmFyIGxpbmRleCA9IDA7XG4gIHZhciByaW5kZXggPSAwO1xuXG4gIHdoaWxlIChsaW5kZXggPCBsbGVuZ3RoIHx8IHJpbmRleCA8IHJsZW5ndGgpIHtcbiAgICBhcnJheVtsaW5kZXggKyByaW5kZXhdID0gKGxpbmRleCA8IGxsZW5ndGggJiYgcmluZGV4IDwgcmxlbmd0aClcbiAgICAgID8gY29tcGFyZWZuKGxlZnRbbGluZGV4XSwgcmlnaHRbcmluZGV4XSkgPD0gMCA/IGxlZnRbbGluZGV4KytdIDogcmlnaHRbcmluZGV4KytdXG4gICAgICA6IGxpbmRleCA8IGxsZW5ndGggPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXTtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlU29ydDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKEMpICYmIChDID09PSAkQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gJEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKHt9LnRvU3RyaW5nKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHN0cmluZ1NsaWNlKHRvU3RyaW5nKGl0KSwgOCwgLTEpO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBDT1JSRUNUX0FSR1VNRU5UUyA9IGNsYXNzb2ZSYXcoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbi8vIGdldHRpbmcgdGFnIGZyb20gRVM2KyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2Bcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgTywgdGFnLCByZXN1bHQ7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9ICRPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyICRFcnJvciA9IEVycm9yO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcblxudmFyIFRFU1QgPSAoZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gU3RyaW5nKCRFcnJvcihhcmcpLnN0YWNrKTsgfSkoJ3p4Y2FzZCcpO1xudmFyIFY4X09SX0NIQUtSQV9TVEFDS19FTlRSWSA9IC9cXG5cXHMqYXQgW146XSo6W15cXG5dKi87XG52YXIgSVNfVjhfT1JfQ0hBS1JBX1NUQUNLID0gVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLnRlc3QoVEVTVCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0YWNrLCBkcm9wRW50cmllcykge1xuICBpZiAoSVNfVjhfT1JfQ0hBS1JBX1NUQUNLICYmIHR5cGVvZiBzdGFjayA9PSAnc3RyaW5nJyAmJiAhJEVycm9yLnByZXBhcmVTdGFja1RyYWNlKSB7XG4gICAgd2hpbGUgKGRyb3BFbnRyaWVzLS0pIHN0YWNrID0gcmVwbGFjZShzdGFjaywgVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZLCAnJyk7XG4gIH0gcmV0dXJuIHN0YWNrO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZmFzdEtleTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICBmaXJzdDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWQsXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0pO1xuICAgICAgaWYgKCFERVNDUklQVE9SUykgdGhhdC5zaXplID0gMDtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgdmFyIHByZXZpb3VzLCBpbmRleDtcbiAgICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIGVudHJ5LnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sYXN0ID0gZW50cnkgPSB7XG4gICAgICAgICAgaW5kZXg6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLFxuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBwcmV2aW91czogcHJldmlvdXMgPSBzdGF0ZS5sYXN0LFxuICAgICAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByZW1vdmVkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIXN0YXRlLmZpcnN0KSBzdGF0ZS5maXJzdCA9IGVudHJ5O1xuICAgICAgICBpZiAocHJldmlvdXMpIHByZXZpb3VzLm5leHQgPSBlbnRyeTtcbiAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplKys7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplKys7XG4gICAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgICBpZiAoaW5kZXggIT09ICdGJykgc3RhdGUuaW5kZXhbaW5kZXhdID0gZW50cnk7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICB2YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgLy8gZmFzdCBjYXNlXG4gICAgICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gICAgICB2YXIgZW50cnk7XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHN0YXRlLmluZGV4W2luZGV4XTtcbiAgICAgIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICAgICAgZm9yIChlbnRyeSA9IHN0YXRlLmZpcnN0OyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uZXh0KSB7XG4gICAgICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwge1xuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuY2xlYXIoKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmNsZWFyXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuY2xlYXJcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZGF0YSA9IHN0YXRlLmluZGV4O1xuICAgICAgICB2YXIgZW50cnkgPSBzdGF0ZS5maXJzdDtcbiAgICAgICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnByZXZpb3VzKSBlbnRyeS5wcmV2aW91cyA9IGVudHJ5LnByZXZpb3VzLm5leHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5maXJzdCA9IHN0YXRlLmxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSA9IDA7XG4gICAgICAgIGVsc2UgdGhhdC5zaXplID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5kZWxldGUoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5leHQ7XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wcmV2aW91cztcbiAgICAgICAgICBkZWxldGUgc3RhdGUuaW5kZXhbZW50cnkuaW5kZXhdO1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm5leHQgPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnByZXZpb3VzID0gcHJldjtcbiAgICAgICAgICBpZiAoc3RhdGUuZmlyc3QgPT0gZW50cnkpIHN0YXRlLmZpcnN0ID0gbmV4dDtcbiAgICAgICAgICBpZiAoc3RhdGUubGFzdCA9PSBlbnRyeSkgc3RhdGUubGFzdCA9IHByZXY7XG4gICAgICAgICAgaWYgKERFU0NSSVBUT1JTKSBzdGF0ZS5zaXplLS07XG4gICAgICAgICAgZWxzZSB0aGF0LnNpemUtLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZm9yZWFjaFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgICAgdmFyIGVudHJ5O1xuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5maXJzdCkge1xuICAgICAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBgeyBNYXAsIFNldH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuZ2V0KGtleSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52YWx1ZTtcbiAgICAgIH0sXG4gICAgICAvLyBgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuYWRkXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KFByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApIHtcbiAgICB2YXIgSVRFUkFUT1JfTkFNRSA9IENPTlNUUlVDVE9SX05BTUUgKyAnIEl0ZXJhdG9yJztcbiAgICB2YXIgZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuICAgIHZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKElURVJBVE9SX05BTUUpO1xuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLnsga2V5cywgdmFsdWVzLCBlbnRyaWVzLCBAQGl0ZXJhdG9yIH0oKWAgbWV0aG9kc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5lbnRyaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmtleXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUudmFsdWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLUBAaXRlcmF0b3JcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgZGVmaW5lSXRlcmF0b3IoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZVtAQHNwZWNpZXNdYCBhY2Nlc3NvcnNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1tYXAtQEBzcGVjaWVzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtc2V0LUBAc3BlY2llc1xuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lQnVpbHRJbnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWlucycpO1xudmFyIGdldFdlYWtEYXRhID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZ2V0V2Vha0RhdGE7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIEFycmF5SXRlcmF0aW9uTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcbnZhciBmaW5kID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZDtcbnZhciBmaW5kSW5kZXggPSBBcnJheUl0ZXJhdGlvbk1vZHVsZS5maW5kSW5kZXg7XG52YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTtcbnZhciBpZCA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgcmV0dXJuIHN0b3JlLmZyb3plbiB8fCAoc3RvcmUuZnJvemVuID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xuXG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG59O1xuXG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcbiAgcmV0dXJuIGZpbmQoc3RvcmUuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblxuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuZW50cmllcy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGluZGV4ID0gZmluZEluZGV4KHRoaXMuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSBzcGxpY2UodGhpcy5lbnRyaWVzLCBpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpZDogaWQrKyxcbiAgICAgICAgZnJvemVuOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgZWxzZSBkYXRhW3N0YXRlLmlkXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgfTtcblxuICAgIGRlZmluZUJ1aWx0SW5zKFByb3RvdHlwZSwge1xuICAgICAgLy8gYHsgV2Vha01hcCwgV2Vha1NldCB9LnByb3RvdHlwZS5kZWxldGUoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5kZWxldGVcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiBoYXNPd24oZGF0YSwgc3RhdGUuaWQpICYmIGRlbGV0ZSBkYXRhW3N0YXRlLmlkXTtcbiAgICAgIH0sXG4gICAgICAvLyBgeyBXZWFrTWFwLCBXZWFrU2V0IH0ucHJvdG90eXBlLmhhcyhrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLmhhc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5oYXNcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiBoYXNPd24oZGF0YSwgc3RhdGUuaWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVmaW5lQnVpbHRJbnMoUHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyBgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5nZXRcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLmdldChrZXkpO1xuICAgICAgICAgIHJldHVybiBkYXRhID8gZGF0YVtzdGF0ZS5pZF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuc2V0XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSA6IHtcbiAgICAgIC8vIGBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC5wcm90b3R5cGUuYWRkXG4gICAgICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIEludGVybmFsTWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FLCB3cmFwcGVyLCBjb21tb24pIHtcbiAgdmFyIElTX01BUCA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignTWFwJykgIT09IC0xO1xuICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlTWV0aG9kID0gdW5jdXJyeVRoaXMoTmF0aXZlUHJvdG90eXBlW0tFWV0pO1xuICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIHZhbHVlID09PSAwID8gMCA6IHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9IDogS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyB1bmRlZmluZWQgOiB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICk7XG4gIH07XG5cbiAgdmFyIFJFUExBQ0UgPSBpc0ZvcmNlZChcbiAgICBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICFpc0NhbGxhYmxlKE5hdGl2ZUNvbnN0cnVjdG9yKSB8fCAhKElTX1dFQUsgfHwgTmF0aXZlUHJvdG90eXBlLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLmVudHJpZXMoKS5uZXh0KCk7XG4gICAgfSkpXG4gICk7XG5cbiAgaWYgKFJFUExBQ0UpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIENvbnN0cnVjdG9yID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpO1xuICAgIEludGVybmFsTWV0YWRhdGFNb2R1bGUuZW5hYmxlKCk7XG4gIH0gZWxzZSBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHJ1ZSkpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+IENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkgeyBuZXcgTmF0aXZlQ29uc3RydWN0b3IoaXRlcmFibGUpOyB9KTtcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuXG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGR1bW15LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBOYXRpdmVQcm90b3R5cGUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLCBkdW1teSwgQ29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBOYXRpdmVQcm90b3R5cGU7XG4gICAgICBOYXRpdmVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICB9XG5cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcblxuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgTmF0aXZlUHJvdG90eXBlLmNsZWFyKSBkZWxldGUgTmF0aXZlUHJvdG90eXBlLmNsZWFyO1xuICB9XG5cbiAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBDb25zdHJ1Y3RvcjtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogQ29uc3RydWN0b3IgIT0gTmF0aXZlQ29uc3RydWN0b3IgfSwgZXhwb3J0ZWQpO1xuXG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufTtcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UsIGV4Y2VwdGlvbnMpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpICYmICEoZXhjZXB0aW9ucyAmJiBoYXNPd24oZXhjZXB0aW9ucywga2V5KSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgdmFyIHJlZ2V4cCA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlZ2V4cFtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAnLy4vJ1tNRVRIT0RfTkFNRV0ocmVnZXhwKTtcbiAgICB9IGNhdGNoIChlcnJvcjIpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiBmYWxzZTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCshRU5VTUVSQUJMRV9ORVhULCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwidmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICBpZiAoZGVzY3JpcHRvci5nZXQpIG1ha2VCdWlsdEluKGRlc2NyaXB0b3IuZ2V0LCBuYW1lLCB7IGdldHRlcjogdHJ1ZSB9KTtcbiAgaWYgKGRlc2NyaXB0b3Iuc2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLnNldCwgbmFtZSwgeyBzZXR0ZXI6IHRydWUgfSk7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eS5mKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcik7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgbWFrZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWFrZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMuZW51bWVyYWJsZTtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgaWYgKGlzQ2FsbGFibGUodmFsdWUpKSBtYWtlQnVpbHRJbih2YWx1ZSwgbmFtZSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2UgZGVmaW5lR2xvYmFsUHJvcGVydHkoa2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFvcHRpb25zLnVuc2FmZSkgZGVsZXRlIE9ba2V5XTtcbiAgICBlbHNlIGlmIChPW2tleV0pIHNpbXBsZSA9IHRydWU7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6ICFvcHRpb25zLm5vbkNvbmZpZ3VyYWJsZSxcbiAgICAgIHdyaXRhYmxlOiAhb3B0aW9ucy5ub25Xcml0YWJsZVxuICAgIH0pO1xuICB9IHJldHVybiBPO1xufTtcbiIsInZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgZGVmaW5lQnVpbHRJbihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheS5wcm90b3R5cGUueyB2YWx1ZXMsIEBAaXRlcmF0b3IgfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIGlmICghSVNfUFVSRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCAnbmFtZScsIFZBTFVFUyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBjYWxsKG5hdGl2ZUl0ZXJhdG9yLCB0aGlzKTsgfTtcbiAgICB9XG4gIH1cblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgZGVmaW5lQnVpbHRJbihJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSAkKHsgdGFyZ2V0OiBOQU1FLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB9LCBtZXRob2RzKTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBkZWZpbmVCdWlsdEluKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIFApIHtcbiAgaWYgKCFkZWxldGUgT1tQXSkgdGhyb3cgJFR5cGVFcnJvcignQ2Fubm90IGRlbGV0ZSBwcm9wZXJ0eSAnICsgdHJ5VG9TdHJpbmcoUCkgKyAnIG9mICcgKyB0cnlUb1N0cmluZyhPKSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA+IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93ICRUeXBlRXJyb3IoJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCcpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIEluZGV4U2l6ZUVycm9yOiB7IHM6ICdJTkRFWF9TSVpFX0VSUicsIGM6IDEsIG06IDEgfSxcbiAgRE9NU3RyaW5nU2l6ZUVycm9yOiB7IHM6ICdET01TVFJJTkdfU0laRV9FUlInLCBjOiAyLCBtOiAwIH0sXG4gIEhpZXJhcmNoeVJlcXVlc3RFcnJvcjogeyBzOiAnSElFUkFSQ0hZX1JFUVVFU1RfRVJSJywgYzogMywgbTogMSB9LFxuICBXcm9uZ0RvY3VtZW50RXJyb3I6IHsgczogJ1dST05HX0RPQ1VNRU5UX0VSUicsIGM6IDQsIG06IDEgfSxcbiAgSW52YWxpZENoYXJhY3RlckVycm9yOiB7IHM6ICdJTlZBTElEX0NIQVJBQ1RFUl9FUlInLCBjOiA1LCBtOiAxIH0sXG4gIE5vRGF0YUFsbG93ZWRFcnJvcjogeyBzOiAnTk9fREFUQV9BTExPV0VEX0VSUicsIGM6IDYsIG06IDAgfSxcbiAgTm9Nb2RpZmljYXRpb25BbGxvd2VkRXJyb3I6IHsgczogJ05PX01PRElGSUNBVElPTl9BTExPV0VEX0VSUicsIGM6IDcsIG06IDEgfSxcbiAgTm90Rm91bmRFcnJvcjogeyBzOiAnTk9UX0ZPVU5EX0VSUicsIGM6IDgsIG06IDEgfSxcbiAgTm90U3VwcG9ydGVkRXJyb3I6IHsgczogJ05PVF9TVVBQT1JURURfRVJSJywgYzogOSwgbTogMSB9LFxuICBJblVzZUF0dHJpYnV0ZUVycm9yOiB7IHM6ICdJTlVTRV9BVFRSSUJVVEVfRVJSJywgYzogMTAsIG06IDEgfSxcbiAgSW52YWxpZFN0YXRlRXJyb3I6IHsgczogJ0lOVkFMSURfU1RBVEVfRVJSJywgYzogMTEsIG06IDEgfSxcbiAgU3ludGF4RXJyb3I6IHsgczogJ1NZTlRBWF9FUlInLCBjOiAxMiwgbTogMSB9LFxuICBJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3I6IHsgczogJ0lOVkFMSURfTU9ESUZJQ0FUSU9OX0VSUicsIGM6IDEzLCBtOiAxIH0sXG4gIE5hbWVzcGFjZUVycm9yOiB7IHM6ICdOQU1FU1BBQ0VfRVJSJywgYzogMTQsIG06IDEgfSxcbiAgSW52YWxpZEFjY2Vzc0Vycm9yOiB7IHM6ICdJTlZBTElEX0FDQ0VTU19FUlInLCBjOiAxNSwgbTogMSB9LFxuICBWYWxpZGF0aW9uRXJyb3I6IHsgczogJ1ZBTElEQVRJT05fRVJSJywgYzogMTYsIG06IDAgfSxcbiAgVHlwZU1pc21hdGNoRXJyb3I6IHsgczogJ1RZUEVfTUlTTUFUQ0hfRVJSJywgYzogMTcsIG06IDEgfSxcbiAgU2VjdXJpdHlFcnJvcjogeyBzOiAnU0VDVVJJVFlfRVJSJywgYzogMTgsIG06IDEgfSxcbiAgTmV0d29ya0Vycm9yOiB7IHM6ICdORVRXT1JLX0VSUicsIGM6IDE5LCBtOiAxIH0sXG4gIEFib3J0RXJyb3I6IHsgczogJ0FCT1JUX0VSUicsIGM6IDIwLCBtOiAxIH0sXG4gIFVSTE1pc21hdGNoRXJyb3I6IHsgczogJ1VSTF9NSVNNQVRDSF9FUlInLCBjOiAyMSwgbTogMSB9LFxuICBRdW90YUV4Y2VlZGVkRXJyb3I6IHsgczogJ1FVT1RBX0VYQ0VFREVEX0VSUicsIGM6IDIyLCBtOiAxIH0sXG4gIFRpbWVvdXRFcnJvcjogeyBzOiAnVElNRU9VVF9FUlInLCBjOiAyMywgbTogMSB9LFxuICBJbnZhbGlkTm9kZVR5cGVFcnJvcjogeyBzOiAnSU5WQUxJRF9OT0RFX1RZUEVfRVJSJywgYzogMjQsIG06IDEgfSxcbiAgRGF0YUNsb25lRXJyb3I6IHsgczogJ0RBVEFfQ0xPTkVfRVJSJywgYzogMjUsIG06IDEgfVxufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiLy8gaW4gb2xkIFdlYktpdCB2ZXJzaW9ucywgYGVsZW1lbnQuY2xhc3NMaXN0YCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgZ2xvYmFsIGBET01Ub2tlbkxpc3RgXG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbnZhciBjbGFzc0xpc3QgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ3NwYW4nKS5jbGFzc0xpc3Q7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3RvciAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVRva2VuTGlzdFByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSA/IHVuZGVmaW5lZCA6IERPTVRva2VuTGlzdFByb3RvdHlwZTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIGZpcmVmb3ggPSB1c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvaSk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFmaXJlZm94ICYmICtmaXJlZm94WzFdO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHR5cGVvZiBEZW5vICE9ICdvYmplY3QnO1xuIiwidmFyIFVBID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL01TSUV8VHJpZGVudC8udGVzdChVQSk7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9pcGFkfGlwaG9uZXxpcG9kL2kudGVzdCh1c2VyQWdlbnQpICYmIGdsb2JhbC5QZWJibGUgIT09IHVuZGVmaW5lZDtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKD86aXBhZHxpcGhvbmV8aXBvZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGVubyA9IGdsb2JhbC5EZW5vO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIC8vIGluIG9sZCBDaHJvbWUsIHZlcnNpb25zIG9mIFY4IGlzbid0IFY4ID0gQ2hyb21lIC8gMTBcbiAgLy8gYnV0IHRoZWlyIGNvcnJlY3QgdmVyc2lvbnMgYXJlIG5vdCBpbnRlcmVzdGluZyBmb3IgdXNcbiAgdmVyc2lvbiA9IG1hdGNoWzBdID4gMCAmJiBtYXRjaFswXSA8IDQgPyAxIDogKyhtYXRjaFswXSArIG1hdGNoWzFdKTtcbn1cblxuLy8gQnJvd3NlckZTIE5vZGVKUyBgcHJvY2Vzc2AgcG9seWZpbGwgaW5jb3JyZWN0bHkgc2V0IGAudjhgIHRvIGAwLjBgXG4vLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDBcbmlmICghdmVyc2lvbiAmJiB1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSArbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgd2Via2l0ID0gdXNlckFnZW50Lm1hdGNoKC9BcHBsZVdlYktpdFxcLyhcXGQrKVxcLi8pO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhd2Via2l0ICYmICt3ZWJraXRbMV07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKCdhJyk7XG4gIGlmICghKCdzdGFjaycgaW4gZXJyb3IpKSByZXR1cm4gdHJ1ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVycm9yLCAnc3RhY2snLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgNykpO1xuICByZXR1cm4gZXJyb3Iuc3RhY2sgIT09IDc7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50Jyk7XG5cbnZhciBuYXRpdmVFcnJvclRvU3RyaW5nID0gRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gQ2hyb21lIDMyLSBpbmNvcnJlY3RseSBjYWxsIGFjY2Vzc29yXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICB2YXIgb2JqZWN0ID0gY3JlYXRlKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ25hbWUnLCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMgPT09IG9iamVjdDtcbiAgICB9IH0pKTtcbiAgICBpZiAobmF0aXZlRXJyb3JUb1N0cmluZy5jYWxsKG9iamVjdCkgIT09ICd0cnVlJykgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gRkYxMC0gZG9lcyBub3QgcHJvcGVybHkgaGFuZGxlIG5vbi1zdHJpbmdzXG4gIHJldHVybiBuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwoeyBtZXNzYWdlOiAxLCBuYW1lOiAyIH0pICE9PSAnMjogMSdcbiAgICAvLyBJRTggZG9lcyBub3QgcHJvcGVybHkgaGFuZGxlIGRlZmF1bHRzXG4gICAgfHwgbmF0aXZlRXJyb3JUb1N0cmluZy5jYWxsKHt9KSAhPT0gJ0Vycm9yJztcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IElOQ09SUkVDVF9UT19TVFJJTkcgPyBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgdmFyIE8gPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIG5hbWUgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChPLm5hbWUsICdFcnJvcicpO1xuICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KE8ubWVzc2FnZSk7XG4gIHJldHVybiAhbmFtZSA/IG1lc3NhZ2UgOiAhbWVzc2FnZSA/IG5hbWUgOiBuYW1lICsgJzogJyArIG1lc3NhZ2U7XG59IDogbmF0aXZlRXJyb3JUb1N0cmluZztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZUdsb2JhbFByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHknKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgICAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLmRvbnRDYWxsR2V0U2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMuZG9udENhbGxHZXRTZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgZGVmaW5lQnVpbHRJbih0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kID0gdW5jdXJyeVRoaXMoLy4vW1NZTUJPTF0pO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW4oU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICBkZWZpbmVCdWlsdEluKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMteC9uby1vYmplY3QtcHJldmVudGV4dGVuc2lvbnMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tZnVuY3Rpb24tcHJvdG90eXBlLWJpbmQgLS0gc2FmZVxuICB2YXIgdGVzdCA9IChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pLmJpbmQoKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGlucyAtLSBzYWZlXG4gIHJldHVybiB0eXBlb2YgdGVzdCAhPSAnZnVuY3Rpb24nIHx8IHRlc3QuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZScpO1xufSk7XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGNhbGwuYmluZChjYWxsKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBiaW5kID0gRnVuY3Rpb25Qcm90b3R5cGUuYmluZDtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpcyA9IE5BVElWRV9CSU5EICYmIGJpbmQuYmluZChjYWxsLCBjYWxsKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgdW5jdXJyeVRoaXMoZm4pO1xufSA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gJiYgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpO1xuICB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gYEdldFN1YnN0aXR1dGlvbmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XG4gIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XG4gICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICB9XG4gIHJldHVybiByZXBsYWNlKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaGFyQXQoY2gsIDApKSB7XG4gICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgIGNhc2UgJ2AnOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCAwLCBwb3NpdGlvbik7XG4gICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyaW5nU2xpY2Uoc3RyLCB0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tzdHJpbmdTbGljZShjaCwgMSwgLTEpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgIHZhciBuID0gK2NoO1xuICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICB2YXIgZiA9IGZsb29yKG4gLyAxMCk7XG4gICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaGFyQXQoY2gsIDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2hhckF0KGNoLCAxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1nbG9iYWwtdGhpcyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBmYWxsYmFja1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtaGFzb3duIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rcyB0byBJRTggZm9yIGl0cyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICEkT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdChpdCwgJycpIDogJE9iamVjdChpdCk7XG59IDogJE9iamVjdDtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIGlzQ2FsbGFibGUoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpICYmXG4gICAgTmV3VGFyZ2V0ICE9PSBXcmFwcGVyICYmXG4gICAgaXNPYmplY3QoTmV3VGFyZ2V0UHJvdG90eXBlID0gTmV3VGFyZ2V0LnByb3RvdHlwZSkgJiZcbiAgICBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlXG4gICkgc2V0UHJvdG90eXBlT2YoJHRoaXMsIE5ld1RhcmdldFByb3RvdHlwZSk7XG4gIHJldHVybiAkdGhpcztcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uLnRvU3RyaW5nKTtcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGBjb3JlLWpzQDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZyhpdCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbi8vIGBJbnN0YWxsRXJyb3JDYXVzZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvcHJvcG9zYWwtZXJyb3ItY2F1c2UvI3NlYy1lcnJvcm9iamVjdHMtaW5zdGFsbC1lcnJvci1jYXVzZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgb3B0aW9ucykge1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NhdXNlJyBpbiBvcHRpb25zKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sICdjYXVzZScsIG9wdGlvbnMuY2F1c2UpO1xuICB9XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGlzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgUkVRVUlSRUQgPSBmYWxzZTtcbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxudmFyIHNldE1ldGFkYXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIGRlZmluZVByb3BlcnR5KGl0LCBNRVRBREFUQSwgeyB2YWx1ZToge1xuICAgIG9iamVjdElEOiAnTycgKyBpZCsrLCAvLyBvYmplY3QgSURcbiAgICB3ZWFrRGF0YToge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG5cbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIGEgcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBREFUQV0ub2JqZWN0SUQ7XG59O1xuXG52YXIgZ2V0V2Vha0RhdGEgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIHRoZSBzdG9yZSBvZiB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBREFUQV0ud2Vha0RhdGE7XG59O1xuXG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpJTkcgJiYgUkVRVUlSRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzT3duKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxudmFyIGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgbWV0YS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIFJFUVVJUkVEID0gdHJ1ZTtcbiAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmY7XG4gIHZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xuICB2YXIgdGVzdCA9IHt9O1xuICB0ZXN0W01FVEFEQVRBXSA9IDE7XG5cbiAgLy8gcHJldmVudCBleHBvc2luZyBvZiBtZXRhZGF0YSBrZXlcbiAgaWYgKGdldE93blByb3BlcnR5TmFtZXModGVzdCkubGVuZ3RoKSB7XG4gICAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZXN1bHRbaV0gPT09IE1FVEFEQVRBKSB7XG4gICAgICAgICAgc3BsaWNlKHJlc3VsdCwgaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUuZlxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBlbmFibGU6IGVuYWJsZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHVuY3VycnlUaGlzKHN0b3JlLmdldCk7XG4gIHZhciB3bWhhcyA9IHVuY3VycnlUaGlzKHN0b3JlLmhhcyk7XG4gIHZhciB3bXNldCA9IHVuY3VycnlUaGlzKHN0b3JlLnNldCk7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAod21oYXMoc3RvcmUsIGl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgd21zZXQoc3RvcmUsIGl0LCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21nZXQoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmIChoYXNPd24oaXQsIFNUQVRFKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWFycmF5LWlzYXJyYXkgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09ICdBcnJheSc7XG59O1xuIiwiLy8gYElzQ2FsbGFibGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBlbXB0eSA9IFtdO1xudmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgY29uc3RydWN0b3JSZWdFeHAgPSAvXlxccyooPzpjbGFzc3xmdW5jdGlvbilcXGIvO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKTtcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gIWNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMobm9vcCk7XG5cbnZhciBpc0NvbnN0cnVjdG9yTW9kZXJuID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3RydWN0KG5vb3AsIGVtcHR5LCBhcmd1bWVudCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG52YXIgaXNDb25zdHJ1Y3RvckxlZ2FjeSA9IGZ1bmN0aW9uIGlzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcbiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlO1xuICBzd2l0Y2ggKGNsYXNzb2YoYXJndW1lbnQpKSB7XG4gICAgY2FzZSAnQXN5bmNGdW5jdGlvbic6XG4gICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOlxuICAgIGNhc2UgJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nOiByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyB3ZSBjYW4ndCBjaGVjayAucHJvdG90eXBlIHNpbmNlIGNvbnN0cnVjdG9ycyBwcm9kdWNlZCBieSAuYmluZCBoYXZlbid0IGl0XG4gICAgLy8gYEZ1bmN0aW9uI3RvU3RyaW5nYCB0aHJvd3Mgb24gc29tZSBidWlsdC1pdCBmdW5jdGlvbiBpbiBzb21lIGxlZ2FjeSBlbmdpbmVzXG4gICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pXG4gICAgcmV0dXJuIElOQ09SUkVDVF9UT19TVFJJTkcgfHwgISFleGVjKGNvbnN0cnVjdG9yUmVnRXhwLCBpbnNwZWN0U291cmNlKGFyZ3VtZW50KSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG5cbmlzQ29uc3RydWN0b3JMZWdhY3kuc2hhbSA9IHRydWU7XG5cbi8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSAhY29uc3RydWN0IHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhbGxlZDtcbiAgcmV0dXJuIGlzQ29uc3RydWN0b3JNb2Rlcm4oaXNDb25zdHJ1Y3Rvck1vZGVybi5jYWxsKVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKE9iamVjdClcbiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pXG4gICAgfHwgY2FsbGVkO1xufSkgPyBpc0NvbnN0cnVjdG9yTGVnYWN5IDogaXNDb25zdHJ1Y3Rvck1vZGVybjtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYElzSW50ZWdyYWxOdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2ludGVncmFsbnVtYmVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1udW1iZXItaXNpbnRlZ2VyIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgUmVzdWx0UHJvdG90eXBlID0gUmVzdWx0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGl0ZXJhYmxlKSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVyYWJsZSk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNhbGxGbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIGlzUHJvdG90eXBlT2YoUmVzdWx0UHJvdG90eXBlLCByZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoaXRlcmFibGUsIGl0ZXJGbik7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxGbihzdGVwLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgaXNQcm90b3R5cGVPZihSZXN1bHRQcm90b3R5cGUsIHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwga2luZCwgdmFsdWUpIHtcbiAgdmFyIGlubmVyUmVzdWx0LCBpbm5lckVycm9yO1xuICBhbk9iamVjdChpdGVyYXRvcik7XG4gIHRyeSB7XG4gICAgaW5uZXJSZXN1bHQgPSBnZXRNZXRob2QoaXRlcmF0b3IsICdyZXR1cm4nKTtcbiAgICBpZiAoIWlubmVyUmVzdWx0KSB7XG4gICAgICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlubmVyUmVzdWx0ID0gY2FsbChpbm5lclJlc3VsdCwgaXRlcmF0b3IpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlubmVyRXJyb3IgPSB0cnVlO1xuICAgIGlubmVyUmVzdWx0ID0gZXJyb3I7XG4gIH1cbiAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlO1xuICBpZiAoaW5uZXJFcnJvcikgdGhyb3cgaW5uZXJSZXN1bHQ7XG4gIGFuT2JqZWN0KGlubmVyUmVzdWx0KTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzLXgvbm8tYXJyYXktcHJvdG90eXBlLWtleXMgLS0gc2FmZSAqL1xuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG52YXIgTkVXX0lURVJBVE9SX1BST1RPVFlQRSA9IEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYExlbmd0aE9mQXJyYXlMaWtlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2Vcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdG9MZW5ndGgob2JqLmxlbmd0aCk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuQ09ORklHVVJBQkxFO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG52YXIgQ09ORklHVVJBQkxFX0xFTkdUSCA9IERFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdsZW5ndGgnLCB7IHZhbHVlOiA4IH0pLmxlbmd0aCAhPT0gODtcbn0pO1xuXG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbnZhciBtYWtlQnVpbHRJbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBvcHRpb25zKSB7XG4gIGlmIChTdHJpbmcobmFtZSkuc2xpY2UoMCwgNykgPT09ICdTeW1ib2woJykge1xuICAgIG5hbWUgPSAnWycgKyBTdHJpbmcobmFtZSkucmVwbGFjZSgvXlN5bWJvbFxcKChbXildKilcXCkvLCAnJDEnKSArICddJztcbiAgfVxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlcikgbmFtZSA9ICdnZXQgJyArIG5hbWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2V0dGVyKSBuYW1lID0gJ3NldCAnICsgbmFtZTtcbiAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodmFsdWUsICduYW1lJywgeyB2YWx1ZTogbmFtZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICB9XG4gIGlmIChDT05GSUdVUkFCTEVfTEVOR1RIICYmIG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsICdhcml0eScpICYmIHZhbHVlLmxlbmd0aCAhPT0gb3B0aW9ucy5hcml0eSkge1xuICAgIGRlZmluZVByb3BlcnR5KHZhbHVlLCAnbGVuZ3RoJywgeyB2YWx1ZTogb3B0aW9ucy5hcml0eSB9KTtcbiAgfVxuICB0cnkge1xuICAgIGlmIChvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnY29uc3RydWN0b3InKSAmJiBvcHRpb25zLmNvbnN0cnVjdG9yKSB7XG4gICAgICBpZiAoREVTQ1JJUFRPUlMpIGRlZmluZVByb3BlcnR5KHZhbHVlLCAncHJvdG90eXBlJywgeyB3cml0YWJsZTogZmFsc2UgfSk7XG4gICAgLy8gaW4gVjggfiBDaHJvbWUgNTMsIHByb3RvdHlwZXMgb2Ygc29tZSBtZXRob2RzLCBsaWtlIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCwgYXJlIG5vbi13cml0YWJsZVxuICAgIH0gZWxzZSBpZiAodmFsdWUucHJvdG90eXBlKSB2YWx1ZS5wcm90b3R5cGUgPSB1bmRlZmluZWQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICBpZiAoIWhhc093bihzdGF0ZSwgJ3NvdXJjZScpKSB7XG4gICAgc3RhdGUuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2YgbmFtZSA9PSAnc3RyaW5nJyA/IG5hbWUgOiAnJyk7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcblxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXh0ZW5kLW5hdGl2ZSAtLSByZXF1aXJlZFxuRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gbWFrZUJ1aWx0SW4oZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59LCAndG9TdHJpbmcnKTtcbiIsInZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYE1hdGgudHJ1bmNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1tYXRoLXRydW5jIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC50cnVuYyB8fCBmdW5jdGlvbiB0cnVuYyh4KSB7XG4gIHZhciBuID0gK3g7XG4gIHJldHVybiAobiA+IDAgPyBmbG9vciA6IGNlaWwpKG4pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19JT1NfUEVCQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MtcGViYmxlJyk7XG52YXIgSVNfV0VCT1NfV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy13ZWJvcy13ZWJraXQnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBxdWV1ZU1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG5cbnZhciBmbHVzaCwgaGVhZCwgbGFzdCwgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIXF1ZXVlTWljcm90YXNrKSB7XG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIC8vIGFsc28gZXhjZXB0IFdlYk9TIFdlYmtpdCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODk4XG4gIGlmICghSVNfSU9TICYmICFJU19OT0RFICYmICFJU19XRUJPU19XRUJLSVQgJiYgTXV0YXRpb25PYnNlcnZlciAmJiBkb2N1bWVudCkge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKCFJU19JT1NfUEVCQkxFICYmIFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgLy8gd29ya2Fyb3VuZCBvZiBXZWJLaXQgfiBpT1MgU2FmYXJpIDEwLjEgYnVnXG4gICAgcHJvbWlzZS5jb25zdHJ1Y3RvciA9IFByb21pc2U7XG4gICAgdGhlbiA9IGJpbmQocHJvbWlzZS50aGVuLCBwcm9taXNlKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBOb2RlLmpzIHdpdGhvdXQgcHJvbWlzZXNcbiAgfSBlbHNlIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnZVxuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuYmluZChnbG9iYWwpXG4gICAgbWFjcm90YXNrID0gYmluZChtYWNyb3Rhc2ssIGdsb2JhbCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbWFjcm90YXNrKGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy14L25vLXN5bWJvbCAtLSBzYWZlICovXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0wgJiYgISFTeW1ib2xbJ2ZvciddICYmICEhU3ltYm9sLmtleUZvcjtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzLXgvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcmVsYXRpdmUtdXJsLXN0eWxlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7XG4gIHNlYXJjaFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgc2VhcmNoUGFyYW1zWydkZWxldGUnXSgnYicpO1xuICAgIHJlc3VsdCArPSBrZXkgKyB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiAoSVNfUFVSRSAmJiAhdXJsLnRvSlNPTilcbiAgICB8fCAhc2VhcmNoUGFyYW1zLnNvcnRcbiAgICB8fCB1cmwuaHJlZiAhPT0gJ2h0dHA6Ly9hL2MlMjBkP2E9MSZjPTMnXG4gICAgfHwgc2VhcmNoUGFyYW1zLmdldCgnYycpICE9PSAnMydcbiAgICB8fCBTdHJpbmcobmV3IFVSTFNlYXJjaFBhcmFtcygnP2E9MScpKSAhPT0gJ2E9MSdcbiAgICB8fCAhc2VhcmNoUGFyYW1zW0lURVJBVE9SXVxuICAgIC8vIHRocm93cyBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hQGInKS51c2VybmFtZSAhPT0gJ2EnXG4gICAgfHwgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPWInKSkuZ2V0KCdhJykgIT09ICdiJ1xuICAgIC8vIG5vdCBwdW55Y29kZWQgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJ1xuICAgIC8vIG5vdCBlc2NhcGVkIGluIENocm9tZSA2Mi1cbiAgICB8fCBuZXcgVVJMKCdodHRwOi8vYSPQsScpLmhhc2ggIT09ICcjJUQwJUIxJ1xuICAgIC8vIGZhaWxzIGluIENocm9tZSA2Ni1cbiAgICB8fCByZXN1bHQgIT09ICdhMWMzJ1xuICAgIC8vIHRocm93cyBpbiBTYWZhcmlcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8veCcsIHVuZGVmaW5lZCkuaG9zdCAhPT0gJ3gnO1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFDYWxsYWJsZShyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhQ2FsbGFibGUocmVqZWN0KTtcbn07XG5cbi8vIGBOZXdQcm9taXNlQ2FwYWJpbGl0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW5ld3Byb21pc2VjYXBhYmlsaXR5XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCAkZGVmYXVsdCkge1xuICByZXR1cm4gYXJndW1lbnQgPT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gJycgOiAkZGVmYXVsdCA6IHRvU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGdsb2JhbElzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1udW1iZXItaXNmaW5pdGUgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBnbG9iYWxJc0Zpbml0ZShpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWFzc2lnbiAtLSBzYWZlXG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBgT2JqZWN0LmFzc2lnbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5hc3NpZ25cbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBzaG91bGQgaGF2ZSBjb3JyZWN0IG9yZGVyIG9mIG9wZXJhdGlvbnMgKEVkZ2UgYnVnKVxuICBpZiAoREVTQ1JJUFRPUlMgJiYgJGFzc2lnbih7IGI6IDEgfSwgJGFzc2lnbihkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdiJywge1xuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfSksIHsgYjogMiB9KSkuYiAhPT0gMSkgcmV0dXJuIHRydWU7XG4gIC8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1zeW1ib2wgLS0gc2FmZVxuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KG9iamVjdEtleXMoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlLCBTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTICYmICFWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgcHJvcHNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG52YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gc2FmZSAqL1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGFycmF5U2xpY2Uod2luZG93TmFtZXMpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgY2xhc3NvZihpdCkgPT0gJ1dpbmRvdydcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogJGdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KGl0KSk7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gc2FmZVxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/ICRPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICB2YXIgb2JqZWN0ID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dO1xuICB2YXIgY29uc3RydWN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIGlmIChpc0NhbGxhYmxlKGNvbnN0cnVjdG9yKSAmJiBvYmplY3QgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIG9iamVjdCBpbnN0YW5jZW9mICRPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbm1vZHVsZS5leHBvcnRzID0gKEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFKSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWU7XG59IDogJGlzRXh0ZW5zaWJsZTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpICYmIGhhc093bihPLCBrZXkpICYmIHB1c2gocmVzdWx0LCBrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzT3duKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHB1c2gocmVzdWx0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICEkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgb2JqZWN0IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBJU19QVVJFIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gY3Jhc2hlcyBvbGQgV2ViS2l0XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yMzJcbiAgaWYgKFdFQktJVCAmJiBXRUJLSVQgPCA1MzUpIHJldHVybjtcbiAgdmFyIGtleSA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsLCBlcy14L25vLWxlZ2FjeS1vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29yLW1ldGhvZHMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIGtleSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIGdsb2JhbFtrZXldO1xufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LXNldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gdW5jdXJyeVRoaXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0KTtcbiAgICBzZXR0ZXIodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgT3JkaW5hcnlUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKGlzQ2FsbGFibGUoZm4gPSBpbnB1dC52YWx1ZU9mKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHByZWYgIT09ICdzdHJpbmcnICYmIGlzQ2FsbGFibGUoZm4gPSBpbnB1dC50b1N0cmluZykgJiYgIWlzT2JqZWN0KHZhbCA9IGNhbGwoZm4sIGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfQlJPV1NFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtYnJvd3NlcicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgU1VCQ0xBU1NJTkcgPSBmYWxzZTtcbnZhciBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQgPSBpc0NhbGxhYmxlKGdsb2JhbC5Qcm9taXNlUmVqZWN0aW9uRXZlbnQpO1xuXG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSBpc0ZvcmNlZCgnUHJvbWlzZScsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI3sgY2F0Y2gsIGZpbmFsbHkgfSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIShOYXRpdmVQcm9taXNlUHJvdG90eXBlWydjYXRjaCddICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXSkpIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gbmV3IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKDEpOyB9KTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICBTVUJDTEFTU0lORyA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBJU19CUk9XU0VSICYmICFOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENPTlNUUlVDVE9SOiBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUixcbiAgUkVKRUNUSU9OX0VWRU5UOiBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQsXG4gIFNVQkNMQVNTSU5HOiBTVUJDTEFTU0lOR1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpLkNPTlNUUlVDVE9SO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRhcmdldCwgU291cmNlLCBrZXkpIHtcbiAga2V5IGluIFRhcmdldCB8fCBkZWZpbmVQcm9wZXJ0eShUYXJnZXQsIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNvdXJjZVtrZXldOyB9LFxuICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IFNvdXJjZVtrZXldID0gaXQ7IH1cbiAgfSk7XG59O1xuIiwidmFyIFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmhlYWQgPSBudWxsO1xuICB0aGlzLnRhaWwgPSBudWxsO1xufTtcblxuUXVldWUucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGVudHJ5ID0geyBpdGVtOiBpdGVtLCBuZXh0OiBudWxsIH07XG4gICAgaWYgKHRoaXMuaGVhZCkgdGhpcy50YWlsLm5leHQgPSBlbnRyeTtcbiAgICBlbHNlIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgIHRoaXMudGFpbCA9IGVudHJ5O1xuICB9LFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmhlYWQ7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICB0aGlzLmhlYWQgPSBlbnRyeS5uZXh0O1xuICAgICAgaWYgKHRoaXMudGFpbCA9PT0gZW50cnkpIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICByZXR1cm4gZW50cnkuaXRlbTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93ICRUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAsIHJlZ2V4cC9uby1sYXp5LWVuZHMgLS0gdGVzdGluZyAqL1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLXVzZWxlc3MtcXVhbnRpZmllciAtLSB0ZXN0aW5nICovXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgc3RpY2t5SGVscGVycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xudmFyIFVOU1VQUE9SVEVEX0RPVF9BTEwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwnKTtcbnZhciBVTlNVUFBPUlRFRF9OQ0cgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLW5jZycpO1xuXG52YXIgbmF0aXZlUmVwbGFjZSA9IHNoYXJlZCgnbmF0aXZlLXN0cmluZy1yZXBsYWNlJywgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xudmFyIHBhdGNoZWRFeGVjID0gbmF0aXZlRXhlYztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGluZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUxLCAnYScpO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMiwgJ2EnKTtcbiAgcmV0dXJuIHJlMS5sYXN0SW5kZXggIT09IDAgfHwgcmUyLmxhc3RJbmRleCAhPT0gMDtcbn0pKCk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5CUk9LRU5fQ0FSRVQ7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0c7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyaW5nKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHJlKTtcbiAgICB2YXIgc3RyID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICB2YXIgcmF3ID0gc3RhdGUucmF3O1xuICAgIHZhciByZXN1bHQsIHJlQ29weSwgbGFzdEluZGV4LCBtYXRjaCwgaSwgb2JqZWN0LCBncm91cDtcblxuICAgIGlmIChyYXcpIHtcbiAgICAgIHJhdy5sYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICByZXN1bHQgPSBjYWxsKHBhdGNoZWRFeGVjLCByYXcsIHN0cik7XG4gICAgICByZS5sYXN0SW5kZXggPSByYXcubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZ3JvdXBzID0gc3RhdGUuZ3JvdXBzO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSBjYWxsKHJlZ2V4cEZsYWdzLCByZSk7XG4gICAgdmFyIHNvdXJjZSA9IHJlLnNvdXJjZTtcbiAgICB2YXIgY2hhcnNBZGRlZCA9IDA7XG4gICAgdmFyIHN0ckNvcHkgPSBzdHI7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsICd5JywgJycpO1xuICAgICAgaWYgKGluZGV4T2YoZmxhZ3MsICdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IHN0cmluZ1NsaWNlKHN0ciwgcmUubGFzdEluZGV4KTtcbiAgICAgIC8vIFN1cHBvcnQgYW5jaG9yZWQgc3RpY2t5IGJlaGF2aW9yLlxuICAgICAgaWYgKHJlLmxhc3RJbmRleCA+IDAgJiYgKCFyZS5tdWx0aWxpbmUgfHwgcmUubXVsdGlsaW5lICYmIGNoYXJBdChzdHIsIHJlLmxhc3RJbmRleCAtIDEpICE9PSAnXFxuJykpIHtcbiAgICAgICAgc291cmNlID0gJyg/OiAnICsgc291cmNlICsgJyknO1xuICAgICAgICBzdHJDb3B5ID0gJyAnICsgc3RyQ29weTtcbiAgICAgICAgY2hhcnNBZGRlZCsrO1xuICAgICAgfVxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIHN0ciBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXig/OicgKyBzb3VyY2UgKyAnKScsIGZsYWdzKTtcbiAgICB9XG5cbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyBzb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICB9XG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuXG4gICAgbWF0Y2ggPSBjYWxsKG5hdGl2ZUV4ZWMsIHN0aWNreSA/IHJlQ29weSA6IHJlLCBzdHJDb3B5KTtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBtYXRjaC5pbnB1dCA9IHN0cmluZ1NsaWNlKG1hdGNoLmlucHV0LCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBzdHJpbmdTbGljZShtYXRjaFswXSwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoLmluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgICByZS5sYXN0SW5kZXggKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHJlLmxhc3RJbmRleCA9IDA7XG4gICAgfSBlbHNlIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICBjYWxsKG5hdGl2ZVJlcGxhY2UsIG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWF0Y2ggJiYgZ3JvdXBzKSB7XG4gICAgICBtYXRjaC5ncm91cHMgPSBvYmplY3QgPSBjcmVhdGUobnVsbCk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2ldO1xuICAgICAgICBvYmplY3RbZ3JvdXBbMF1dID0gbWF0Y2hbZ3JvdXBbMV1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NgIGdldHRlciBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5mbGFnc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuaGFzSW5kaWNlcykgcmVzdWx0ICs9ICdkJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LmRvdEFsbCkgcmVzdWx0ICs9ICdzJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQudW5pY29kZVNldHMpIHJlc3VsdCArPSAndic7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciByZWdFeHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIpIHtcbiAgdmFyIGZsYWdzID0gUi5mbGFncztcbiAgcmV0dXJuIGZsYWdzID09PSB1bmRlZmluZWQgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkgJiYgIWhhc093bihSLCAnZmxhZ3MnKSAmJiBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgUilcbiAgICA/IGNhbGwocmVnRXhwRmxhZ3MsIFIpIDogZmxhZ3M7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG4vLyBVQyBCcm93c2VyIGJ1Z1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzEwMDhcbnZhciBNSVNTRURfU1RJQ0tZID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhJFJlZ0V4cCgnYScsICd5Jykuc3RpY2t5O1xufSk7XG5cbnZhciBCUk9LRU5fQ0FSRVQgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9ICRSZWdFeHAoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCUk9LRU5fQ0FSRVQ6IEJST0tFTl9DQVJFVCxcbiAgTUlTU0VEX1NUSUNLWTogTUlTU0VEX1NUSUNLWSxcbiAgVU5TVVBQT1JURURfWTogVU5TVVBQT1JURURfWVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUuZXhlYygnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcoPzxhPmIpJywgJ2cnKSAtPiAvKD88YT5iKS9nIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJyg/PGE+YiknLCAnZycpO1xuICByZXR1cm4gcmUuZXhlYygnYicpLmdyb3Vwcy5hICE9PSAnYicgfHxcbiAgICAnYicucmVwbGFjZShyZSwgJyQ8YT5jJykgIT09ICdiYyc7XG59KTtcbiIsInZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBkZWZpbmVHbG9iYWxQcm9wZXJ0eShTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjIzLjEnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMiBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsXG4gIGxpY2Vuc2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9ibG9iL3YzLjIzLjEvTElDRU5TRScsXG4gIHNvdXJjZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzJ1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFDb25zdHJ1Y3RvcihTKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlck9ySW5maW5pdHkocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gY2hhckF0KFMsIHBvc2l0aW9uKVxuICAgICAgICAgIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gc3RyaW5nU2xpY2UoUywgcG9zaXRpb24sIHBvc2l0aW9uICsgMilcbiAgICAgICAgICA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMvYmxvYi9tYXN0ZXIvcHVueWNvZGUuanNcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIG1heEludCA9IDIxNDc0ODM2NDc7IC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcbnZhciBiYXNlID0gMzY7XG52YXIgdE1pbiA9IDE7XG52YXIgdE1heCA9IDI2O1xudmFyIHNrZXcgPSAzODtcbnZhciBkYW1wID0gNzAwO1xudmFyIGluaXRpYWxCaWFzID0gNzI7XG52YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODBcbnZhciBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcbnZhciByZWdleE5vbkFTQ0lJID0gL1teXFwwLVxcdTAwN0VdLzsgLy8gbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1suXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG52YXIgT1ZFUkZMT1dfRVJST1IgPSAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnO1xudmFyIGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbjtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMocmVnZXhTZXBhcmF0b3JzLmV4ZWMpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciB0b0xvd2VyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvTG93ZXJDYXNlKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG4gKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG4gKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG4gKiBtYXRjaGluZyBVVEYtMTYuXG4gKi9cbnZhciB1Y3MyZGVjb2RlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gY2hhckNvZGVBdChzdHJpbmcsIGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gSXQncyBhIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIHZhciBleHRyYSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBjb3VudGVyKyspO1xuICAgICAgaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG4gICAgICAgIHB1c2gob3V0cHV0LCAoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXQncyBhbiB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGVcbiAgICAgICAgLy8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIHB1c2gob3V0cHV0LCB2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXItLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChvdXRwdXQsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICovXG52YXIgZGlnaXRUb0Jhc2ljID0gZnVuY3Rpb24gKGRpZ2l0KSB7XG4gIC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG4gIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpO1xufTtcblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqL1xudmFyIGFkYXB0ID0gZnVuY3Rpb24gKGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgd2hpbGUgKGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMSkge1xuICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcbiAgICBrICs9IGJhc2U7XG4gIH1cbiAgcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcblxuICAvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBhbiBhcnJheSBvZiBVbmljb2RlIGNvZGUgcG9pbnRzLlxuICBpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG4gIC8vIENhY2hlIHRoZSBsZW5ndGguXG4gIHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzdGF0ZS5cbiAgdmFyIG4gPSBpbml0aWFsTjtcbiAgdmFyIGRlbHRhID0gMDtcbiAgdmFyIGJpYXMgPSBpbml0aWFsQmlhcztcbiAgdmFyIGksIGN1cnJlbnRWYWx1ZTtcblxuICAvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICBpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG4gIHZhciBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoOyAvLyBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblxuICAvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBwdXNoKG91dHB1dCwgZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcbiAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0IGxhcmdlciBvbmU6XG4gICAgdmFyIG0gPSBtYXhJbnQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG4gICAgICAgIG0gPSBjdXJyZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LCBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cbiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG4gICAgICB0aHJvdyAkUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgfVxuXG4gICAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcbiAgICBuID0gbTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG4gICAgICAgIHRocm93ICRSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cbiAgICAgICAgdmFyIHEgPSBkZWx0YTtcbiAgICAgICAgdmFyIGsgPSBiYXNlO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcbiAgICAgICAgICBpZiAocSA8IHQpIGJyZWFrO1xuICAgICAgICAgIHZhciBxTWludXNUID0gcSAtIHQ7XG4gICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QpKSk7XG4gICAgICAgICAgcSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcbiAgICAgICAgICBrICs9IGJhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgIGhhbmRsZWRDUENvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVsdGErKztcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIGpvaW4ob3V0cHV0LCAnJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgZW5jb2RlZCA9IFtdO1xuICB2YXIgbGFiZWxzID0gc3BsaXQocmVwbGFjZSh0b0xvd2VyQ2FzZShpbnB1dCksIHJlZ2V4U2VwYXJhdG9ycywgJ1xcdTAwMkUnKSwgJy4nKTtcbiAgdmFyIGksIGxhYmVsO1xuICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGFiZWwgPSBsYWJlbHNbaV07XG4gICAgcHVzaChlbmNvZGVkLCBleGVjKHJlZ2V4Tm9uQVNDSUksIGxhYmVsKSA/ICd4bi0tJyArIGVuY29kZShsYWJlbCkgOiBsYWJlbCk7XG4gIH1cbiAgcmV0dXJuIGpvaW4oZW5jb2RlZCwgJy4nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlck9ySW5maW5pdHkoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgJFJhbmdlRXJyb3IoJ1dyb25nIG51bWJlciBvZiByZXBldGl0aW9ucycpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzdWx0ICs9IHN0cjtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciBub24gPSAnXFx1MjAwQlxcdTAwODVcXHUxODBFJztcblxuLy8gY2hlY2sgdGhhdCBhIG1ldGhvZCB3b3JrcyB3aXRoIHRoZSBjb3JyZWN0IGxpc3Rcbi8vIG9mIHdoaXRlc3BhY2VzIGFuZCBoYXMgYSBjb3JyZWN0IG5hbWVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHJldHVybiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdKClcbiAgICAgIHx8IG5vbltNRVRIT0RfTkFNRV0oKSAhPT0gbm9uXG4gICAgICB8fCAoUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdLm5hbWUgIT09IE1FVEhPRF9OQU1FKTtcbiAgfSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciB3aGl0ZXNwYWNlID0gJ1snICsgd2hpdGVzcGFjZXMgKyAnXSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgd2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyokJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbSwgdHJpbVN0YXJ0LCB0cmltRW5kLCB0cmltTGVmdCwgdHJpbVJpZ2h0IH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzKSB7XG4gICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBsdHJpbSwgJycpO1xuICAgIGlmIChUWVBFICYgMikgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICB2YXIgU3ltYm9sUHJvdG90eXBlID0gU3ltYm9sICYmIFN5bWJvbC5wcm90b3R5cGU7XG4gIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlICYmIFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICB2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4gIGlmIChTeW1ib2xQcm90b3R5cGUgJiYgIVN5bWJvbFByb3RvdHlwZVtUT19QUklNSVRJVkVdKSB7XG4gICAgLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciAubGVuZ3RoXG4gICAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIHJldHVybiBjYWxsKHZhbHVlT2YsIHRoaXMpO1xuICAgIH0sIHsgYXJpdHk6IDEgfSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgRnVuY3Rpb24gPSBnbG9iYWwuRnVuY3Rpb247XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGxvY2F0aW9uLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudHJ5IHtcbiAgLy8gRGVubyB0aHJvd3MgYSBSZWZlcmVuY2VFcnJvciBvbiBgbG9jYXRpb25gIGFjY2VzcyB3aXRob3V0IGAtLWxvY2F0aW9uYCBmbGFnXG4gIGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIGlmIChoYXNPd24ocXVldWUsIGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG5cbnZhciBydW5uZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBydW4oaWQpO1xuICB9O1xufTtcblxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bihldmVudC5kYXRhKTtcbn07XG5cbnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIG9sZCBlbmdpbmVzIGhhdmUgbm90IGxvY2F0aW9uLm9yaWdpblxuICBnbG9iYWwucG9zdE1lc3NhZ2UoU3RyaW5nKGlkKSwgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGhhbmRsZXIpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZm4gPSBpc0NhbGxhYmxlKGhhbmRsZXIpID8gaGFuZGxlciA6IEZ1bmN0aW9uKGhhbmRsZXIpO1xuICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhcHBseShmbiwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChJU19OT0RFKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0KTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICBpc0NhbGxhYmxlKGdsb2JhbC5wb3N0TWVzc2FnZSkgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICBsb2NhdGlvbiAmJiBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6JyAmJlxuICAgICFmYWlscyhwb3N0KVxuICApIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxuLy8gYHRoaXNOdW1iZXJWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRoaXNudW1iZXJ2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCIvLyB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7XG59O1xuIiwidmFyIHRydW5jID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMnKTtcblxuLy8gYFRvSW50ZWdlck9ySW5maW5pdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgbnVtYmVyID0gK2FyZ3VtZW50O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbnVtYmVyICE9PSBudW1iZXIgfHwgbnVtYmVyID09PSAwID8gMCA6IHRydW5jKG51bWJlcik7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgaWYgKCFpc09iamVjdChpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBleG90aWNUb1ByaW0gPSBnZXRNZXRob2QoaW5wdXQsIFRPX1BSSU1JVElWRSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChleG90aWNUb1ByaW0pIHtcbiAgICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ2RlZmF1bHQnO1xuICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7XG4gICAgaWYgKCFpc09iamVjdChyZXN1bHQpIHx8IGlzU3ltYm9sKHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7XG4gIHJldHVybiBpc1N5bWJvbChrZXkpID8ga2V5IDoga2V5ICsgJyc7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciB0ZXN0ID0ge307XG5cbnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCJ2YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIHNhZmVcbiAgICBpZiAoSVNfTk9ERSkgcmV0dXJuIEZ1bmN0aW9uKCdyZXR1cm4gcmVxdWlyZShcIicgKyBuYW1lICsgJ1wiKScpKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbn07XG4iLCJ2YXIgJFN0cmluZyA9IFN0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuICdPYmplY3QnO1xuICB9XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xudmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy14L25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBWOCB+IENocm9tZSAzNi1cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzRcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sICdwcm90b3R5cGUnLCB7XG4gICAgdmFsdWU6IDQyLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KS5wcm90b3R5cGUgIT0gNDI7XG59KTtcbiIsInZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzZWQsIHJlcXVpcmVkKSB7XG4gIGlmIChwYXNzZWQgPCByZXF1aXJlZCkgdGhyb3cgJFR5cGVFcnJvcignTm90IGVub3VnaCBhcmd1bWVudHMnKTtcbiAgcmV0dXJuIHBhc3NlZDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbmV4cG9ydHMuZiA9IHdlbGxLbm93blN5bWJvbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3ltYm9sRm9yID0gU3ltYm9sICYmIFN5bWJvbFsnZm9yJ107XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzT3duKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gJ1N5bWJvbC4nICsgbmFtZTtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIH0gZWxzZSBpZiAoVVNFX1NZTUJPTF9BU19VSUQgJiYgc3ltYm9sRm9yKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBzeW1ib2xGb3IoZGVzY3JpcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG5tb2R1bGUuZXhwb3J0cyA9ICdcXHUwMDA5XFx1MDAwQVxcdTAwMEJcXHUwMDBDXFx1MDAwRFxcdTAwMjBcXHUwMEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMicgK1xuICAnXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIHByb3h5QWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJveHktYWNjZXNzb3InKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIGluc3RhbGxFcnJvckNhdXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3RhbGwtZXJyb3ItY2F1c2UnKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2snKTtcbnZhciBFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEZVTExfTkFNRSwgd3JhcHBlciwgRk9SQ0VELCBJU19BR0dSRUdBVEVfRVJST1IpIHtcbiAgdmFyIFNUQUNLX1RSQUNFX0xJTUlUID0gJ3N0YWNrVHJhY2VMaW1pdCc7XG4gIHZhciBPUFRJT05TX1BPU0lUSU9OID0gSVNfQUdHUkVHQVRFX0VSUk9SID8gMiA6IDE7XG4gIHZhciBwYXRoID0gRlVMTF9OQU1FLnNwbGl0KCcuJyk7XG4gIHZhciBFUlJPUl9OQU1FID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICB2YXIgT3JpZ2luYWxFcnJvciA9IGdldEJ1aWx0SW4uYXBwbHkobnVsbCwgcGF0aCk7XG5cbiAgaWYgKCFPcmlnaW5hbEVycm9yKSByZXR1cm47XG5cbiAgdmFyIE9yaWdpbmFsRXJyb3JQcm90b3R5cGUgPSBPcmlnaW5hbEVycm9yLnByb3RvdHlwZTtcblxuICAvLyBWOCA5LjMtIGJ1ZyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMjAwNlxuICBpZiAoIUlTX1BVUkUgJiYgaGFzT3duKE9yaWdpbmFsRXJyb3JQcm90b3R5cGUsICdjYXVzZScpKSBkZWxldGUgT3JpZ2luYWxFcnJvclByb3RvdHlwZS5jYXVzZTtcblxuICBpZiAoIUZPUkNFRCkgcmV0dXJuIE9yaWdpbmFsRXJyb3I7XG5cbiAgdmFyIEJhc2VFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG5cbiAgdmFyIFdyYXBwZWRFcnJvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KElTX0FHR1JFR0FURV9FUlJPUiA/IGIgOiBhLCB1bmRlZmluZWQpO1xuICAgIHZhciByZXN1bHQgPSBJU19BR0dSRUdBVEVfRVJST1IgPyBuZXcgT3JpZ2luYWxFcnJvcihhKSA6IG5ldyBPcmlnaW5hbEVycm9yKCk7XG4gICAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHJlc3VsdCwgJ21lc3NhZ2UnLCBtZXNzYWdlKTtcbiAgICBpZiAoRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdzdGFjaycsIGNsZWFyRXJyb3JTdGFjayhyZXN1bHQuc3RhY2ssIDIpKTtcbiAgICBpZiAodGhpcyAmJiBpc1Byb3RvdHlwZU9mKE9yaWdpbmFsRXJyb3JQcm90b3R5cGUsIHRoaXMpKSBpbmhlcml0SWZSZXF1aXJlZChyZXN1bHQsIHRoaXMsIFdyYXBwZWRFcnJvcik7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiBPUFRJT05TX1BPU0lUSU9OKSBpbnN0YWxsRXJyb3JDYXVzZShyZXN1bHQsIGFyZ3VtZW50c1tPUFRJT05TX1BPU0lUSU9OXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG5cbiAgV3JhcHBlZEVycm9yLnByb3RvdHlwZSA9IE9yaWdpbmFsRXJyb3JQcm90b3R5cGU7XG5cbiAgaWYgKEVSUk9SX05BTUUgIT09ICdFcnJvcicpIHtcbiAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFdyYXBwZWRFcnJvciwgQmFzZUVycm9yKTtcbiAgICBlbHNlIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoV3JhcHBlZEVycm9yLCBCYXNlRXJyb3IsIHsgbmFtZTogdHJ1ZSB9KTtcbiAgfSBlbHNlIGlmIChERVNDUklQVE9SUyAmJiBTVEFDS19UUkFDRV9MSU1JVCBpbiBPcmlnaW5hbEVycm9yKSB7XG4gICAgcHJveHlBY2Nlc3NvcihXcmFwcGVkRXJyb3IsIE9yaWdpbmFsRXJyb3IsIFNUQUNLX1RSQUNFX0xJTUlUKTtcbiAgICBwcm94eUFjY2Vzc29yKFdyYXBwZWRFcnJvciwgT3JpZ2luYWxFcnJvciwgJ3ByZXBhcmVTdGFja1RyYWNlJyk7XG4gIH1cblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFdyYXBwZWRFcnJvciwgT3JpZ2luYWxFcnJvcik7XG5cbiAgaWYgKCFJU19QVVJFKSB0cnkge1xuICAgIC8vIFNhZmFyaSAxMy0gYnVnOiBXZWJBc3NlbWJseSBlcnJvcnMgZG9lcyBub3QgaGF2ZSBhIHByb3BlciBgLm5hbWVgXG4gICAgaWYgKE9yaWdpbmFsRXJyb3JQcm90b3R5cGUubmFtZSAhPT0gRVJST1JfTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE9yaWdpbmFsRXJyb3JQcm90b3R5cGUsICduYW1lJywgRVJST1JfTkFNRSk7XG4gICAgfVxuICAgIE9yaWdpbmFsRXJyb3JQcm90b3R5cGUuY29uc3RydWN0b3IgPSBXcmFwcGVkRXJyb3I7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICByZXR1cm4gV3JhcHBlZEVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvZXMtbm90LWV4Y2VlZC1zYWZlLWludGVnZXInKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSB3ZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpO1xuXG4vLyBXZSBjYW4ndCB1c2UgdGhpcyBmZWF0dXJlIGRldGVjdGlvbiBpbiBWOCBzaW5jZSBpdCBjYXVzZXNcbi8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCA9IFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gW107XG4gIGFycmF5W0lTX0NPTkNBVF9TUFJFQURBQkxFXSA9IGZhbHNlO1xuICByZXR1cm4gYXJyYXkuY29uY2F0KClbMF0gIT09IGFycmF5O1xufSk7XG5cbnZhciBTUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdjb25jYXQnKTtcblxudmFyIGlzQ29uY2F0U3ByZWFkYWJsZSA9IGZ1bmN0aW9uIChPKSB7XG4gIGlmICghaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNwcmVhZGFibGUgPSBPW0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7XG59O1xuXG52YXIgRk9SQ0VEID0gIUlTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgfHwgIVNQRUNJRVNfU1VQUE9SVDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb25jYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuY29uY2F0XG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAaXNDb25jYXRTcHJlYWRhYmxlIGFuZCBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoRSk7XG4gICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihuICsgbGVuKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9lc05vdEV4Y2VlZFNhZmVJbnRlZ2VyKG4gKyAxKTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgQS5sZW5ndGggPSBuO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmlsdGVyO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdmaWx0ZXInKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORF9JTkRFWCA9ICdmaW5kSW5kZXgnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChGSU5EX0lOREVYIGluIFtdKSBBcnJheSgxKVtGSU5EX0lOREVYXShmdW5jdGlvbiAoKSB7IFNLSVBTX0hPTEVTID0gZmFsc2U7IH0pO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kaW5kZXhcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmRJbmRleCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkRfSU5ERVgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG52YXIgRklORCA9ICdmaW5kJztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORCBpbiBbXSkgQXJyYXkoMSlbRklORF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFNLSVBTX0hPTEVTIH0sIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKEZJTkQpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xuXG52YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gRkY5OSsgYnVnXG52YXIgQlJPS0VOX09OX1NQQVJTRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFBcnJheSgxKS5pbmNsdWRlcygpO1xufSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJST0tFTl9PTl9TUEFSU0UgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnaW5jbHVkZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG52YXIgdmFsdWVzID0gSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDQ1LSBidWdcbmlmICghSVNfUFVSRSAmJiBERVNDUklQVE9SUyAmJiB2YWx1ZXMubmFtZSAhPT0gJ3ZhbHVlcycpIHRyeSB7XG4gIGRlZmluZVByb3BlcnR5KHZhbHVlcywgJ25hbWUnLCB7IHZhbHVlOiAndmFsdWVzJyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHVuJEpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuam9pblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRVMzX1NUUklOR1MgfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiB1biRKb2luKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHVuJFNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc2xpY2UnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciAkQXJyYXkgPSBBcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zbGljZVxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIC8vIGlubGluZSBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBmb3IgdXNhZ2UgbmF0aXZlIGBBcnJheSNzbGljZWAgd2hlcmUgaXQncyBwb3NzaWJsZVxuICAgIHZhciBDb25zdHJ1Y3RvciwgcmVzdWx0LCBuO1xuICAgIGlmIChpc0FycmF5KE8pKSB7XG4gICAgICBDb25zdHJ1Y3RvciA9IE8uY29uc3RydWN0b3I7XG4gICAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgICAgaWYgKGlzQ29uc3RydWN0b3IoQ29uc3RydWN0b3IpICYmIChDb25zdHJ1Y3RvciA9PT0gJEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSAkQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdW4kU2xpY2UoTywgaywgZmluKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0ID0gbmV3IChDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkID8gJEFycmF5IDogQ29uc3RydWN0b3IpKG1heChmaW4gLSBrLCAwKSk7XG4gICAgZm9yIChuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGlmIChrIGluIE8pIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaW50ZXJuYWxTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBGRiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbicpO1xudmFyIElFX09SX0VER0UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UnKTtcbnZhciBWOCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxudmFyIHRlc3QgPSBbXTtcbnZhciB1biRTb3J0ID0gdW5jdXJyeVRoaXModGVzdC5zb3J0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXModGVzdC5wdXNoKTtcblxuLy8gSUU4LVxudmFyIEZBSUxTX09OX1VOREVGSU5FRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KTtcbi8vIFY4IGJ1Z1xudmFyIEZBSUxTX09OX05VTEwgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydChudWxsKTtcbn0pO1xuLy8gT2xkIFdlYktpdFxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb3J0Jyk7XG5cbnZhciBTVEFCTEVfU09SVCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGZlYXR1cmUgZGV0ZWN0aW9uIGNhbiBiZSB0b28gc2xvdywgc28gY2hlY2sgZW5naW5lcyB2ZXJzaW9uc1xuICBpZiAoVjgpIHJldHVybiBWOCA8IDcwO1xuICBpZiAoRkYgJiYgRkYgPiAzKSByZXR1cm47XG4gIGlmIChJRV9PUl9FREdFKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKFdFQktJVCkgcmV0dXJuIFdFQktJVCA8IDYwMztcblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBjb2RlLCBjaHIsIHZhbHVlLCBpbmRleDtcblxuICAvLyBnZW5lcmF0ZSBhbiBhcnJheSB3aXRoIG1vcmUgNTEyIGVsZW1lbnRzIChDaGFrcmEgYW5kIG9sZCBWOCBmYWlscyBvbmx5IGluIHRoaXMgY2FzZSlcbiAgZm9yIChjb2RlID0gNjU7IGNvZGUgPCA3NjsgY29kZSsrKSB7XG4gICAgY2hyID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcblxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSA2NjogY2FzZSA2OTogY2FzZSA3MDogY2FzZSA3MjogdmFsdWUgPSAzOyBicmVhaztcbiAgICAgIGNhc2UgNjg6IGNhc2UgNzE6IHZhbHVlID0gNDsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiB2YWx1ZSA9IDI7XG4gICAgfVxuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNDc7IGluZGV4KyspIHtcbiAgICAgIHRlc3QucHVzaCh7IGs6IGNociArIGluZGV4LCB2OiB2YWx1ZSB9KTtcbiAgICB9XG4gIH1cblxuICB0ZXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIudiAtIGEudjsgfSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGVzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSB0ZXN0W2luZGV4XS5rLmNoYXJBdCgwKTtcbiAgICBpZiAocmVzdWx0LmNoYXJBdChyZXN1bHQubGVuZ3RoIC0gMSkgIT09IGNocikgcmVzdWx0ICs9IGNocjtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgIT09ICdER0JFRkhBQ0lKSyc7XG59KTtcblxudmFyIEZPUkNFRCA9IEZBSUxTX09OX1VOREVGSU5FRCB8fCAhRkFJTFNfT05fTlVMTCB8fCAhU1RSSUNUX01FVEhPRCB8fCAhU1RBQkxFX1NPUlQ7XG5cbnZhciBnZXRTb3J0Q29tcGFyZSA9IGZ1bmN0aW9uIChjb21wYXJlZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKHkgPT09IHVuZGVmaW5lZCkgcmV0dXJuIC0xO1xuICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHJldHVybiAxO1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgcmV0dXJuICtjb21wYXJlZm4oeCwgeSkgfHwgMDtcbiAgICByZXR1cm4gdG9TdHJpbmcoeCkgPiB0b1N0cmluZyh5KSA/IDEgOiAtMTtcbiAgfTtcbn07XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb3J0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgYUNhbGxhYmxlKGNvbXBhcmVmbik7XG5cbiAgICB2YXIgYXJyYXkgPSB0b09iamVjdCh0aGlzKTtcblxuICAgIGlmIChTVEFCTEVfU09SVCkgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkID8gdW4kU29ydChhcnJheSkgOiB1biRTb3J0KGFycmF5LCBjb21wYXJlZm4pO1xuXG4gICAgdmFyIGl0ZW1zID0gW107XG4gICAgdmFyIGFycmF5TGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoYXJyYXkpO1xuICAgIHZhciBpdGVtc0xlbmd0aCwgaW5kZXg7XG5cbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBhcnJheUxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGluZGV4IGluIGFycmF5KSBwdXNoKGl0ZW1zLCBhcnJheVtpbmRleF0pO1xuICAgIH1cblxuICAgIGludGVybmFsU29ydChpdGVtcywgZ2V0U29ydENvbXBhcmUoY29tcGFyZWZuKSk7XG5cbiAgICBpdGVtc0xlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcbiAgICBpbmRleCA9IDA7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBpdGVtc0xlbmd0aCkgYXJyYXlbaW5kZXhdID0gaXRlbXNbaW5kZXgrK107XG4gICAgd2hpbGUgKGluZGV4IDwgYXJyYXlMZW5ndGgpIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyhhcnJheSwgaW5kZXgrKyk7XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9lcy1ub3QtZXhjZWVkLXNhZmUtaW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWxldGUtcHJvcGVydHktb3ItdGhyb3cnKTtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnc3BsaWNlJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5zcGxpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc3BsaWNlXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBzcGxpY2U6IGZ1bmN0aW9uIHNwbGljZShzdGFydCwgZGVsZXRlQ291bnQgLyogLCAuLi5pdGVtcyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBhY3R1YWxTdGFydCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaW5zZXJ0Q291bnQsIGFjdHVhbERlbGV0ZUNvdW50LCBBLCBrLCBmcm9tLCB0bztcbiAgICBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAwKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFjdHVhbERlbGV0ZUNvdW50ID0gMDtcbiAgICB9IGVsc2UgaWYgKGFyZ3VtZW50c0xlbmd0aCA9PT0gMSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSAwO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBsZW4gLSBhY3R1YWxTdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0Q291bnQgPSBhcmd1bWVudHNMZW5ndGggLSAyO1xuICAgICAgYWN0dWFsRGVsZXRlQ291bnQgPSBtaW4obWF4KHRvSW50ZWdlck9ySW5maW5pdHkoZGVsZXRlQ291bnQpLCAwKSwgbGVuIC0gYWN0dWFsU3RhcnQpO1xuICAgIH1cbiAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobGVuICsgaW5zZXJ0Q291bnQgLSBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCBhY3R1YWxEZWxldGVDb3VudCk7XG4gICAgZm9yIChrID0gMDsgayA8IGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgIGZyb20gPSBhY3R1YWxTdGFydCArIGs7XG4gICAgICBpZiAoZnJvbSBpbiBPKSBjcmVhdGVQcm9wZXJ0eShBLCBrLCBPW2Zyb21dKTtcbiAgICB9XG4gICAgQS5sZW5ndGggPSBhY3R1YWxEZWxldGVDb3VudDtcbiAgICBpZiAoaW5zZXJ0Q291bnQgPCBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gYWN0dWFsU3RhcnQ7IGsgPCBsZW4gLSBhY3R1YWxEZWxldGVDb3VudDsgaysrKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQ7XG4gICAgICAgIHRvID0gayArIGluc2VydENvdW50O1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlUHJvcGVydHlPclRocm93KE8sIHRvKTtcbiAgICAgIH1cbiAgICAgIGZvciAoayA9IGxlbjsgayA+IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50ICsgaW5zZXJ0Q291bnQ7IGstLSkgZGVsZXRlUHJvcGVydHlPclRocm93KE8sIGsgLSAxKTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlUHJvcGVydHlPclRocm93KE8sIHRvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChrID0gMDsgayA8IGluc2VydENvdW50OyBrKyspIHtcbiAgICAgIE9bayArIGFjdHVhbFN0YXJ0XSA9IGFyZ3VtZW50c1trICsgMl07XG4gICAgfVxuICAgIE8ubGVuZ3RoID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgZnVuY3Rpb25zIGAubGVuZ3RoYCAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd3JhcC1lcnJvci1jb25zdHJ1Y3Rvci13aXRoLWNhdXNlJyk7XG5cbnZhciBXRUJfQVNTRU1CTFkgPSAnV2ViQXNzZW1ibHknO1xudmFyIFdlYkFzc2VtYmx5ID0gZ2xvYmFsW1dFQl9BU1NFTUJMWV07XG5cbnZhciBGT1JDRUQgPSBFcnJvcignZScsIHsgY2F1c2U6IDcgfSkuY2F1c2UgIT09IDc7XG5cbnZhciBleHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlciA9IGZ1bmN0aW9uIChFUlJPUl9OQU1FLCB3cmFwcGVyKSB7XG4gIHZhciBPID0ge307XG4gIE9bRVJST1JfTkFNRV0gPSB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZShFUlJPUl9OQU1FLCB3cmFwcGVyLCBGT1JDRUQpO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIE8pO1xufTtcblxudmFyIGV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIgPSBmdW5jdGlvbiAoRVJST1JfTkFNRSwgd3JhcHBlcikge1xuICBpZiAoV2ViQXNzZW1ibHkgJiYgV2ViQXNzZW1ibHlbRVJST1JfTkFNRV0pIHtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bRVJST1JfTkFNRV0gPSB3cmFwRXJyb3JDb25zdHJ1Y3RvcldpdGhDYXVzZShXRUJfQVNTRU1CTFkgKyAnLicgKyBFUlJPUl9OQU1FLCB3cmFwcGVyLCBGT1JDRUQpO1xuICAgICQoeyB0YXJnZXQ6IFdFQl9BU1NFTUJMWSwgc3RhdDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IEZPUkNFRCB9LCBPKTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZXJyb3ItY2F1c2VcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignRXZhbEVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEV2YWxFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignUmFuZ2VFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBSYW5nZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdSZWZlcmVuY2VFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBSZWZlcmVuY2VFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignU3ludGF4RXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gU3ludGF4RXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1R5cGVFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBUeXBlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1VSSUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVSSUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIoJ0NvbXBpbGVFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBDb21waWxlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlcignTGlua0Vycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIExpbmtFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyKCdSdW50aW1lRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gUnVudGltZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZVTkNUSU9OX05BTUVfRVhJU1RTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5FWElTVFM7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIG5hbWVSRSA9IC9mdW5jdGlvblxcYig/Olxcc3xcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcL1xcL1teXFxuXFxyXSpbXFxuXFxyXSspKihbXlxccygvXSopLztcbnZhciByZWdFeHBFeGVjID0gdW5jdXJyeVRoaXMobmFtZVJFLmV4ZWMpO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIUZVTkNUSU9OX05BTUVfRVhJU1RTKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEV4ZWMobmFtZVJFLCBmdW5jdGlvblRvU3RyaW5nKHRoaXMpKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKSgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG52YXIgSUxMX0ZPUk1FRF9VTklDT0RFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHN0cmluZ2lmeSgnXFx1REYwNlxcdUQ4MzQnKSAhPT0gJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInXG4gICAgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG59KTtcblxudmFyIHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4ID0gZnVuY3Rpb24gKGl0LCByZXBsYWNlcikge1xuICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgdmFyICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB9O1xuICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbn07XG5cbnZhciBmaXhJbGxGb3JtZWQgPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGFyaXR5OiAzLCBmb3JjZWQ6IFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiB8fCBJTExfRk9STUVEX1VOSUNPREUgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID8gc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggOiAkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICAgIHJldHVybiBJTExfRk9STUVEX1VOSUNPREUgJiYgdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeElsbEZvcm1lZCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC1vYmplY3RzXG5jb2xsZWN0aW9uKCdNYXAnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25TdHJvbmcpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWFwLmNvbnN0cnVjdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcblxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyIE5hdGl2ZU51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIE51bWJlclByb3RvdHlwZSA9IE5hdGl2ZU51bWJlci5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBhcnJheVNsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcblxuLy8gYFRvTnVtZXJpY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtZXJpY1xudmFyIHRvTnVtZXJpYyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJpbVZhbHVlID0gdG9QcmltaXRpdmUodmFsdWUsICdudW1iZXInKTtcbiAgcmV0dXJuIHR5cGVvZiBwcmltVmFsdWUgPT0gJ2JpZ2ludCcgPyBwcmltVmFsdWUgOiB0b051bWJlcihwcmltVmFsdWUpO1xufTtcblxuLy8gYFRvTnVtYmVyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1iZXJcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ251bWJlcicpO1xuICB2YXIgZmlyc3QsIHRoaXJkLCByYWRpeCwgbWF4Q29kZSwgZGlnaXRzLCBsZW5ndGgsIGluZGV4LCBjb2RlO1xuICBpZiAoaXNTeW1ib2woaXQpKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gdHJpbShpdCk7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KGl0LCAwKTtcbiAgICBpZiAoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSkge1xuICAgICAgdGhpcmQgPSBjaGFyQ29kZUF0KGl0LCAyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGNoYXJDb2RlQXQoaXQsIDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCBvZiAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBkaWdpdHMgPSBhcnJheVNsaWNlKGl0LCAyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGNoYXJDb2RlQXQoZGlnaXRzLCBpbmRleCk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG4vLyBgTnVtYmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXItY29uc3RydWN0b3JcbmlmIChpc0ZvcmNlZChOVU1CRVIsICFOYXRpdmVOdW1iZXIoJyAwbzEnKSB8fCAhTmF0aXZlTnVtYmVyKCcwYjEnKSB8fCBOYXRpdmVOdW1iZXIoJysweDEnKSkpIHtcbiAgdmFyIE51bWJlcldyYXBwZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgICB2YXIgbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IE5hdGl2ZU51bWJlcih0b051bWVyaWModmFsdWUpKTtcbiAgICB2YXIgZHVtbXkgPSB0aGlzO1xuICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgIHJldHVybiBpc1Byb3RvdHlwZU9mKE51bWJlclByb3RvdHlwZSwgZHVtbXkpICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgdGhpc051bWJlclZhbHVlKGR1bW15KTsgfSlcbiAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQoT2JqZWN0KG4pLCBkdW1teSwgTnVtYmVyV3JhcHBlcikgOiBuO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gREVTQ1JJUFRPUlMgPyBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZU51bWJlcikgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzIwMTUgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzIwMTUgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixNQVhfU0FGRV9JTlRFR0VSLE1JTl9TQUZFX0lOVEVHRVIsaXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIscGFyc2VGbG9hdCxwYXJzZUludCwnICtcbiAgICAvLyBFU05leHRcbiAgICAnZnJvbVN0cmluZyxyYW5nZSdcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xuICAgIGlmIChoYXNPd24oTmF0aXZlTnVtYmVyLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzT3duKE51bWJlcldyYXBwZXIsIGtleSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KE51bWJlcldyYXBwZXIsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE5hdGl2ZU51bWJlciwga2V5KSk7XG4gICAgfVxuICB9XG4gIE51bWJlcldyYXBwZXIucHJvdG90eXBlID0gTnVtYmVyUHJvdG90eXBlO1xuICBOdW1iZXJQcm90b3R5cGUuY29uc3RydWN0b3IgPSBOdW1iZXJXcmFwcGVyO1xuICBkZWZpbmVCdWlsdEluKGdsb2JhbCwgTlVNQkVSLCBOdW1iZXJXcmFwcGVyLCB7IGNvbnN0cnVjdG9yOiB0cnVlIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgbnVtYmVySXNGaW5pdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZScpO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7IGlzRmluaXRlOiBudW1iZXJJc0Zpbml0ZSB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdyYWxOdW1iZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdyYWwtbnVtYmVyJyk7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc0ludGVnZXI6IGlzSW50ZWdyYWxOdW1iZXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuaXNOYU5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNuYW5cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1vYmplY3QtYXNzaWduIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgYXJpdHk6IDIsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFDYWxsYWJsZShnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoMSk7IH0pO1xudmFyIEZPUkNFRCA9ICFERVNDUklQVE9SUyB8fCBGQUlMU19PTl9QUklNSVRJVkVTO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JbmRleGVkT2JqZWN0KGl0KSwga2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBrZXksIGRlc2NyaXB0b3I7XG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5ID0ga2V5c1tpbmRleCsrXSk7XG4gICAgICBpZiAoZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJykuZjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxuLy8gVjggfiBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG52YXIgRk9SQ0VEID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgICB2YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gJGdldE93blByb3BlcnR5U3ltYm9scyh0b09iamVjdChpdCkpIDogW107XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldFByb3RvdHlwZU9mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiB9LCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCkge1xuICAgIHJldHVybiBuYXRpdmVHZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIGRlZmluZUJ1aWx0SW4oT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24nKTtcblxuLy8gYFByb21pc2UuYWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5hbGxcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBQUk9NSVNFX1NUQVRJQ1NfSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBjYWxsKCRwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmNhdGNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IsIHJlYWw6IHRydWUgfSwge1xuICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2NhdGNoYCBwcm9wZXJseSB3b3JrcyB3aXRoIHBhdGNoZWQgYFByb21pc2UjdGhlbmBcbmlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcikpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2NhdGNoJ107XG4gIGlmIChOYXRpdmVQcm9taXNlUHJvdG90eXBlWydjYXRjaCddICE9PSBtZXRob2QpIHtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICdjYXRjaCcsIG1ldGhvZCwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBRdWV1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9xdWV1ZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gUHJvbWlzZUNvbnN0cnVjdG9yRGV0ZWN0aW9uLkNPTlNUUlVDVE9SO1xudmFyIE5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCA9IFByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbi5SRUpFQ1RJT05fRVZFTlQ7XG52YXIgTkFUSVZFX1BST01JU0VfU1VCQ0xBU1NJTkcgPSBQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24uU1VCQ0xBU1NJTkc7XG52YXIgZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihQUk9NSVNFKTtcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvciA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcjtcbnZhciBQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG5cbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcblxudmFyIEludGVybmFsLCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgUHJvbWlzZVdyYXBwZXIsIG5hdGl2ZVRoZW47XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIGlzQ2FsbGFibGUodGhlbiA9IGl0LnRoZW4pID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIGNhbGxSZWFjdGlvbiA9IGZ1bmN0aW9uIChyZWFjdGlvbiwgc3RhdGUpIHtcbiAgdmFyIHZhbHVlID0gc3RhdGUudmFsdWU7XG4gIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gIHRyeSB7XG4gICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgIGlmICghb2spIHtcbiAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChzdGF0ZSk7XG4gICAgICAgIHN0YXRlLnJlamVjdGlvbiA9IEhBTkRMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgIGNhbGwodGhlbiwgcmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgfVxufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVhY3Rpb25zID0gc3RhdGUucmVhY3Rpb25zO1xuICAgIHZhciByZWFjdGlvbjtcbiAgICB3aGlsZSAocmVhY3Rpb24gPSByZWFjdGlvbnMuZ2V0KCkpIHtcbiAgICAgIGNhbGxSZWFjdGlvbihyZWFjdGlvbiwgc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKSBvblVuaGFuZGxlZChzdGF0ZSk7XG4gIH0pO1xufTtcblxudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7XG4gIHZhciBldmVudCwgaGFuZGxlcjtcbiAgaWYgKERJU1BBVENIX0VWRU5UKSB7XG4gICAgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBldmVudC5wcm9taXNlID0gcHJvbWlzZTtcbiAgICBldmVudC5yZWFzb24gPSByZWFzb247XG4gICAgZXZlbnQuaW5pdEV2ZW50KG5hbWUsIGZhbHNlLCB0cnVlKTtcbiAgICBnbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH0gZWxzZSBldmVudCA9IHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiByZWFzb24gfTtcbiAgaWYgKCFOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY2FsbCh0YXNrLCBnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkoc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlLmZhY2FkZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhbGwodGhlbiwgdmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUikge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICBhQ2FsbGFibGUoZXhlY3V0b3IpO1xuICAgIGNhbGwoSW50ZXJuYWwsIHRoaXMpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBQcm9taXNlUHJvdG90eXBlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICAgIHR5cGU6IFBST01JU0UsXG4gICAgICBkb25lOiBmYWxzZSxcbiAgICAgIG5vdGlmaWVkOiBmYWxzZSxcbiAgICAgIHBhcmVudDogZmFsc2UsXG4gICAgICByZWFjdGlvbnM6IG5ldyBRdWV1ZSgpLFxuICAgICAgcmVqZWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0YXRlOiBQRU5ESU5HLFxuICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9O1xuXG4gIC8vIGBQcm9taXNlLnByb3RvdHlwZS50aGVuYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gIEludGVybmFsLnByb3RvdHlwZSA9IGRlZmluZUJ1aWx0SW4oUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgcmVhY3Rpb24ub2sgPSBpc0NhbGxhYmxlKG9uRnVsZmlsbGVkKSA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICByZWFjdGlvbi5mYWlsID0gaXNDYWxsYWJsZShvblJlamVjdGVkKSAmJiBvblJlamVjdGVkO1xuICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICBpZiAoc3RhdGUuc3RhdGUgPT0gUEVORElORykgc3RhdGUucmVhY3Rpb25zLmFkZChyZWFjdGlvbik7XG4gICAgZWxzZSBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gIH0pO1xuXG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpO1xuICB9O1xuXG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvcikgJiYgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLnRoZW47XG5cbiAgICBpZiAoIU5BVElWRV9QUk9NSVNFX1NVQkNMQVNTSU5HKSB7XG4gICAgICAvLyBtYWtlIGBQcm9taXNlI3RoZW5gIHJldHVybiBhIHBvbHlmaWxsZWQgYFByb21pc2VgIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBjYWxsKG5hdGl2ZVRoZW4sIHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY0MFxuICAgICAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuY2F0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5yYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UucmVqZWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UucmVzb2x2ZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24nKTtcblxuLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmFjZVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIGNhbGwoJHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG5cbi8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKHRoaXMpO1xuICAgIGNhbGwoY2FwYWJpbGl0eS5yZWplY3QsIHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG5cbnZhciBQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyID0gZ2V0QnVpbHRJbignUHJvbWlzZScpO1xudmFyIENIRUNLX1dSQVBQRVIgPSBJU19QVVJFICYmICFGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUjtcblxuLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQ0hFQ0tfV1JBUFBFUiAmJiB0aGlzID09PSBQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyID8gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnVuY3Rpb25BcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG52YXIgT1BUSU9OQUxfQVJHVU1FTlRTX0xJU1QgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMteC9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIFJlZmxlY3QuYXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5hcHBseWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuYXBwbHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPUFRJT05BTF9BUkdVTUVOVFNfTElTVCB9LCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xuICAgIHJldHVybiBmdW5jdGlvbkFwcGx5KGFDYWxsYWJsZSh0YXJnZXQpLCB0aGlzQXJndW1lbnQsIGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG93bktleXM6IG93bktleXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbiQoeyBnbG9iYWw6IHRydWUgfSwgeyBSZWZsZWN0OiB7fSB9KTtcblxuLy8gUmVmbGVjdFtAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5SZWZsZWN0LCAnUmVmbGVjdCcsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IFJlbW92ZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgbW92ZWQgdG8gZW50cnkgcG9pbnRzXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBERUxFR0FURVNfVE9fRVhFQyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgdmFyIHJlID0gL1thY10vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIGV4ZWNDYWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiAvLi8uZXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICByZXR1cm4gcmUudGVzdCgnYWJjJykgPT09IHRydWUgJiYgZXhlY0NhbGxlZDtcbn0oKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgdW4kVGVzdCA9IHVuY3VycnlUaGlzKC8uLy50ZXN0KTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudGVzdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudGVzdFxuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFERUxFR0FURVNfVE9fRVhFQyB9LCB7XG4gIHRlc3Q6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgZXhlYyA9IHRoaXMuZXhlYztcbiAgICBpZiAoIWlzQ2FsbGFibGUoZXhlYykpIHJldHVybiB1biRUZXN0KHRoaXMsIHN0cik7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgdGhpcywgc3RyKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsICYmICFpc09iamVjdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgJFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiAhIXJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuJFRvU3RyaW5nID0gUmVnRXhwUHJvdG90eXBlW1RPX1NUUklOR107XG5cbnZhciBOT1RfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgcmV0dXJuIG4kVG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxudmFyIElOQ09SUkVDVF9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgbiRUb1N0cmluZy5uYW1lICE9IFRPX1NUUklORztcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoTk9UX0dFTkVSSUMgfHwgSU5DT1JSRUNUX05BTUUpIHtcbiAgZGVmaW5lQnVpbHRJbihSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHBhdHRlcm4gPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciBmbGFncyA9ICR0b1N0cmluZyhnZXRSZWdFeHBGbGFncyhSKSk7XG4gICAgcmV0dXJuICcvJyArIHBhdHRlcm4gKyAnLycgKyBmbGFncztcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5zdHJpbmdJbmRleE9mKFxuICAgICAgdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSksXG4gICAgICB0b1N0cmluZyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICApO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogdG9TdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVzdHJpbmdpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHN0cmluZyA9IHN0YXRlLnN0cmluZztcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IHN0cmluZy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAbWF0Y2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdtYXRjaCcsIGZ1bmN0aW9uIChNQVRDSCwgbmF0aXZlTWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBtYXRjaGVyID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChyZWdleHAsIE1BVENIKTtcbiAgICAgIHJldHVybiBtYXRjaGVyID8gY2FsbChtYXRjaGVyLCByZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXSh0b1N0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdCh0aGlzKTtcbiAgICAgIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWF0Y2gsIHJ4LCBTKTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xuXG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgICBuKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gbiA9PT0gMCA/IG51bGwgOiBBO1xuICAgIH1cbiAgXTtcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGVhdDogcmVwZWF0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBSRVBMQUNFID0gd2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIElFIDw9IDExIHJlcGxhY2VzICQwIHdpdGggdGhlIHdob2xlIG1hdGNoLCBhcyBpZiBpdCB3YXMgJCZcbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYwMjQ2NjYvZ2V0dGluZy1pZS10by1yZXBsYWNlLWEtcmVnZXgtd2l0aC10aGUtbGl0ZXJhbC1zdHJpbmctMFxudmFyIFJFUExBQ0VfS0VFUFNfJDAgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL3ByZWZlci1lc2NhcGUtcmVwbGFjZW1lbnQtZG9sbGFyLWNoYXIgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuICdhJy5yZXBsYWNlKC8uLywgJyQwJykgPT09ICckMCc7XG59KSgpO1xuXG4vLyBTYWZhcmkgPD0gMTMuMC4zKD8pIHN1YnN0aXR1dGVzIG50aCBjYXB0dXJlIHdoZXJlIG4+bSB3aXRoIGFuIGVtcHR5IHN0cmluZ1xudmFyIFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKC8uL1tSRVBMQUNFXSkge1xuICAgIHJldHVybiAvLi9bUkVQTEFDRV0oJ2EnLCAnJDAnKSA9PT0gJyc7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSkoKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLXVzZWxlc3MtZG9sbGFyLXJlcGxhY2VtZW50cyAtLSBmYWxzZSBwb3NpdGl2ZVxuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3JlcGxhY2UnLCBmdW5jdGlvbiAoXywgbmF0aXZlUmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBVTlNBRkVfU1VCU1RJVFVURSA9IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFID8gJyQnIDogJyQwJztcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXG4gICAgZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgcmVwbGFjZXIgPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2Qoc2VhcmNoVmFsdWUsIFJFUExBQ0UpO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyXG4gICAgICAgID8gY2FsbChyZXBsYWNlciwgc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiBjYWxsKG5hdGl2ZVJlcGxhY2UsIHRvU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAoc3RyaW5nLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHR5cGVvZiByZXBsYWNlVmFsdWUgPT0gJ3N0cmluZycgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsIFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEgJiZcbiAgICAgICAgc3RyaW5nSW5kZXhPZihyZXBsYWNlVmFsdWUsICckPCcpID09PSAtMVxuICAgICAgKSB7XG4gICAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUobmF0aXZlUmVwbGFjZSwgcngsIFMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gaXNDYWxsYWJsZShyZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gdG9TdHJpbmcocmVwbGFjZVZhbHVlKTtcblxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuXG4gICAgICAgIHB1c2gocmVzdWx0cywgcmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgICAgICB2YXIgbWF0Y2hlZCA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IG1heChtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBwdXNoKGNhcHR1cmVzLCBtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBjb25jYXQoW21hdGNoZWRdLCBjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHB1c2gocmVwbGFjZXJBcmdzLCBuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSB0b1N0cmluZyhhcHBseShyZXBsYWNlVmFsdWUsIHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBzdHJpbmdTbGljZShTLCBuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIHN0cmluZ1NsaWNlKFMsIG5leHRTb3VyY2VQb3NpdGlvbik7XG4gICAgfVxuICBdO1xufSwgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIHx8ICFSRVBMQUNFX0tFRVBTXyQwIHx8IFJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1yZWdleHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLlVOU1VQUE9SVEVEX1k7XG52YXIgTUFYX1VJTlQzMiA9IDB4RkZGRkZGRkY7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgJHB1c2ggPSBbXS5wdXNoO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKCRwdXNoKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4vLyBXZWV4IEpTIGhhcyBmcm96ZW4gYnVpbHQtaW4gcHJvdG90eXBlcywgc28gdXNlIHRyeSAvIGNhdGNoIHdyYXBwZXJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCAhPT0gMiB8fCByZXN1bHRbMF0gIT09ICdhJyB8fCByZXN1bHRbMV0gIT09ICdiJztcbn0pO1xuXG4vLyBAQHNwbGl0IGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc3BsaXQnLCBmdW5jdGlvbiAoU1BMSVQsIG5hdGl2ZVNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYycuc3BsaXQoLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLWVtcHR5LWdyb3VwIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgJ3Rlc3QnLnNwbGl0KC8oPzopLywgLTEpLmxlbmd0aCAhPSA0IHx8XG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPSAyIHx8XG4gICAgJy4nLnNwbGl0KC8oLj8pKC4/KS8pLmxlbmd0aCAhPSA0IHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICcuJy5zcGxpdCgvKCkoKS8pLmxlbmd0aCA+IDEgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGhcbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtzdHJpbmddO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICByZXR1cm4gY2FsbChuYXRpdmVTcGxpdCwgc3RyaW5nLCBzZXBhcmF0b3IsIGxpbSk7XG4gICAgICB9XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aDtcbiAgICAgIHdoaWxlIChtYXRjaCA9IGNhbGwocmVnZXhwRXhlYywgc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xuICAgICAgICBsYXN0SW5kZXggPSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBwdXNoKG91dHB1dCwgc3RyaW5nU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nLmxlbmd0aCkgYXBwbHkoJHB1c2gsIG91dHB1dCwgYXJyYXlTbGljZShtYXRjaCwgMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0Lmxlbmd0aCA+PSBsaW0pIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHkubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFleGVjKHNlcGFyYXRvckNvcHksICcnKSkgcHVzaChvdXRwdXQsICcnKTtcbiAgICAgIH0gZWxzZSBwdXNoKG91dHB1dCwgc3RyaW5nU2xpY2Uoc3RyaW5nLCBsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0Lmxlbmd0aCA+IGxpbSA/IGFycmF5U2xpY2Uob3V0cHV0LCAwLCBsaW0pIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCcuc3BsaXQodW5kZWZpbmVkLCAwKS5sZW5ndGgpIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogY2FsbChuYXRpdmVTcGxpdCwgdGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIGludGVybmFsU3BsaXQgPSBuYXRpdmVTcGxpdDtcblxuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHNlcGFyYXRvciwgU1BMSVQpO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyXG4gICAgICAgID8gY2FsbChzcGxpdHRlciwgc2VwYXJhdG9yLCBPLCBsaW1pdClcbiAgICAgICAgOiBjYWxsKGludGVybmFsU3BsaXQsIHRvU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxuICAgIC8vXG4gICAgLy8gTk9URTogVGhpcyBjYW5ub3QgYmUgcHJvcGVybHkgcG9seWZpbGxlZCBpbiBlbmdpbmVzIHRoYXQgZG9uJ3Qgc3VwcG9ydFxuICAgIC8vIHRoZSAneScgZmxhZy5cbiAgICBmdW5jdGlvbiAoc3RyaW5nLCBsaW1pdCkge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJ4LCBTLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gbmF0aXZlU3BsaXQpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFVOU1VQUE9SVEVEX1kgPyAnZycgOiAneScpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoVU5TVVBQT1JURURfWSA/ICdeKD86JyArIHJ4LnNvdXJjZSArICcpJyA6IHJ4LCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gVU5TVVBQT1JURURfWSA/IDAgOiBxO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBVTlNVUFBPUlRFRF9ZID8gc3RyaW5nU2xpY2UoUywgcSkgOiBTKTtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB6ID09PSBudWxsIHx8XG4gICAgICAgICAgKGUgPSBtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFVOU1VQUE9SVEVEX1kgPyBxIDogMCkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoKEEsIHN0cmluZ1NsaWNlKFMsIHAsIHEpKTtcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIHB1c2goQSwgeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcHVzaChBLCBzdHJpbmdTbGljZShTLCBwKSk7XG4gICAgICByZXR1cm4gQTtcbiAgICB9XG4gIF07XG59LCAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDLCBVTlNVUFBPUlRFRF9ZKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciB1biRTdGFydHNXaXRoID0gdW5jdXJyeVRoaXMoJycuc3RhcnRzV2l0aCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIHVuJFN0YXJ0c1dpdGhcbiAgICAgID8gdW4kU3RhcnRzV2l0aCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiBzdHJpbmdTbGljZSh0aGF0LCBpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG5cbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sICYmICRTeW1ib2xbUFJPVE9UWVBFXTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoU3ltYm9sUHJvdG90eXBlKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzT3duKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXNPd24oTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwoJHByb3BlcnR5SXNFbnVtZXJhYmxlLCBwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1Byb3BlcnR5S2V5KFYpO1xuICB2YXIgZW51bWVyYWJsZSA9IGNhbGwobmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUsIHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBQKSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXNPd24odGhpcywgUCkgfHwgIWhhc093bihBbGxTeW1ib2xzLCBQKSB8fCBoYXNPd24odGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF1cbiAgICA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzT3duKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpKSBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzT3duKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHB1c2gocmVzdWx0LCBBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcykpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAkdG9TdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBjYWxsKHNldHRlciwgT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhc093bih0aGlzLCBISURERU4pICYmIGhhc093bih0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2xbUFJPVE9UWVBFXTtcblxuICBkZWZpbmVCdWlsdEluKFN5bWJvbFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICBkZWZpbmVCdWlsdEluKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydGllcztcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICBkZWZpbmVCdWlsdEluKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXNcbn0pO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUoKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHN5bWJvbFRvU3RyaW5nID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgdmFyIHN5bWJvbFZhbHVlT2YgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudmFsdWVPZik7XG4gIHZhciByZWdleHAgPSAvXlN5bWJvbFxcKCguKilcXClbXildKyQvO1xuICB2YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuICB2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbiAgZGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gc3ltYm9sVmFsdWVPZih0aGlzKTtcbiAgICAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZyhzeW1ib2wpO1xuICAgICAgaWYgKGhhc093bihFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gTkFUSVZFX1NZTUJPTCA/IHN0cmluZ1NsaWNlKHN0cmluZywgNywgLTEpIDogcmVwbGFjZShzdHJpbmcsIHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgU3ltYm9sOiBTeW1ib2xXcmFwcGVyXG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MX1JFR0lTVFJZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wtcmVnaXN0cnknKTtcblxudmFyIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N0cmluZy10by1zeW1ib2wtcmVnaXN0cnknKTtcbnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7XG5cbi8vIGBTeW1ib2wuZm9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuJCh7IHRhcmdldDogJ1N5bWJvbCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0xfUkVHSVNUUlkgfSwge1xuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhrZXkpO1xuICAgIGlmIChoYXNPd24oU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJykoc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH1cbn0pO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5pdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLml0ZXJhdG9yXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuZm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5rZXktZm9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmpzb24uc3RyaW5naWZ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MX1JFR0lTVFJZID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wtcmVnaXN0cnknKTtcblxudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcblxuLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4kKHsgdGFyZ2V0OiAnU3ltYm9sJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSB9LCB7XG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKHN5bSkgKyAnIGlzIG5vdCBhIHN5bWJvbCcpO1xuICAgIGlmIChoYXNPd24oU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSwgc3ltKSkgcmV0dXJuIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltXTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcblxudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG4vLyBgV2Vha01hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC1jb25zdHJ1Y3RvclxudmFyICRXZWFrTWFwID0gY29sbGVjdGlvbignV2Vha01hcCcsIHdyYXBwZXIsIGNvbGxlY3Rpb25XZWFrKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuLy8gV2UgY2FuJ3QgdXNlIGZlYXR1cmUgZGV0ZWN0aW9uIGJlY2F1c2UgaXQgY3Jhc2ggc29tZSBvbGQgSUUgYnVpbGRzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDg1XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxXZWFrTWFwID0gY29sbGVjdGlvbldlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgJ1dlYWtNYXAnLCB0cnVlKTtcbiAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXSk7XG4gIHZhciBuYXRpdmVIYXMgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmhhcyk7XG4gIHZhciBuYXRpdmVHZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmdldCk7XG4gIHZhciBuYXRpdmVTZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLnNldCk7XG4gIGRlZmluZUJ1aWx0SW5zKFdlYWtNYXBQcm90b3R5cGUsIHtcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXModGhpcywga2V5KSA/IG5hdGl2ZUdldCh0aGlzLCBrZXkpIDogc3RhdGUuZnJvemVuLmdldChrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlR2V0KHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcyh0aGlzLCBrZXkpID8gbmF0aXZlU2V0KHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAuY29uc3RydWN0b3InKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIHtcbiAgICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlKTtcbiAgfVxufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpIHtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpO1xufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlLCAnRE9NVG9rZW5MaXN0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cnlOb2RlUmVxdWlyZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktbm9kZS1yZXF1aXJlJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZXJyb3JUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci10by1zdHJpbmcnKTtcbnZhciBub3JtYWxpemVTdHJpbmdBcmd1bWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3JtYWxpemUtc3RyaW5nLWFyZ3VtZW50Jyk7XG52YXIgRE9NRXhjZXB0aW9uQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1leGNlcHRpb24tY29uc3RhbnRzJyk7XG52YXIgY2xlYXJFcnJvclN0YWNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsZWFyLWVycm9yLXN0YWNrJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBET01fRVhDRVBUSU9OID0gJ0RPTUV4Y2VwdGlvbic7XG52YXIgREFUQV9DTE9ORV9FUlIgPSAnREFUQV9DTE9ORV9FUlInO1xudmFyIEVycm9yID0gZ2V0QnVpbHRJbignRXJyb3InKTtcbi8vIE5vZGVKUyA8IDE3LjAgZG9lcyBub3QgZXhwb3NlIGBET01FeGNlcHRpb25gIHRvIGdsb2JhbFxudmFyIE5hdGl2ZURPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBOb2RlSlMgPCAxNS4wIGRvZXMgbm90IGV4cG9zZSBgTWVzc2FnZUNoYW5uZWxgIHRvIGdsb2JhbFxuICAgIHZhciBNZXNzYWdlQ2hhbm5lbCA9IGdldEJ1aWx0SW4oJ01lc3NhZ2VDaGFubmVsJykgfHwgdHJ5Tm9kZVJlcXVpcmUoJ3dvcmtlcl90aHJlYWRzJykuTWVzc2FnZUNoYW5uZWw7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzLXgvbm8td2Vhay1tYXAsIHVuaWNvcm4vcmVxdWlyZS1wb3N0LW1lc3NhZ2UtdGFyZ2V0LW9yaWdpbiAtLSBzYWZlXG4gICAgbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEucG9zdE1lc3NhZ2UobmV3IFdlYWtNYXAoKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLm5hbWUgPT0gREFUQV9DTE9ORV9FUlIgJiYgZXJyb3IuY29kZSA9PSAyNSkgcmV0dXJuIGVycm9yLmNvbnN0cnVjdG9yO1xuICB9XG59KSgpO1xudmFyIE5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZSA9IE5hdGl2ZURPTUV4Y2VwdGlvbiAmJiBOYXRpdmVET01FeGNlcHRpb24ucHJvdG90eXBlO1xudmFyIEVycm9yUHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoRE9NX0VYQ0VQVElPTik7XG52YXIgSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBFcnJvcihET01fRVhDRVBUSU9OKTtcblxudmFyIGNvZGVGb3IgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaGFzT3duKERPTUV4Y2VwdGlvbkNvbnN0YW50cywgbmFtZSkgJiYgRE9NRXhjZXB0aW9uQ29uc3RhbnRzW25hbWVdLm0gPyBET01FeGNlcHRpb25Db25zdGFudHNbbmFtZV0uYyA6IDA7XG59O1xuXG52YXIgJERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIERPTUV4Y2VwdGlvbigpIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBET01FeGNlcHRpb25Qcm90b3R5cGUpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1lc3NhZ2UgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgdmFyIG5hbWUgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChhcmd1bWVudHNMZW5ndGggPCAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLCAnRXJyb3InKTtcbiAgdmFyIGNvZGUgPSBjb2RlRm9yKG5hbWUpO1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBET01fRVhDRVBUSU9OLFxuICAgIG5hbWU6IG5hbWUsXG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBjb2RlOiBjb2RlXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gIH1cbiAgaWYgKEhBU19TVEFDSykge1xuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpO1xuICAgIGVycm9yLm5hbWUgPSBET01fRVhDRVBUSU9OO1xuICAgIGRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBjbGVhckVycm9yU3RhY2soZXJyb3Iuc3RhY2ssIDEpKSk7XG4gIH1cbn07XG5cbnZhciBET01FeGNlcHRpb25Qcm90b3R5cGUgPSAkRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IGNyZWF0ZShFcnJvclByb3RvdHlwZSk7XG5cbnZhciBjcmVhdGVHZXR0ZXJEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4geyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIGdldDogZ2V0IH07XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gY3JlYXRlR2V0dGVyRGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcylba2V5XTtcbiAgfSk7XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvZGUnLCBnZXR0ZXJGb3IoJ2NvZGUnKSk7XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihET01FeGNlcHRpb25Qcm90b3R5cGUsICdtZXNzYWdlJywgZ2V0dGVyRm9yKCdtZXNzYWdlJykpO1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnbmFtZScsIGdldHRlckZvcignbmFtZScpKTtcbn1cblxuZGVmaW5lUHJvcGVydHkoRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJERPTUV4Y2VwdGlvbikpO1xuXG4vLyBGRjM2LSBET01FeGNlcHRpb24gaXMgYSBmdW5jdGlvbiwgYnV0IGNhbid0IGJlIGNvbnN0cnVjdGVkXG52YXIgSU5DT1JSRUNUX0NPTlNUUlVDVE9SID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIShuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKCkgaW5zdGFuY2VvZiBFcnJvcik7XG59KTtcblxuLy8gU2FmYXJpIDEwLjEgLyBDaHJvbWUgMzItIC8gSUU4LSBET01FeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nIGJ1Z3NcbnZhciBJTkNPUlJFQ1RfVE9fU1RSSU5HID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEVycm9yUHJvdG90eXBlLnRvU3RyaW5nICE9PSBlcnJvclRvU3RyaW5nIHx8IFN0cmluZyhuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsIDIpKSAhPT0gJzI6IDEnO1xufSk7XG5cbi8vIERlbm8gMS42LjMtIERPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29kZSBqdXN0IG1pc3NlZFxudmFyIElOQ09SUkVDVF9DT0RFID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBOYXRpdmVET01FeGNlcHRpb24oMSwgJ0RhdGFDbG9uZUVycm9yJykuY29kZSAhPT0gMjU7XG59KTtcblxuLy8gRGVubyAxLjYuMy0gRE9NRXhjZXB0aW9uIGNvbnN0YW50cyBqdXN0IG1pc3NlZFxudmFyIE1JU1NFRF9DT05TVEFOVFMgPSBJTkNPUlJFQ1RfQ09OU1RSVUNUT1JcbiAgfHwgTmF0aXZlRE9NRXhjZXB0aW9uW0RBVEFfQ0xPTkVfRVJSXSAhPT0gMjVcbiAgfHwgTmF0aXZlRE9NRXhjZXB0aW9uUHJvdG90eXBlW0RBVEFfQ0xPTkVfRVJSXSAhPT0gMjU7XG5cbnZhciBGT1JDRURfQ09OU1RSVUNUT1IgPSBJU19QVVJFID8gSU5DT1JSRUNUX1RPX1NUUklORyB8fCBJTkNPUlJFQ1RfQ09ERSB8fCBNSVNTRURfQ09OU1RBTlRTIDogSU5DT1JSRUNUX0NPTlNUUlVDVE9SO1xuXG4vLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNpZGwtRE9NRXhjZXB0aW9uXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfQ09OU1RSVUNUT1IgfSwge1xuICBET01FeGNlcHRpb246IEZPUkNFRF9DT05TVFJVQ1RPUiA/ICRET01FeGNlcHRpb24gOiBOYXRpdmVET01FeGNlcHRpb25cbn0pO1xuXG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7XG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSA9IFBvbHlmaWxsZWRET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG5pZiAoSU5DT1JSRUNUX1RPX1NUUklORyAmJiAoSVNfUFVSRSB8fCBOYXRpdmVET01FeGNlcHRpb24gPT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pKSB7XG4gIGRlZmluZUJ1aWx0SW4oUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZXJyb3JUb1N0cmluZyk7XG59XG5cbmlmIChJTkNPUlJFQ1RfQ09ERSAmJiBERVNDUklQVE9SUyAmJiBOYXRpdmVET01FeGNlcHRpb24gPT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pIHtcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb2RlJywgY3JlYXRlR2V0dGVyRGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvZGVGb3IoYW5PYmplY3QodGhpcykubmFtZSk7XG4gIH0pKTtcbn1cblxuZm9yICh2YXIga2V5IGluIERPTUV4Y2VwdGlvbkNvbnN0YW50cykgaWYgKGhhc093bihET01FeGNlcHRpb25Db25zdGFudHMsIGtleSkpIHtcbiAgdmFyIGNvbnN0YW50ID0gRE9NRXhjZXB0aW9uQ29uc3RhbnRzW2tleV07XG4gIHZhciBjb25zdGFudE5hbWUgPSBjb25zdGFudC5zO1xuICB2YXIgZGVzY3JpcHRvciA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig2LCBjb25zdGFudC5jKTtcbiAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lKSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSwgZGVzY3JpcHRvcik7XG4gIH1cbiAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgY29uc3RhbnROYW1lKSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsIGNvbnN0YW50TmFtZSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciBET01FeGNlcHRpb25Db25zdGFudHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWV4Y2VwdGlvbi1jb25zdGFudHMnKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2snKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIERPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJztcbnZhciBFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG52YXIgTmF0aXZlRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKTtcblxudmFyICRET01FeGNlcHRpb24gPSBmdW5jdGlvbiBET01FeGNlcHRpb24oKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgRE9NRXhjZXB0aW9uUHJvdG90eXBlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIHZhciBuYW1lID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgJ0Vycm9yJyk7XG4gIHZhciB0aGF0ID0gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbihtZXNzYWdlLCBuYW1lKTtcbiAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XG4gIGVycm9yLm5hbWUgPSBET01fRVhDRVBUSU9OO1xuICBkZWZpbmVQcm9wZXJ0eSh0aGF0LCAnc3RhY2snLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgY2xlYXJFcnJvclN0YWNrKGVycm9yLnN0YWNrLCAxKSkpO1xuICBpbmhlcml0SWZSZXF1aXJlZCh0aGF0LCB0aGlzLCAkRE9NRXhjZXB0aW9uKTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG52YXIgRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gJERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBOYXRpdmVET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG52YXIgRVJST1JfSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBFcnJvcihET01fRVhDRVBUSU9OKTtcbnZhciBET01fRVhDRVBUSU9OX0hBU19TVEFDSyA9ICdzdGFjaycgaW4gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigxLCAyKTtcbnZhciBGT1JDRURfQ09OU1RSVUNUT1IgPSBFUlJPUl9IQVNfU1RBQ0sgJiYgIURPTV9FWENFUFRJT05fSEFTX1NUQUNLO1xuXG4vLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvciBwYXRjaCBmb3IgYC5zdGFja2Agd2hlcmUgaXQncyByZXF1aXJlZFxuLy8gaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNlcy1ET01FeGNlcHRpb24tc3BlY2lhbG5lc3NcbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEX0NPTlNUUlVDVE9SIH0sIHsgLy8gVE9ETzogZml4IGV4cG9ydCBsb2dpY1xuICBET01FeGNlcHRpb246IEZPUkNFRF9DT05TVFJVQ1RPUiA/ICRET01FeGNlcHRpb24gOiBOYXRpdmVET01FeGNlcHRpb25cbn0pO1xuXG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7XG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSA9IFBvbHlmaWxsZWRET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG5pZiAoUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciAhPT0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbikge1xuICBpZiAoIUlTX1BVUkUpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgUG9seWZpbGxlZERPTUV4Y2VwdGlvbikpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIERPTUV4Y2VwdGlvbkNvbnN0YW50cykgaWYgKGhhc093bihET01FeGNlcHRpb25Db25zdGFudHMsIGtleSkpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBET01FeGNlcHRpb25Db25zdGFudHNba2V5XTtcbiAgICB2YXIgY29uc3RhbnROYW1lID0gY29uc3RhbnQucztcbiAgICBpZiAoIWhhc093bihQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uLCBjb25zdGFudE5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig2LCBjb25zdGFudC5jKSk7XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG52YXIgRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nO1xuXG5zZXRUb1N0cmluZ1RhZyhnZXRCdWlsdEluKERPTV9FWENFUFRJT04pLCBET01fRVhDRVBUSU9OKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5U29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVUkxfU0VBUkNIX1BBUkFNUyA9ICdVUkxTZWFyY2hQYXJhbXMnO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SID0gVVJMX1NFQVJDSF9QQVJBTVMgKyAnSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVMpO1xudmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy14L25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIEF2b2lkIE5vZGVKUyBleHBlcmltZW50YWwgd2FybmluZ1xudmFyIHNhZmVHZXRCdWlsdEluID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFERVNDUklQVE9SUykgcmV0dXJuIGdsb2JhbFtuYW1lXTtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCBuYW1lKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbn07XG5cbnZhciBuYXRpdmVGZXRjaCA9IHNhZmVHZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIE5hdGl2ZVJlcXVlc3QgPSBzYWZlR2V0QnVpbHRJbignUmVxdWVzdCcpO1xudmFyIEhlYWRlcnMgPSBzYWZlR2V0QnVpbHRJbignSGVhZGVycycpO1xudmFyIFJlcXVlc3RQcm90b3R5cGUgPSBOYXRpdmVSZXF1ZXN0ICYmIE5hdGl2ZVJlcXVlc3QucHJvdG90eXBlO1xudmFyIEhlYWRlcnNQcm90b3R5cGUgPSBIZWFkZXJzICYmIEhlYWRlcnMucHJvdG90eXBlO1xudmFyIFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBkZWNvZGVVUklDb21wb25lbnQgPSBnbG9iYWwuZGVjb2RlVVJJQ29tcG9uZW50O1xudmFyIGVuY29kZVVSSUNvbXBvbmVudCA9IGdsb2JhbC5lbmNvZGVVUklDb21wb25lbnQ7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzaGlmdCA9IHVuY3VycnlUaGlzKFtdLnNoaWZ0KTtcbnZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xudmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgcGx1cyA9IC9cXCsvZztcbnZhciBzZXF1ZW5jZXMgPSBBcnJheSg0KTtcblxudmFyIHBlcmNlbnRTZXF1ZW5jZSA9IGZ1bmN0aW9uIChieXRlcykge1xuICByZXR1cm4gc2VxdWVuY2VzW2J5dGVzIC0gMV0gfHwgKHNlcXVlbmNlc1tieXRlcyAtIDFdID0gUmVnRXhwKCcoKD86JVtcXFxcZGEtZl17Mn0peycgKyBieXRlcyArICd9KScsICdnaScpKTtcbn07XG5cbnZhciBwZXJjZW50RGVjb2RlID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzZXF1ZW5jZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHNlcXVlbmNlO1xuICB9XG59O1xuXG52YXIgZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHJlcGxhY2UoaXQsIHBsdXMsICcgJyk7XG4gIHZhciBieXRlcyA9IDQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdoaWxlIChieXRlcykge1xuICAgICAgcmVzdWx0ID0gcmVwbGFjZShyZXN1bHQsIHBlcmNlbnRTZXF1ZW5jZShieXRlcy0tKSwgcGVyY2VudERlY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5cbnZhciBmaW5kID0gL1shJygpfl18JTIwL2c7XG5cbnZhciByZXBsYWNlbWVudHMgPSB7XG4gICchJzogJyUyMScsXG4gIFwiJ1wiOiAnJTI3JyxcbiAgJygnOiAnJTI4JyxcbiAgJyknOiAnJTI5JyxcbiAgJ34nOiAnJTdFJyxcbiAgJyUyMCc6ICcrJ1xufTtcblxudmFyIHJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoKSB7XG4gIHJldHVybiByZXBsYWNlbWVudHNbbWF0Y2hdO1xufTtcblxudmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gcmVwbGFjZShlbmNvZGVVUklDb21wb25lbnQoaXQpLCBmaW5kLCByZXBsYWNlcik7XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IgPSBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKGZ1bmN0aW9uIEl0ZXJhdG9yKHBhcmFtcywga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUixcbiAgICBpdGVyYXRvcjogZ2V0SXRlcmF0b3IoZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZShwYXJhbXMpLmVudHJpZXMpLFxuICAgIGtpbmQ6IGtpbmRcbiAgfSk7XG59LCAnSXRlcmF0b3InLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUodGhpcyk7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIHN0ZXAgPSBzdGF0ZS5pdGVyYXRvci5uZXh0KCk7XG4gIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gIGlmICghc3RlcC5kb25lKSB7XG4gICAgc3RlcC52YWx1ZSA9IGtpbmQgPT09ICdrZXlzJyA/IGVudHJ5LmtleSA6IGtpbmQgPT09ICd2YWx1ZXMnID8gZW50cnkudmFsdWUgOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV07XG4gIH0gcmV0dXJuIHN0ZXA7XG59LCB0cnVlKTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1N0YXRlID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgdGhpcy5lbnRyaWVzID0gW107XG4gIHRoaXMudXJsID0gbnVsbDtcblxuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGlzT2JqZWN0KGluaXQpKSB0aGlzLnBhcnNlT2JqZWN0KGluaXQpO1xuICAgIGVsc2UgdGhpcy5wYXJzZVF1ZXJ5KHR5cGVvZiBpbml0ID09ICdzdHJpbmcnID8gY2hhckF0KGluaXQsIDApID09PSAnPycgPyBzdHJpbmdTbGljZShpbml0LCAxKSA6IGluaXQgOiAkdG9TdHJpbmcoaW5pdCkpO1xuICB9XG59O1xuXG5VUkxTZWFyY2hQYXJhbXNTdGF0ZS5wcm90b3R5cGUgPSB7XG4gIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TLFxuICBiaW5kVVJMOiBmdW5jdGlvbiAodXJsKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfSxcbiAgcGFyc2VPYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChvYmplY3QpO1xuICAgIHZhciBpdGVyYXRvciwgbmV4dCwgc3RlcCwgZW50cnlJdGVyYXRvciwgZW50cnlOZXh0LCBmaXJzdCwgc2Vjb25kO1xuXG4gICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKG9iamVjdCwgaXRlcmF0b3JNZXRob2QpO1xuICAgICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICAgICAgZW50cnlJdGVyYXRvciA9IGdldEl0ZXJhdG9yKGFuT2JqZWN0KHN0ZXAudmFsdWUpKTtcbiAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKGZpcnN0ID0gY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgKHNlY29uZCA9IGNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fFxuICAgICAgICAgICFjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikuZG9uZVxuICAgICAgICApIHRocm93IFR5cGVFcnJvcignRXhwZWN0ZWQgc2VxdWVuY2Ugd2l0aCBsZW5ndGggMicpO1xuICAgICAgICBwdXNoKHRoaXMuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhmaXJzdC52YWx1ZSksIHZhbHVlOiAkdG9TdHJpbmcoc2Vjb25kLnZhbHVlKSB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgZm9yICh2YXIga2V5IGluIG9iamVjdCkgaWYgKGhhc093bihvYmplY3QsIGtleSkpIHtcbiAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleToga2V5LCB2YWx1ZTogJHRvU3RyaW5nKG9iamVjdFtrZXldKSB9KTtcbiAgICB9XG4gIH0sXG4gIHBhcnNlUXVlcnk6IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgIGlmIChxdWVyeSkge1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzcGxpdChxdWVyeSwgJyYnKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgYXR0cmlidXRlLCBlbnRyeTtcbiAgICAgIHdoaWxlIChpbmRleCA8IGF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXgrK107XG4gICAgICAgIGlmIChhdHRyaWJ1dGUubGVuZ3RoKSB7XG4gICAgICAgICAgZW50cnkgPSBzcGxpdChhdHRyaWJ1dGUsICc9Jyk7XG4gICAgICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHtcbiAgICAgICAgICAgIGtleTogZGVzZXJpYWxpemUoc2hpZnQoZW50cnkpKSxcbiAgICAgICAgICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShqb2luKGVudHJ5LCAnPScpKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzZXJpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIHB1c2gocmVzdWx0LCBzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpO1xuICAgIH0gcmV0dXJuIGpvaW4ocmVzdWx0LCAnJicpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVudHJpZXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnBhcnNlUXVlcnkodGhpcy51cmwucXVlcnkpO1xuICB9LFxuICB1cGRhdGVVUkw6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy51cmwpIHRoaXMudXJsLnVwZGF0ZSgpO1xuICB9XG59O1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbnRlcmZhY2UtdXJsc2VhcmNocGFyYW1zXG52YXIgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBVUkxTZWFyY2hQYXJhbXMoLyogaW5pdCAqLykge1xuICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSk7XG4gIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywgbmV3IFVSTFNlYXJjaFBhcmFtc1N0YXRlKGluaXQpKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbmRlZmluZUJ1aWx0SW5zKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwge1xuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtYXBwZW5kXG4gIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBwdXNoKHN0YXRlLmVudHJpZXMsIHsga2V5OiAkdG9TdHJpbmcobmFtZSksIHZhbHVlOiAkdG9TdHJpbmcodmFsdWUpIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5kZWxldGVgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZGVsZXRlXG4gICdkZWxldGUnOiBmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBzcGxpY2UoZW50cmllcywgaW5kZXgsIDEpO1xuICAgICAgZWxzZSBpbmRleCsrO1xuICAgIH1cbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldFxuICBnZXQ6IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHJldHVybiBlbnRyaWVzW2luZGV4XS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldEFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRhbGxcbiAgZ2V0QWxsOiBmdW5jdGlvbiBnZXRBbGwobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcHVzaChyZXN1bHQsIGVudHJpZXNbaW5kZXhdLnZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWhhc1xuICBoYXM6IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleCsrXS5rZXkgPT09IGtleSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNldFxuICBzZXQ6IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzO1xuICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIHZhbCA9ICR0b1N0cmluZyh2YWx1ZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGZvdW5kKSBzcGxpY2UoZW50cmllcywgaW5kZXgtLSwgMSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWZvdW5kKSBwdXNoKGVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiB2YWwgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc29ydFxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KCkge1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgYXJyYXlTb3J0KHN0YXRlLmVudHJpZXMsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS5rZXkgPiBiLmtleSA/IDEgOiAtMTtcbiAgICB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2sgLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgZW50cnk7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTtcbiAgICAgIGJvdW5kRnVuY3Rpb24oZW50cnkudmFsdWUsIGVudHJ5LmtleSwgdGhpcyk7XG4gICAgfVxuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5rZXlzYCBtZXRob2RcbiAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ3ZhbHVlcycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2RcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdlbnRyaWVzJyk7XG4gIH1cbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuZGVmaW5lQnVpbHRJbihVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIElURVJBVE9SLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZW50cmllcywgeyBuYW1lOiAnZW50cmllcycgfSk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsc2VhcmNocGFyYW1zLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxuZGVmaW5lQnVpbHRJbihVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5zZXJpYWxpemUoKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuc2V0VG9TdHJpbmdUYWcoVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsIFVSTF9TRUFSQ0hfUEFSQU1TKTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMIH0sIHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvclxufSk7XG5cbi8vIFdyYXAgYGZldGNoYCBhbmQgYFJlcXVlc3RgIGZvciBjb3JyZWN0IHdvcmsgd2l0aCBwb2x5ZmlsbGVkIGBVUkxTZWFyY2hQYXJhbXNgXG5pZiAoIVVTRV9OQVRJVkVfVVJMICYmIGlzQ2FsbGFibGUoSGVhZGVycykpIHtcbiAgdmFyIGhlYWRlcnNIYXMgPSB1bmN1cnJ5VGhpcyhIZWFkZXJzUHJvdG90eXBlLmhhcyk7XG4gIHZhciBoZWFkZXJzU2V0ID0gdW5jdXJyeVRoaXMoSGVhZGVyc1Byb3RvdHlwZS5zZXQpO1xuXG4gIHZhciB3cmFwUmVxdWVzdE9wdGlvbnMgPSBmdW5jdGlvbiAoaW5pdCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgdmFyIGJvZHkgPSBpbml0LmJvZHk7XG4gICAgICB2YXIgaGVhZGVycztcbiAgICAgIGlmIChjbGFzc29mKGJvZHkpID09PSBVUkxfU0VBUkNIX1BBUkFNUykge1xuICAgICAgICBoZWFkZXJzID0gaW5pdC5oZWFkZXJzID8gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKSA6IG5ldyBIZWFkZXJzKCk7XG4gICAgICAgIGlmICghaGVhZGVyc0hhcyhoZWFkZXJzLCAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgICBoZWFkZXJzU2V0KGhlYWRlcnMsICdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlKGluaXQsIHtcbiAgICAgICAgICBib2R5OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgJHRvU3RyaW5nKGJvZHkpKSxcbiAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSByZXR1cm4gaW5pdDtcbiAgfTtcblxuICBpZiAoaXNDYWxsYWJsZShuYXRpdmVGZXRjaCkpIHtcbiAgICAkKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBkb250Q2FsbEdldFNldDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUZldGNoKGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzQ2FsbGFibGUoTmF0aXZlUmVxdWVzdCkpIHtcbiAgICB2YXIgUmVxdWVzdENvbnN0cnVjdG9yID0gZnVuY3Rpb24gUmVxdWVzdChpbnB1dCAvKiAsIGluaXQgKi8pIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgUmVxdWVzdFByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3IE5hdGl2ZVJlcXVlc3QoaW5wdXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gd3JhcFJlcXVlc3RPcHRpb25zKGFyZ3VtZW50c1sxXSkgOiB7fSk7XG4gICAgfTtcblxuICAgIFJlcXVlc3RQcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZXF1ZXN0Q29uc3RydWN0b3I7XG4gICAgUmVxdWVzdENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFJlcXVlc3RQcm90b3R5cGU7XG5cbiAgICAkKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZG9udENhbGxHZXRTZXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBSZXF1ZXN0OiBSZXF1ZXN0Q29uc3RydWN0b3JcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvcixcbiAgZ2V0U3RhdGU6IGdldEludGVybmFsUGFyYW1zU3RhdGVcbn07XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuY29uc3RydWN0b3InKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcbnZhciBhcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgY29kZUF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jb2RlQXQ7XG52YXIgdG9BU0NJSSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgVVJMU2VhcmNoUGFyYW1zTW9kdWxlID0gcmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuY29uc3RydWN0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxVUkxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKCdVUkwnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXMgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuVVJMU2VhcmNoUGFyYW1zO1xudmFyIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuZ2V0U3RhdGU7XG5cbnZhciBOYXRpdmVVUkwgPSBnbG9iYWwuVVJMO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xudmFyIHBvcCA9IHVuY3VycnlUaGlzKFtdLnBvcCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzaGlmdCA9IHVuY3VycnlUaGlzKFtdLnNoaWZ0KTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciB0b0xvd2VyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvTG93ZXJDYXNlKTtcbnZhciB1bnNoaWZ0ID0gdW5jdXJyeVRoaXMoW10udW5zaGlmdCk7XG5cbnZhciBJTlZBTElEX0FVVEhPUklUWSA9ICdJbnZhbGlkIGF1dGhvcml0eSc7XG52YXIgSU5WQUxJRF9TQ0hFTUUgPSAnSW52YWxpZCBzY2hlbWUnO1xudmFyIElOVkFMSURfSE9TVCA9ICdJbnZhbGlkIGhvc3QnO1xudmFyIElOVkFMSURfUE9SVCA9ICdJbnZhbGlkIHBvcnQnO1xuXG52YXIgQUxQSEEgPSAvW2Etel0vaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tb2JzY3VyZS1yYW5nZSAtLSBzYWZlXG52YXIgQUxQSEFOVU1FUklDID0gL1tcXGQrLS5hLXpdL2k7XG52YXIgRElHSVQgPSAvXFxkLztcbnZhciBIRVhfU1RBUlQgPSAvXjB4L2k7XG52YXIgT0NUID0gL15bMC03XSskLztcbnZhciBERUMgPSAvXlxcZCskLztcbnZhciBIRVggPSAvXltcXGRhLWZdKyQvaTtcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1jb250cm9sLWNoYXJhY3RlciAtLSBzYWZlICovXG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCA9IC9bXFwwXFx0XFxuXFxyICMlLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQgPSAvW1xcMFxcdFxcblxcciAjLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcXHUwMDAwLVxcdTAwMjBdK3xbXFx1MDAwMC1cXHUwMDIwXSskL2c7XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx0XFxuXFxyXS9nO1xuLyogZXNsaW50LWVuYWJsZSByZWdleHAvbm8tY29udHJvbC1jaGFyYWN0ZXIgLS0gc2FmZSAqL1xudmFyIEVPRjtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpcHY0LW51bWJlci1wYXJzZXJcbnZhciBwYXJzZUlQdjQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIHBhcnRzID0gc3BsaXQoaW5wdXQsICcuJyk7XG4gIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7XG4gIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHtcbiAgICBwYXJ0cy5sZW5ndGgtLTtcbiAgfVxuICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHBhcnRzTGVuZ3RoID4gNCkgcmV0dXJuIGlucHV0O1xuICBudW1iZXJzID0gW107XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2luZGV4XTtcbiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0O1xuICAgIHJhZGl4ID0gMTA7XG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBjaGFyQXQocGFydCwgMCkgPT0gJzAnKSB7XG4gICAgICByYWRpeCA9IGV4ZWMoSEVYX1NUQVJULCBwYXJ0KSA/IDE2IDogODtcbiAgICAgIHBhcnQgPSBzdHJpbmdTbGljZShwYXJ0LCByYWRpeCA9PSA4ID8gMSA6IDIpO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghZXhlYyhyYWRpeCA9PSAxMCA/IERFQyA6IHJhZGl4ID09IDggPyBPQ1QgOiBIRVgsIHBhcnQpKSByZXR1cm4gaW5wdXQ7XG4gICAgICBudW1iZXIgPSBwYXJzZUludChwYXJ0LCByYWRpeCk7XG4gICAgfVxuICAgIHB1c2gobnVtYmVycywgbnVtYmVyKTtcbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSBwYXJ0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChudW1iZXIgPj0gcG93KDI1NiwgNSAtIHBhcnRzTGVuZ3RoKSkgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsO1xuICB9XG4gIGlwdjQgPSBwb3AobnVtYmVycyk7XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG51bWJlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgaXB2NCArPSBudW1iZXJzW2luZGV4XSAqIHBvdygyNTYsIDMgLSBpbmRleCk7XG4gIH1cbiAgcmV0dXJuIGlwdjQ7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaXB2Ni1wYXJzZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNociA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhckF0KGlucHV0LCBwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgaWYgKGNoYXJBdChpbnB1dCwgMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNocigpKSB7XG4gICAgaWYgKHBpZWNlSW5kZXggPT0gOCkgcmV0dXJuO1xuICAgIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICAgIGlmIChjb21wcmVzcyAhPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgcGllY2VJbmRleCsrO1xuICAgICAgY29tcHJlc3MgPSBwaWVjZUluZGV4O1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhbHVlID0gbGVuZ3RoID0gMDtcbiAgICB3aGlsZSAobGVuZ3RoIDwgNCAmJiBleGVjKEhFWCwgY2hyKCkpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICogMTYgKyBwYXJzZUludChjaHIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaHIoKSA9PSAnLicpIHtcbiAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgcG9pbnRlciAtPSBsZW5ndGg7XG4gICAgICBpZiAocGllY2VJbmRleCA+IDYpIHJldHVybjtcbiAgICAgIG51bWJlcnNTZWVuID0gMDtcbiAgICAgIHdoaWxlIChjaHIoKSkge1xuICAgICAgICBpcHY0UGllY2UgPSBudWxsO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPiAwKSB7XG4gICAgICAgICAgaWYgKGNocigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4ZWMoRElHSVQsIGNocigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoZXhlYyhESUdJVCwgY2hyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hyKCksIDEwKTtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKSBpcHY0UGllY2UgPSBudW1iZXI7XG4gICAgICAgICAgZWxzZSBpZiAoaXB2NFBpZWNlID09IDApIHJldHVybjtcbiAgICAgICAgICBlbHNlIGlwdjRQaWVjZSA9IGlwdjRQaWVjZSAqIDEwICsgbnVtYmVyO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPiAyNTUpIHJldHVybjtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IGFkZHJlc3NbcGllY2VJbmRleF0gKiAyNTYgKyBpcHY0UGllY2U7XG4gICAgICAgIG51bWJlcnNTZWVuKys7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA9PSAyIHx8IG51bWJlcnNTZWVuID09IDQpIHBpZWNlSW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChudW1iZXJzU2VlbiAhPSA0KSByZXR1cm47XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNocigpID09ICc6Jykge1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgaWYgKCFjaHIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hyKCkpIHJldHVybjtcbiAgICBhZGRyZXNzW3BpZWNlSW5kZXgrK10gPSB2YWx1ZTtcbiAgfVxuICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHtcbiAgICBzd2FwcyA9IHBpZWNlSW5kZXggLSBjb21wcmVzcztcbiAgICBwaWVjZUluZGV4ID0gNztcbiAgICB3aGlsZSAocGllY2VJbmRleCAhPSAwICYmIHN3YXBzID4gMCkge1xuICAgICAgc3dhcCA9IGFkZHJlc3NbcGllY2VJbmRleF07XG4gICAgICBhZGRyZXNzW3BpZWNlSW5kZXgtLV0gPSBhZGRyZXNzW2NvbXByZXNzICsgc3dhcHMgLSAxXTtcbiAgICAgIGFkZHJlc3NbY29tcHJlc3MgKyAtLXN3YXBzXSA9IHN3YXA7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBpZWNlSW5kZXggIT0gOCkgcmV0dXJuO1xuICByZXR1cm4gYWRkcmVzcztcbn07XG5cbnZhciBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSA9IGZ1bmN0aW9uIChpcHY2KSB7XG4gIHZhciBtYXhJbmRleCA9IG51bGw7XG4gIHZhciBtYXhMZW5ndGggPSAxO1xuICB2YXIgY3VyclN0YXJ0ID0gbnVsbDtcbiAgdmFyIGN1cnJMZW5ndGggPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICBmb3IgKDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgaWYgKGlwdjZbaW5kZXhdICE9PSAwKSB7XG4gICAgICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICAgICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGN1cnJTdGFydCA9IG51bGw7XG4gICAgICBjdXJyTGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJTdGFydCA9PT0gbnVsbCkgY3VyclN0YXJ0ID0gaW5kZXg7XG4gICAgICArK2N1cnJMZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgfVxuICByZXR1cm4gbWF4SW5kZXg7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2hvc3Qtc2VyaWFsaXppbmdcbnZhciBzZXJpYWxpemVIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHtcbiAgdmFyIHJlc3VsdCwgaW5kZXgsIGNvbXByZXNzLCBpZ25vcmUwO1xuICAvLyBpcHY0XG4gIGlmICh0eXBlb2YgaG9zdCA9PSAnbnVtYmVyJykge1xuICAgIHJlc3VsdCA9IFtdO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ7IGluZGV4KyspIHtcbiAgICAgIHVuc2hpZnQocmVzdWx0LCBob3N0ICUgMjU2KTtcbiAgICAgIGhvc3QgPSBmbG9vcihob3N0IC8gMjU2KTtcbiAgICB9IHJldHVybiBqb2luKHJlc3VsdCwgJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBudW1iZXJUb1N0cmluZyhob3N0W2luZGV4XSwgMTYpO1xuICAgICAgICBpZiAoaW5kZXggPCA3KSByZXN1bHQgKz0gJzonO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJ1snICsgcmVzdWx0ICsgJ10nO1xuICB9IHJldHVybiBob3N0O1xufTtcblxudmFyIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQgPSB7fTtcbnZhciBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyAnOiAxLCAnXCInOiAxLCAnPCc6IDEsICc+JzogMSwgJ2AnOiAxXG59KTtcbnZhciBwYXRoUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcjJzogMSwgJz8nOiAxLCAneyc6IDEsICd9JzogMVxufSk7XG52YXIgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBwYXRoUGVyY2VudEVuY29kZVNldCwge1xuICAnLyc6IDEsICc6JzogMSwgJzsnOiAxLCAnPSc6IDEsICdAJzogMSwgJ1snOiAxLCAnXFxcXCc6IDEsICddJzogMSwgJ14nOiAxLCAnfCc6IDFcbn0pO1xuXG52YXIgcGVyY2VudEVuY29kZSA9IGZ1bmN0aW9uIChjaHIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaHIsIDApO1xuICByZXR1cm4gY29kZSA+IDB4MjAgJiYgY29kZSA8IDB4N0YgJiYgIWhhc093bihzZXQsIGNocikgPyBjaHIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hyKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc3BlY2lhbC1zY2hlbWVcbnZhciBzcGVjaWFsU2NoZW1lcyA9IHtcbiAgZnRwOiAyMSxcbiAgZmlsZTogbnVsbCxcbiAgaHR0cDogODAsXG4gIGh0dHBzOiA0NDMsXG4gIHdzOiA4MCxcbiAgd3NzOiA0NDNcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jd2luZG93cy1kcml2ZS1sZXR0ZXJcbnZhciBpc1dpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcsIG5vcm1hbGl6ZWQpIHtcbiAgdmFyIHNlY29uZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT0gMiAmJiBleGVjKEFMUEhBLCBjaGFyQXQoc3RyaW5nLCAwKSlcbiAgICAmJiAoKHNlY29uZCA9IGNoYXJBdChzdHJpbmcsIDEpKSA9PSAnOicgfHwgKCFub3JtYWxpemVkICYmIHNlY29uZCA9PSAnfCcpKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc3RhcnQtd2l0aC1hLXdpbmRvd3MtZHJpdmUtbGV0dGVyXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nU2xpY2Uoc3RyaW5nLCAwLCAyKSkgJiYgKFxuICAgIHN0cmluZy5sZW5ndGggPT0gMiB8fFxuICAgICgodGhpcmQgPSBjaGFyQXQoc3RyaW5nLCAyKSkgPT09ICcvJyB8fCB0aGlyZCA9PT0gJ1xcXFwnIHx8IHRoaXJkID09PSAnPycgfHwgdGhpcmQgPT09ICcjJylcbiAgKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc2luZ2xlLWRvdC1wYXRoLXNlZ21lbnRcbnZhciBpc1NpbmdsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLicgfHwgdG9Mb3dlckNhc2Uoc2VnbWVudCkgPT09ICclMmUnO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb3VibGUtZG90LXBhdGgtc2VnbWVudFxudmFyIGlzRG91YmxlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgc2VnbWVudCA9IHRvTG93ZXJDYXNlKHNlZ21lbnQpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG52YXIgVVJMU3RhdGUgPSBmdW5jdGlvbiAodXJsLCBpc0Jhc2UsIGJhc2UpIHtcbiAgdmFyIHVybFN0cmluZyA9ICR0b1N0cmluZyh1cmwpO1xuICB2YXIgYmFzZVN0YXRlLCBmYWlsdXJlLCBzZWFyY2hQYXJhbXM7XG4gIGlmIChpc0Jhc2UpIHtcbiAgICBmYWlsdXJlID0gdGhpcy5wYXJzZSh1cmxTdHJpbmcpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIGJhc2VTdGF0ZSA9IG5ldyBVUkxTdGF0ZShiYXNlLCB0cnVlKTtcbiAgICBmYWlsdXJlID0gdGhpcy5wYXJzZSh1cmxTdHJpbmcsIG51bGwsIGJhc2VTdGF0ZSk7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICBzZWFyY2hQYXJhbXMgPSBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKG5ldyBVUkxTZWFyY2hQYXJhbXMoKSk7XG4gICAgc2VhcmNoUGFyYW1zLmJpbmRVUkwodGhpcyk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMgPSBzZWFyY2hQYXJhbXM7XG4gIH1cbn07XG5cblVSTFN0YXRlLnByb3RvdHlwZSA9IHtcbiAgdHlwZTogJ1VSTCcsXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLXBhcnNpbmdcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbiAgcGFyc2U6IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGVPdmVycmlkZSwgYmFzZSkge1xuICAgIHZhciB1cmwgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUO1xuICAgIHZhciBwb2ludGVyID0gMDtcbiAgICB2YXIgYnVmZmVyID0gJyc7XG4gICAgdmFyIHNlZW5BdCA9IGZhbHNlO1xuICAgIHZhciBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgIHZhciBzZWVuUGFzc3dvcmRUb2tlbiA9IGZhbHNlO1xuICAgIHZhciBjb2RlUG9pbnRzLCBjaHIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7XG5cbiAgICBpbnB1dCA9ICR0b1N0cmluZyhpbnB1dCk7XG5cbiAgICBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgIHVybC5zY2hlbWUgPSAnJztcbiAgICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgICAgdXJsLnBhc3N3b3JkID0gJyc7XG4gICAgICB1cmwuaG9zdCA9IG51bGw7XG4gICAgICB1cmwucG9ydCA9IG51bGw7XG4gICAgICB1cmwucGF0aCA9IFtdO1xuICAgICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IGZhbHNlO1xuICAgICAgaW5wdXQgPSByZXBsYWNlKGlucHV0LCBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFLCAnJyk7XG4gICAgfVxuXG4gICAgaW5wdXQgPSByZXBsYWNlKGlucHV0LCBUQUJfQU5EX05FV19MSU5FLCAnJyk7XG5cbiAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcblxuICAgIHdoaWxlIChwb2ludGVyIDw9IGNvZGVQb2ludHMubGVuZ3RoKSB7XG4gICAgICBjaHIgPSBjb2RlUG9pbnRzW3BvaW50ZXJdO1xuICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICBjYXNlIFNDSEVNRV9TVEFSVDpcbiAgICAgICAgICBpZiAoY2hyICYmIGV4ZWMoQUxQSEEsIGNocikpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSB0b0xvd2VyQ2FzZShjaHIpO1xuICAgICAgICAgICAgc3RhdGUgPSBTQ0hFTUU7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU0NIRU1FOlxuICAgICAgICAgIGlmIChjaHIgJiYgKGV4ZWMoQUxQSEFOVU1FUklDLCBjaHIpIHx8IGNociA9PSAnKycgfHwgY2hyID09ICctJyB8fCBjaHIgPT0gJy4nKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IHRvTG93ZXJDYXNlKGNocik7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJzonKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiAoXG4gICAgICAgICAgICAgICh1cmwuaXNTcGVjaWFsKCkgIT0gaGFzT3duKHNwZWNpYWxTY2hlbWVzLCBidWZmZXIpKSB8fFxuICAgICAgICAgICAgICAoYnVmZmVyID09ICdmaWxlJyAmJiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHx8XG4gICAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpXG4gICAgICAgICAgICApKSByZXR1cm47XG4gICAgICAgICAgICB1cmwuc2NoZW1lID0gYnVmZmVyO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZJTEU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBiYXNlICYmIGJhc2Uuc2NoZW1lID09IHVybC5zY2hlbWUpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICBzdGF0ZSA9IENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICAgIHBvaW50ZXIgPSAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE5PX1NDSEVNRTpcbiAgICAgICAgICBpZiAoIWJhc2UgfHwgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaHIgIT0gJyMnKSkgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlID0gYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnID8gRklMRSA6IFJFTEFUSVZFO1xuICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgJiYgY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFBBVEhfT1JfQVVUSE9SSVRZOlxuICAgICAgICAgIGlmIChjaHIgPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBSRUxBVElWRTpcbiAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgaWYgKGNociA9PSBFT0YpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnLycgfHwgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBSRUxBVElWRV9TTEFTSDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5wYXRoLmxlbmd0aC0tO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFJFTEFUSVZFX1NMQVNIOlxuICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM6XG4gICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICBpZiAoY2hyICE9ICcvJyB8fCBjaGFyQXQoYnVmZmVyLCBwb2ludGVyICsgMSkgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzpcbiAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiBjaHIgIT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnQCcpIHtcbiAgICAgICAgICAgIGlmIChzZWVuQXQpIGJ1ZmZlciA9ICclNDAnICsgYnVmZmVyO1xuICAgICAgICAgICAgc2VlbkF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJ1ZmZlckNvZGVQb2ludHMgPSBhcnJheUZyb20oYnVmZmVyKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyQ29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gYnVmZmVyQ29kZVBvaW50c1tpXTtcbiAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7XG4gICAgICAgICAgICAgICAgc2VlblBhc3N3b3JkVG9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBlbmNvZGVkQ29kZVBvaW50cyA9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50LCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgICAgICBpZiAoc2VlblBhc3N3b3JkVG9rZW4pIHVybC5wYXNzd29yZCArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgICAgZWxzZSB1cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHNlZW5BdCAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0FVVEhPUklUWTtcbiAgICAgICAgICAgIHBvaW50ZXIgLT0gYXJyYXlGcm9tKGJ1ZmZlcikubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBIT1NUO1xuICAgICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSE9TVDpcbiAgICAgICAgY2FzZSBIT1NUTkFNRTpcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiB1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnOicgJiYgIXNlZW5CcmFja2V0KSB7XG4gICAgICAgICAgICBpZiAoYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQT1JUO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgPT0gSE9TVE5BTUUpIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiBidWZmZXIgPT0gJycgJiYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSByZXR1cm47XG4gICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gJ1snKSBzZWVuQnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChjaHIgPT0gJ10nKSBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgICAgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUE9SVDpcbiAgICAgICAgICBpZiAoZXhlYyhESUdJVCwgY2hyKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSB8fFxuICAgICAgICAgICAgc3RhdGVPdmVycmlkZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlciAhPSAnJykge1xuICAgICAgICAgICAgICB2YXIgcG9ydCA9IHBhcnNlSW50KGJ1ZmZlciwgMTApO1xuICAgICAgICAgICAgICBpZiAocG9ydCA+IDB4RkZGRikgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICAgICAgdXJsLnBvcnQgPSAodXJsLmlzU3BlY2lhbCgpICYmIHBvcnQgPT09IHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdKSA/IG51bGwgOiBwb3J0O1xuICAgICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEZJTEU6XG4gICAgICAgICAgdXJsLnNjaGVtZSA9ICdmaWxlJztcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSBzdGF0ZSA9IEZJTEVfU0xBU0g7XG4gICAgICAgICAgZWxzZSBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gRU9GKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoam9pbihhcnJheVNsaWNlKGNvZGVQb2ludHMsIHBvaW50ZXIpLCAnJykpKSB7XG4gICAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgICAgdXJsLnNob3J0ZW5QYXRoKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEZJTEVfU0xBU0g6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnICYmICFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGpvaW4oYXJyYXlTbGljZShjb2RlUG9pbnRzLCBwb2ludGVyKSwgJycpKSkge1xuICAgICAgICAgICAgaWYgKGlzV2luZG93c0RyaXZlTGV0dGVyKGJhc2UucGF0aFswXSwgdHJ1ZSkpIHB1c2godXJsLnBhdGgsIGJhc2UucGF0aFswXSk7XG4gICAgICAgICAgICBlbHNlIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgY2FzZSBGSUxFX0hPU1Q6XG4gICAgICAgICAgaWYgKGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJykge1xuICAgICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChidWZmZXIgPT0gJycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgICBpZiAodXJsLmhvc3QgPT0gJ2xvY2FsaG9zdCcpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICB9IGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSF9TVEFSVDpcbiAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiBjaHIgIT0gJ1xcXFwnKSBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSDpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkgfHxcbiAgICAgICAgICAgICghc3RhdGVPdmVycmlkZSAmJiAoY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChpc0RvdWJsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICAgIHVybC5zaG9ydGVuUGF0aCgpO1xuICAgICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiAhKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsICcnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5wYXRoLmxlbmd0aCAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVybC5ob3N0KSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGNoYXJBdChidWZmZXIsIDApICsgJzonOyAvLyBub3JtYWxpemUgd2luZG93cyBkcml2ZSBsZXR0ZXJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCBidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgKGNociA9PSBFT0YgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSkge1xuICAgICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBzaGlmdCh1cmwucGF0aCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gcGVyY2VudEVuY29kZShjaHIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDpcbiAgICAgICAgICBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgdXJsLnBhdGhbMF0gKz0gcGVyY2VudEVuY29kZShjaHIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBRVUVSWTpcbiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgaWYgKGNociA9PSBcIidcIiAmJiB1cmwuaXNTcGVjaWFsKCkpIHVybC5xdWVyeSArPSAnJTI3JztcbiAgICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnIycpIHVybC5xdWVyeSArPSAnJTIzJztcbiAgICAgICAgICAgIGVsc2UgdXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRlJBR01FTlQ6XG4gICAgICAgICAgaWYgKGNociAhPSBFT0YpIHVybC5mcmFnbWVudCArPSBwZXJjZW50RW5jb2RlKGNociwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcG9pbnRlcisrO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNob3N0LXBhcnNpbmdcbiAgcGFyc2VIb3N0OiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDtcbiAgICBpZiAoY2hhckF0KGlucHV0LCAwKSA9PSAnWycpIHtcbiAgICAgIGlmIChjaGFyQXQoaW5wdXQsIGlucHV0Lmxlbmd0aCAtIDEpICE9ICddJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NihzdHJpbmdTbGljZShpbnB1dCwgMSwgLTEpKTtcbiAgICAgIGlmICghcmVzdWx0KSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIC8vIG9wYXF1ZSBob3N0XG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1NwZWNpYWwoKSkge1xuICAgICAgaWYgKGV4ZWMoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCwgaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaW5kZXhdLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQgPSB0b0FTQ0lJKGlucHV0KTtcbiAgICAgIGlmIChleGVjKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQsIGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NChpbnB1dCk7XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjYW5ub3QtaGF2ZS1hLXVzZXJuYW1lLXBhc3N3b3JkLXBvcnRcbiAgY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmhvc3QgfHwgdGhpcy5jYW5ub3RCZUFCYXNlVVJMIHx8IHRoaXMuc2NoZW1lID09ICdmaWxlJztcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbmNsdWRlLWNyZWRlbnRpYWxzXG4gIGluY2x1ZGVzQ3JlZGVudGlhbHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51c2VybmFtZSAhPSAnJyB8fCB0aGlzLnBhc3N3b3JkICE9ICcnO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2lzLXNwZWNpYWxcbiAgaXNTcGVjaWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGhhc093bihzcGVjaWFsU2NoZW1lcywgdGhpcy5zY2hlbWUpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3Nob3J0ZW4tYS11cmxzLXBhdGhcbiAgc2hvcnRlblBhdGg6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgICBpZiAocGF0aFNpemUgJiYgKHRoaXMuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICAgIHBhdGgubGVuZ3RoLS07XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdXJsLXNlcmlhbGl6ZXJcbiAgc2VyaWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVybCA9IHRoaXM7XG4gICAgdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7XG4gICAgdmFyIHVzZXJuYW1lID0gdXJsLnVzZXJuYW1lO1xuICAgIHZhciBwYXNzd29yZCA9IHVybC5wYXNzd29yZDtcbiAgICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICAgIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gICAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgICB2YXIgcXVlcnkgPSB1cmwucXVlcnk7XG4gICAgdmFyIGZyYWdtZW50ID0gdXJsLmZyYWdtZW50O1xuICAgIHZhciBvdXRwdXQgPSBzY2hlbWUgKyAnOic7XG4gICAgaWYgKGhvc3QgIT09IG51bGwpIHtcbiAgICAgIG91dHB1dCArPSAnLy8nO1xuICAgICAgaWYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkpIHtcbiAgICAgICAgb3V0cHV0ICs9IHVzZXJuYW1lICsgKHBhc3N3b3JkID8gJzonICsgcGFzc3dvcmQgOiAnJykgKyAnQCc7XG4gICAgICB9XG4gICAgICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTtcbiAgICAgIGlmIChwb3J0ICE9PSBudWxsKSBvdXRwdXQgKz0gJzonICsgcG9ydDtcbiAgICB9IGVsc2UgaWYgKHNjaGVtZSA9PSAnZmlsZScpIG91dHB1dCArPSAnLy8nO1xuICAgIG91dHB1dCArPSB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIGpvaW4ocGF0aCwgJy8nKSA6ICcnO1xuICAgIGlmIChxdWVyeSAhPT0gbnVsbCkgb3V0cHV0ICs9ICc/JyArIHF1ZXJ5O1xuICAgIGlmIChmcmFnbWVudCAhPT0gbnVsbCkgb3V0cHV0ICs9ICcjJyArIGZyYWdtZW50O1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gIHNldEhyZWY6IGZ1bmN0aW9uIChocmVmKSB7XG4gICAgdmFyIGZhaWx1cmUgPSB0aGlzLnBhcnNlKGhyZWYpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMudXBkYXRlKCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgZ2V0T3JpZ2luOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjaGVtZSA9IHRoaXMuc2NoZW1lO1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIGlmIChzY2hlbWUgPT0gJ2Jsb2InKSB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBVUkxDb25zdHJ1Y3RvcihzY2hlbWUucGF0aFswXSkub3JpZ2luO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAoc2NoZW1lID09ICdmaWxlJyB8fCAhdGhpcy5pc1NwZWNpYWwoKSkgcmV0dXJuICdudWxsJztcbiAgICByZXR1cm4gc2NoZW1lICsgJzovLycgKyBzZXJpYWxpemVIb3N0KHRoaXMuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wcm90b2NvbFxuICBnZXRQcm90b2NvbDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNjaGVtZSArICc6JztcbiAgfSxcbiAgc2V0UHJvdG9jb2w6IGZ1bmN0aW9uIChwcm90b2NvbCkge1xuICAgIHRoaXMucGFyc2UoJHRvU3RyaW5nKHByb3RvY29sKSArICc6JywgU0NIRU1FX1NUQVJUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lXG4gIGdldFVzZXJuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcm5hbWU7XG4gIH0sXG4gIHNldFVzZXJuYW1lOiBmdW5jdGlvbiAodXNlcm5hbWUpIHtcbiAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbSgkdG9TdHJpbmcodXNlcm5hbWUpKTtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHRoaXMudXNlcm5hbWUgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMudXNlcm5hbWUgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkXG4gIGdldFBhc3N3b3JkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFzc3dvcmQ7XG4gIH0sXG4gIHNldFBhc3N3b3JkOiBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbSgkdG9TdHJpbmcocGFzc3dvcmQpKTtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHRoaXMucGFzc3dvcmQgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGFzc3dvcmQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RcbiAgZ2V0SG9zdDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIHJldHVybiBob3N0ID09PSBudWxsID8gJydcbiAgICAgIDogcG9ydCA9PT0gbnVsbCA/IHNlcmlhbGl6ZUhvc3QoaG9zdClcbiAgICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7XG4gIH0sXG4gIHNldEhvc3Q6IGZ1bmN0aW9uIChob3N0KSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGFyc2UoaG9zdCwgSE9TVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZVxuICBnZXRIb3N0bmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICAgIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICB9LFxuICBzZXRIb3N0bmFtZTogZnVuY3Rpb24gKGhvc3RuYW1lKSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGFyc2UoaG9zdG5hbWUsIEhPU1ROQU1FKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnRcbiAgZ2V0UG9ydDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIHJldHVybiBwb3J0ID09PSBudWxsID8gJycgOiAkdG9TdHJpbmcocG9ydCk7XG4gIH0sXG4gIHNldFBvcnQ6IGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjtcbiAgICBwb3J0ID0gJHRvU3RyaW5nKHBvcnQpO1xuICAgIGlmIChwb3J0ID09ICcnKSB0aGlzLnBvcnQgPSBudWxsO1xuICAgIGVsc2UgdGhpcy5wYXJzZShwb3J0LCBQT1JUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gIGdldFBhdGhuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgcmV0dXJuIHRoaXMuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIGpvaW4ocGF0aCwgJy8nKSA6ICcnO1xuICB9LFxuICBzZXRQYXRobmFtZTogZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGF0aCA9IFtdO1xuICAgIHRoaXMucGFyc2UocGF0aG5hbWUsIFBBVEhfU1RBUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gIGdldFNlYXJjaDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgcmV0dXJuIHF1ZXJ5ID8gJz8nICsgcXVlcnkgOiAnJztcbiAgfSxcbiAgc2V0U2VhcmNoOiBmdW5jdGlvbiAoc2VhcmNoKSB7XG4gICAgc2VhcmNoID0gJHRvU3RyaW5nKHNlYXJjaCk7XG4gICAgaWYgKHNlYXJjaCA9PSAnJykge1xuICAgICAgdGhpcy5xdWVyeSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgnPycgPT0gY2hhckF0KHNlYXJjaCwgMCkpIHNlYXJjaCA9IHN0cmluZ1NsaWNlKHNlYXJjaCwgMSk7XG4gICAgICB0aGlzLnF1ZXJ5ID0gJyc7XG4gICAgICB0aGlzLnBhcnNlKHNlYXJjaCwgUVVFUlkpO1xuICAgIH1cbiAgICB0aGlzLnNlYXJjaFBhcmFtcy51cGRhdGUoKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICBnZXRTZWFyY2hQYXJhbXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hQYXJhbXMuZmFjYWRlO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICBnZXRIYXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudDtcbiAgICByZXR1cm4gZnJhZ21lbnQgPyAnIycgKyBmcmFnbWVudCA6ICcnO1xuICB9LFxuICBzZXRIYXNoOiBmdW5jdGlvbiAoaGFzaCkge1xuICAgIGhhc2ggPSAkdG9TdHJpbmcoaGFzaCk7XG4gICAgaWYgKGhhc2ggPT0gJycpIHtcbiAgICAgIHRoaXMuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoJyMnID09IGNoYXJBdChoYXNoLCAwKSkgaGFzaCA9IHN0cmluZ1NsaWNlKGhhc2gsIDEpO1xuICAgIHRoaXMuZnJhZ21lbnQgPSAnJztcbiAgICB0aGlzLnBhcnNlKGhhc2gsIEZSQUdNRU5UKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoUGFyYW1zLnNlcmlhbGl6ZSgpIHx8IG51bGw7XG4gIH1cbn07XG5cbi8vIGBVUkxgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1jbGFzc1xudmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCAvKiAsIGJhc2UgKi8pIHtcbiAgdmFyIHRoYXQgPSBhbkluc3RhbmNlKHRoaXMsIFVSTFByb3RvdHlwZSk7XG4gIHZhciBiYXNlID0gdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSkgPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgc3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIG5ldyBVUkxTdGF0ZSh1cmwsIGZhbHNlLCBiYXNlKSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICB0aGF0LmhyZWYgPSBzdGF0ZS5zZXJpYWxpemUoKTtcbiAgICB0aGF0Lm9yaWdpbiA9IHN0YXRlLmdldE9yaWdpbigpO1xuICAgIHRoYXQucHJvdG9jb2wgPSBzdGF0ZS5nZXRQcm90b2NvbCgpO1xuICAgIHRoYXQudXNlcm5hbWUgPSBzdGF0ZS5nZXRVc2VybmFtZSgpO1xuICAgIHRoYXQucGFzc3dvcmQgPSBzdGF0ZS5nZXRQYXNzd29yZCgpO1xuICAgIHRoYXQuaG9zdCA9IHN0YXRlLmdldEhvc3QoKTtcbiAgICB0aGF0Lmhvc3RuYW1lID0gc3RhdGUuZ2V0SG9zdG5hbWUoKTtcbiAgICB0aGF0LnBvcnQgPSBzdGF0ZS5nZXRQb3J0KCk7XG4gICAgdGhhdC5wYXRobmFtZSA9IHN0YXRlLmdldFBhdGhuYW1lKCk7XG4gICAgdGhhdC5zZWFyY2ggPSBzdGF0ZS5nZXRTZWFyY2goKTtcbiAgICB0aGF0LnNlYXJjaFBhcmFtcyA9IHN0YXRlLmdldFNlYXJjaFBhcmFtcygpO1xuICAgIHRoYXQuaGFzaCA9IHN0YXRlLmdldEhhc2goKTtcbiAgfVxufTtcblxudmFyIFVSTFByb3RvdHlwZSA9IFVSTENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxudmFyIGFjY2Vzc29yRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChnZXR0ZXIsIHNldHRlcikge1xuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcylbZ2V0dGVyXSgpO1xuICAgIH0sXG4gICAgc2V0OiBzZXR0ZXIgJiYgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKVtzZXR0ZXJdKHZhbHVlKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH07XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgLy8gYFVSTC5wcm90b3R5cGUuaHJlZmAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhyZWZcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ2hyZWYnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ3NlcmlhbGl6ZScsICdzZXRIcmVmJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5vcmlnaW5gIGdldHRlclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdvcmlnaW4nLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldE9yaWdpbicpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUucHJvdG9jb2xgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wcm90b2NvbFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAncHJvdG9jb2wnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFByb3RvY29sJywgJ3NldFByb3RvY29sJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS51c2VybmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICd1c2VybmFtZScsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0VXNlcm5hbWUnLCAnc2V0VXNlcm5hbWUnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnBhc3N3b3JkYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGFzc3dvcmRcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3Bhc3N3b3JkJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQYXNzd29yZCcsICdzZXRQYXNzd29yZCcpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ2hvc3QnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldEhvc3QnLCAnc2V0SG9zdCcpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZVxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnaG9zdG5hbWUnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldEhvc3RuYW1lJywgJ3NldEhvc3RuYW1lJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcG9ydFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAncG9ydCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UG9ydCcsICdzZXRQb3J0JykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5wYXRobmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdwYXRobmFtZScsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UGF0aG5hbWUnLCAnc2V0UGF0aG5hbWUnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaGAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaFxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnc2VhcmNoJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRTZWFyY2gnLCAnc2V0U2VhcmNoJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hQYXJhbXNgIGdldHRlclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdzZWFyY2hQYXJhbXMnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFNlYXJjaFBhcmFtcycpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhhc2hcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ2hhc2gnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldEhhc2gnLCAnc2V0SGFzaCcpKTtcbn1cblxuLy8gYFVSTC5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb25cbmRlZmluZUJ1aWx0SW4oVVJMUHJvdG90eXBlLCAndG9KU09OJywgZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zZXJpYWxpemUoKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuLy8gYFVSTC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNVUkwtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yXG5kZWZpbmVCdWlsdEluKFVSTFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpLnNlcmlhbGl6ZSgpO1xufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG5pZiAoTmF0aXZlVVJMKSB7XG4gIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMO1xuICB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDtcbiAgLy8gYFVSTC5jcmVhdGVPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTFxuICBpZiAobmF0aXZlQ3JlYXRlT2JqZWN0VVJMKSBkZWZpbmVCdWlsdEluKFVSTENvbnN0cnVjdG9yLCAnY3JlYXRlT2JqZWN0VVJMJywgYmluZChuYXRpdmVDcmVhdGVPYmplY3RVUkwsIE5hdGl2ZVVSTCkpO1xuICAvLyBgVVJMLnJldm9rZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvcmV2b2tlT2JqZWN0VVJMXG4gIGlmIChuYXRpdmVSZXZva2VPYmplY3RVUkwpIGRlZmluZUJ1aWx0SW4oVVJMQ29uc3RydWN0b3IsICdyZXZva2VPYmplY3RVUkwnLCBiaW5kKG5hdGl2ZVJldm9rZU9iamVjdFVSTCwgTmF0aXZlVVJMKSk7XG59XG5cbnNldFRvU3RyaW5nVGFnKFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgVVJMOiBVUkxDb25zdHJ1Y3RvclxufSk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLmNvbnN0cnVjdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcblxuLy8gYFVSTC5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb25cbiQoeyB0YXJnZXQ6ICdVUkwnLCBwcm90bzogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSB9LCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiBjYWxsKFVSTC5wcm90b3R5cGUudG9TdHJpbmcsIHRoaXMpO1xuICB9XG59KTtcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9Q2FydGVyK09uZSZkaXNwbGF5PXN3YXApO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAtLWxhYmVsLWZvbnQ6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgLS1jb250ZW50LWZvbnQ6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWY7XFxuICAtLWhlYWRlci1oZWlnaHQ6IDU2cHg7XFxuICAtLWZvb3Rlci1oZWlnaHQ6IDQ0cHg7XFxuICAtLWhlYWRlci1jb2xvcjogIzAwMDBiYjtcXG4gIC0tc2lkZS1wYW5lbC1iZy1jb2xvcjogI2Y0ZjRmNDtcXG4gIC0tbW9kYWwtYWNjZW50LWNvbG9yOiAjZDRkNGQ0O1xcbiAgLS1pbnB1dC1kaXNhYmxlZC1jb2xvcjogIzcwNzA3MDtcXG4gIC0taW5wdXQtZGlzYWJsZWQtYmctY29sb3I6ICNlMmUyZTI7XFxuICAtLWl0ZW0tc2VwYXJhdG9yLWNvbG9yOiAjZjBmMGYwO1xcbiAgLS1pdGVtLXNlbGVjdGlvbi1jb2xvcjogI2YwZjBmMDtcXG4gIC0tbWFpbi1jb250ZW50LXdpZHRoOiA4MDBweDtcXG59XFxuXFxuLmRhdGUtcGlja2VyLWhlYWRpbmcge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5kYXRlLXBpY2tlci1oZWFkaW5nIHNlbGVjdCwgLmRhdGUtcGlja2VyLWhlYWRpbmcgaW5wdXQge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItZ3JpZCB7XFxuICBtYXJnaW46IDEycHggMDtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCg3LCAxZnIpO1xcbiAgZ3JpZC1nYXA6IDZweDtcXG4gIGdhcDogNnB4O1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItZGF5LWhlYWRlciwgLmRhdGUtcGlja2VyLWRheSB7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMnB4O1xcbiAgcGFkZGluZzogNHB4O1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcblxcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG59XFxuXFxuLmRhdGUtcGlja2VyLWRheS1oZWFkZXIge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5kYXRlLXBpY2tlci1kYXkuc2VsZWN0ZWQge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDM1LCAzNSwgMjExKTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItZGF5LnRvZGF5IHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxufVxcblxcbi5kYXRlLXBpY2tlci1kYXkuZGlmZmVyZW50LW1vbnRoIHtcXG4gIGNvbG9yOiAjNzA3MDcwO1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItZGF5LnNlbGVjdGVkLmRpZmZlcmVudC1tb250aCB7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDM1LCAzNSwgMjExLCAwLjUpO1xcbn1cXG5cXG4uZmlsdGVyLW1lbnUge1xcbiAgbWFyZ2luOiAyNHB4O1xcbn1cXG5cXG4uZmlsdGVyLWdyb3VwIHtcXG4gIG1hcmdpbi1ib3R0b206IDEycHg7XFxufVxcblxcbi5maWx0ZXItZ3JvdXAtaGVhZGluZyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgbWFyZ2luLXJpZ2h0OiAycHg7XFxufVxcblxcbi5maWx0ZXItZ3JvdXAtaGVhZGluZyA+IC5pY29uLWNvbnRhaW5lciA+ICogKyAqIHtcXG4gIG1hcmdpbi1sZWZ0OiA0cHg7XFxufVxcblxcbi5maWx0ZXItZ3JvdXAtdG9nZ2xlIHtcXG4gIGZsZXg6IDE7XFxuICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgcGFkZGluZzogOHB4O1xcbn1cXG5cXG4uZmlsdGVyLWdyb3VwLWV4cGFuZC1pY29uIHtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbi5maWx0ZXItZ3JvdXAtbGFiZWwge1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcbn1cXG5cXG4uZmlsdGVyLWxpc3Qge1xcbiAgcGFkZGluZzogMnB4O1xcbn1cXG5cXG4uZmlsdGVyLWl0ZW0ge1xcbiAgbWFyZ2luOiA0cHggMCA2cHggMzJweDtcXG59XFxuXFxuLmZpbHRlci1pdGVtLXNlbGVjdG9yIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDEwMCU7XFxuXFxuICBwYWRkaW5nOiA4cHg7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBvdXRsaW5lLW9mZnNldDogMDtcXG59XFxuXFxuLmZpbHRlci1pdGVtLXNlbGVjdG9yOmhvdmVyLCAuZmlsdGVyLWl0ZW0uc2VsZWN0ZWQgLmZpbHRlci1pdGVtLXNlbGVjdG9yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkYWRhZGE7XFxufVxcblxcbi5maWx0ZXItaXRlbS1sYWJlbCB7XFxuICBmb250LWZhbWlseTogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG5cXG5pbnB1dDpmb2N1cywgc2VsZWN0OmZvY3VzLCB0ZXh0YXJlYTpmb2N1cywgYnV0dG9uOmZvY3VzIHtcXG4gIG91dGxpbmU6IDFweCBzb2xpZCBibHVlO1xcbn1cXG5cXG4vKiBVc2UgOmZvY3VzLXZpc2libGUgaWYgYnJvd3NlciBzdXBwb3J0cyBpdCAqL1xcblxcbmlucHV0OmZvY3VzOm5vdCg6Zm9jdXMtdmlzaWJsZSkge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxuc2VsZWN0OmZvY3VzOm5vdCg6Zm9jdXMtdmlzaWJsZSkge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXFxudGV4dGFyZWE6Zm9jdXM6bm90KDpmb2N1cy12aXNpYmxlKSB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG5idXR0b246Zm9jdXM6bm90KDpmb2N1cy12aXNpYmxlKSB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG5pbnB1dDppbnZhbGlkLCBzZWxlY3Q6aW52YWxpZCwgdGV4dGFyZWE6aW52YWxpZCB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgcmVkO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0sIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgbWFyZ2luOiAwIDZweDtcXG59XFxuXFxuLnRvZ2dsZS1idXR0b24ge1xcbiAgcGFkZGluZzogNnB4O1xcblxcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcblxcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcblxcbiAgY29sb3I6IGJsYWNrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG5cXG4gIHRyYW5zaXRpb246IGNvbG9yIDEwMG1zLCBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zO1xcbn1cXG5cXG4udG9nZ2xlLWJ1dHRvbi5hY3RpdmUge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzMjNkMztcXG59XFxuXFxuLnRvZ2dsZS1idXR0b24uYWN0aXZlOmRpc2FibGVkIHtcXG4gIGNvbG9yOiAjNzA3MDcwO1xcbiAgY29sb3I6IHZhcigtLWlucHV0LWRpc2FibGVkLWNvbG9yKTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNjOGM4ZjQ7XFxufVxcblxcbi5mb3JtLWlucHV0LWNvbnRhaW5lciB7XFxuICBtYXJnaW46IDEycHggMCAyNHB4O1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1kYXRlLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5mb3JtLWlucHV0LWRhdGUtY29udGFpbmVyIGlucHV0IHtcXG4gIGZsZXg6IGF1dG87XFxuICBtYXJnaW4tcmlnaHQ6IDZweDtcXG59XFxuXFxuLmZvcm0taW5wdXQtZGF0ZS1jb250YWluZXItaW5saW5lIGlucHV0IHtcXG4gIHdpZHRoOiAxNTBweDtcXG4gIG1hcmdpbi1yaWdodDogNnB4O1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1sYWJlbCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIGZvbnQtZmFtaWx5OiBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1sYWJlbC1mb250KTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1sYWJlbC1pbmxpbmUge1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXG59XFxuXFxuLmZvcm0taW5wdXQsIC5mb3JtLXNlbGVjdCwgLmZvcm0tdGV4dGFyZWEge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5mb3JtLWlucHV0LFxcbi5mb3JtLWlucHV0LWlubGluZSxcXG4uZm9ybS1zZWxlY3QsXFxuLmZvcm0tc2VsZWN0LWlubGluZSxcXG4uZm9ybS10ZXh0YXJlYSxcXG4uZm9ybS1idXR0b24ge1xcbiAgcGFkZGluZzogOHB4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuXFxuICBmb250LWZhbWlseTogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuXFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5mb3JtLXNlbGVjdCB7XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG59XFxuXFxuLmZvcm0tdGV4dGFyZWEge1xcbiAgd2lkdGg6IDEwMCU7XFxuICByZXNpemU6IHZlcnRpY2FsO1xcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXG59XFxuXFxuLmZvcm0tYnV0dG9uIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbn1cXG5cXG4uZm9ybS1idXR0b246YWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxufVxcblxcbi5mb3JtLWJ1dHRvbi1jb250YWluZXIgPiAuZm9ybS1idXR0b24gKyAuZm9ybS1idXR0b24ge1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG59XFxuXFxuLmZvcm0taW5wdXQtaXRlbS1jb250YWluZXIge1xcbiAgcGFkZGluZzogOHB4IDA7XFxufVxcblxcbi5mb3JtLWlucHV0LWl0ZW0tbGFiZWwge1xcbiAgcGFkZGluZy1sZWZ0OiA4cHg7XFxuICBmb250LWZhbWlseTogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE0cHg7XFxufVxcblxcbi5mb3JtLWlucHV0LWlubGluZS5mb3JtLWlucHV0LWNvdW50IHtcXG4gIHdpZHRoOiA5MHB4O1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmZvcm0td2Vla2RheS1idXR0b24ge1xcbiAgbWFyZ2luOiA4cHggNnB4IDhweCAwO1xcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXG59XFxuXFxuLmZvcm0taW5wdXQ6ZGlzYWJsZWQsXFxuLmZvcm0taW5wdXQtaW5saW5lOmRpc2FibGVkLFxcbi5mb3JtLXNlbGVjdDpkaXNhYmxlZCxcXG4uZm9ybS1zZWxlY3QtaW5saW5lOmRpc2FibGVkLFxcbi5mb3JtLXRleHRhcmVhOmRpc2FibGVkLFxcbi5mb3JtLWJ1dHRvbjpkaXNhYmxlZCxcXG4udG9nZ2xlLWJ1dHRvbjpkaXNhYmxlZCB7XFxuICBjb2xvcjogIzcwNzA3MDtcXG4gIGNvbG9yOiB2YXIoLS1pbnB1dC1kaXNhYmxlZC1jb2xvcik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlMmUyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW5wdXQtZGlzYWJsZWQtYmctY29sb3IpO1xcbiAgYm9yZGVyLWNvbG9yOiAjZTJlMmUyO1xcbiAgYm9yZGVyLWNvbG9yOiB2YXIoLS1pbnB1dC1kaXNhYmxlZC1iZy1jb2xvcik7XFxufVxcblxcbi5jb25maXJtYXRpb24tYm94IHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgbWFyZ2luLXRvcDogOHB4O1xcbn1cXG5cXG4ubW9kYWwtb3ZlcmxheSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIHotaW5kZXg6IDEwMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuXFxuLm1vZGFsLXdyYXBwZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICB6LWluZGV4OiAyMDA7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubW9kYWwge1xcbiAgd2lkdGg6IDQwMHB4O1xcbiAgbWF4LXdpZHRoOiAxMDB2dztcXG4gIG1heC1oZWlnaHQ6IDEwMHZoOyAvKiBGYWxsYmFjayBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG4gIG1heC1oZWlnaHQ6IG1pbig2MDBweCwgMTAwdmgpO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbn1cXG5cXG4ubW9kYWwtdGl0bGUtYmFyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNGQ0ZDQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tb2RhbC1hY2NlbnQtY29sb3IpO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGJsYWNrO1xcbiAgZmxleDogbm9uZTtcXG5cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubW9kYWwtdGl0bGUge1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5tb2RhbC1jb250ZW50IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICBwYWRkaW5nOiAxMnB4O1xcbn1cXG5cXG4ubW9kYWwtYnV0dG9uLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG5cXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMTJweDtcXG5cXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCBibGFjaztcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkNGQ0ZDQ7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tb2RhbC1hY2NlbnQtY29sb3IpO1xcbn1cXG5cXG4ubW9kYWwtYnV0dG9uLWNvbnRhaW5lciA+ICogKyAqIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xcbn1cXG5cXG4ubW9kYWwtYnV0dG9uIHtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIHBhZGRpbmc6IDZweDtcXG5cXG4gIGZvbnQtZmFtaWx5OiBWZXJkYW5hLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtcXG5cXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1sYWJlbC1mb250KTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG5cXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxufVxcblxcbi5tb2RhbC1idXR0b246Zm9jdXMge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5tb2RhbC1idXR0b24ubW9kYWwtb2theSB7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjMyM2QzO1xcbn1cXG5cXG4uaW5mby1tb2RhbC1jb250ZW50LXBhcmFncmFwaCB7XFxuICBmb250LWZhbWlseTogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG4uaW5mby1tb2RhbC1jb250ZW50LXBhcmFncmFwaCArIC5pbmZvLW1vZGFsLWNvbnRlbnQtcGFyYWdyYXBoIHtcXG4gIG1hcmdpbi10b3A6IDEycHg7XFxufVxcblxcbi5hYm91dC1tb2RhbC1wYXJhZ3JhcGgge1xcbiAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWY7XFxuICBmb250LWZhbWlseTogdmFyKC0tY29udGVudC1mb250KTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XFxufVxcblxcbi5hYm91dC1tb2RhbC12ZXJzaW9uIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ucG9wdXAtbWVudS1vdmVybGF5IHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwdnc7XFxuICBoZWlnaHQ6IDEwMHZoO1xcbiAgei1pbmRleDogOTUwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5wb3B1cC1tZW51IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgei1pbmRleDogMTAwMDtcXG4gIG1heC13aWR0aDogMTAwdnc7XFxuICBtYXgtaGVpZ2h0OiAxMDB2aDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4ucG9wdXAtbWVudS1pdGVtIHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4ucG9wdXAtbWVudS1pdGVtICsgLnBvcHVwLW1lbnUtaXRlbSB7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2YwZjBmMDtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1pdGVtLXNlcGFyYXRvci1jb2xvcik7XFxufVxcblxcbi5wb3B1cC1tZW51LWl0ZW0uYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pdGVtLXNlbGVjdGlvbi1jb2xvcik7XFxufVxcblxcbi5wb3B1cC1tZW51LWl0ZW0tbGFiZWwge1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgZmxleC1ncm93OiAxO1xcbiAgZmxleC1zaHJpbms6IDA7XFxuICBtYXJnaW4tbGVmdDogOHB4O1xcbn1cXG5cXG4udGFzay1wYW5lbCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZjBmMGYwO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWl0ZW0tc2VwYXJhdG9yLWNvbG9yKTtcXG4gIGZsZXg6IDE7XFxuICBvdmVyZmxvdzogYXV0bztcXG59XFxuXFxuLnRhc2stcGFuZWwtY29udGVudCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogODAwcHg7XFxuICBtYXgtd2lkdGg6IHZhcigtLW1haW4tY29udGVudC13aWR0aCk7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgbWFyZ2luOiBhdXRvO1xcbn1cXG5cXG4udGFzay1saXN0LWhlYWRpbmcge1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBtYXJnaW4tdG9wOiAyOHB4O1xcbiAgcGFkZGluZzogMCA4cHg7XFxufVxcblxcbi50YXNrLWxpc3QtaXRlbSB7XFxuICBmb250LWZhbWlseTogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBwYWRkaW5nOiAxMnB4IDhweDtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtICsgLnRhc2stbGlzdC1pdGVtIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZjBmMGYwO1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWl0ZW0tc2VwYXJhdG9yLWNvbG9yKTtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pdGVtLXNlbGVjdGlvbi1jb2xvcik7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxufVxcblxcbi50YXNrLWxpc3QtaXRlbS1jaGVja2JveCB7XFxuICBtYXJnaW46IDJweCAxMnB4IDRweCAwO1xcbn1cXG5cXG4udGFzay1saXN0LWl0ZW0taW5mby1jb250YWluZXIge1xcbiAgZmxleDogMTtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtLW5hbWUge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgbWFyZ2luOiA2cHggMDtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtLWRlc2NyaXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xcbiAgY29sb3I6ICM1MDUwNTA7XFxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XFxufVxcblxcbi50YXNrLWxpc3QtaXRlbS1kZXRhaWxzIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtIC5pY29uLWNvbnRhaW5lciB7XFxuICBtYXJnaW4tbGVmdDogMTJweDtcXG59XFxuXFxuLnRhc2stbGlzdC1lbXB0eSB7XFxuICBmb250LWZhbWlseTogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBjb2xvcjogIzUwNTA1MDtcXG4gIHBhZGRpbmc6IDAgOHB4O1xcbn1cXG5cXG4vKiBVc2UgYWx0ZXJuYXRpdmUgYm94IG1vZGVsICovXFxuXFxuaHRtbCB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4qLCAqOjpiZWZvcmUsICo6OmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGluaGVyaXQ7XFxufVxcblxcbmJvZHkge1xcbiAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWY7XFxuICBmb250LWZhbWlseTogdmFyKC0tY29udGVudC1mb250KTtcXG59XFxuXFxuYSwgYTp2aXNpdGVkIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuYTpob3ZlciB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXFxuI2FwcCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuI2hlYWRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGhlaWdodDogNTZweDtcXG4gIGhlaWdodDogdmFyKC0taGVhZGVyLWhlaWdodCk7XFxuXFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMGJiO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taGVhZGVyLWNvbG9yKTtcXG4gIHBhZGRpbmc6IDEycHg7XFxufVxcblxcbiNtaWRkbGUtY29udGFpbmVyIHtcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogY2FsYygxMDAlIC0gNTZweCAtIDQ0cHgpO1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSB2YXIoLS1oZWFkZXItaGVpZ2h0KSAtIHZhcigtLWZvb3Rlci1oZWlnaHQpKTtcXG59XFxuXFxuI3NpZGUtcGFuZWwge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNpZGUtcGFuZWwtYmctY29sb3IpO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICB3aWR0aDogMzUwcHg7XFxuICBtaW4td2lkdGg6IDI1MHB4O1xcbiAgbWF4LXdpZHRoOiA1MDBweDsgLyogRmFsbGJhY2sgZm9yIG9sZGVyIGJyb3dzZXJzICovXFxuICBtYXgtd2lkdGg6IG1pbigxMDB2dywgNTAwcHgpO1xcbn1cXG5cXG4jbWFpbi1wYW5lbCB7XFxuICBmbGV4OiAxIDEgYXV0bztcXG4gIGhlaWdodDogMTAwJTtcXG4gIG92ZXJmbG93OiBhdXRvO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jbWFpbi1wYW5lbC1oZWFkZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgbWF4LXdpZHRoOiB2YXIoLS1tYWluLWNvbnRlbnQtd2lkdGgpO1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIHBhZGRpbmc6IDI0cHggMTJweDtcXG59XFxuXFxuI21haW4tcGFuZWwtaGVhZGluZy1jb250YWluZXIge1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZmxleDogMTtcXG59XFxuXFxuI21haW4tcGFuZWwtaGVhZGluZyB7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuI21haW4tcGFuZWwtc3ViaGVhZGluZyB7XFxuICBtYXJnaW4tdG9wOiA4cHg7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XFxuICBjb2xvcjogIzUwNTA1MDtcXG5cXG4gIG1heC1oZWlnaHQ6IDY0cHg7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxufVxcblxcbiNtYWluLXBhbmVsLWhlYWRlciAuaWNvbi1jb250YWluZXIge1xcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XFxufVxcblxcbiNmb290ZXIge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzJjMmMzMjtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIHBhZGRpbmc6IDEycHg7XFxuICBoZWlnaHQ6IDQ0cHg7XFxuICBoZWlnaHQ6IHZhcigtLWZvb3Rlci1oZWlnaHQpO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuI2Zvb3RlciBhIHtcXG4gIGNvbG9yOiBpbmhlcml0O1xcbn1cXG5cXG4jZm9vdGVyIGE6aG92ZXIge1xcbiAgY29sb3I6ICNjM2MyZmQ7XFxufVxcblxcbi5jbG9zZWQge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnJlc2l6ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y0ZjRmNDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNpZGUtcGFuZWwtYmctY29sb3IpO1xcbiAgd2lkdGg6IDhweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGN1cnNvcjogY29sLXJlc2l6ZTtcXG59XFxuXFxuLnJlc2l6ZXIuZHJhZ2dpbmcsIC5yZXNpemVyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5YjliOWI7XFxufVxcblxcbi5pY29uLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uaWNvbi1jb250YWluZXIgPiAqICsgKiB7XFxuICBtYXJnaW4tbGVmdDogNHB4O1xcbn1cXG5cXG4uY29sbGFwc2libGUge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRyYW5zaXRpb246IGhlaWdodCAyNTBtcyBlYXNlLW91dDtcXG59XFxuXFxuLnRpdGxlLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnRpdGxlLWNvbnRhaW5lciA+ICogKyAqIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xcbn1cXG5cXG4udGl0bGUge1xcbiAgZm9udC1mYW1pbHk6ICdDYXJ0ZXIgT25lJywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMjRweDtcXG59XFxuXFxuLmRhdGEtaW1wb3J0LXJlc3VsdHMge1xcbiAgZm9udC1mYW1pbHk6IFZlcmRhbmEsIEdlbmV2YSwgVGFob21hLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXFxuLmRhdGEtaW1wb3J0LWVycm9yLWxpc3Qge1xcbiAgbGlzdC1zdHlsZTogZGlzYyBpbnNpZGU7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLnRpdGxlLWNvbnRhaW5lciAudGl0bGUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1heC1oZWlnaHQ6IDUwMHB4KSB7XFxuICAjbWFpbi1wYW5lbC1zdWJoZWFkaW5nIHtcXG4gICAgbWF4LWhlaWdodDogMjRweDtcXG4gIH1cXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy92YXJpYWJsZXMuY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2RhdGVQaWNrZXIuY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2ZpbHRlck1lbnUuY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2Zvcm0uY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL21vZGFsLmNzc1wiLFwid2VicGFjazovLy4vc3JjL3N0eWxlcy9wb3B1cE1lbnUuY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL3Rhc2tQYW5lbC5jc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvbWFpbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxpREFBaUQ7RUFDakQsK0NBQStDO0VBQy9DLHFCQUFxQjtFQUNyQixxQkFB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QWE7QUFDZjs7QUFFQTtFQUNFLHlCQUE0QztFQUE1Qyw0Q0FBNEM7RUFDNUMsVUFBVTtFQUNWLFlBQVk7RUFDWixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLHFDQUFxQztFQUNyQyxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZ0RBQThCO0VBQTlCLDhCQUE4QjtFQUM5QixlQUFlO0VBQ2YscUJBQXFCO0VBQ3JCLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFO0lBQ0UsYUFBYTtFQUNmO0FBQ0Y7O0FBRUE7RUFDRTtJQUNFLGdCQUFnQjtFQUNsQjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gIC0tbGFiZWwtZm9udDogVmVyZGFuYSwgR2VuZXZhLCBUYWhvbWEsIHNhbnMtc2VyaWY7XFxuICAtLWNvbnRlbnQtZm9udDogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcXG4gIC0taGVhZGVyLWhlaWdodDogNTZweDtcXG4gIC0tZm9vdGVyLWhlaWdodDogNDRweDtcXG4gIC0taGVhZGVyLWNvbG9yOiAjMDAwMGJiO1xcbiAgLS1zaWRlLXBhbmVsLWJnLWNvbG9yOiAjZjRmNGY0O1xcbiAgLS1tb2RhbC1hY2NlbnQtY29sb3I6ICNkNGQ0ZDQ7XFxuICAtLWlucHV0LWRpc2FibGVkLWNvbG9yOiAjNzA3MDcwO1xcbiAgLS1pbnB1dC1kaXNhYmxlZC1iZy1jb2xvcjogI2UyZTJlMjtcXG4gIC0taXRlbS1zZXBhcmF0b3ItY29sb3I6ICNmMGYwZjA7XFxuICAtLWl0ZW0tc2VsZWN0aW9uLWNvbG9yOiAjZjBmMGYwO1xcbiAgLS1tYWluLWNvbnRlbnQtd2lkdGg6IDgwMHB4O1xcbn1cXG5cIixcIi5kYXRlLXBpY2tlci1oZWFkaW5nIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItaGVhZGluZyBzZWxlY3QsIC5kYXRlLXBpY2tlci1oZWFkaW5nIGlucHV0IHtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG59XFxuXFxuLmRhdGUtcGlja2VyLWdyaWQge1xcbiAgbWFyZ2luOiAxMnB4IDA7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoNywgMWZyKTtcXG4gIGdhcDogNnB4O1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItZGF5LWhlYWRlciwgLmRhdGUtcGlja2VyLWRheSB7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMnB4O1xcbiAgcGFkZGluZzogNHB4O1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcblxcbiAgYm9yZGVyLXJhZGl1czogMjBweDtcXG59XFxuXFxuLmRhdGUtcGlja2VyLWRheS1oZWFkZXIge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5kYXRlLXBpY2tlci1kYXkuc2VsZWN0ZWQge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDM1LCAzNSwgMjExKTtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItZGF5LnRvZGF5IHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxufVxcblxcbi5kYXRlLXBpY2tlci1kYXkuZGlmZmVyZW50LW1vbnRoIHtcXG4gIGNvbG9yOiAjNzA3MDcwO1xcbn1cXG5cXG4uZGF0ZS1waWNrZXItZGF5LnNlbGVjdGVkLmRpZmZlcmVudC1tb250aCB7XFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDM1LCAzNSwgMjExLCAwLjUpO1xcbn1cXG5cIixcIi5maWx0ZXItbWVudSB7XFxuICBtYXJnaW46IDI0cHg7XFxufVxcblxcbi5maWx0ZXItZ3JvdXAge1xcbiAgbWFyZ2luLWJvdHRvbTogMTJweDtcXG59XFxuXFxuLmZpbHRlci1ncm91cC1oZWFkaW5nIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBtYXJnaW4tcmlnaHQ6IDJweDtcXG59XFxuXFxuLmZpbHRlci1ncm91cC1oZWFkaW5nID4gLmljb24tY29udGFpbmVyID4gKiArICoge1xcbiAgbWFyZ2luLWxlZnQ6IDRweDtcXG59XFxuXFxuLmZpbHRlci1ncm91cC10b2dnbGUge1xcbiAgZmxleDogMTtcXG4gIHRleHQtYWxpZ246IGxlZnQ7XFxuICBwYWRkaW5nOiA4cHg7XFxufVxcblxcbi5maWx0ZXItZ3JvdXAtZXhwYW5kLWljb24ge1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG59XFxuXFxuLmZpbHRlci1ncm91cC1sYWJlbCB7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XFxufVxcblxcbi5maWx0ZXItbGlzdCB7XFxuICBwYWRkaW5nOiAycHg7XFxufVxcblxcbi5maWx0ZXItaXRlbSB7XFxuICBtYXJnaW46IDRweCAwIDZweCAzMnB4O1xcbn1cXG5cXG4uZmlsdGVyLWl0ZW0tc2VsZWN0b3Ige1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG5cXG4gIHBhZGRpbmc6IDhweDtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIG91dGxpbmUtb2Zmc2V0OiAwO1xcbn1cXG5cXG4uZmlsdGVyLWl0ZW0tc2VsZWN0b3I6aG92ZXIsIC5maWx0ZXItaXRlbS5zZWxlY3RlZCAuZmlsdGVyLWl0ZW0tc2VsZWN0b3Ige1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RhZGFkYTtcXG59XFxuXFxuLmZpbHRlci1pdGVtLWxhYmVsIHtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1sYWJlbC1mb250KTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxufVxcblwiLFwiaW5wdXQ6Zm9jdXMsIHNlbGVjdDpmb2N1cywgdGV4dGFyZWE6Zm9jdXMsIGJ1dHRvbjpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgYmx1ZTtcXG59XFxuXFxuLyogVXNlIDpmb2N1cy12aXNpYmxlIGlmIGJyb3dzZXIgc3VwcG9ydHMgaXQgKi9cXG46aXMoaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGJ1dHRvbik6Zm9jdXM6bm90KDpmb2N1cy12aXNpYmxlKSB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cXG5pbnB1dDppbnZhbGlkLCBzZWxlY3Q6aW52YWxpZCwgdGV4dGFyZWE6aW52YWxpZCB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgcmVkO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXItc3R5bGU6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0sIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgbWFyZ2luOiAwIDZweDtcXG59XFxuXFxuLnRvZ2dsZS1idXR0b24ge1xcbiAgcGFkZGluZzogNnB4O1xcblxcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcblxcbiAgY29sb3I6IGJsYWNrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG5cXG4gIHRyYW5zaXRpb246IGNvbG9yIDEwMG1zLCBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zO1xcbn1cXG5cXG4udG9nZ2xlLWJ1dHRvbi5hY3RpdmUge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzMjNkMztcXG59XFxuXFxuLnRvZ2dsZS1idXR0b24uYWN0aXZlOmRpc2FibGVkIHtcXG4gIGNvbG9yOiB2YXIoLS1pbnB1dC1kaXNhYmxlZC1jb2xvcik7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjYzhjOGY0O1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1jb250YWluZXIge1xcbiAgbWFyZ2luOiAxMnB4IDAgMjRweDtcXG59XFxuXFxuLmZvcm0taW5wdXQtZGF0ZS1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1kYXRlLWNvbnRhaW5lciBpbnB1dCB7XFxuICBmbGV4OiBhdXRvO1xcbiAgbWFyZ2luLXJpZ2h0OiA2cHg7XFxufVxcblxcbi5mb3JtLWlucHV0LWRhdGUtY29udGFpbmVyLWlubGluZSBpbnB1dCB7XFxuICB3aWR0aDogMTUwcHg7XFxuICBtYXJnaW4tcmlnaHQ6IDZweDtcXG59XFxuXFxuLmZvcm0taW5wdXQtbGFiZWwge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIG1hcmdpbi1ib3R0b206IDhweDtcXG59XFxuXFxuLmZvcm0taW5wdXQtbGFiZWwtaW5saW5lIHtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1sYWJlbC1mb250KTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxufVxcblxcbi5mb3JtLWlucHV0LCAuZm9ybS1zZWxlY3QsIC5mb3JtLXRleHRhcmVhIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4uZm9ybS1pbnB1dCxcXG4uZm9ybS1pbnB1dC1pbmxpbmUsXFxuLmZvcm0tc2VsZWN0LFxcbi5mb3JtLXNlbGVjdC1pbmxpbmUsXFxuLmZvcm0tdGV4dGFyZWEsXFxuLmZvcm0tYnV0dG9uIHtcXG4gIHBhZGRpbmc6IDhweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcblxcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4uZm9ybS1zZWxlY3Qge1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxufVxcblxcbi5mb3JtLXRleHRhcmVhIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcmVzaXplOiB2ZXJ0aWNhbDtcXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxufVxcblxcbi5mb3JtLWJ1dHRvbiB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG59XFxuXFxuLmZvcm0tYnV0dG9uOmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjBmMGYwO1xcbn1cXG5cXG4uZm9ybS1idXR0b24tY29udGFpbmVyID4gLmZvcm0tYnV0dG9uICsgLmZvcm0tYnV0dG9uIHtcXG4gIG1hcmdpbi1sZWZ0OiA4cHg7XFxufVxcblxcbi5mb3JtLWlucHV0LWl0ZW0tY29udGFpbmVyIHtcXG4gIHBhZGRpbmc6IDhweCAwO1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1pdGVtLWxhYmVsIHtcXG4gIHBhZGRpbmctbGVmdDogOHB4O1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbn1cXG5cXG4uZm9ybS1pbnB1dC1pbmxpbmUuZm9ybS1pbnB1dC1jb3VudCB7XFxuICB3aWR0aDogOTBweDtcXG59XFxuXFxuLmZvcm0taW5wdXQtaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5mb3JtLXdlZWtkYXktYnV0dG9uIHtcXG4gIG1hcmdpbjogOHB4IDZweCA4cHggMDtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxufVxcblxcbi5mb3JtLWlucHV0OmRpc2FibGVkLFxcbi5mb3JtLWlucHV0LWlubGluZTpkaXNhYmxlZCxcXG4uZm9ybS1zZWxlY3Q6ZGlzYWJsZWQsXFxuLmZvcm0tc2VsZWN0LWlubGluZTpkaXNhYmxlZCxcXG4uZm9ybS10ZXh0YXJlYTpkaXNhYmxlZCxcXG4uZm9ybS1idXR0b246ZGlzYWJsZWQsXFxuLnRvZ2dsZS1idXR0b246ZGlzYWJsZWQge1xcbiAgY29sb3I6IHZhcigtLWlucHV0LWRpc2FibGVkLWNvbG9yKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWlucHV0LWRpc2FibGVkLWJnLWNvbG9yKTtcXG4gIGJvcmRlci1jb2xvcjogdmFyKC0taW5wdXQtZGlzYWJsZWQtYmctY29sb3IpO1xcbn1cXG5cXG4uY29uZmlybWF0aW9uLWJveCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIG1hcmdpbi10b3A6IDhweDtcXG59XFxuXCIsXCIubW9kYWwtb3ZlcmxheSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIHotaW5kZXg6IDEwMDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43KTtcXG59XFxuXFxuLm1vZGFsLXdyYXBwZXIge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxuICB6LWluZGV4OiAyMDA7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubW9kYWwge1xcbiAgd2lkdGg6IDQwMHB4O1xcbiAgbWF4LXdpZHRoOiAxMDB2dztcXG4gIG1heC1oZWlnaHQ6IDEwMHZoOyAvKiBGYWxsYmFjayBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG4gIG1heC1oZWlnaHQ6IG1pbig2MDBweCwgMTAwdmgpO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbn1cXG5cXG4ubW9kYWwtdGl0bGUtYmFyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW1vZGFsLWFjY2VudC1jb2xvcik7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDEycHg7XFxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XFxuICBmbGV4OiBub25lO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5tb2RhbC10aXRsZSB7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuXFxuLm1vZGFsLWNvbnRlbnQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHBhZGRpbmc6IDEycHg7XFxufVxcblxcbi5tb2RhbC1idXR0b24tY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcblxcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxMnB4O1xcblxcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbW9kYWwtYWNjZW50LWNvbG9yKTtcXG59XFxuXFxuLm1vZGFsLWJ1dHRvbi1jb250YWluZXIgPiAqICsgKiB7XFxuICBtYXJnaW4tbGVmdDogMTJweDtcXG59XFxuXFxuLm1vZGFsLWJ1dHRvbiB7XFxuICB3aWR0aDogMTAwcHg7XFxuICBwYWRkaW5nOiA2cHg7XFxuXFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE2cHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbiAgYm9yZGVyLXJhZGl1czogNnB4O1xcbn1cXG5cXG4ubW9kYWwtYnV0dG9uOmZvY3VzIHtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG5cXG4ubW9kYWwtYnV0dG9uLm1vZGFsLW9rYXkge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzIzMjNkMztcXG59XFxuXFxuLmluZm8tbW9kYWwtY29udGVudC1wYXJhZ3JhcGgge1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXFxuLmluZm8tbW9kYWwtY29udGVudC1wYXJhZ3JhcGggKyAuaW5mby1tb2RhbC1jb250ZW50LXBhcmFncmFwaCB7XFxuICBtYXJnaW4tdG9wOiAxMnB4O1xcbn1cXG5cXG4uYWJvdXQtbW9kYWwtcGFyYWdyYXBoIHtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1jb250ZW50LWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXFxuLmFib3V0LW1vZGFsLXZlcnNpb24ge1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblwiLFwiLnBvcHVwLW1lbnUtb3ZlcmxheSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIHotaW5kZXg6IDk1MDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4ucG9wdXAtbWVudSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIHotaW5kZXg6IDEwMDA7XFxuICBtYXgtd2lkdGg6IDEwMHZ3O1xcbiAgbWF4LWhlaWdodDogMTAwdmg7XFxuICBvdmVyZmxvdzogYXV0bztcXG59XFxuXFxuLnBvcHVwLW1lbnUtaXRlbSB7XFxuICBwYWRkaW5nOiA4cHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnBvcHVwLW1lbnUtaXRlbSArIC5wb3B1cC1tZW51LWl0ZW0ge1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWl0ZW0tc2VwYXJhdG9yLWNvbG9yKTtcXG59XFxuXFxuLnBvcHVwLW1lbnUtaXRlbS5hY3RpdmUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taXRlbS1zZWxlY3Rpb24tY29sb3IpO1xcbn1cXG5cXG4ucG9wdXAtbWVudS1pdGVtLWxhYmVsIHtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1sYWJlbC1mb250KTtcXG4gIGZvbnQtc2l6ZTogMTZweDtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgbWFyZ2luLWxlZnQ6IDhweDtcXG59XFxuXCIsXCIudGFzay1wYW5lbCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1pdGVtLXNlcGFyYXRvci1jb2xvcik7XFxuICBmbGV4OiAxO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxufVxcblxcbi50YXNrLXBhbmVsLWNvbnRlbnQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXgtd2lkdGg6IHZhcigtLW1haW4tY29udGVudC13aWR0aCk7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgbWFyZ2luOiBhdXRvO1xcbn1cXG5cXG4udGFzay1saXN0LWhlYWRpbmcge1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBtYXJnaW4tdG9wOiAyOHB4O1xcbiAgcGFkZGluZzogMCA4cHg7XFxufVxcblxcbi50YXNrLWxpc3QtaXRlbSB7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBwYWRkaW5nOiAxMnB4IDhweDtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtICsgLnRhc2stbGlzdC1pdGVtIHtcXG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCB2YXIoLS1pdGVtLXNlcGFyYXRvci1jb2xvcik7XFxufVxcblxcbi50YXNrLWxpc3QtaXRlbTpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1pdGVtLXNlbGVjdGlvbi1jb2xvcik7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxufVxcblxcbi50YXNrLWxpc3QtaXRlbS1jaGVja2JveCB7XFxuICBtYXJnaW46IDJweCAxMnB4IDRweCAwO1xcbn1cXG5cXG4udGFzay1saXN0LWl0ZW0taW5mby1jb250YWluZXIge1xcbiAgZmxleDogMTtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtLW5hbWUge1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgbWFyZ2luOiA2cHggMDtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtLWRlc2NyaXB0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIG1hcmdpbjogNnB4IDA7XFxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xcbiAgY29sb3I6ICM1MDUwNTA7XFxuICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7XFxufVxcblxcbi50YXNrLWxpc3QtaXRlbS1kZXRhaWxzIHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG59XFxuXFxuLnRhc2stbGlzdC1pdGVtIC5pY29uLWNvbnRhaW5lciB7XFxuICBtYXJnaW4tbGVmdDogMTJweDtcXG59XFxuXFxuLnRhc2stbGlzdC1lbXB0eSB7XFxuICBmb250LWZhbWlseTogdmFyKC0tbGFiZWwtZm9udCk7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBjb2xvcjogIzUwNTA1MDtcXG4gIHBhZGRpbmc6IDAgOHB4O1xcbn1cXG5cIixcIkBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUNhcnRlcitPbmUmZGlzcGxheT1zd2FwJyk7XFxuXFxuQGltcG9ydCAnLi92YXJpYWJsZXMuY3NzJztcXG5AaW1wb3J0ICcuL2RhdGVQaWNrZXIuY3NzJztcXG5AaW1wb3J0ICcuL2ZpbHRlck1lbnUuY3NzJztcXG5AaW1wb3J0ICcuL2Zvcm0uY3NzJztcXG5AaW1wb3J0ICcuL21vZGFsLmNzcyc7XFxuQGltcG9ydCAnLi9wb3B1cE1lbnUuY3NzJztcXG5AaW1wb3J0ICcuL3Rhc2tQYW5lbC5jc3MnO1xcblxcbi8qIFVzZSBhbHRlcm5hdGl2ZSBib3ggbW9kZWwgKi9cXG5odG1sIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbiosICo6OmJlZm9yZSwgKjo6YWZ0ZXIge1xcbiAgYm94LXNpemluZzogaW5oZXJpdDtcXG59XFxuXFxuYm9keSB7XFxuICBmb250LWZhbWlseTogdmFyKC0tY29udGVudC1mb250KTtcXG59XFxuXFxuYSwgYTp2aXNpdGVkIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxuYTpob3ZlciB7XFxuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcXG59XFxuXFxuI2FwcCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcblxcbiAgd2lkdGg6IDEwMHZ3O1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuXFxuI2hlYWRlciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGhlaWdodDogdmFyKC0taGVhZGVyLWhlaWdodCk7XFxuXFxuICBjb2xvcjogd2hpdGU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1oZWFkZXItY29sb3IpO1xcbiAgcGFkZGluZzogMTJweDtcXG59XFxuXFxuI21pZGRsZS1jb250YWluZXIge1xcbiAgZmxleDogMSAxIGF1dG87XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSB2YXIoLS1oZWFkZXItaGVpZ2h0KSAtIHZhcigtLWZvb3Rlci1oZWlnaHQpKTtcXG59XFxuXFxuI3NpZGUtcGFuZWwge1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2lkZS1wYW5lbC1iZy1jb2xvcik7XFxuICBvdmVyZmxvdzogYXV0bztcXG4gIHdpZHRoOiAzNTBweDtcXG4gIG1pbi13aWR0aDogMjUwcHg7XFxuICBtYXgtd2lkdGg6IDUwMHB4OyAvKiBGYWxsYmFjayBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXG4gIG1heC13aWR0aDogbWluKDEwMHZ3LCA1MDBweCk7XFxufVxcblxcbiNtYWluLXBhbmVsIHtcXG4gIGZsZXg6IDEgMSBhdXRvO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbiNtYWluLXBhbmVsLWhlYWRlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1heC13aWR0aDogdmFyKC0tbWFpbi1jb250ZW50LXdpZHRoKTtcXG4gIG1hcmdpbjogYXV0bztcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nOiAyNHB4IDEycHg7XFxufVxcblxcbiNtYWluLXBhbmVsLWhlYWRpbmctY29udGFpbmVyIHtcXG4gIGZvbnQtZmFtaWx5OiB2YXIoLS1sYWJlbC1mb250KTtcXG4gIGZsZXg6IDE7XFxufVxcblxcbiNtYWluLXBhbmVsLWhlYWRpbmcge1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbiNtYWluLXBhbmVsLXN1YmhlYWRpbmcge1xcbiAgbWFyZ2luLXRvcDogOHB4O1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbiAgY29sb3I6ICM1MDUwNTA7XFxuXFxuICBtYXgtaGVpZ2h0OiA2NHB4O1xcbiAgb3ZlcmZsb3c6IGF1dG87XFxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xcbn1cXG5cXG4jbWFpbi1wYW5lbC1oZWFkZXIgLmljb24tY29udGFpbmVyIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xcbn1cXG5cXG4jZm9vdGVyIHtcXG4gIGNvbG9yOiB3aGl0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyYzJjMzI7XFxuICBmb250LXNpemU6IDE2cHg7XFxuICBwYWRkaW5nOiAxMnB4O1xcbiAgaGVpZ2h0OiB2YXIoLS1mb290ZXItaGVpZ2h0KTtcXG5cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbiNmb290ZXIgYSB7XFxuICBjb2xvcjogaW5oZXJpdDtcXG59XFxuXFxuI2Zvb3RlciBhOmhvdmVyIHtcXG4gIGNvbG9yOiAjYzNjMmZkO1xcbn1cXG5cXG4uY2xvc2VkIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi5yZXNpemVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNpZGUtcGFuZWwtYmctY29sb3IpO1xcbiAgd2lkdGg6IDhweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGN1cnNvcjogY29sLXJlc2l6ZTtcXG59XFxuXFxuLnJlc2l6ZXIuZHJhZ2dpbmcsIC5yZXNpemVyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5YjliOWI7XFxufVxcblxcbi5pY29uLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4uaWNvbi1jb250YWluZXIgPiAqICsgKiB7XFxuICBtYXJnaW4tbGVmdDogNHB4O1xcbn1cXG5cXG4uY29sbGFwc2libGUge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHRyYW5zaXRpb246IGhlaWdodCAyNTBtcyBlYXNlLW91dDtcXG59XFxuXFxuLnRpdGxlLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLnRpdGxlLWNvbnRhaW5lciA+ICogKyAqIHtcXG4gIG1hcmdpbi1sZWZ0OiAxMnB4O1xcbn1cXG5cXG4udGl0bGUge1xcbiAgZm9udC1mYW1pbHk6ICdDYXJ0ZXIgT25lJywgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMjRweDtcXG59XFxuXFxuLmRhdGEtaW1wb3J0LXJlc3VsdHMge1xcbiAgZm9udC1mYW1pbHk6IHZhcigtLWxhYmVsLWZvbnQpO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xcbiAgbGluZS1oZWlnaHQ6IDEuNTtcXG59XFxuXFxuLmRhdGEtaW1wb3J0LWVycm9yLWxpc3Qge1xcbiAgbGlzdC1zdHlsZTogZGlzYyBpbnNpZGU7XFxufVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA0MDBweCkge1xcbiAgLnRpdGxlLWNvbnRhaW5lciAudGl0bGUge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgKG1heC1oZWlnaHQ6IDUwMHB4KSB7XFxuICAjbWFpbi1wYW5lbC1zdWJoZWFkaW5nIHtcXG4gICAgbWF4LWhlaWdodDogMjRweDtcXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLypcXG4gKiBBZGFwdGVkIGZyb206XFxuICogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cXG4gKiB2Mi4wIC0gMjAxMS0wMS0yNlxcbiAqL1xcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8sXFxuaW5wdXQsIGJ1dHRvbiwgc2VsZWN0LCB0ZXh0YXJlYSB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTAwJTtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcblxcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcXG5cXHRkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuYm9keSB7XFxuXFx0bGluZS1oZWlnaHQ6IDE7XFxufVxcblxcbm9sLCB1bCB7XFxuXFx0bGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuYmxvY2txdW90ZSwgcSB7XFxuXFx0cXVvdGVzOiBub25lO1xcbn1cXG5cXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcXG5xOmJlZm9yZSwgcTphZnRlciB7XFxuXFx0Y29udGVudDogJyc7XFxuXFx0Y29udGVudDogbm9uZTtcXG59XFxuXFxudGFibGUge1xcblxcdGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuXFx0Ym9yZGVyLXNwYWNpbmc6IDA7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvcmVzZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7O0VBSUU7O0FBRUY7Ozs7Ozs7Ozs7Ozs7O0NBY0MsU0FBUztDQUNULFVBQVU7Q0FDVixTQUFTO0NBQ1QsZUFBZTtDQUNmLGFBQWE7Q0FDYix3QkFBd0I7QUFDekI7O0FBQ0EsZ0RBQWdEOztBQUNoRDs7Q0FFQyxjQUFjO0FBQ2Y7O0FBQ0E7Q0FDQyxjQUFjO0FBQ2Y7O0FBQ0E7Q0FDQyxnQkFBZ0I7QUFDakI7O0FBQ0E7Q0FDQyxZQUFZO0FBQ2I7O0FBQ0E7O0NBRUMsV0FBVztDQUNYLGFBQWE7QUFDZDs7QUFDQTtDQUNDLHlCQUF5QjtDQUN6QixpQkFBaUI7QUFDbEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLypcXG4gKiBBZGFwdGVkIGZyb206XFxuICogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cXG4gKiB2Mi4wIC0gMjAxMS0wMS0yNlxcbiAqL1xcblxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcbmIsIHUsIGksIGNlbnRlcixcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8sXFxuaW5wdXQsIGJ1dHRvbiwgc2VsZWN0LCB0ZXh0YXJlYSB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdHBhZGRpbmc6IDA7XFxuXFx0Ym9yZGVyOiAwO1xcblxcdGZvbnQtc2l6ZTogMTAwJTtcXG5cXHRmb250OiBpbmhlcml0O1xcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXG59XFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcXG5cXHRkaXNwbGF5OiBibG9jaztcXG59XFxuYm9keSB7XFxuXFx0bGluZS1oZWlnaHQ6IDE7XFxufVxcbm9sLCB1bCB7XFxuXFx0bGlzdC1zdHlsZTogbm9uZTtcXG59XFxuYmxvY2txdW90ZSwgcSB7XFxuXFx0cXVvdGVzOiBub25lO1xcbn1cXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcXG5xOmJlZm9yZSwgcTphZnRlciB7XFxuXFx0Y29udGVudDogJyc7XFxuXFx0Y29udGVudDogbm9uZTtcXG59XFxudGFibGUge1xcblxcdGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuXFx0Ym9yZGVyLXNwYWNpbmc6IDA7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG5cbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cblxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBkaXJ0eU9iamVjdCkge1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdhc3NpZ24gcmVxdWlyZXMgdGhhdCBpbnB1dCBwYXJhbWV0ZXIgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gIH1cblxuICBkaXJ0eU9iamVjdCA9IGRpcnR5T2JqZWN0IHx8IHt9O1xuXG4gIGZvciAodmFyIHByb3BlcnR5IGluIGRpcnR5T2JqZWN0KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkaXJ0eU9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICB0YXJnZXRbcHJvcGVydHldID0gZGlydHlPYmplY3RbcHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcblxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59XG5cbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgZGlydHlPcHRpb25zKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRVVENEYXkoZGlydHlEYXRlLCBkaXJ0eURheSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gdG9JbnRlZ2VyKGRpcnR5RGF5KTtcbiAgdmFyIGN1cnJlbnREYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgcmVtYWluZGVyID0gZGF5ICUgNztcbiAgdmFyIGRheUluZGV4ID0gKHJlbWFpbmRlciArIDcpICUgNztcbiAgdmFyIGRpZmYgPSAoZGF5SW5kZXggPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSBjdXJyZW50RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VVRDSVNPRGF5KGRpcnR5RGF0ZSwgZGlydHlEYXkpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXkgPSB0b0ludGVnZXIoZGlydHlEYXkpO1xuXG4gIGlmIChkYXkgJSA3ID09PSAwKSB7XG4gICAgZGF5ID0gZGF5IC0gNztcbiAgfVxuXG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgY3VycmVudERheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciByZW1haW5kZXIgPSBkYXkgJSA3O1xuICB2YXIgZGF5SW5kZXggPSAocmVtYWluZGVyICsgNykgJSA3O1xuICB2YXIgZGlmZiA9IChkYXlJbmRleCA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIGN1cnJlbnREYXk7XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSArIGRpZmYpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VVRDSVNPV2VlayhkaXJ0eURhdGUsIGRpcnR5SVNPV2Vlaykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGlzb1dlZWsgPSB0b0ludGVnZXIoZGlydHlJU09XZWVrKTtcbiAgdmFyIGRpZmYgPSBnZXRVVENJU09XZWVrKGRhdGUpIC0gaXNvV2VlaztcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZiAqIDcpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5V2Vlaywgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHdlZWsgPSB0b0ludGVnZXIoZGlydHlXZWVrKTtcbiAgdmFyIGRpZmYgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpIC0gd2VlaztcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZiAqIDcpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCBhZGREYXlzIGZyb20gXCIuLi9hZGREYXlzL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTW9udGhzIGZyb20gXCIuLi9hZGRNb250aHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQG5hbWUgYWRkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIHllYXJzLCBtb250aHMsIHdlZWtzLCBkYXlzLCBob3VycywgbWludXRlcyBhbmQgc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIHllYXJzLCBtb250aHMsIHdlZWtzLCBkYXlzLCBob3VycywgbWludXRlcyBhbmQgc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtEdXJhdGlvbn0gZHVyYXRpb24gLSB0aGUgb2JqZWN0IHdpdGggeWVhcnMsIG1vbnRocywgd2Vla3MsIGRheXMsIGhvdXJzLCBtaW51dGVzIGFuZCBzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKlxuICogfCBLZXkgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB5ZWFycyAgICAgICAgICB8IEFtb3VudCBvZiB5ZWFycyB0byBiZSBhZGRlZCAgICAgICAgfFxuICogfCBtb250aHMgICAgICAgICB8IEFtb3VudCBvZiBtb250aHMgdG8gYmUgYWRkZWQgICAgICAgfFxuICogfCB3ZWVrcyAgICAgICAgICB8IEFtb3VudCBvZiB3ZWVrcyB0byBiZSBhZGRlZCAgICAgICAgfFxuICogfCBkYXlzICAgICAgICAgICB8IEFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkICAgICAgICAgfFxuICogfCBob3VycyAgICAgICAgICB8IEFtb3VudCBvZiBob3VycyB0byBiZSBhZGRlZCAgICAgICAgfFxuICogfCBtaW51dGVzICAgICAgICB8IEFtb3VudCBvZiBtaW51dGVzIHRvIGJlIGFkZGVkICAgICAgfFxuICogfCBzZWNvbmRzICAgICAgICB8IEFtb3VudCBvZiBzZWNvbmRzIHRvIGJlIGFkZGVkICAgICAgfFxuICpcbiAqIEFsbCB2YWx1ZXMgZGVmYXVsdCB0byAwXG4gKlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCB0aGUgZm9sbG93aW5nIGR1cmF0aW9uIHRvIDEgU2VwdGVtYmVyIDIwMTQsIDEwOjE5OjUwXG4gKiBjb25zdCByZXN1bHQgPSBhZGQobmV3IERhdGUoMjAxNCwgOCwgMSwgMTAsIDE5LCA1MCksIHtcbiAqICAgeWVhcnM6IDIsXG4gKiAgIG1vbnRoczogOSxcbiAqICAgd2Vla3M6IDEsXG4gKiAgIGRheXM6IDcsXG4gKiAgIGhvdXJzOiA1LFxuICogICBtaW51dGVzOiA5LFxuICogICBzZWNvbmRzOiAzMCxcbiAqIH0pXG4gKiAvLz0+IFRodSBKdW4gMTUgMjAxNyAxNToyOToyMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGQoZGlydHlEYXRlLCBkdXJhdGlvbikge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgaWYgKCFkdXJhdGlvbiB8fCB0eXBlb2YgZHVyYXRpb24gIT09ICdvYmplY3QnKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgdmFyIHllYXJzID0gZHVyYXRpb24ueWVhcnMgPyB0b0ludGVnZXIoZHVyYXRpb24ueWVhcnMpIDogMDtcbiAgdmFyIG1vbnRocyA9IGR1cmF0aW9uLm1vbnRocyA/IHRvSW50ZWdlcihkdXJhdGlvbi5tb250aHMpIDogMDtcbiAgdmFyIHdlZWtzID0gZHVyYXRpb24ud2Vla3MgPyB0b0ludGVnZXIoZHVyYXRpb24ud2Vla3MpIDogMDtcbiAgdmFyIGRheXMgPSBkdXJhdGlvbi5kYXlzID8gdG9JbnRlZ2VyKGR1cmF0aW9uLmRheXMpIDogMDtcbiAgdmFyIGhvdXJzID0gZHVyYXRpb24uaG91cnMgPyB0b0ludGVnZXIoZHVyYXRpb24uaG91cnMpIDogMDtcbiAgdmFyIG1pbnV0ZXMgPSBkdXJhdGlvbi5taW51dGVzID8gdG9JbnRlZ2VyKGR1cmF0aW9uLm1pbnV0ZXMpIDogMDtcbiAgdmFyIHNlY29uZHMgPSBkdXJhdGlvbi5zZWNvbmRzID8gdG9JbnRlZ2VyKGR1cmF0aW9uLnNlY29uZHMpIDogMDsgLy8gQWRkIHllYXJzIGFuZCBtb250aHNcblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF0ZVdpdGhNb250aHMgPSBtb250aHMgfHwgeWVhcnMgPyBhZGRNb250aHMoZGF0ZSwgbW9udGhzICsgeWVhcnMgKiAxMikgOiBkYXRlOyAvLyBBZGQgd2Vla3MgYW5kIGRheXNcblxuICB2YXIgZGF0ZVdpdGhEYXlzID0gZGF5cyB8fCB3ZWVrcyA/IGFkZERheXMoZGF0ZVdpdGhNb250aHMsIGRheXMgKyB3ZWVrcyAqIDcpIDogZGF0ZVdpdGhNb250aHM7IC8vIEFkZCBkYXlzLCBob3VycywgbWludXRlcyBhbmQgc2Vjb25kc1xuXG4gIHZhciBtaW51dGVzVG9BZGQgPSBtaW51dGVzICsgaG91cnMgKiA2MDtcbiAgdmFyIHNlY29uZHNUb0FkZCA9IHNlY29uZHMgKyBtaW51dGVzVG9BZGQgKiA2MDtcbiAgdmFyIG1zVG9BZGQgPSBzZWNvbmRzVG9BZGQgKiAxMDAwO1xuICB2YXIgZmluYWxEYXRlID0gbmV3IERhdGUoZGF0ZVdpdGhEYXlzLmdldFRpbWUoKSArIG1zVG9BZGQpO1xuICByZXR1cm4gZmluYWxEYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZERheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gLSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgZGF5cyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAtIDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAxMCBkYXlzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGREYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gVGh1IFNlcCAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRGF5cyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcblxuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIGRheXMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBhbW91bnQpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGRNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHRpbWVzdGFtcCA9IHRvRGF0ZShkaXJ0eURhdGUpLmdldFRpbWUoKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBhbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1vbnRoc1xuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtb250aHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbW9udGhzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1vbnRocyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtb250aHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDUgbW9udGhzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNb250aHMobmV3IERhdGUoMjAxNCwgOCwgMSksIDUpXG4gKiAvLz0+IFN1biBGZWIgMDEgMjAxNSAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1vbnRocyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcblxuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIG1vbnRocywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIHZhciBkYXlPZk1vbnRoID0gZGF0ZS5nZXREYXRlKCk7IC8vIFRoZSBKUyBEYXRlIG9iamVjdCBzdXBwb3J0cyBkYXRlIG1hdGggYnkgYWNjZXB0aW5nIG91dC1vZi1ib3VuZHMgdmFsdWVzIGZvclxuICAvLyBtb250aCwgZGF5LCBldGMuIEZvciBleGFtcGxlLCBuZXcgRGF0ZSgyMDIwLCAwLCAwKSByZXR1cm5zIDMxIERlYyAyMDE5IGFuZFxuICAvLyBuZXcgRGF0ZSgyMDIwLCAxMywgMSkgcmV0dXJucyAxIEZlYiAyMDIxLiAgVGhpcyBpcyAqYWxtb3N0KiB0aGUgYmVoYXZpb3Igd2VcbiAgLy8gd2FudCBleGNlcHQgdGhhdCBkYXRlcyB3aWxsIHdyYXAgYXJvdW5kIHRoZSBlbmQgb2YgYSBtb250aCwgbWVhbmluZyB0aGF0XG4gIC8vIG5ldyBEYXRlKDIwMjAsIDEzLCAzMSkgd2lsbCByZXR1cm4gMyBNYXIgMjAyMSBub3QgMjggRmViIDIwMjEgYXMgZGVzaXJlZC4gU29cbiAgLy8gd2UnbGwgZGVmYXVsdCB0byB0aGUgZW5kIG9mIHRoZSBkZXNpcmVkIG1vbnRoIGJ5IGFkZGluZyAxIHRvIHRoZSBkZXNpcmVkXG4gIC8vIG1vbnRoIGFuZCB1c2luZyBhIGRhdGUgb2YgMCB0byBiYWNrIHVwIG9uZSBkYXkgdG8gdGhlIGVuZCBvZiB0aGUgZGVzaXJlZFxuICAvLyBtb250aC5cblxuICB2YXIgZW5kT2ZEZXNpcmVkTW9udGggPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gIGVuZE9mRGVzaXJlZE1vbnRoLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIGFtb3VudCArIDEsIDApO1xuICB2YXIgZGF5c0luTW9udGggPSBlbmRPZkRlc2lyZWRNb250aC5nZXREYXRlKCk7XG5cbiAgaWYgKGRheU9mTW9udGggPj0gZGF5c0luTW9udGgpIHtcbiAgICAvLyBJZiB3ZSdyZSBhbHJlYWR5IGF0IHRoZSBlbmQgb2YgdGhlIG1vbnRoLCB0aGVuIHRoaXMgaXMgdGhlIGNvcnJlY3QgZGF0ZVxuICAgIC8vIGFuZCB3ZSdyZSBkb25lLlxuICAgIHJldHVybiBlbmRPZkRlc2lyZWRNb250aDtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIHdlIG5vdyBrbm93IHRoYXQgc2V0dGluZyB0aGUgb3JpZ2luYWwgZGF5LW9mLW1vbnRoIHZhbHVlIHdvbid0XG4gICAgLy8gY2F1c2UgYW4gb3ZlcmZsb3csIHNvIHNldCB0aGUgZGVzaXJlZCBkYXktb2YtbW9udGguIE5vdGUgdGhhdCB3ZSBjYW4ndFxuICAgIC8vIGp1c3Qgc2V0IHRoZSBkYXRlIG9mIGBlbmRPZkRlc2lyZWRNb250aGAgYmVjYXVzZSB0aGF0IG9iamVjdCBtYXkgaGF2ZSBoYWRcbiAgICAvLyBpdHMgdGltZSBjaGFuZ2VkIGluIHRoZSB1bnVzdWFsIGNhc2Ugd2hlcmUgd2hlcmUgYSBEU1QgdHJhbnNpdGlvbiB3YXMgb25cbiAgICAvLyB0aGUgbGFzdCBkYXkgb2YgdGhlIG1vbnRoIGFuZCBpdHMgbG9jYWwgdGltZSB3YXMgaW4gdGhlIGhvdXIgc2tpcHBlZCBvclxuICAgIC8vIHJlcGVhdGVkIG5leHQgdG8gYSBEU1QgdHJhbnNpdGlvbi4gIFNvIHdlIHVzZSBgZGF0ZWAgaW5zdGVhZCB3aGljaCBpc1xuICAgIC8vIGd1YXJhbnRlZWQgdG8gc3RpbGwgaGF2ZSB0aGUgb3JpZ2luYWwgdGltZS5cbiAgICBkYXRlLnNldEZ1bGxZZWFyKGVuZE9mRGVzaXJlZE1vbnRoLmdldEZ1bGxZZWFyKCksIGVuZE9mRGVzaXJlZE1vbnRoLmdldE1vbnRoKCksIGRheU9mTW9udGgpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG59IiwiLyoqXG4gKiBEYXlzIGluIDEgd2Vlay5cbiAqXG4gKiBAbmFtZSBkYXlzSW5XZWVrXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5leHBvcnQgdmFyIGRheXNJbldlZWsgPSA3O1xuLyoqXG4gKiBNYXhpbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtYXhUaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWF4VGltZSA9IE1hdGgucG93KDEwLCA4KSAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luTWludXRlXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5NaW51dGUgPSA2MDAwMDtcbi8qKlxuICogTWlsbGlzZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luSG91clxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIG1pbGxpc2Vjb25kc0luSG91ciA9IDM2MDAwMDA7XG4vKipcbiAqIE1pbGxpc2Vjb25kcyBpbiAxIHNlY29uZFxuICpcbiAqIEBuYW1lIG1pbGxpc2Vjb25kc0luU2Vjb25kXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzSW5TZWNvbmQgPSAxMDAwO1xuLyoqXG4gKiBNaW5pbXVtIGFsbG93ZWQgdGltZS5cbiAqXG4gKiBAbmFtZSBtaW5UaW1lXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbWluVGltZSA9IC1tYXhUaW1lO1xuLyoqXG4gKiBNaW51dGVzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIG1pbnV0ZXNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtaW51dGVzSW5Ib3VyID0gNjA7XG4vKipcbiAqIE1vbnRocyBpbiAxIHF1YXJ0ZXJcbiAqXG4gKiBAbmFtZSBtb250aHNJblF1YXJ0ZXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBtb250aHNJblF1YXJ0ZXIgPSAzO1xuLyoqXG4gKiBNb250aHMgaW4gMSB5ZWFyXG4gKlxuICogQG5hbWUgbW9udGhzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgbW9udGhzSW5ZZWFyID0gMTI7XG4vKipcbiAqIFF1YXJ0ZXJzIGluIDEgeWVhclxuICpcbiAqIEBuYW1lIHF1YXJ0ZXJzSW5ZZWFyXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKiBAZGVmYXVsdFxuICovXG5cbmV4cG9ydCB2YXIgcXVhcnRlcnNJblllYXIgPSA0O1xuLyoqXG4gKiBTZWNvbmRzIGluIDEgaG91clxuICpcbiAqIEBuYW1lIHNlY29uZHNJbkhvdXJcbiAqIEBjb25zdGFudFxuICogQHR5cGUge251bWJlcn1cbiAqIEBkZWZhdWx0XG4gKi9cblxuZXhwb3J0IHZhciBzZWNvbmRzSW5Ib3VyID0gMzYwMDtcbi8qKlxuICogU2Vjb25kcyBpbiAxIG1pbnV0ZVxuICpcbiAqIEBuYW1lIHNlY29uZHNJbk1pbnV0ZVxuICogQGNvbnN0YW50XG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQGRlZmF1bHRcbiAqL1xuXG5leHBvcnQgdmFyIHNlY29uZHNJbk1pbnV0ZSA9IDYwOyIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZW5kT2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBlbmQgb2YgYSBkYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgZW5kIG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZW5kT2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDIzOjU5OjU5Ljk5OVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGZvcm1hdElTT1xuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUgYWNjb3JkaW5nIHRvIHRoZSBJU08gODYwMSBzdGFuZGFyZCAoaHR0cHM6Ly9zdXBwb3J0LnNhcy5jb20vZG9jdW1lbnRhdGlvbi9jZGwvZW4vbHJkaWN0LzY0MzE2L0hUTUwvZGVmYXVsdC92aWV3ZXIuaHRtI2EwMDMxNjk4MTQuaHRtKS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIElTTyA4NjAxIGZvcm1hdC4gT3B0aW9ucyBtYXkgYmUgcGFzc2VkIHRvIGNvbnRyb2wgdGhlIHBhcnRzIGFuZCBub3RhdGlvbnMgb2YgdGhlIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7J2V4dGVuZGVkJ3wnYmFzaWMnfSBbb3B0aW9ucy5mb3JtYXQ9J2V4dGVuZGVkJ10gLSBpZiAnYmFzaWMnLCBoaWRlIGRlbGltaXRlcnMgYmV0d2VlbiBkYXRlIGFuZCB0aW1lIHZhbHVlcy5cbiAqIEBwYXJhbSB7J2NvbXBsZXRlJ3wnZGF0ZSd8J3RpbWUnfSBbb3B0aW9ucy5yZXByZXNlbnRhdGlvbj0nY29tcGxldGUnXSAtIGZvcm1hdCBkYXRlLCB0aW1lIHdpdGggbG9jYWwgdGltZSB6b25lLCBvciBib3RoLlxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyAoaW4gbG9jYWwgdGltZSB6b25lKVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5mb3JtYXRgIG11c3QgYmUgJ2V4dGVuZGVkJyBvciAnYmFzaWMnXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5yZXByZXNlbmF0aW9uYCBtdXN0IGJlICdkYXRlJywgJ3RpbWUnIG9yICdjb21wbGV0ZSdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDE4IFNlcHRlbWJlciAyMDE5IGluIElTTyA4NjAxIGZvcm1hdCAobG9jYWwgdGltZSB6b25lIGlzIFVUQyk6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXRJU08obmV3IERhdGUoMjAxOSwgOCwgMTgsIDE5LCAwLCA1MikpXG4gKiAvLz0+ICcyMDE5LTA5LTE4VDE5OjAwOjUyWidcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDE4IFNlcHRlbWJlciAyMDE5IGluIElTTyA4NjAxLCBzaG9ydCBmb3JtYXQgKGxvY2FsIHRpbWUgem9uZSBpcyBVVEMpOlxuICogY29uc3QgcmVzdWx0ID0gZm9ybWF0SVNPKG5ldyBEYXRlKDIwMTksIDgsIDE4LCAxOSwgMCwgNTIpLCB7IGZvcm1hdDogJ2Jhc2ljJyB9KVxuICogLy89PiAnMjAxOTA5MThUMTkwMDUyJ1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTggU2VwdGVtYmVyIDIwMTkgaW4gSVNPIDg2MDEgZm9ybWF0LCBkYXRlIG9ubHk6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXRJU08obmV3IERhdGUoMjAxOSwgOCwgMTgsIDE5LCAwLCA1MiksIHsgcmVwcmVzZW50YXRpb246ICdkYXRlJyB9KVxuICogLy89PiAnMjAxOS0wOS0xOCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDE4IFNlcHRlbWJlciAyMDE5IGluIElTTyA4NjAxIGZvcm1hdCwgdGltZSBvbmx5IChsb2NhbCB0aW1lIHpvbmUgaXMgVVRDKTpcbiAqIGNvbnN0IHJlc3VsdCA9IGZvcm1hdElTTyhuZXcgRGF0ZSgyMDE5LCA4LCAxOCwgMTksIDAsIDUyKSwgeyByZXByZXNlbnRhdGlvbjogJ3RpbWUnIH0pXG4gKiAvLz0+ICcxOTowMDo1MlonXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0SVNPKGRhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGF0ZSk7XG5cbiAgaWYgKGlzTmFOKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9XG5cbiAgdmFyIGZvcm1hdCA9ICEob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5mb3JtYXQpID8gJ2V4dGVuZGVkJyA6IFN0cmluZyhvcHRpb25zLmZvcm1hdCk7XG4gIHZhciByZXByZXNlbnRhdGlvbiA9ICEob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy5yZXByZXNlbnRhdGlvbikgPyAnY29tcGxldGUnIDogU3RyaW5nKG9wdGlvbnMucmVwcmVzZW50YXRpb24pO1xuXG4gIGlmIChmb3JtYXQgIT09ICdleHRlbmRlZCcgJiYgZm9ybWF0ICE9PSAnYmFzaWMnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJmb3JtYXQgbXVzdCBiZSAnZXh0ZW5kZWQnIG9yICdiYXNpYydcIik7XG4gIH1cblxuICBpZiAocmVwcmVzZW50YXRpb24gIT09ICdkYXRlJyAmJiByZXByZXNlbnRhdGlvbiAhPT0gJ3RpbWUnICYmIHJlcHJlc2VudGF0aW9uICE9PSAnY29tcGxldGUnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJyZXByZXNlbnRhdGlvbiBtdXN0IGJlICdkYXRlJywgJ3RpbWUnLCBvciAnY29tcGxldGUnXCIpO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgdHpPZmZzZXQgPSAnJztcbiAgdmFyIGRhdGVEZWxpbWl0ZXIgPSBmb3JtYXQgPT09ICdleHRlbmRlZCcgPyAnLScgOiAnJztcbiAgdmFyIHRpbWVEZWxpbWl0ZXIgPSBmb3JtYXQgPT09ICdleHRlbmRlZCcgPyAnOicgOiAnJzsgLy8gUmVwcmVzZW50YXRpb24gaXMgZWl0aGVyICdkYXRlJyBvciAnY29tcGxldGUnXG5cbiAgaWYgKHJlcHJlc2VudGF0aW9uICE9PSAndGltZScpIHtcbiAgICB2YXIgZGF5ID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXREYXRlKCksIDIpO1xuICAgIHZhciBtb250aCA9IGFkZExlYWRpbmdaZXJvcyhvcmlnaW5hbERhdGUuZ2V0TW9udGgoKSArIDEsIDIpO1xuICAgIHZhciB5ZWFyID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXRGdWxsWWVhcigpLCA0KTsgLy8geXl5eU1NZGQgb3IgeXl5eS1NTS1kZC5cblxuICAgIHJlc3VsdCA9IFwiXCIuY29uY2F0KHllYXIpLmNvbmNhdChkYXRlRGVsaW1pdGVyKS5jb25jYXQobW9udGgpLmNvbmNhdChkYXRlRGVsaW1pdGVyKS5jb25jYXQoZGF5KTtcbiAgfSAvLyBSZXByZXNlbnRhdGlvbiBpcyBlaXRoZXIgJ3RpbWUnIG9yICdjb21wbGV0ZSdcblxuXG4gIGlmIChyZXByZXNlbnRhdGlvbiAhPT0gJ2RhdGUnKSB7XG4gICAgLy8gQWRkIHRoZSB0aW1lem9uZS5cbiAgICB2YXIgb2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgICB2YXIgYWJzb2x1dGVPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICAgICAgdmFyIGhvdXJPZmZzZXQgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNvbHV0ZU9mZnNldCAvIDYwKSwgMik7XG4gICAgICB2YXIgbWludXRlT2Zmc2V0ID0gYWRkTGVhZGluZ1plcm9zKGFic29sdXRlT2Zmc2V0ICUgNjAsIDIpOyAvLyBJZiBsZXNzIHRoYW4gMCwgdGhlIHNpZ24gaXMgKywgYmVjYXVzZSBpdCBpcyBhaGVhZCBvZiB0aW1lLlxuXG4gICAgICB2YXIgc2lnbiA9IG9mZnNldCA8IDAgPyAnKycgOiAnLSc7XG4gICAgICB0ek9mZnNldCA9IFwiXCIuY29uY2F0KHNpZ24pLmNvbmNhdChob3VyT2Zmc2V0LCBcIjpcIikuY29uY2F0KG1pbnV0ZU9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR6T2Zmc2V0ID0gJ1onO1xuICAgIH1cblxuICAgIHZhciBob3VyID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXRIb3VycygpLCAyKTtcbiAgICB2YXIgbWludXRlID0gYWRkTGVhZGluZ1plcm9zKG9yaWdpbmFsRGF0ZS5nZXRNaW51dGVzKCksIDIpO1xuICAgIHZhciBzZWNvbmQgPSBhZGRMZWFkaW5nWmVyb3Mob3JpZ2luYWxEYXRlLmdldFNlY29uZHMoKSwgMik7IC8vIElmIHRoZXJlJ3MgYWxzbyBkYXRlLCBzZXBhcmF0ZSBpdCB3aXRoIHRpbWUgd2l0aCAnVCdcblxuICAgIHZhciBzZXBhcmF0b3IgPSByZXN1bHQgPT09ICcnID8gJycgOiAnVCc7IC8vIENyZWF0ZXMgYSB0aW1lIHN0cmluZyBjb25zaXN0aW5nIG9mIGhvdXIsIG1pbnV0ZSwgYW5kIHNlY29uZCwgc2VwYXJhdGVkIGJ5IGRlbGltaXRlcnMsIGlmIGRlZmluZWQuXG5cbiAgICB2YXIgdGltZSA9IFtob3VyLCBtaW51dGUsIHNlY29uZF0uam9pbih0aW1lRGVsaW1pdGVyKTsgLy8gSEhtbXNzIG9yIEhIOm1tOnNzLlxuXG4gICAgcmVzdWx0ID0gXCJcIi5jb25jYXQocmVzdWx0KS5jb25jYXQoc2VwYXJhdG9yKS5jb25jYXQodGltZSkuY29uY2F0KHR6T2Zmc2V0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBnZXREYXlcbiAqIEBjYXRlZ29yeSBXZWVrZGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHswfDF8MnwzfDR8NXw2fSB0aGUgZGF5IG9mIHdlZWssIDAgcmVwcmVzZW50cyBTdW5kYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHdlZWsgaXMgMjkgRmVicnVhcnkgMjAxMj9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldERheShuZXcgRGF0ZSgyMDEyLCAxLCAyOSkpXG4gKiAvLz0+IDNcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgcmV0dXJuIGRheTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGdldERheXNJbk1vbnRoXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgZGF5cyBpbiBhIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgZGF5cyBpbiBhIG1vbnRoIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBnaXZlbiBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGRheXMgaW4gYSBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGRheXMgYXJlIGluIEZlYnJ1YXJ5IDIwMDA/XG4gKiBjb25zdCByZXN1bHQgPSBnZXREYXlzSW5Nb250aChuZXcgRGF0ZSgyMDAwLCAxKSlcbiAqIC8vPT4gMjlcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREYXlzSW5Nb250aChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB2YXIgbW9udGhJbmRleCA9IGRhdGUuZ2V0TW9udGgoKTtcbiAgdmFyIGxhc3REYXlPZk1vbnRoID0gbmV3IERhdGUoMCk7XG4gIGxhc3REYXlPZk1vbnRoLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoSW5kZXggKyAxLCAwKTtcbiAgbGFzdERheU9mTW9udGguc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBsYXN0RGF5T2ZNb250aC5nZXREYXRlKCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0JlZm9yZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZmlyc3QgZGF0ZSBiZWZvcmUgdGhlIHNlY29uZCBvbmU/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdGhhdCBzaG91bGQgYmUgYmVmb3JlIHRoZSBvdGhlciBvbmUgdG8gcmV0dXJuIHRydWVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVUb0NvbXBhcmUgLSB0aGUgZGF0ZSB0byBjb21wYXJlIHdpdGhcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElzIDEwIEp1bHkgMTk4OSBiZWZvcmUgMTEgRmVicnVhcnkgMTk4Nz9cbiAqIHZhciByZXN1bHQgPSBpc0JlZm9yZShuZXcgRGF0ZSgxOTg5LCA2LCAxMCksIG5ldyBEYXRlKDE5ODcsIDEsIDExKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0JlZm9yZShkaXJ0eURhdGUsIGRpcnR5RGF0ZVRvQ29tcGFyZSkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRhdGVUb0NvbXBhcmUgPSB0b0RhdGUoZGlydHlEYXRlVG9Db21wYXJlKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIDwgZGF0ZVRvQ29tcGFyZS5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJpbXBvcnQgc3RhcnRPZkRheSBmcm9tIFwiLi4vc3RhcnRPZkRheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNTYW1lRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgMDY6MDA6MDAgYW5kIDQgU2VwdGVtYmVyIDE4OjAwOjAwIGluIHRoZSBzYW1lIGRheT9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCwgNiwgMCksIG5ldyBEYXRlKDIwMTQsIDgsIDQsIDE4LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICogXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIGFuZCA0IE9jdG9iZXIgaW4gdGhlIHNhbWUgZGF5P1xuICogdmFyIHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNCwgOSwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKiBcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIsIDIwMTQgYW5kIDQgU2VwdGVtYmVyLCAyMDE1IGluIHRoZSBzYW1lIGRheT9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTUsIDgsIDQpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZURheShkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdFN0YXJ0T2ZEYXkuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mRGF5LmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzU2FtZU1vbnRoXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBtb250aCAoYW5kIHllYXIpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBtb250aCAoYW5kIHllYXIpP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBtb250aCAoYW5kIHllYXIpXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSAyIFNlcHRlbWJlciAyMDE0IGFuZCAyNSBTZXB0ZW1iZXIgMjAxNCBpbiB0aGUgc2FtZSBtb250aD9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVNb250aChuZXcgRGF0ZSgyMDE0LCA4LCAyKSwgbmV3IERhdGUoMjAxNCwgOCwgMjUpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSAyIFNlcHRlbWJlciAyMDE0IGFuZCAyNSBTZXB0ZW1iZXIgMjAxNSBpbiB0aGUgc2FtZSBtb250aD9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVNb250aChuZXcgRGF0ZSgyMDE0LCA4LCAyKSwgbmV3IERhdGUoMjAxNSwgOCwgMjUpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZU1vbnRoKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICByZXR1cm4gZGF0ZUxlZnQuZ2V0RnVsbFllYXIoKSA9PT0gZGF0ZVJpZ2h0LmdldEZ1bGxZZWFyKCkgJiYgZGF0ZUxlZnQuZ2V0TW9udGgoKSA9PT0gZGF0ZVJpZ2h0LmdldE1vbnRoKCk7XG59IiwiaW1wb3J0IGlzU2FtZURheSBmcm9tIFwiLi4vaXNTYW1lRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1RvZGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICogQHB1cmUgZmFsc2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIElzIHRoZSBnaXZlbiBkYXRlIHRvZGF5P1xuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgcHJlc2VudCBpbiB0aGUgRlAgc3VibW9kdWxlIGFzXG4gKiA+IGl0IHVzZXMgYERhdGUubm93KClgIGludGVybmFsbHkgaGVuY2UgaW1wdXJlIGFuZCBjYW4ndCBiZSBzYWZlbHkgY3VycmllZC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHRvZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdG9kYXkgaXMgNiBPY3RvYmVyIDIwMTQsIGlzIDYgT2N0b2JlciAxNDowMDowMCB0b2RheT9cbiAqIHZhciByZXN1bHQgPSBpc1RvZGF5KG5ldyBEYXRlKDIwMTQsIDksIDYsIDE0LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVG9kYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lRGF5KGRpcnR5RGF0ZSwgRGF0ZS5ub3coKSk7XG59IiwiaW1wb3J0IGlzRGF0ZSBmcm9tIFwiLi4vaXNEYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVmFsaWRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdmFsaWQ/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGZhbHNlIGlmIGFyZ3VtZW50IGlzIEludmFsaWQgRGF0ZSBhbmQgdHJ1ZSBvdGhlcndpc2UuXG4gKiBBcmd1bWVudCBpcyBjb252ZXJ0ZWQgdG8gRGF0ZSB1c2luZyBgdG9EYXRlYC4gU2VlIFt0b0RhdGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvdG9EYXRlfVxuICogSW52YWxpZCBEYXRlIGlzIGEgRGF0ZSwgd2hvc2UgdGltZSB2YWx1ZSBpcyBOYU4uXG4gKlxuICogVGltZSB2YWx1ZSBvZiBEYXRlOiBodHRwOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjkuMS4xXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIE5vdyBgaXNWYWxpZGAgZG9lc24ndCB0aHJvdyBhbiBleGNlcHRpb25cbiAqICAgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICogICBJbnN0ZWFkLCBhcmd1bWVudCBpcyBjb252ZXJ0ZWQgYmVmb3JlaGFuZCB1c2luZyBgdG9EYXRlYC5cbiAqXG4gKiAgIEV4YW1wbGVzOlxuICpcbiAqICAgfCBgaXNWYWxpZGAgYXJndW1lbnQgICAgICAgIHwgQmVmb3JlIHYyLjAuMCB8IHYyLjAuMCBvbndhcmQgfFxuICogICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18XG4gKiAgIHwgYG5ldyBEYXRlKClgICAgICAgICAgICAgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJzIwMTYtMDEtMDEnKWAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnJylgICAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKDE0ODgzNzA4MzUwODEpYCB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoTmFOKWAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnMjAxNi0wMS0wMSdgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcnYCAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgMTQ4ODM3MDgzNTA4MWAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBOYU5gICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKlxuICogICBXZSBpbnRyb2R1Y2UgdGhpcyBjaGFuZ2UgdG8gbWFrZSAqZGF0ZS1mbnMqIGNvbnNpc3RlbnQgd2l0aCBFQ01BU2NyaXB0IGJlaGF2aW9yXG4gKiAgIHRoYXQgdHJ5IHRvIGNvZXJjZSBhcmd1bWVudHMgdG8gdGhlIGV4cGVjdGVkIHR5cGVcbiAqICAgKHdoaWNoIGlzIGFsc28gdGhlIGNhc2Ugd2l0aCBvdGhlciAqZGF0ZS1mbnMqIGZ1bmN0aW9ucykuXG4gKlxuICogQHBhcmFtIHsqfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB2YWxpZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgnJykpXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKCFpc0RhdGUoZGlydHlEYXRlKSAmJiB0eXBlb2YgZGlydHlEYXRlICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHJldHVybiAhaXNOYU4oTnVtYmVyKGRhdGUpKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzV2Vla2VuZFxuICogQGNhdGVnb3J5IFdlZWtkYXkgSGVscGVyc1xuICogQHN1bW1hcnkgRG9lcyB0aGUgZ2l2ZW4gZGF0ZSBmYWxsIG9uIGEgd2Vla2VuZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERvZXMgdGhlIGdpdmVuIGRhdGUgZmFsbCBvbiBhIHdlZWtlbmQ/XG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBmYWxscyBvbiBhIHdlZWtlbmRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBEb2VzIDUgT2N0b2JlciAyMDE0IGZhbGwgb24gYSB3ZWVrZW5kP1xuICogY29uc3QgcmVzdWx0ID0gaXNXZWVrZW5kKG5ldyBEYXRlKDIwMTQsIDksIDUpKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNXZWVrZW5kKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgfHwgZGF5ID09PSA2O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDsgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcblxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTsgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xuXG52YXIgb3JkaW5hbE51bWJlciA9IGZ1bmN0aW9uIChkaXJ0eU51bWJlciwgX29wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufTtcblxudmFyIGxvY2FsaXplID0ge1xuICBvcmRpbmFsTnVtYmVyOiBvcmRpbmFsTnVtYmVyLFxuICBlcmE6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBlcmFWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBxdWFydGVyVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGFyZ3VtZW50Q2FsbGJhY2s6IGZ1bmN0aW9uIChxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH0pLFxuICBlcmE6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaE1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZU1vbnRoUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXk6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ2FueScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBtYXRjaDsiLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IGFkZERheXMgZnJvbSBcIi4uL2FkZERheXMvaW5kZXguanNcIjtcbmltcG9ydCBnZXREYXkgZnJvbSBcIi4uL2dldERheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgbmV4dERheVxuICogQGNhdGVnb3J5IFdlZWtkYXkgSGVscGVyc1xuICogQHN1bW1hcnkgV2hlbiBpcyB0aGUgbmV4dCBkYXkgb2YgdGhlIHdlZWs/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBXaGVuIGlzIHRoZSBuZXh0IGRheSBvZiB0aGUgd2Vlaz8gMC02IHRoZSBkYXkgb2YgdGhlIHdlZWssIDAgcmVwcmVzZW50cyBTdW5kYXkuXG4gKlxuICogQHBhcmFtIHtEYXRlIHwgbnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7RGF5fSBkYXkgLSBkYXkgb2YgdGhlIHdlZWtcbiAqIEByZXR1cm5zIHtEYXRlfSAtIHRoZSBkYXRlIGlzIHRoZSBuZXh0IGRheSBvZiB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IC0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hlbiBpcyB0aGUgbmV4dCBNb25kYXkgYWZ0ZXIgTWFyLCAyMCwgMjAyMD9cbiAqIGNvbnN0IHJlc3VsdCA9IG5leHREYXkobmV3IERhdGUoMjAyMCwgMiwgMjApLCAxKVxuICogLy89PiBNb24gTWFyIDIzIDIwMjAgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hlbiBpcyB0aGUgbmV4dCBUdWVzZGF5IGFmdGVyIE1hciwgMjEsIDIwMjA/XG4gKiBjb25zdCByZXN1bHQgPSBuZXh0RGF5KG5ldyBEYXRlKDIwMjAsIDIsIDIxKSwgMilcbiAqIC8vPT4gVHVlIE1hciAyNCAyMDIwIDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV4dERheShkYXRlLCBkYXkpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWx0YSA9IGRheSAtIGdldERheShkYXRlKTtcbiAgaWYgKGRlbHRhIDw9IDApIGRlbHRhICs9IDc7XG4gIHJldHVybiBhZGREYXlzKGRhdGUsIGRlbHRhKTtcbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzZXRVVENEYXkgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgc2V0VVRDSVNPRGF5IGZyb20gXCIuLi8uLi8uLi9fbGliL3NldFVUQ0lTT0RheS9pbmRleC5qc1wiO1xuaW1wb3J0IHNldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHNldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fSE9VUiA9IDM2MDAwMDA7XG52YXIgTUlMTElTRUNPTkRTX0lOX01JTlVURSA9IDYwMDAwO1xudmFyIE1JTExJU0VDT05EU19JTl9TRUNPTkQgPSAxMDAwO1xudmFyIG51bWVyaWNQYXR0ZXJucyA9IHtcbiAgbW9udGg6IC9eKDFbMC0yXXwwP1xcZCkvLFxuICAvLyAwIHRvIDEyXG4gIGRhdGU6IC9eKDNbMC0xXXxbMC0yXT9cXGQpLyxcbiAgLy8gMCB0byAzMVxuICBkYXlPZlllYXI6IC9eKDM2WzAtNl18M1swLTVdXFxkfFswLTJdP1xcZD9cXGQpLyxcbiAgLy8gMCB0byAzNjZcbiAgd2VlazogL14oNVswLTNdfFswLTRdP1xcZCkvLFxuICAvLyAwIHRvIDUzXG4gIGhvdXIyM2g6IC9eKDJbMC0zXXxbMC0xXT9cXGQpLyxcbiAgLy8gMCB0byAyM1xuICBob3VyMjRoOiAvXigyWzAtNF18WzAtMV0/XFxkKS8sXG4gIC8vIDAgdG8gMjRcbiAgaG91cjExaDogL14oMVswLTFdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTFcbiAgaG91cjEyaDogL14oMVswLTJdfDA/XFxkKS8sXG4gIC8vIDAgdG8gMTJcbiAgbWludXRlOiAvXlswLTVdP1xcZC8sXG4gIC8vIDAgdG8gNTlcbiAgc2Vjb25kOiAvXlswLTVdP1xcZC8sXG4gIC8vIDAgdG8gNTlcbiAgc2luZ2xlRGlnaXQ6IC9eXFxkLyxcbiAgLy8gMCB0byA5XG4gIHR3b0RpZ2l0czogL15cXGR7MSwyfS8sXG4gIC8vIDAgdG8gOTlcbiAgdGhyZWVEaWdpdHM6IC9eXFxkezEsM30vLFxuICAvLyAwIHRvIDk5OVxuICBmb3VyRGlnaXRzOiAvXlxcZHsxLDR9LyxcbiAgLy8gMCB0byA5OTk5XG4gIGFueURpZ2l0c1NpZ25lZDogL14tP1xcZCsvLFxuICBzaW5nbGVEaWdpdFNpZ25lZDogL14tP1xcZC8sXG4gIC8vIDAgdG8gOSwgLTAgdG8gLTlcbiAgdHdvRGlnaXRzU2lnbmVkOiAvXi0/XFxkezEsMn0vLFxuICAvLyAwIHRvIDk5LCAtMCB0byAtOTlcbiAgdGhyZWVEaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSwzfS8sXG4gIC8vIDAgdG8gOTk5LCAtMCB0byAtOTk5XG4gIGZvdXJEaWdpdHNTaWduZWQ6IC9eLT9cXGR7MSw0fS8gLy8gMCB0byA5OTk5LCAtMCB0byAtOTk5OVxuXG59O1xudmFyIHRpbWV6b25lUGF0dGVybnMgPSB7XG4gIGJhc2ljT3B0aW9uYWxNaW51dGVzOiAvXihbKy1dKShcXGR7Mn0pKFxcZHsyfSk/fFovLFxuICBiYXNpYzogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pfFovLFxuICBiYXNpY09wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KShcXGR7Mn0pKChcXGR7Mn0pKT98Wi8sXG4gIGV4dGVuZGVkOiAvXihbKy1dKShcXGR7Mn0pOihcXGR7Mn0pfFovLFxuICBleHRlbmRlZE9wdGlvbmFsU2Vjb25kczogL14oWystXSkoXFxkezJ9KTooXFxkezJ9KSg6KFxcZHsyfSkpP3xaL1xufTtcblxuZnVuY3Rpb24gcGFyc2VOdW1lcmljUGF0dGVybihwYXR0ZXJuLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKHBhdHRlcm4pO1xuXG4gIGlmICghbWF0Y2hSZXN1bHQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciB2YWx1ZSA9IHBhcnNlSW50KG1hdGNoUmVzdWx0WzBdLCAxMCk7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlQ2FsbGJhY2sgPyB2YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlLFxuICAgIHJlc3Q6IHN0cmluZy5zbGljZShtYXRjaFJlc3VsdFswXS5sZW5ndGgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHBhdHRlcm4sIHN0cmluZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gocGF0dGVybik7XG5cbiAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIElucHV0IGlzICdaJ1xuXG5cbiAgaWYgKG1hdGNoUmVzdWx0WzBdID09PSAnWicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IDAsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UoMSlcbiAgICB9O1xuICB9XG5cbiAgdmFyIHNpZ24gPSBtYXRjaFJlc3VsdFsxXSA9PT0gJysnID8gMSA6IC0xO1xuICB2YXIgaG91cnMgPSBtYXRjaFJlc3VsdFsyXSA/IHBhcnNlSW50KG1hdGNoUmVzdWx0WzJdLCAxMCkgOiAwO1xuICB2YXIgbWludXRlcyA9IG1hdGNoUmVzdWx0WzNdID8gcGFyc2VJbnQobWF0Y2hSZXN1bHRbM10sIDEwKSA6IDA7XG4gIHZhciBzZWNvbmRzID0gbWF0Y2hSZXN1bHRbNV0gPyBwYXJzZUludChtYXRjaFJlc3VsdFs1XSwgMTApIDogMDtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogc2lnbiAqIChob3VycyAqIE1JTExJU0VDT05EU19JTl9IT1VSICsgbWludXRlcyAqIE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBzZWNvbmRzICogTUlMTElTRUNPTkRTX0lOX1NFQ09ORCksXG4gICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoUmVzdWx0WzBdLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBbnlEaWdpdHNTaWduZWQoc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKSB7XG4gIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5hbnlEaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTkRpZ2l0cyhuLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spIHtcbiAgc3dpdGNoIChuKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnNpbmdsZURpZ2l0LCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnR3b0RpZ2l0cywgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50aHJlZURpZ2l0cywgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5mb3VyRGlnaXRzLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG5ldyBSZWdFeHAoJ15cXFxcZHsxLCcgKyBuICsgJ30nKSwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZU5EaWdpdHNTaWduZWQobiwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKSB7XG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5zaW5nbGVEaWdpdFNpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy50d29EaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMudGhyZWVEaWdpdHNTaWduZWQsIHN0cmluZywgdmFsdWVDYWxsYmFjayk7XG5cbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuZm91ckRpZ2l0c1NpZ25lZCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihuZXcgUmVnRXhwKCdeLT9cXFxcZHsxLCcgKyBuICsgJ30nKSwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXlQZXJpb2RFbnVtVG9Ib3VycyhlbnVtVmFsdWUpIHtcbiAgc3dpdGNoIChlbnVtVmFsdWUpIHtcbiAgICBjYXNlICdtb3JuaW5nJzpcbiAgICAgIHJldHVybiA0O1xuXG4gICAgY2FzZSAnZXZlbmluZyc6XG4gICAgICByZXR1cm4gMTc7XG5cbiAgICBjYXNlICdwbSc6XG4gICAgY2FzZSAnbm9vbic6XG4gICAgY2FzZSAnYWZ0ZXJub29uJzpcbiAgICAgIHJldHVybiAxMjtcblxuICAgIGNhc2UgJ2FtJzpcbiAgICBjYXNlICdtaWRuaWdodCc6XG4gICAgY2FzZSAnbmlnaHQnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVUd29EaWdpdFllYXIodHdvRGlnaXRZZWFyLCBjdXJyZW50WWVhcikge1xuICB2YXIgaXNDb21tb25FcmEgPSBjdXJyZW50WWVhciA+IDA7IC8vIEFic29sdXRlIG51bWJlciBvZiB0aGUgY3VycmVudCB5ZWFyOlxuICAvLyAxIC0+IDEgQUNcbiAgLy8gMCAtPiAxIEJDXG4gIC8vIC0xIC0+IDIgQkNcblxuICB2YXIgYWJzQ3VycmVudFllYXIgPSBpc0NvbW1vbkVyYSA/IGN1cnJlbnRZZWFyIDogMSAtIGN1cnJlbnRZZWFyO1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmIChhYnNDdXJyZW50WWVhciA8PSA1MCkge1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciB8fCAxMDA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJhbmdlRW5kID0gYWJzQ3VycmVudFllYXIgKyA1MDtcbiAgICB2YXIgcmFuZ2VFbmRDZW50dXJ5ID0gTWF0aC5mbG9vcihyYW5nZUVuZCAvIDEwMCkgKiAxMDA7XG4gICAgdmFyIGlzUHJldmlvdXNDZW50dXJ5ID0gdHdvRGlnaXRZZWFyID49IHJhbmdlRW5kICUgMTAwO1xuICAgIHJlc3VsdCA9IHR3b0RpZ2l0WWVhciArIHJhbmdlRW5kQ2VudHVyeSAtIChpc1ByZXZpb3VzQ2VudHVyeSA/IDEwMCA6IDApO1xuICB9XG5cbiAgcmV0dXJuIGlzQ29tbW9uRXJhID8gcmVzdWx0IDogMSAtIHJlc3VsdDtcbn1cblxudmFyIERBWVNfSU5fTU9OVEggPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG52YXIgREFZU19JTl9NT05USF9MRUFQX1lFQVIgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07IC8vIFVzZXIgZm9yIHZhbGlkYXRpb25cblxuZnVuY3Rpb24gaXNMZWFwWWVhckluZGV4KHllYXIpIHtcbiAgcmV0dXJuIHllYXIgJSA0MDAgPT09IDAgfHwgeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMDtcbn1cbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBQICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6KiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYHBhcnNlYCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqL1xuXG5cbnZhciBwYXJzZXJzID0ge1xuICAvLyBFcmFcbiAgRzoge1xuICAgIHByaW9yaXR5OiAxNDAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgLy8gQUQsIEJDXG4gICAgICAgIGNhc2UgJ0cnOlxuICAgICAgICBjYXNlICdHRyc6XG4gICAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEEsIEJcblxuICAgICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmVyYShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZXJhKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5lcmEoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIGZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGZsYWdzLmVyYSA9IHZhbHVlO1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih2YWx1ZSwgMCwgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnUicsICd1JywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFllYXJcbiAgeToge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfUGF0dGVybnNcbiAgICAvLyB8IFllYXIgICAgIHwgICAgIHkgfCB5eSB8ICAgeXl5IHwgIHl5eXkgfCB5eXl5eSB8XG4gICAgLy8gfC0tLS0tLS0tLS18LS0tLS0tLXwtLS0tfC0tLS0tLS18LS0tLS0tLXwtLS0tLS0tfFxuICAgIC8vIHwgQUQgMSAgICAgfCAgICAgMSB8IDAxIHwgICAwMDEgfCAgMDAwMSB8IDAwMDAxIHxcbiAgICAvLyB8IEFEIDEyICAgIHwgICAgMTIgfCAxMiB8ICAgMDEyIHwgIDAwMTIgfCAwMDAxMiB8XG4gICAgLy8gfCBBRCAxMjMgICB8ICAgMTIzIHwgMjMgfCAgIDEyMyB8ICAwMTIzIHwgMDAxMjMgfFxuICAgIC8vIHwgQUQgMTIzNCAgfCAgMTIzNCB8IDM0IHwgIDEyMzQgfCAgMTIzNCB8IDAxMjM0IHxcbiAgICAvLyB8IEFEIDEyMzQ1IHwgMTIzNDUgfCA0NSB8IDEyMzQ1IHwgMTIzNDUgfCAxMjM0NSB8XG4gICAgcHJpb3JpdHk6IDEzMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHllYXI6IHllYXIsXG4gICAgICAgICAgaXNUd29EaWdpdFllYXI6IHRva2VuID09PSAneXknXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHMoNCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcblxuICAgICAgICBjYXNlICd5byc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAneWVhcicsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlLmlzVHdvRGlnaXRZZWFyIHx8IHZhbHVlLnllYXIgPiAwO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGN1cnJlbnRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuXG4gICAgICBpZiAodmFsdWUuaXNUd29EaWdpdFllYXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRUd29EaWdpdFllYXIgPSBub3JtYWxpemVUd29EaWdpdFllYXIodmFsdWUueWVhciwgY3VycmVudFllYXIpO1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKG5vcm1hbGl6ZWRUd29EaWdpdFllYXIsIDAsIDEpO1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHllYXIgPSAhKCdlcmEnIGluIGZsYWdzKSB8fCBmbGFncy5lcmEgPT09IDEgPyB2YWx1ZS55ZWFyIDogMSAtIHZhbHVlLnllYXI7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICd1JywgJ3cnLCAnSScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IHtcbiAgICBwcmlvcml0eTogMTMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh5ZWFyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeWVhcjogeWVhcixcbiAgICAgICAgICBpc1R3b0RpZ2l0WWVhcjogdG9rZW4gPT09ICdZWSdcbiAgICAgICAgfTtcbiAgICAgIH07XG5cbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnWSc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyg0LCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuXG4gICAgICAgIGNhc2UgJ1lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd5ZWFyJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUuaXNUd29EaWdpdFllYXIgfHwgdmFsdWUueWVhciA+IDA7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBmbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjdXJyZW50WWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAodmFsdWUuaXNUd29EaWdpdFllYXIpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRUd29EaWdpdFllYXIgPSBub3JtYWxpemVUd29EaWdpdFllYXIodmFsdWUueWVhciwgY3VycmVudFllYXIpO1xuICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKG5vcm1hbGl6ZWRUd29EaWdpdFllYXIsIDAsIG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgeWVhciA9ICEoJ2VyYScgaW4gZmxhZ3MpIHx8IGZsYWdzLmVyYSA9PT0gMSA/IHZhbHVlLnllYXIgOiAxIC0gdmFsdWUueWVhcjtcbiAgICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1InLCAndScsICdRJywgJ3EnLCAnTScsICdMJywgJ0knLCAnZCcsICdEJywgJ2knLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjoge1xuICAgIHByaW9yaXR5OiAxMzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBpZiAodG9rZW4gPT09ICdSJykge1xuICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKDQsIHN0cmluZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZU5EaWdpdHNTaWduZWQodG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoX2RhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgZmlyc3RXZWVrT2ZZZWFyID0gbmV3IERhdGUoMCk7XG4gICAgICBmaXJzdFdlZWtPZlllYXIuc2V0VVRDRnVsbFllYXIodmFsdWUsIDAsIDQpO1xuICAgICAgZmlyc3RXZWVrT2ZZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENJU09XZWVrKGZpcnN0V2Vla09mWWVhcik7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnRycsICd5JywgJ1knLCAndScsICdRJywgJ3EnLCAnTScsICdMJywgJ3cnLCAnZCcsICdEJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyXG4gIHU6IHtcbiAgICBwcmlvcml0eTogMTMwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgX21hdGNoLCBfb3B0aW9ucykge1xuICAgICAgaWYgKHRva2VuID09PSAndScpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0c1NpZ25lZCg0LCBzdHJpbmcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyc2VORGlnaXRzU2lnbmVkKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHZhbHVlLCAwLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydHJywgJ3knLCAnWScsICdSJywgJ3cnLCAnSScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IHtcbiAgICBwcmlvcml0eTogMTIwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgICBjYXNlICdRbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgICBjYXNlICdRUVEnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKCh2YWx1ZSAtIDEpICogMywgMSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3EnLCAnTScsICdMJywgJ3cnLCAnSScsICdkJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiB7XG4gICAgcHJpb3JpdHk6IDEyMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICBjYXNlICdxcSc6XG4gICAgICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgICAgY2FzZSAncW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLnF1YXJ0ZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgICBjYXNlICdxcXFxJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gucXVhcnRlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5xdWFydGVyKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDQ7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCgodmFsdWUgLSAxKSAqIDMsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdRJywgJ00nLCAnTCcsICd3JywgJ0knLCAnZCcsICdEJywgJ2knLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IHtcbiAgICBwcmlvcml0eTogMTEwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgLSAxO1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5tb250aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHMoMiwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdtb250aCcsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5tb250aChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAxMTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01vbnRoKHZhbHVlLCAxKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydZJywgJ1InLCAncScsICdRJywgJ0wnLCAndycsICdJJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDoge1xuICAgIHByaW9yaXR5OiAxMTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAtIDE7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLm1vbnRoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgICBjYXNlICdMTCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cygyLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgICAgY2FzZSAnTG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ21vbnRoJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgICBjYXNlICdMTExMJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2gubW9udGgoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLm1vbnRoKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDExO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDTW9udGgodmFsdWUsIDEpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdxJywgJ1EnLCAnTScsICd3JywgJ0knLCAnRCcsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzoge1xuICAgIHByaW9yaXR5OiAxMDAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLndlZWssIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnd28nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gNTM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gc3RhcnRPZlVUQ1dlZWsoc2V0VVRDV2VlayhkYXRlLCB2YWx1ZSwgb3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3knLCAnUicsICd1JywgJ3EnLCAnUScsICdNJywgJ0wnLCAnSScsICdkJywgJ0QnLCAnaScsICd0JywgJ1QnXVxuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IHtcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0knOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy53ZWVrLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0lvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDUzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHN0YXJ0T2ZVVENJU09XZWVrKHNldFVUQ0lTT1dlZWsoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1knLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnZCcsICdEJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IHtcbiAgICBwcmlvcml0eTogOTAsXG4gICAgc3ViUHJpb3JpdHk6IDEsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmRhdGUsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnZG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIHZhciBpc0xlYXBZZWFyID0gaXNMZWFwWWVhckluZGV4KHllYXIpO1xuICAgICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgICBpZiAoaXNMZWFwWWVhcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSBEQVlTX0lOX01PTlRIX0xFQVBfWUVBUlttb250aF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSBEQVlTX0lOX01PTlRIW21vbnRoXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0RhdGUodmFsdWUpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ1knLCAnUicsICdxJywgJ1EnLCAndycsICdJJywgJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDoge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBzdWJQcmlvcml0eTogMSxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5kYXlPZlllYXIsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnRG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgIHZhciBpc0xlYXBZZWFyID0gaXNMZWFwWWVhckluZGV4KHllYXIpO1xuXG4gICAgICBpZiAoaXNMZWFwWWVhcikge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAzNjY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAzNjU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENNb250aCgwLCB2YWx1ZSk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnWScsICdSJywgJ3EnLCAnUScsICdNJywgJ0wnLCAndycsICdJJywgJ2QnLCAnRScsICdpJywgJ2UnLCAnYycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiB7XG4gICAgcHJpb3JpdHk6IDkwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIFR1ZVxuICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgY2FzZSAnRUUnOlxuICAgICAgICBjYXNlICdFRUUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFRcblxuICAgICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdVxuXG4gICAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgICBjYXNlICdFRUVFJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDAgJiYgdmFsdWUgPD0gNjtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIGRhdGUgPSBzZXRVVENEYXkoZGF0ZSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ0QnLCAnaScsICdlJywgJ2MnLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZToge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBvcHRpb25zKSB7XG4gICAgICB2YXIgdmFsdWVDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgd2hvbGVXZWVrRGF5cyA9IE1hdGguZmxvb3IoKHZhbHVlIC0gMSkgLyA3KSAqIDc7XG4gICAgICAgIHJldHVybiAodmFsdWUgKyBvcHRpb25zLndlZWtTdGFydHNPbiArIDYpICUgNyArIHdob2xlV2Vla0RheXM7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDNcbiAgICAgICAgY2FzZSAnZSc6XG4gICAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgICAvLyAwM1xuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcsIHZhbHVlQ2FsbGJhY2spO1xuICAgICAgICAvLyAzcmRcblxuICAgICAgICBjYXNlICdlbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5JyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlXG5cbiAgICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUXG5cbiAgICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVzZGF5XG5cbiAgICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDY7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gc2V0VVRDRGF5KGRhdGUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1InLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ0knLCAnZCcsICdEJywgJ0UnLCAnaScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IHtcbiAgICBwcmlvcml0eTogOTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHdob2xlV2Vla0RheXMgPSBNYXRoLmZsb29yKCh2YWx1ZSAtIDEpIC8gNykgKiA3O1xuICAgICAgICByZXR1cm4gKHZhbHVlICsgb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA2KSAlIDcgKyB3aG9sZVdlZWtEYXlzO1xuICAgICAgfTtcblxuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAvLyAzXG4gICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICBjYXNlICdjYyc6XG4gICAgICAgICAgLy8gMDNcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICAgICAgLy8gM3JkXG5cbiAgICAgICAgY2FzZSAnY28nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2RheScsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZVxuXG4gICAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVFxuXG4gICAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1XG5cbiAgICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVlc2RheVxuXG4gICAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA2O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgZGF0ZSA9IHNldFVUQ0RheShkYXRlLCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsneScsICdSJywgJ3UnLCAncScsICdRJywgJ00nLCAnTCcsICdJJywgJ2QnLCAnRCcsICdFJywgJ2knLCAnZScsICd0JywgJ1QnXVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaToge1xuICAgIHByaW9yaXR5OiA5MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlQ2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIDc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuXG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIC8vIDJcbiAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgICAvLyAwMlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgICAvLyAybmRcblxuICAgICAgICBjYXNlICdpbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUdWVcblxuICAgICAgICBjYXNlICdpaWknOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFRcblxuICAgICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheShzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgLy8gVHVcblxuICAgICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgICBjYXNlICdpaWlpJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5KHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJyxcbiAgICAgICAgICAgIHZhbHVlQ2FsbGJhY2s6IHZhbHVlQ2FsbGJhY2tcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXkoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZycsXG4gICAgICAgICAgICB2YWx1ZUNhbGxiYWNrOiB2YWx1ZUNhbGxiYWNrXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAxICYmIHZhbHVlIDw9IDc7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICBkYXRlID0gc2V0VVRDSVNPRGF5KGRhdGUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd5JywgJ1knLCAndScsICdxJywgJ1EnLCAnTScsICdMJywgJ3cnLCAnZCcsICdEJywgJ0UnLCAnZScsICdjJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IHtcbiAgICBwcmlvcml0eTogODAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKGRheVBlcmlvZEVudW1Ub0hvdXJzKHZhbHVlKSwgMCwgMCwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWydiJywgJ0InLCAnSCcsICdrJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHRcbiAgYjoge1xuICAgIHByaW9yaXR5OiA4MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgY2FzZSAnYmInOlxuICAgICAgICBjYXNlICdiYmInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnYmJiYic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KSB8fCBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoZGF5UGVyaW9kRW51bVRvSG91cnModmFsdWUpLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ2EnLCAnQicsICdIJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiB7XG4gICAgcHJpb3JpdHk6IDgwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0InOlxuICAgICAgICBjYXNlICdCQic6XG4gICAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5kYXlQZXJpb2Qoc3RyaW5nLCB7XG4gICAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjYXNlICdCQkJCJzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICAgIH0pIHx8IG1hdGNoLmRheVBlcmlvZChzdHJpbmcsIHtcbiAgICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSkgfHwgbWF0Y2guZGF5UGVyaW9kKHN0cmluZywge1xuICAgICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgZGF0ZS5zZXRVVENIb3VycyhkYXlQZXJpb2RFbnVtVG9Ib3Vycyh2YWx1ZSksIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnYScsICdiJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IHtcbiAgICBwcmlvcml0eTogNzAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLmhvdXIxMmgsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnaG8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoX2RhdGUsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHZhbHVlID49IDEgJiYgdmFsdWUgPD0gMTI7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIChkYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGlzUE0gPSBkYXRlLmdldFVUQ0hvdXJzKCkgPj0gMTI7XG5cbiAgICAgIGlmIChpc1BNICYmIHZhbHVlIDwgMTIpIHtcbiAgICAgICAgZGF0ZS5zZXRVVENIb3Vycyh2YWx1ZSArIDEyLCAwLCAwLCAwKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzUE0gJiYgdmFsdWUgPT09IDEyKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlLCAwLCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnSCcsICdLJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDoge1xuICAgIHByaW9yaXR5OiA3MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjIzaCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdIbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnaG91cidcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAyMztcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlLCAwLCAwLCAwKTtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ2EnLCAnYicsICdoJywgJ0snLCAnaycsICd0JywgJ1QnXVxuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiB7XG4gICAgcHJpb3JpdHk6IDcwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ0snOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5ob3VyMTFoLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ0tvJzpcbiAgICAgICAgICByZXR1cm4gbWF0Y2gub3JkaW5hbE51bWJlcihzdHJpbmcsIHtcbiAgICAgICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDExO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHZhciBpc1BNID0gZGF0ZS5nZXRVVENIb3VycygpID49IDEyO1xuXG4gICAgICBpZiAoaXNQTSAmJiB2YWx1ZSA8IDEyKSB7XG4gICAgICAgIGRhdGUuc2V0VVRDSG91cnModmFsdWUgKyAxMiwgMCwgMCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlLnNldFVUQ0hvdXJzKHZhbHVlLCAwLCAwLCAwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnaCcsICdIJywgJ2snLCAndCcsICdUJ11cbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazoge1xuICAgIHByaW9yaXR5OiA3MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIG1hdGNoLCBfb3B0aW9ucykge1xuICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlICdrJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VOdW1lcmljUGF0dGVybihudW1lcmljUGF0dGVybnMuaG91cjI0aCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdrbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnaG91cidcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMSAmJiB2YWx1ZSA8PSAyNDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICB2YXIgaG91cnMgPSB2YWx1ZSA8PSAyNCA/IHZhbHVlICUgMjQgOiB2YWx1ZTtcbiAgICAgIGRhdGUuc2V0VVRDSG91cnMoaG91cnMsIDAsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsnYScsICdiJywgJ2gnLCAnSCcsICdLJywgJ3QnLCAnVCddXG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiB7XG4gICAgcHJpb3JpdHk6IDYwLFxuICAgIHBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nLCB0b2tlbiwgbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgIHJldHVybiBwYXJzZU51bWVyaWNQYXR0ZXJuKG51bWVyaWNQYXR0ZXJucy5taW51dGUsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnbW8nOlxuICAgICAgICAgIHJldHVybiBtYXRjaC5vcmRpbmFsTnVtYmVyKHN0cmluZywge1xuICAgICAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgICAgICB9KTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZU5EaWdpdHModG9rZW4ubGVuZ3RoLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdmFsaWRhdGU6IGZ1bmN0aW9uIChfZGF0ZSwgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSA1OTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01pbnV0ZXModmFsdWUsIDAsIDApO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsndCcsICdUJ11cbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IHtcbiAgICBwcmlvcml0eTogNTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBtYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTnVtZXJpY1BhdHRlcm4obnVtZXJpY1BhdHRlcm5zLnNlY29uZCwgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdzbyc6XG4gICAgICAgICAgcmV0dXJuIG1hdGNoLm9yZGluYWxOdW1iZXIoc3RyaW5nLCB7XG4gICAgICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlTkRpZ2l0cyh0b2tlbi5sZW5ndGgsIHN0cmluZyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKF9kYXRlLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSAwICYmIHZhbHVlIDw9IDU5O1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgX2ZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGRhdGUuc2V0VVRDU2Vjb25kcyh2YWx1ZSwgMCk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnXVxuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzoge1xuICAgIHByaW9yaXR5OiAzMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHZhciB2YWx1ZUNhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbHVlICogTWF0aC5wb3coMTAsIC10b2tlbi5sZW5ndGggKyAzKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcGFyc2VORGlnaXRzKHRva2VuLmxlbmd0aCwgc3RyaW5nLCB2YWx1ZUNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIF9mbGFncywgdmFsdWUsIF9vcHRpb25zKSB7XG4gICAgICBkYXRlLnNldFVUQ01pbGxpc2Vjb25kcyh2YWx1ZSk7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogWyd0JywgJ1QnXVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuICswMDowMCBpcyBgJ1onYClcbiAgWDoge1xuICAgIHByaW9yaXR5OiAxMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgdG9rZW4sIF9tYXRjaCwgX29wdGlvbnMpIHtcbiAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgY2FzZSAnWCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuYmFzaWNPcHRpb25hbE1pbnV0ZXMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxTZWNvbmRzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5leHRlbmRlZE9wdGlvbmFsU2Vjb25kcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICdYWFgnOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmV4dGVuZGVkLCBzdHJpbmcpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAoZGF0ZSwgZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgaWYgKGZsYWdzLnRpbWVzdGFtcElzU2V0KSB7XG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkgLSB2YWx1ZSk7XG4gICAgfSxcbiAgICBpbmNvbXBhdGlibGVUb2tlbnM6IFsndCcsICdUJywgJ3gnXVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEpXG4gIHg6IHtcbiAgICBwcmlvcml0eTogMTAsXG4gICAgcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcsIHRva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgIHJldHVybiBwYXJzZVRpbWV6b25lUGF0dGVybih0aW1lem9uZVBhdHRlcm5zLmJhc2ljT3B0aW9uYWxNaW51dGVzLCBzdHJpbmcpO1xuXG4gICAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpYywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHh4JzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5iYXNpY09wdGlvbmFsU2Vjb25kcywgc3RyaW5nKTtcblxuICAgICAgICBjYXNlICd4eHh4eCc6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVGltZXpvbmVQYXR0ZXJuKHRpbWV6b25lUGF0dGVybnMuZXh0ZW5kZWRPcHRpb25hbFNlY29uZHMsIHN0cmluZyk7XG5cbiAgICAgICAgY2FzZSAneHh4JzpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gcGFyc2VUaW1lem9uZVBhdHRlcm4odGltZXpvbmVQYXR0ZXJucy5leHRlbmRlZCwgc3RyaW5nKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKGRhdGUsIGZsYWdzLCB2YWx1ZSwgX29wdGlvbnMpIHtcbiAgICAgIGlmIChmbGFncy50aW1lc3RhbXBJc1NldCkge1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpIC0gdmFsdWUpO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiBbJ3QnLCAnVCcsICdYJ11cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDoge1xuICAgIHByaW9yaXR5OiA0MCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgX3Rva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gcGFyc2VBbnlEaWdpdHNTaWduZWQoc3RyaW5nKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKF9kYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIFtuZXcgRGF0ZSh2YWx1ZSAqIDEwMDApLCB7XG4gICAgICAgIHRpbWVzdGFtcElzU2V0OiB0cnVlXG4gICAgICB9XTtcbiAgICB9LFxuICAgIGluY29tcGF0aWJsZVRva2VuczogJyonXG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDoge1xuICAgIHByaW9yaXR5OiAyMCxcbiAgICBwYXJzZTogZnVuY3Rpb24gKHN0cmluZywgX3Rva2VuLCBfbWF0Y2gsIF9vcHRpb25zKSB7XG4gICAgICByZXR1cm4gcGFyc2VBbnlEaWdpdHNTaWduZWQoc3RyaW5nKTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gKF9kYXRlLCBfZmxhZ3MsIHZhbHVlLCBfb3B0aW9ucykge1xuICAgICAgcmV0dXJuIFtuZXcgRGF0ZSh2YWx1ZSksIHtcbiAgICAgICAgdGltZXN0YW1wSXNTZXQ6IHRydWVcbiAgICAgIH1dO1xuICAgIH0sXG4gICAgaW5jb21wYXRpYmxlVG9rZW5zOiAnKidcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IHBhcnNlcnM7IiwiaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBhc3NpZ24gZnJvbSBcIi4uL19saWIvYXNzaWduL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcGFyc2VycyBmcm9tIFwiLi9fbGliL3BhcnNlcnMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgVElNRVpPTkVfVU5JVF9QUklPUklUWSA9IDEwOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgbm90V2hpdGVzcGFjZVJlZ0V4cCA9IC9cXFMvO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgcGFyc2VcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgUGFyc2UgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGRhdGUgcGFyc2VkIGZyb20gc3RyaW5nIHVzaW5nIHRoZSBnaXZlbiBmb3JtYXQgc3RyaW5nLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIGluIHRoZSBmb3JtYXQgc3RyaW5nIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICpcbiAqIEZvcm1hdCBvZiB0aGUgZm9ybWF0IHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNSBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIE5vdCBhbGwgdG9rZW5zIGFyZSBjb21wYXRpYmxlLiBDb21iaW5hdGlvbnMgdGhhdCBkb24ndCBtYWtlIHNlbnNlIG9yIGNvdWxkIGxlYWQgdG8gYnVncyBhcmUgcHJvaGliaXRlZFxuICogYW5kIHdpbGwgdGhyb3cgYFJhbmdlRXJyb3JgLiBGb3IgZXhhbXBsZSB1c2FnZSBvZiAyNC1ob3VyIGZvcm1hdCB0b2tlbiB3aXRoIEFNL1BNIHRva2VuIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHBhcnNlKCcyMyBBTScsICdISCBhJywgbmV3IERhdGUoKSlcbiAqIC8vPT4gUmFuZ2VFcnJvcjogVGhlIGZvcm1hdCBzdHJpbmcgbXVzdG4ndCBjb250YWluIGBISGAgYW5kIGBhYCBhdCB0aGUgc2FtZSB0aW1lXG4gKiBgYGBcbiAqXG4gKiBTZWUgdGhlIGNvbXBhdGliaWxpdHkgdGFibGU6IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0cy9kL2UvMlBBQ1gtMXZRT1BVM3hVaHBsbGw2ZHlvTW1WVVhIS2xfOENSRHM2X3VlTG1leDNTb3F3aHVvbGt1TjNPMDVsNHJxeDVoMWRLWDhlYjQ2VWwtQ0NTcnEvcHViaHRtbD9naWQ9MCZzaW5nbGU9dHJ1ZVxuICpcbiAqIEFjY2VwdGVkIGZvcm1hdCBzdHJpbmcgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFByaW9yfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDE0MCB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IDEzMCB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNywgOTk5OSAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDk5OTk5OTl0aCAgICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTIzLCA5OTkgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IDEzMCB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNywgOTAwMCAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDk5OTk5OTl0aCAgICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDQsNiAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTIzLCA5OTkgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNCw2ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIsNCAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IDEzMCB8IFIgICAgICAgfCAtNDMsIDEsIDE5MDAsIDIwMTcsIDk5OTksIC05OTk5ICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUiAgICAgIHwgLTQzLCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgIHwgNCw1ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMSwgMTIzLCA5OTksIC05OTkgICAgICAgICB8IDQsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMSwgMjAxNywgOTk5OSwgLTk5OTkgICAgfCA0LDUgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMiw0LDUgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgMTMwIHwgdSAgICAgICB8IC00MywgMSwgMTkwMCwgMjAxNywgOTk5OSwgLTk5OSAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCA5OSwgLTk5ICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxMjMsIDk5OSwgLTk5OSAgICAgICAgIHwgNCAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAyMDE3LCA5OTk5LCAtOTk5OSAgICB8IDQgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyLDQgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCAxMjAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCAxMjAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCAxMTAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCAxMTAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCAxMDAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCAxMDAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCAgOTAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCAgOTAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8ICA5MCB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCAgOTAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNSAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNSAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgIDkwIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8ICA5MCB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgODAgfCBhLi5hYWEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCAgODAgfCBiLi5iYmIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCAgODAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCAgNzAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgNjAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgNTAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCAgNDAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8ICAzMCB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCAgMjAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8ICAxMCB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgIDEwIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCAgTkEgfCBQICAgICAgIHwgMDUvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFAgICAgICB8IE1heSAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQUCAgICAgfCBNYXkgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFBQICAgIHwgU3VuZGF5LCBNYXkgMjl0aCwgMTQ1MyAgICAgICAgICAgIHwgMiw1LDggfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgIE5BIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCAgTkEgfCBQcCAgICAgIHwgMDUvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgUFBwcCAgICB8IE1heSAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFBQUHBwICAgfCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBQUFBQcHAgIHwgU3VuZGF5LCBNYXkgMjl0aCwgMTQ1MyBhdCAuLi4gICAgIHwgMiw1LDggfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhci5cbiAqICAgIEluIGBmb3JtYXRgIGZ1bmN0aW9uLCB0aGV5IHdpbGwgcHJvZHVjZSBkaWZmZXJlbnQgcmVzdWx0OlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAgICBgcGFyc2VgIHdpbGwgdHJ5IHRvIG1hdGNoIGJvdGggZm9ybWF0dGluZyBhbmQgc3RhbmQtYWxvbmUgdW5pdHMgaW50ZXJjaGFuZ2FibHkuXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlOlxuICogICAgLSBmb3IgbnVtZXJpY2FsIHVuaXRzIChgeXl5eXl5eXlgKSBgcGFyc2VgIHdpbGwgdHJ5IHRvIG1hdGNoIGEgbnVtYmVyXG4gKiAgICAgIGFzIHdpZGUgYXMgdGhlIHNlcXVlbmNlXG4gKiAgICAtIGZvciB0ZXh0IHVuaXRzIChgTU1NTU1NTU1gKSBgcGFyc2VgIHdpbGwgdHJ5IHRvIG1hdGNoIHRoZSB3aWRlc3QgdmFyaWF0aW9uIG9mIHRoZSB1bml0LlxuICogICAgICBUaGVzZSB2YXJpYXRpb25zIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqIDMuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDQuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgd2lsbCB0cnkgdG8gZ3Vlc3MgdGhlIGNlbnR1cnkgb2YgdHdvIGRpZ2l0IHllYXIgYnkgcHJveGltaXR5IHdpdGggYHJlZmVyZW5jZURhdGVgOlxuICpcbiAqICAgIGBwYXJzZSgnNTAnLCAneXknLCBuZXcgRGF0ZSgyMDE4LCAwLCAxKSkgLy89PiBTYXQgSmFuIDAxIDIwNTAgMDA6MDA6MDBgXG4gKlxuICogICAgYHBhcnNlKCc3NScsICd5eScsIG5ldyBEYXRlKDIwMTgsIDAsIDEpKSAvLz0+IFdlZCBKYW4gMDEgMTk3NSAwMDowMDowMGBcbiAqXG4gKiAgICB3aGlsZSBgdXVgIHdpbGwganVzdCBhc3NpZ24gdGhlIHllYXIgYXMgaXM6XG4gKlxuICogICAgYHBhcnNlKCc1MCcsICd1dScsIG5ldyBEYXRlKDIwMTgsIDAsIDEpKSAvLz0+IFNhdCBKYW4gMDEgMDA1MCAwMDowMDowMGBcbiAqXG4gKiAgICBgcGFyc2UoJzc1JywgJ3V1JywgbmV3IERhdGUoMjAxOCwgMCwgMSkpIC8vPT4gVHVlIEphbiAwMSAwMDc1IDAwOjAwOjAwYFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW3NldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3NldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtzZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9zZXRXZWVrWWVhcn0pLlxuICpcbiAqIDUuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogNi4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogNy4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0aGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDguIGBQK2AgdG9rZW5zIGRvIG5vdCBoYXZlIGEgZGVmaW5lZCBwcmlvcml0eSBzaW5jZSB0aGV5IGFyZSBtZXJlbHkgYWxpYXNlcyB0byBvdGhlciB0b2tlbnMgYmFzZWRcbiAqICAgIG9uIHRoZSBnaXZlbiBsb2NhbGUuXG4gKlxuICogICAgdXNpbmcgYGVuLVVTYCBsb2NhbGU6IGBQYCA9PiBgTU0vZGQveXl5eWBcbiAqICAgIHVzaW5nIGBlbi1VU2AgbG9jYWxlOiBgcGAgPT4gYGhoOm1tIGFgXG4gKiAgICB1c2luZyBgcHQtQlJgIGxvY2FsZTogYFBgID0+IGBkZC9NTS95eXl5YFxuICogICAgdXNpbmcgYHB0LUJSYCBsb2NhbGU6IGBwYCA9PiBgSEg6bW1gXG4gKlxuICogVmFsdWVzIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIGRhdGUgaW4gdGhlIGRlc2NlbmRpbmcgb3JkZXIgb2YgaXRzIHVuaXQncyBwcmlvcml0eS5cbiAqIFVuaXRzIG9mIGFuIGVxdWFsIHByaW9yaXR5IG92ZXJ3cml0ZSBlYWNoIG90aGVyIGluIHRoZSBvcmRlciBvZiBhcHBlYXJhbmNlLlxuICpcbiAqIElmIG5vIHZhbHVlcyBvZiBoaWdoZXIgcHJpb3JpdHkgYXJlIHBhcnNlZCAoZS5nLiB3aGVuIHBhcnNpbmcgc3RyaW5nICdKYW51YXJ5IDFzdCcgd2l0aG91dCBhIHllYXIpLFxuICogdGhlIHZhbHVlcyB3aWxsIGJlIHRha2VuIGZyb20gM3JkIGFyZ3VtZW50IGByZWZlcmVuY2VEYXRlYCB3aGljaCB3b3JrcyBhcyBhIGNvbnRleHQgb2YgcGFyc2luZy5cbiAqXG4gKiBgcmVmZXJlbmNlRGF0ZWAgbXVzdCBiZSBwYXNzZWQgZm9yIGNvcnJlY3Qgd29yayBvZiB0aGUgZnVuY3Rpb24uXG4gKiBJZiB5b3UncmUgbm90IHN1cmUgd2hpY2ggYHJlZmVyZW5jZURhdGVgIHRvIHN1cHBseSwgY3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIERhdGU6XG4gKiBgcGFyc2UoJzAyLzExLzIwMTQnLCAnTU0vZGQveXl5eScsIG5ldyBEYXRlKCkpYFxuICogSW4gdGhpcyBjYXNlIHBhcnNpbmcgd2lsbCBiZSBkb25lIGluIHRoZSBjb250ZXh0IG9mIHRoZSBjdXJyZW50IGRhdGUuXG4gKiBJZiBgcmVmZXJlbmNlRGF0ZWAgaXMgYEludmFsaWQgRGF0ZWAgb3IgYSB2YWx1ZSBub3QgY29udmVydGlibGUgdG8gdmFsaWQgYERhdGVgLFxuICogdGhlbiBgSW52YWxpZCBEYXRlYCB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqIElmIGBmb3JtYXRTdHJpbmdgIG1hdGNoZXMgd2l0aCBgZGF0ZVN0cmluZ2AgYnV0IGRvZXMgbm90IHByb3ZpZGVzIHRva2VucywgYHJlZmVyZW5jZURhdGVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICogSWYgcGFyc2luZyBmYWlsZWQsIGBJbnZhbGlkIERhdGVgIHdpbGwgYmUgcmV0dXJuZWQuXG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBPbGQgYHBhcnNlYCB3YXMgcmVuYW1lZCB0byBgdG9EYXRlYC5cbiAqICAgTm93IGBwYXJzZWAgaXMgYSBuZXcgZnVuY3Rpb24gd2hpY2ggcGFyc2VzIGEgc3RyaW5nIHVzaW5nIGEgcHJvdmlkZWQgZm9ybWF0LlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIHBhcnNlKCcyMDE2LTAxLTAxJylcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmQgKHRvRGF0ZSBubyBsb25nZXIgYWNjZXB0cyBhIHN0cmluZylcbiAqICAgdG9EYXRlKDEzOTIwOTg0MzAwMDApIC8vIFVuaXggdG8gdGltZXN0YW1wXG4gKiAgIHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpIC8vIENsb25pbmcgdGhlIGRhdGVcbiAqICAgcGFyc2UoJzIwMTYtMDEtMDEnLCAneXl5eS1NTS1kZCcsIG5ldyBEYXRlKCkpXG4gKiAgIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRlU3RyaW5nIC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdFN0cmluZyAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSByZWZlcmVuY2VEYXRlIC0gZGVmaW5lcyB2YWx1ZXMgbWlzc2luZyBmcm9tIHRoZSBwYXJzZWQgZGF0ZVN0cmluZ1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0gezF8MnwzfDR8NXw2fDd9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAzIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYG1hdGNoYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBQYXJzZSAxMSBGZWJydWFyeSAyMDE0IGZyb20gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gcGFyc2UoJzAyLzExLzIwMTQnLCAnTU0vZGQveXl5eScsIG5ldyBEYXRlKCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBQYXJzZSAyOHRoIG9mIEZlYnJ1YXJ5IGluIEVzcGVyYW50byBsb2NhbGUgaW4gdGhlIGNvbnRleHQgb2YgMjAxMCB5ZWFyOlxuICogaW1wb3J0IGVvIGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBwYXJzZSgnMjgtYSBkZSBmZWJydWFybycsIFwiZG8gJ2RlJyBNTU1NXCIsIG5ldyBEYXRlKDIwMTAsIDAsIDEpLCB7XG4gKiAgIGxvY2FsZTogZW9cbiAqIH0pXG4gKiAvLz0+IFN1biBGZWIgMjggMjAxMCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlKGRpcnR5RGF0ZVN0cmluZywgZGlydHlGb3JtYXRTdHJpbmcsIGRpcnR5UmVmZXJlbmNlRGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygzLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZVN0cmluZyA9IFN0cmluZyhkaXJ0eURhdGVTdHJpbmcpO1xuICB2YXIgZm9ybWF0U3RyaW5nID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyaW5nKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlO1xuXG4gIGlmICghbG9jYWxlLm1hdGNoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbWF0Y2ggcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoZm9ybWF0U3RyaW5nID09PSAnJykge1xuICAgIGlmIChkYXRlU3RyaW5nID09PSAnJykge1xuICAgICAgcmV0dXJuIHRvRGF0ZShkaXJ0eVJlZmVyZW5jZURhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG4gIH1cblxuICB2YXIgc3ViRm5PcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlXG4gIH07IC8vIElmIHRpbWV6b25lIGlzbid0IHNwZWNpZmllZCwgaXQgd2lsbCBiZSBzZXQgdG8gdGhlIHN5c3RlbSB0aW1lem9uZVxuXG4gIHZhciBzZXR0ZXJzID0gW3tcbiAgICBwcmlvcml0eTogVElNRVpPTkVfVU5JVF9QUklPUklUWSxcbiAgICBzdWJQcmlvcml0eTogLTEsXG4gICAgc2V0OiBkYXRlVG9TeXN0ZW1UaW1lem9uZSxcbiAgICBpbmRleDogMFxuICB9XTtcbiAgdmFyIGk7XG4gIHZhciB0b2tlbnMgPSBmb3JtYXRTdHJpbmcubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBzdWJGbk9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApO1xuICB2YXIgdXNlZFRva2VucyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikpIHtcbiAgICAgIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdFN0cmluZywgZGlydHlEYXRlU3RyaW5nKTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSkge1xuICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0U3RyaW5nLCBkaXJ0eURhdGVTdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHRva2VuWzBdO1xuICAgIHZhciBwYXJzZXIgPSBwYXJzZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChwYXJzZXIpIHtcbiAgICAgIHZhciBpbmNvbXBhdGlibGVUb2tlbnMgPSBwYXJzZXIuaW5jb21wYXRpYmxlVG9rZW5zO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShpbmNvbXBhdGlibGVUb2tlbnMpKSB7XG4gICAgICAgIHZhciBpbmNvbXBhdGlibGVUb2tlbiA9IHZvaWQgMDtcblxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdXNlZFRva2Vucy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICB2YXIgdXNlZFRva2VuID0gdXNlZFRva2Vuc1tfaV0udG9rZW47XG5cbiAgICAgICAgICBpZiAoaW5jb21wYXRpYmxlVG9rZW5zLmluZGV4T2YodXNlZFRva2VuKSAhPT0gLTEgfHwgdXNlZFRva2VuID09PSBmaXJzdENoYXJhY3Rlcikge1xuICAgICAgICAgICAgaW5jb21wYXRpYmxlVG9rZW4gPSB1c2VkVG9rZW5zW19pXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmNvbXBhdGlibGVUb2tlbikge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIGZvcm1hdCBzdHJpbmcgbXVzdG4ndCBjb250YWluIGBcIi5jb25jYXQoaW5jb21wYXRpYmxlVG9rZW4uZnVsbFRva2VuLCBcImAgYW5kIGBcIikuY29uY2F0KHRva2VuLCBcImAgYXQgdGhlIHNhbWUgdGltZVwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VyLmluY29tcGF0aWJsZVRva2VucyA9PT0gJyonICYmIHVzZWRUb2tlbnMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIGZvcm1hdCBzdHJpbmcgbXVzdG4ndCBjb250YWluIGBcIi5jb25jYXQodG9rZW4sIFwiYCBhbmQgYW55IG90aGVyIHRva2VuIGF0IHRoZSBzYW1lIHRpbWVcIikpO1xuICAgICAgfVxuXG4gICAgICB1c2VkVG9rZW5zLnB1c2goe1xuICAgICAgICB0b2tlbjogZmlyc3RDaGFyYWN0ZXIsXG4gICAgICAgIGZ1bGxUb2tlbjogdG9rZW5cbiAgICAgIH0pO1xuICAgICAgdmFyIHBhcnNlUmVzdWx0ID0gcGFyc2VyLnBhcnNlKGRhdGVTdHJpbmcsIHRva2VuLCBsb2NhbGUubWF0Y2gsIHN1YkZuT3B0aW9ucyk7XG5cbiAgICAgIGlmICghcGFyc2VSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgICB9XG5cbiAgICAgIHNldHRlcnMucHVzaCh7XG4gICAgICAgIHByaW9yaXR5OiBwYXJzZXIucHJpb3JpdHksXG4gICAgICAgIHN1YlByaW9yaXR5OiBwYXJzZXIuc3ViUHJpb3JpdHkgfHwgMCxcbiAgICAgICAgc2V0OiBwYXJzZXIuc2V0LFxuICAgICAgICB2YWxpZGF0ZTogcGFyc2VyLnZhbGlkYXRlLFxuICAgICAgICB2YWx1ZTogcGFyc2VSZXN1bHQudmFsdWUsXG4gICAgICAgIGluZGV4OiBzZXR0ZXJzLmxlbmd0aFxuICAgICAgfSk7XG4gICAgICBkYXRlU3RyaW5nID0gcGFyc2VSZXN1bHQucmVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgICAgfSAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG5cblxuICAgICAgaWYgKHRva2VuID09PSBcIicnXCIpIHtcbiAgICAgICAgdG9rZW4gPSBcIidcIjtcbiAgICAgIH0gZWxzZSBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICAgIHRva2VuID0gY2xlYW5Fc2NhcGVkU3RyaW5nKHRva2VuKTtcbiAgICAgIH0gLy8gQ3V0IHRva2VuIGZyb20gc3RyaW5nLCBvciwgaWYgc3RyaW5nIGRvZXNuJ3QgbWF0Y2ggdGhlIHRva2VuLCByZXR1cm4gSW52YWxpZCBEYXRlXG5cblxuICAgICAgaWYgKGRhdGVTdHJpbmcuaW5kZXhPZih0b2tlbikgPT09IDApIHtcbiAgICAgICAgZGF0ZVN0cmluZyA9IGRhdGVTdHJpbmcuc2xpY2UodG9rZW4ubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBDaGVjayBpZiB0aGUgcmVtYWluaW5nIGlucHV0IGNvbnRhaW5zIHNvbWV0aGluZyBvdGhlciB0aGFuIHdoaXRlc3BhY2VcblxuXG4gIGlmIChkYXRlU3RyaW5nLmxlbmd0aCA+IDAgJiYgbm90V2hpdGVzcGFjZVJlZ0V4cC50ZXN0KGRhdGVTdHJpbmcpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdW5pcXVlUHJpb3JpdHlTZXR0ZXJzID0gc2V0dGVycy5tYXAoZnVuY3Rpb24gKHNldHRlcikge1xuICAgIHJldHVybiBzZXR0ZXIucHJpb3JpdHk7XG4gIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGE7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAocHJpb3JpdHksIGluZGV4LCBhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5pbmRleE9mKHByaW9yaXR5KSA9PT0gaW5kZXg7XG4gIH0pLm1hcChmdW5jdGlvbiAocHJpb3JpdHkpIHtcbiAgICByZXR1cm4gc2V0dGVycy5maWx0ZXIoZnVuY3Rpb24gKHNldHRlcikge1xuICAgICAgcmV0dXJuIHNldHRlci5wcmlvcml0eSA9PT0gcHJpb3JpdHk7XG4gICAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGIuc3ViUHJpb3JpdHkgLSBhLnN1YlByaW9yaXR5O1xuICAgIH0pO1xuICB9KS5tYXAoZnVuY3Rpb24gKHNldHRlckFycmF5KSB7XG4gICAgcmV0dXJuIHNldHRlckFycmF5WzBdO1xuICB9KTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlSZWZlcmVuY2VEYXRlKTtcblxuICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzdcblxuXG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKGRhdGUsIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoZGF0ZSkpO1xuICB2YXIgZmxhZ3MgPSB7fTtcblxuICBmb3IgKGkgPSAwOyBpIDwgdW5pcXVlUHJpb3JpdHlTZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNldHRlciA9IHVuaXF1ZVByaW9yaXR5U2V0dGVyc1tpXTtcblxuICAgIGlmIChzZXR0ZXIudmFsaWRhdGUgJiYgIXNldHRlci52YWxpZGF0ZSh1dGNEYXRlLCBzZXR0ZXIudmFsdWUsIHN1YkZuT3B0aW9ucykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBzZXR0ZXIuc2V0KHV0Y0RhdGUsIGZsYWdzLCBzZXR0ZXIudmFsdWUsIHN1YkZuT3B0aW9ucyk7IC8vIFJlc3VsdCBpcyB0dXBsZSAoZGF0ZSwgZmxhZ3MpXG5cbiAgICBpZiAocmVzdWx0WzBdKSB7XG4gICAgICB1dGNEYXRlID0gcmVzdWx0WzBdO1xuICAgICAgYXNzaWduKGZsYWdzLCByZXN1bHRbMV0pOyAvLyBSZXN1bHQgaXMgZGF0ZVxuICAgIH0gZWxzZSB7XG4gICAgICB1dGNEYXRlID0gcmVzdWx0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1dGNEYXRlO1xufVxuXG5mdW5jdGlvbiBkYXRlVG9TeXN0ZW1UaW1lem9uZShkYXRlLCBmbGFncykge1xuICBpZiAoZmxhZ3MudGltZXN0YW1wSXNTZXQpIHtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIHZhciBjb252ZXJ0ZWREYXRlID0gbmV3IERhdGUoMCk7XG4gIGNvbnZlcnRlZERhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldFVUQ01vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpKTtcbiAgY29udmVydGVkRGF0ZS5zZXRIb3VycyhkYXRlLmdldFVUQ0hvdXJzKCksIGRhdGUuZ2V0VVRDTWludXRlcygpLCBkYXRlLmdldFVUQ1NlY29uZHMoKSwgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSk7XG4gIHJldHVybiBjb252ZXJ0ZWREYXRlO1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJpbXBvcnQgeyBtaWxsaXNlY29uZHNJbkhvdXIsIG1pbGxpc2Vjb25kc0luTWludXRlIH0gZnJvbSBcIi4uL2NvbnN0YW50cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHBhcnNlSVNPXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFBhcnNlIElTTyBzdHJpbmdcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBhcnNlIHRoZSBnaXZlbiBzdHJpbmcgaW4gSVNPIDg2MDEgZm9ybWF0IGFuZCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBGdW5jdGlvbiBhY2NlcHRzIGNvbXBsZXRlIElTTyA4NjAxIGZvcm1hdHMgYXMgd2VsbCBhcyBwYXJ0aWFsIGltcGxlbWVudGF0aW9ucy5cbiAqIElTTyA4NjAxOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT184NjAxXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzbid0IGEgc3RyaW5nLCB0aGUgZnVuY3Rpb24gY2Fubm90IHBhcnNlIHRoZSBzdHJpbmcgb3JcbiAqIHRoZSB2YWx1ZXMgYXJlIGludmFsaWQsIGl0IHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgcHJldmlvdXMgYHBhcnNlYCBpbXBsZW1lbnRhdGlvbiB3YXMgcmVuYW1lZCB0byBgcGFyc2VJU09gLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIHBhcnNlKCcyMDE2LTAxLTAxJylcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgcGFyc2VJU08oJzIwMTYtMDEtMDEnKVxuICogICBgYGBcbiAqXG4gKiAtIGBwYXJzZUlTT2Agbm93IHZhbGlkYXRlcyBzZXBhcmF0ZSBkYXRlIGFuZCB0aW1lIHZhbHVlcyBpbiBJU08tODYwMSBzdHJpbmdzXG4gKiAgIGFuZCByZXR1cm5zIGBJbnZhbGlkIERhdGVgIGlmIHRoZSBkYXRlIGlzIGludmFsaWQuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIHBhcnNlSVNPKCcyMDE4LTEzLTMyJylcbiAqICAgLy89PiBJbnZhbGlkIERhdGVcbiAqICAgYGBgXG4gKlxuICogLSBgcGFyc2VJU09gIG5vdyBkb2Vzbid0IGZhbGwgYmFjayB0byBgbmV3IERhdGVgIGNvbnN0cnVjdG9yXG4gKiAgIGlmIGl0IGZhaWxzIHRvIHBhcnNlIGEgc3RyaW5nIGFyZ3VtZW50LiBJbnN0ZWFkLCBpdCByZXR1cm5zIGBJbnZhbGlkIERhdGVgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7MHwxfDJ9IFtvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHM9Ml0gLSB0aGUgYWRkaXRpb25hbCBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBleHRlbmRlZCB5ZWFyIGZvcm1hdFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHNgIG11c3QgYmUgMCwgMSBvciAyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgc3RyaW5nICcyMDE0LTAyLTExVDExOjMwOjMwJyB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gcGFyc2VJU08oJzIwMTQtMDItMTFUMTE6MzA6MzAnKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCBzdHJpbmcgJyswMjAxNDEwMScgdG8gZGF0ZSxcbiAqIC8vIGlmIHRoZSBhZGRpdGlvbmFsIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGV4dGVuZGVkIHllYXIgZm9ybWF0IGlzIDE6XG4gKiBjb25zdCByZXN1bHQgPSBwYXJzZUlTTygnKzAyMDE0MTAxJywgeyBhZGRpdGlvbmFsRGlnaXRzOiAxIH0pXG4gKiAvLz0+IEZyaSBBcHIgMTEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlSVNPKGFyZ3VtZW50LCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgYWRkaXRpb25hbERpZ2l0cyA9IG9wdGlvbnMuYWRkaXRpb25hbERpZ2l0cyA9PSBudWxsID8gMiA6IHRvSW50ZWdlcihvcHRpb25zLmFkZGl0aW9uYWxEaWdpdHMpO1xuXG4gIGlmIChhZGRpdGlvbmFsRGlnaXRzICE9PSAyICYmIGFkZGl0aW9uYWxEaWdpdHMgIT09IDEgJiYgYWRkaXRpb25hbERpZ2l0cyAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdhZGRpdGlvbmFsRGlnaXRzIG11c3QgYmUgMCwgMSBvciAyJyk7XG4gIH1cblxuICBpZiAoISh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCkgPT09ICdbb2JqZWN0IFN0cmluZ10nKSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgdmFyIGRhdGVTdHJpbmdzID0gc3BsaXREYXRlU3RyaW5nKGFyZ3VtZW50KTtcbiAgdmFyIGRhdGU7XG5cbiAgaWYgKGRhdGVTdHJpbmdzLmRhdGUpIHtcbiAgICB2YXIgcGFyc2VZZWFyUmVzdWx0ID0gcGFyc2VZZWFyKGRhdGVTdHJpbmdzLmRhdGUsIGFkZGl0aW9uYWxEaWdpdHMpO1xuICAgIGRhdGUgPSBwYXJzZURhdGUocGFyc2VZZWFyUmVzdWx0LnJlc3REYXRlU3RyaW5nLCBwYXJzZVllYXJSZXN1bHQueWVhcik7XG4gIH1cblxuICBpZiAoIWRhdGUgfHwgaXNOYU4oZGF0ZS5nZXRUaW1lKCkpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIHZhciB0aW1lID0gMDtcbiAgdmFyIG9mZnNldDtcblxuICBpZiAoZGF0ZVN0cmluZ3MudGltZSkge1xuICAgIHRpbWUgPSBwYXJzZVRpbWUoZGF0ZVN0cmluZ3MudGltZSk7XG5cbiAgICBpZiAoaXNOYU4odGltZSkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkYXRlU3RyaW5ncy50aW1lem9uZSkge1xuICAgIG9mZnNldCA9IHBhcnNlVGltZXpvbmUoZGF0ZVN0cmluZ3MudGltZXpvbmUpO1xuXG4gICAgaWYgKGlzTmFOKG9mZnNldCkpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgZGlydHlEYXRlID0gbmV3IERhdGUodGltZXN0YW1wICsgdGltZSk7IC8vIGpzIHBhcnNlZCBzdHJpbmcgYXNzdW1pbmcgaXQncyBpbiBVVEMgdGltZXpvbmVcbiAgICAvLyBidXQgd2UgbmVlZCBpdCB0byBiZSBwYXJzZWQgaW4gb3VyIHRpbWV6b25lXG4gICAgLy8gc28gd2UgdXNlIHV0YyB2YWx1ZXMgdG8gYnVpbGQgZGF0ZSBpbiBvdXIgdGltZXpvbmUuXG4gICAgLy8gWWVhciB2YWx1ZXMgZnJvbSAwIHRvIDk5IG1hcCB0byB0aGUgeWVhcnMgMTkwMCB0byAxOTk5XG4gICAgLy8gc28gc2V0IHllYXIgZXhwbGljaXRseSB3aXRoIHNldEZ1bGxZZWFyLlxuXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBEYXRlKDApO1xuICAgIHJlc3VsdC5zZXRGdWxsWWVhcihkaXJ0eURhdGUuZ2V0VVRDRnVsbFllYXIoKSwgZGlydHlEYXRlLmdldFVUQ01vbnRoKCksIGRpcnR5RGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgIHJlc3VsdC5zZXRIb3VycyhkaXJ0eURhdGUuZ2V0VVRDSG91cnMoKSwgZGlydHlEYXRlLmdldFVUQ01pbnV0ZXMoKSwgZGlydHlEYXRlLmdldFVUQ1NlY29uZHMoKSwgZGlydHlEYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIHRpbWUgKyBvZmZzZXQpO1xufVxudmFyIHBhdHRlcm5zID0ge1xuICBkYXRlVGltZURlbGltaXRlcjogL1tUIF0vLFxuICB0aW1lWm9uZURlbGltaXRlcjogL1taIF0vaSxcbiAgdGltZXpvbmU6IC8oW1orLV0uKikkL1xufTtcbnZhciBkYXRlUmVnZXggPSAvXi0/KD86KFxcZHszfSl8KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT98VyhcXGR7Mn0pKD86LT8oXFxkezF9KSk/fCkkLztcbnZhciB0aW1lUmVnZXggPSAvXihcXGR7Mn0oPzpbLixdXFxkKik/KSg/Ojo/KFxcZHsyfSg/OlsuLF1cXGQqKT8pKT8oPzo6PyhcXGR7Mn0oPzpbLixdXFxkKik/KSk/JC87XG52YXIgdGltZXpvbmVSZWdleCA9IC9eKFsrLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8kLztcblxuZnVuY3Rpb24gc3BsaXREYXRlU3RyaW5nKGRhdGVTdHJpbmcpIHtcbiAgdmFyIGRhdGVTdHJpbmdzID0ge307XG4gIHZhciBhcnJheSA9IGRhdGVTdHJpbmcuc3BsaXQocGF0dGVybnMuZGF0ZVRpbWVEZWxpbWl0ZXIpO1xuICB2YXIgdGltZVN0cmluZzsgLy8gVGhlIHJlZ2V4IG1hdGNoIHNob3VsZCBvbmx5IHJldHVybiBhdCBtYXhpbXVtIHR3byBhcnJheSBlbGVtZW50cy5cbiAgLy8gW2RhdGVdLCBbdGltZV0sIG9yIFtkYXRlLCB0aW1lXS5cblxuICBpZiAoYXJyYXkubGVuZ3RoID4gMikge1xuICAgIHJldHVybiBkYXRlU3RyaW5ncztcbiAgfVxuXG4gIGlmICgvOi8udGVzdChhcnJheVswXSkpIHtcbiAgICB0aW1lU3RyaW5nID0gYXJyYXlbMF07XG4gIH0gZWxzZSB7XG4gICAgZGF0ZVN0cmluZ3MuZGF0ZSA9IGFycmF5WzBdO1xuICAgIHRpbWVTdHJpbmcgPSBhcnJheVsxXTtcblxuICAgIGlmIChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlci50ZXN0KGRhdGVTdHJpbmdzLmRhdGUpKSB7XG4gICAgICBkYXRlU3RyaW5ncy5kYXRlID0gZGF0ZVN0cmluZy5zcGxpdChwYXR0ZXJucy50aW1lWm9uZURlbGltaXRlcilbMF07XG4gICAgICB0aW1lU3RyaW5nID0gZGF0ZVN0cmluZy5zdWJzdHIoZGF0ZVN0cmluZ3MuZGF0ZS5sZW5ndGgsIGRhdGVTdHJpbmcubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBpZiAodGltZVN0cmluZykge1xuICAgIHZhciB0b2tlbiA9IHBhdHRlcm5zLnRpbWV6b25lLmV4ZWModGltZVN0cmluZyk7XG5cbiAgICBpZiAodG9rZW4pIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nLnJlcGxhY2UodG9rZW5bMV0sICcnKTtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWV6b25lID0gdG9rZW5bMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmdzLnRpbWUgPSB0aW1lU3RyaW5nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkYXRlU3RyaW5ncztcbn1cblxuZnVuY3Rpb24gcGFyc2VZZWFyKGRhdGVTdHJpbmcsIGFkZGl0aW9uYWxEaWdpdHMpIHtcbiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXig/OihcXFxcZHs0fXxbKy1dXFxcXGR7JyArICg0ICsgYWRkaXRpb25hbERpZ2l0cykgKyAnfSl8KFxcXFxkezJ9fFsrLV1cXFxcZHsnICsgKDIgKyBhZGRpdGlvbmFsRGlnaXRzKSArICd9KSQpJyk7XG4gIHZhciBjYXB0dXJlcyA9IGRhdGVTdHJpbmcubWF0Y2gocmVnZXgpOyAvLyBJbnZhbGlkIElTTy1mb3JtYXR0ZWQgeWVhclxuXG4gIGlmICghY2FwdHVyZXMpIHJldHVybiB7XG4gICAgeWVhcjogTmFOLFxuICAgIHJlc3REYXRlU3RyaW5nOiAnJ1xuICB9O1xuICB2YXIgeWVhciA9IGNhcHR1cmVzWzFdID8gcGFyc2VJbnQoY2FwdHVyZXNbMV0pIDogbnVsbDtcbiAgdmFyIGNlbnR1cnkgPSBjYXB0dXJlc1syXSA/IHBhcnNlSW50KGNhcHR1cmVzWzJdKSA6IG51bGw7IC8vIGVpdGhlciB5ZWFyIG9yIGNlbnR1cnkgaXMgbnVsbCwgbm90IGJvdGhcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGNlbnR1cnkgPT09IG51bGwgPyB5ZWFyIDogY2VudHVyeSAqIDEwMCxcbiAgICByZXN0RGF0ZVN0cmluZzogZGF0ZVN0cmluZy5zbGljZSgoY2FwdHVyZXNbMV0gfHwgY2FwdHVyZXNbMl0pLmxlbmd0aClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRlKGRhdGVTdHJpbmcsIHllYXIpIHtcbiAgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHllYXJcbiAgaWYgKHllYXIgPT09IG51bGwpIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB2YXIgY2FwdHVyZXMgPSBkYXRlU3RyaW5nLm1hdGNoKGRhdGVSZWdleCk7IC8vIEludmFsaWQgSVNPLWZvcm1hdHRlZCBzdHJpbmdcblxuICBpZiAoIWNhcHR1cmVzKSByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgdmFyIGlzV2Vla0RhdGUgPSAhIWNhcHR1cmVzWzRdO1xuICB2YXIgZGF5T2ZZZWFyID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1sxXSk7XG4gIHZhciBtb250aCA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbMl0pIC0gMTtcbiAgdmFyIGRheSA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbM10pO1xuICB2YXIgd2VlayA9IHBhcnNlRGF0ZVVuaXQoY2FwdHVyZXNbNF0pO1xuICB2YXIgZGF5T2ZXZWVrID0gcGFyc2VEYXRlVW5pdChjYXB0dXJlc1s1XSkgLSAxO1xuXG4gIGlmIChpc1dlZWtEYXRlKSB7XG4gICAgaWYgKCF2YWxpZGF0ZVdlZWtEYXRlKHllYXIsIHdlZWssIGRheU9mV2VlaykpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICAgIH1cblxuICAgIHJldHVybiBkYXlPZklTT1dlZWtZZWFyKHllYXIsIHdlZWssIGRheU9mV2Vlayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcblxuICAgIGlmICghdmFsaWRhdGVEYXRlKHllYXIsIG1vbnRoLCBkYXkpIHx8ICF2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gICAgfVxuXG4gICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5ZWFyLCBtb250aCwgTWF0aC5tYXgoZGF5T2ZZZWFyLCBkYXkpKTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZURhdGVVbml0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA/IHBhcnNlSW50KHZhbHVlKSA6IDE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZSh0aW1lU3RyaW5nKSB7XG4gIHZhciBjYXB0dXJlcyA9IHRpbWVTdHJpbmcubWF0Y2godGltZVJlZ2V4KTtcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIE5hTjsgLy8gSW52YWxpZCBJU08tZm9ybWF0dGVkIHRpbWVcblxuICB2YXIgaG91cnMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzFdKTtcbiAgdmFyIG1pbnV0ZXMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzJdKTtcbiAgdmFyIHNlY29uZHMgPSBwYXJzZVRpbWVVbml0KGNhcHR1cmVzWzNdKTtcblxuICBpZiAoIXZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIGhvdXJzICogbWlsbGlzZWNvbmRzSW5Ib3VyICsgbWludXRlcyAqIG1pbGxpc2Vjb25kc0luTWludXRlICsgc2Vjb25kcyAqIDEwMDA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZVVuaXQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgnLCcsICcuJykpIHx8IDA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVGltZXpvbmUodGltZXpvbmVTdHJpbmcpIHtcbiAgaWYgKHRpbWV6b25lU3RyaW5nID09PSAnWicpIHJldHVybiAwO1xuICB2YXIgY2FwdHVyZXMgPSB0aW1lem9uZVN0cmluZy5tYXRjaCh0aW1lem9uZVJlZ2V4KTtcbiAgaWYgKCFjYXB0dXJlcykgcmV0dXJuIDA7XG4gIHZhciBzaWduID0gY2FwdHVyZXNbMV0gPT09ICcrJyA/IC0xIDogMTtcbiAgdmFyIGhvdXJzID0gcGFyc2VJbnQoY2FwdHVyZXNbMl0pO1xuICB2YXIgbWludXRlcyA9IGNhcHR1cmVzWzNdICYmIHBhcnNlSW50KGNhcHR1cmVzWzNdKSB8fCAwO1xuXG4gIGlmICghdmFsaWRhdGVUaW1lem9uZShob3VycywgbWludXRlcykpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKiAoaG91cnMgKiBtaWxsaXNlY29uZHNJbkhvdXIgKyBtaW51dGVzICogbWlsbGlzZWNvbmRzSW5NaW51dGUpO1xufVxuXG5mdW5jdGlvbiBkYXlPZklTT1dlZWtZZWFyKGlzb1dlZWtZZWFyLCB3ZWVrLCBkYXkpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKTtcbiAgZGF0ZS5zZXRVVENGdWxsWWVhcihpc29XZWVrWWVhciwgMCwgNCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlEYXkgPSBkYXRlLmdldFVUQ0RheSgpIHx8IDc7XG4gIHZhciBkaWZmID0gKHdlZWsgLSAxKSAqIDcgKyBkYXkgKyAxIC0gZm91cnRoT2ZKYW51YXJ5RGF5O1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBkaWZmKTtcbiAgcmV0dXJuIGRhdGU7XG59IC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG4vLyBGZWJydWFyeSBpcyBudWxsIHRvIGhhbmRsZSB0aGUgbGVhcCB5ZWFyICh1c2luZyB8fClcblxuXG52YXIgZGF5c0luTW9udGhzID0gWzMxLCBudWxsLCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG5cbmZ1bmN0aW9uIGlzTGVhcFllYXJJbmRleCh5ZWFyKSB7XG4gIHJldHVybiB5ZWFyICUgNDAwID09PSAwIHx8IHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDA7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGF0ZSh5ZWFyLCBtb250aCwgZGF0ZSkge1xuICByZXR1cm4gbW9udGggPj0gMCAmJiBtb250aCA8PSAxMSAmJiBkYXRlID49IDEgJiYgZGF0ZSA8PSAoZGF5c0luTW9udGhzW21vbnRoXSB8fCAoaXNMZWFwWWVhckluZGV4KHllYXIpID8gMjkgOiAyOCkpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZURheU9mWWVhckRhdGUoeWVhciwgZGF5T2ZZZWFyKSB7XG4gIHJldHVybiBkYXlPZlllYXIgPj0gMSAmJiBkYXlPZlllYXIgPD0gKGlzTGVhcFllYXJJbmRleCh5ZWFyKSA/IDM2NiA6IDM2NSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlV2Vla0RhdGUoX3llYXIsIHdlZWssIGRheSkge1xuICByZXR1cm4gd2VlayA+PSAxICYmIHdlZWsgPD0gNTMgJiYgZGF5ID49IDAgJiYgZGF5IDw9IDY7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGltZShob3VycywgbWludXRlcywgc2Vjb25kcykge1xuICBpZiAoaG91cnMgPT09IDI0KSB7XG4gICAgcmV0dXJuIG1pbnV0ZXMgPT09IDAgJiYgc2Vjb25kcyA9PT0gMDtcbiAgfVxuXG4gIHJldHVybiBzZWNvbmRzID49IDAgJiYgc2Vjb25kcyA8IDYwICYmIG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDwgNjAgJiYgaG91cnMgPj0gMCAmJiBob3VycyA8IDI1O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVRpbWV6b25lKF9ob3VycywgbWludXRlcykge1xuICByZXR1cm4gbWludXRlcyA+PSAwICYmIG1pbnV0ZXMgPD0gNTk7XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBnZXREYXkgZnJvbSBcIi4uL2dldERheS9pbmRleC5qc1wiO1xuaW1wb3J0IHN1YkRheXMgZnJvbSBcIi4uL3N1YkRheXMvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAbmFtZSBwcmV2aW91c0RheVxuICogQGNhdGVnb3J5IFdlZWtkYXkgSGVscGVyc1xuICogQHN1bW1hcnkgV2hlbiBpcyB0aGUgcHJldmlvdXMgZGF5IG9mIHRoZSB3ZWVrP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogV2hlbiBpcyB0aGUgcHJldmlvdXMgZGF5IG9mIHRoZSB3ZWVrPyAwLTYgdGhlIGRheSBvZiB0aGUgd2VlaywgMCByZXByZXNlbnRzIFN1bmRheS5cbiAqXG4gKiBAcGFyYW0ge0RhdGUgfCBudW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtudW1iZXJ9IGRheSAtIGRheSBvZiB0aGUgd2Vla1xuICogQHJldHVybnMge0RhdGV9IC0gdGhlIGRhdGUgaXMgdGhlIHByZXZpb3VzIGRheSBvZiB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IC0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hlbiBpcyB0aGUgcHJldmlvdXMgTW9uZGF5IGJlZm9yZSBNYXIsIDIwLCAyMDIwP1xuICogY29uc3QgcmVzdWx0ID0gcHJldmlvdXNEYXkobmV3IERhdGUoMjAyMCwgMiwgMjApLCAxKVxuICogLy89PiBNb24gTWFyIDE2IDIwMjAgMDA6MDA6MDBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gV2hlbiBpcyB0aGUgcHJldmlvdXMgVHVlc2RheSBiZWZvcmUgTWFyLCAyMSwgMjAyMD9cbiAqIGNvbnN0IHJlc3VsdCA9IHByZXZpb3VzRGF5KG5ldyBEYXRlKDIwMjAsIDIsIDIxKSwgMilcbiAqIC8vPT4gVHVlIE1hciAxNyAyMDIwIDAwOjAwOjAwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXZpb3VzRGF5KGRhdGUsIGRheSkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRlbHRhID0gZ2V0RGF5KGRhdGUpIC0gZGF5O1xuICBpZiAoZGVsdGEgPD0gMCkgZGVsdGEgKz0gNztcbiAgcmV0dXJuIHN1YkRheXMoZGF0ZSwgZGVsdGEpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZk1vbnRoXG4gKiBAY2F0ZWdvcnkgTW9udGggSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIG1vbnRoIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBtb250aCBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgbW9udGhcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSBtb250aCBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZNb250aChuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mTW9udGgoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFN1biBBdWcgMzEgMjAxNCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkRGF5cyBmcm9tIFwiLi4vYWRkRGF5cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCAxMCBkYXlzIGZyb20gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1YkRheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBGcmkgQXVnIDIyIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJEYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkRGF5cyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9hZGRNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIHN1YnRyYWN0ZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIHN1YnRyYWN0ZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3VidHJhY3QgNzUwIG1pbGxpc2Vjb25kcyBmcm9tIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgYXJnU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50KTsgLy8gQ2xvbmUgdGhlIGRhdGVcblxuICBpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiBhcmd1bWVudCA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXQuaW8vZmp1bGVcIik7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG5cbiAgICAgIGNvbnNvbGUud2FybihuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERhdGFWaWV3O1xuIiwidmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG4iLCJ2YXIgbGlzdENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVDbGVhcicpLFxuICAgIGxpc3RDYWNoZURlbGV0ZSA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZURlbGV0ZScpLFxuICAgIGxpc3RDYWNoZUdldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUdldCcpLFxuICAgIGxpc3RDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUhhcycpLFxuICAgIGxpc3RDYWNoZVNldCA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdENhY2hlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hcDtcbiIsInZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldDtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyksXG4gICAgc2V0Q2FjaGVBZGQgPSByZXF1aXJlKCcuL19zZXRDYWNoZUFkZCcpLFxuICAgIHNldENhY2hlSGFzID0gcmVxdWlyZSgnLi9fc2V0Q2FjaGVIYXMnKTtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNldENhY2hlO1xuIiwidmFyIExpc3RDYWNoZSA9IHJlcXVpcmUoJy4vX0xpc3RDYWNoZScpLFxuICAgIHN0YWNrQ2xlYXIgPSByZXF1aXJlKCcuL19zdGFja0NsZWFyJyksXG4gICAgc3RhY2tEZWxldGUgPSByZXF1aXJlKCcuL19zdGFja0RlbGV0ZScpLFxuICAgIHN0YWNrR2V0ID0gcmVxdWlyZSgnLi9fc3RhY2tHZXQnKSxcbiAgICBzdGFja0hhcyA9IHJlcXVpcmUoJy4vX3N0YWNrSGFzJyksXG4gICAgc3RhY2tTZXQgPSByZXF1aXJlKCcuL19zdGFja1NldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhY2s7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gVWludDhBcnJheTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYWtNYXA7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlFYWNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5RmlsdGVyO1xuIiwidmFyIGJhc2VJbmRleE9mID0gcmVxdWlyZSgnLi9fYmFzZUluZGV4T2YnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5SW5jbHVkZXMoYXJyYXksIHZhbHVlKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUluY2x1ZGVzO1xuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlNYXA7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlQdXNoO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVNvbWU7XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduVmFsdWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduSW47XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ25WYWx1ZTtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ24gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduJyksXG4gICAgYmFzZUFzc2lnbkluID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbkluJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGNvcHlTeW1ib2xzID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHMnKSxcbiAgICBjb3B5U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHNJbicpLFxuICAgIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyksXG4gICAgZ2V0QWxsS2V5c0luID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5c0luJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaW5pdENsb25lQXJyYXkgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVBcnJheScpLFxuICAgIGluaXRDbG9uZUJ5VGFnID0gcmVxdWlyZSgnLi9faW5pdENsb25lQnlUYWcnKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNNYXAgPSByZXF1aXJlKCcuL2lzTWFwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTZXQgPSByZXF1aXJlKCcuL2lzU2V0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICogdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBEZWVwIGNsb25lXG4gKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgdmFyIHJlc3VsdCxcbiAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNBcnIpIHtcbiAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKCFpc0RlZXApIHtcbiAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cbiAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICBpZiAoc3RhY2tlZCkge1xuICAgIHJldHVybiBzdGFja2VkO1xuICB9XG4gIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDbG9uZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ3JlYXRlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gMCxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gIHdoaWxlIChvYmplY3QgIT0gbnVsbCAmJiBpbmRleCA8IGxlbmd0aCkge1xuICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gIH1cbiAgcmV0dXJuIChpbmRleCAmJiBpbmRleCA9PSBsZW5ndGgpID8gb2JqZWN0IDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXQ7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUlzTmFOID0gcmVxdWlyZSgnLi9fYmFzZUlzTmFOJyksXG4gICAgc3RyaWN0SW5kZXhPZiA9IHJlcXVpcmUoJy4vX3N0cmljdEluZGV4T2YnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hcDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmFOO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNTZXQ7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBiYXNlTWF0Y2hlcyA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzJyksXG4gICAgYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgcHJvcGVydHkgPSByZXF1aXJlKCcuL3Byb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUl0ZXJhdGVlO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXNJbiA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXNJbicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzSW47XG4iLCJ2YXIgYmFzZUlzTWF0Y2ggPSByZXF1aXJlKCcuL19iYXNlSXNNYXRjaCcpLFxuICAgIGdldE1hdGNoRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hdGNoRGF0YScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXM7XG4iLCJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpLFxuICAgIGdldCA9IHJlcXVpcmUoJy4vZ2V0JyksXG4gICAgaGFzSW4gPSByZXF1aXJlKCcuL2hhc0luJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5RGVlcDtcbiIsIi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVDZWlsID0gTWF0aC5jZWlsLFxuICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmdlYCBhbmQgYF8ucmFuZ2VSaWdodGAgd2hpY2ggZG9lc24ndFxuICogY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0ZXAgVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAqL1xuZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChuYXRpdmVDZWlsKChlbmQgLSBzdGFydCkgLyAoc3RlcCB8fCAxKSksIDApLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICByZXN1bHRbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF0gPSBzdGFydDtcbiAgICBzdGFydCArPSBzdGVwO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVJhbmdlO1xuIiwidmFyIGJhc2VTb3J0ZWRJbmRleEJ5ID0gcmVxdWlyZSgnLi9fYmFzZVNvcnRlZEluZGV4QnknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbnZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICogcGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIG9mIGBhcnJheWAgdG8gZGV0ZXJtaW5lIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gIHZhciBsb3cgPSAwLFxuICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyBsb3cgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgdmFyIG1pZCA9IChsb3cgKyBoaWdoKSA+Pj4gMSxcbiAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgKHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpKSkge1xuICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhpZ2g7XG4gIH1cbiAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTb3J0ZWRJbmRleDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbnZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICBNQVhfQVJSQVlfSU5ERVggPSBNQVhfQVJSQVlfTEVOR1RIIC0gMTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAqIHRoZWlyIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICogIGludG8gYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICB2YXIgbG93ID0gMCxcbiAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gIHdoaWxlIChsb3cgPCBoaWdoKSB7XG4gICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICBvdGhJc0RlZmluZWQgPSBjb21wdXRlZCAhPT0gdW5kZWZpbmVkLFxuICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2woY29tcHV0ZWQpO1xuXG4gICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICB9IGVsc2UgaWYgKHZhbElzVW5kZWZpbmVkKSB7XG4gICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiBvdGhJc0RlZmluZWQgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzTnVsbCk7XG4gICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICB9IGVsc2UgaWYgKG90aElzTnVsbCB8fCBvdGhJc1N5bWJvbCkge1xuICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldExvdyA9IHJldEhpZ2hlc3QgPyAoY29tcHV0ZWQgPD0gdmFsdWUpIDogKGNvbXB1dGVkIDwgdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoc2V0TG93KSB7XG4gICAgICBsb3cgPSBtaWQgKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaWdoID0gbWlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNvcnRlZEluZGV4Qnk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUaW1lcztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgdmFsdWVzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUb1N0cmluZztcbiIsInZhciB0cmltbWVkRW5kSW5kZXggPSByZXF1aXJlKCcuL190cmltbWVkRW5kSW5kZXgnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xudmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50cmltYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRyaW0oc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgIDogc3RyaW5nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VUcmltO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXMnKSxcbiAgICBhcnJheUluY2x1ZGVzV2l0aCA9IHJlcXVpcmUoJy4vX2FycmF5SW5jbHVkZXNXaXRoJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpLFxuICAgIGNyZWF0ZVNldCA9IHJlcXVpcmUoJy4vX2NyZWF0ZVNldCcpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICBpZiAoY29tcGFyYXRvcikge1xuICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgfVxuICBlbHNlIGlmIChsZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgIGlmIChzZXQpIHtcbiAgICAgIHJldHVybiBzZXRUb0FycmF5KHNldCk7XG4gICAgfVxuICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICB9XG4gIG91dGVyOlxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgdmFyIHNlZW5JbmRleCA9IHNlZW4ubGVuZ3RoO1xuICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICBpZiAoc2VlbiAhPT0gcmVzdWx0KSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuaXE7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuIiwidmFyIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBhcnJheUJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGFycmF5QnVmZmVyIFRoZSBhcnJheSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQXJyYXlCdWZmZXIoYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZUFycmF5QnVmZmVyO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciBsZW5ndGggPSBidWZmZXIubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVCdWZmZXI7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAqL1xuZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZURhdGFWaWV3O1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGAgZmxhZ3MgZnJvbSB0aGVpciBjb2VyY2VkIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgcmVnZXhwLlxuICovXG5mdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyByZWdleHAuY29uc3RydWN0b3IocmVnZXhwLnNvdXJjZSwgcmVGbGFncy5leGVjKHJlZ2V4cCkpO1xuICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVJlZ0V4cDtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lU3ltYm9sO1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weUFycmF5O1xuIiwidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBiYXNlQXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19iYXNlQXNzaWduVmFsdWUnKTtcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weU9iamVjdDtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyk7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb3B5U3ltYm9scztcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGdldFN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHNJbicpO1xuXG4vKipcbiAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHNJbjtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG4iLCJ2YXIgYmFzZVJhbmdlID0gcmVxdWlyZSgnLi9fYmFzZVJhbmdlJyksXG4gICAgaXNJdGVyYXRlZUNhbGwgPSByZXF1aXJlKCcuL19pc0l0ZXJhdGVlQ2FsbCcpLFxuICAgIHRvRmluaXRlID0gcmVxdWlyZSgnLi90b0Zpbml0ZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmIChzdGVwICYmIHR5cGVvZiBzdGVwICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0YXJ0LCBlbmQsIHN0ZXApKSB7XG4gICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBFbnN1cmUgdGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICB9XG4gICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICByZXR1cm4gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlUmFuZ2U7XG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgbm9vcCA9IHJlcXVpcmUoJy4vbm9vcCcpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAqL1xudmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlU2V0O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0eTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgVWludDhBcnJheSA9IHJlcXVpcmUoJy4vX1VpbnQ4QXJyYXknKSxcbiAgICBlcSA9IHJlcXVpcmUoJy4vZXEnKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgbWFwVG9BcnJheSA9IHJlcXVpcmUoJy4vX21hcFRvQXJyYXknKSxcbiAgICBzZXRUb0FycmF5ID0gcmVxdWlyZSgnLi9fc2V0VG9BcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQnlUYWc7XG4iLCJ2YXIgZ2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2dldEFsbEtleXMnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIG9ialN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIG9ialN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBvYmplY3Q7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxPYmplY3RzO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBbGxLZXlzO1xuIiwidmFyIGJhc2VHZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUdldEFsbEtleXMnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKSxcbiAgICBrZXlzSW4gPSByZXF1aXJlKCcuL2tleXNJbicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXNJbjtcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgaXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9faXNTdHJpY3RDb21wYXJhYmxlJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXRjaERhdGE7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm90b3R5cGU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB3aGlsZSAob2JqZWN0KSB7XG4gICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICBvYmplY3QgPSBnZXRQcm90b3R5cGUob2JqZWN0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzSW47XG4iLCJ2YXIgRGF0YVZpZXcgPSByZXF1aXJlKCcuL19EYXRhVmlldycpLFxuICAgIE1hcCA9IHJlcXVpcmUoJy4vX01hcCcpLFxuICAgIFByb21pc2UgPSByZXF1aXJlKCcuL19Qcm9taXNlJyksXG4gICAgU2V0ID0gcmVxdWlyZSgnLi9fU2V0JyksXG4gICAgV2Vha01hcCA9IHJlcXVpcmUoJy4vX1dlYWtNYXAnKSxcbiAgICBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRUYWc7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRWYWx1ZTtcbiIsInZhciBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzSW5kZXggPSByZXF1aXJlKCcuL19pc0luZGV4JyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgdG9LZXkgPSByZXF1aXJlKCcuL190b0tleScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgZXhpc3RzIG9uIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgIGlmICghKHJlc3VsdCA9IG9iamVjdCAhPSBudWxsICYmIGhhc0Z1bmMob2JqZWN0LCBrZXkpKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG4gIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJiBpc0xlbmd0aChsZW5ndGgpICYmIGlzSW5kZXgoa2V5LCBsZW5ndGgpICYmXG4gICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQYXRoO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQXJyYXk7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKSxcbiAgICBjbG9uZURhdGFWaWV3ID0gcmVxdWlyZSgnLi9fY2xvbmVEYXRhVmlldycpLFxuICAgIGNsb25lUmVnRXhwID0gcmVxdWlyZSgnLi9fY2xvbmVSZWdFeHAnKSxcbiAgICBjbG9uZVN5bWJvbCA9IHJlcXVpcmUoJy4vX2Nsb25lU3ltYm9sJyksXG4gICAgY2xvbmVUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fY2xvbmVUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUJ5VGFnO1xuIiwidmFyIGJhc2VDcmVhdGUgPSByZXF1aXJlKCcuL19iYXNlQ3JlYXRlJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lT2JqZWN0O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGdpdmVuIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgdmFsdWUgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFyZ3VtZW50cyBhcmUgZnJvbSBhbiBpdGVyYXRlZSBjYWxsLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJdGVyYXRlZUNhbGwodmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICA/IChpc0FycmF5TGlrZShvYmplY3QpICYmIGlzSW5kZXgoaW5kZXgsIG9iamVjdC5sZW5ndGgpKVxuICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICkge1xuICAgIHJldHVybiBlcShvYmplY3RbaW5kZXhdLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSXRlcmF0ZWVDYWxsO1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBtZW1vaXplID0gcmVxdWlyZSgnLi9tZW1vaXplJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplQ2FwcGVkO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXNJbjtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpY3RJbmRleE9mO1xuIiwidmFyIG1lbW9pemVDYXBwZWQgPSByZXF1aXJlKCcuL19tZW1vaXplQ2FwcGVkJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb1BhdGg7XG4iLCJ2YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAqL1xuZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvS2V5O1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvU291cmNlO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggYSBzaW5nbGUgd2hpdGVzcGFjZSBjaGFyYWN0ZXIuICovXG52YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbi8qKlxuICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IG5vbi13aGl0ZXNwYWNlIGNoYXJhY3Rlci5cbiAqL1xuZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICB2YXIgaW5kZXggPSBzdHJpbmcubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyaW1tZWRFbmRJbmRleDtcbiIsInZhciBiYXNlQ2xvbmUgPSByZXF1aXJlKCcuL19iYXNlQ2xvbmUnKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lRGVlcDtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG4iLCJ2YXIgYmFzZUhhc0luID0gcmVxdWlyZSgnLi9fYmFzZUhhc0luJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0luO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpZGVudGl0eTtcbiIsInZhciBiYXNlSXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL19iYXNlSXNBcmd1bWVudHMnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXk7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTGVuZ3RoID0gcmVxdWlyZSgnLi9pc0xlbmd0aCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5TGlrZTtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpLFxuICAgIHN0dWJGYWxzZSA9IHJlcXVpcmUoJy4vc3R1YkZhbHNlJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0J1ZmZlcjtcbiIsInZhciBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcmd1bWVudHMgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAqXG4gKiBPYmplY3RzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBubyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWRcbiAqIHByb3BlcnRpZXMuXG4gKlxuICogQXJyYXktbGlrZSB2YWx1ZXMgc3VjaCBhcyBgYXJndW1lbnRzYCBvYmplY3RzLCBhcnJheXMsIGJ1ZmZlcnMsIHN0cmluZ3MsIG9yXG4gKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBlbXB0eSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRW1wdHkobnVsbCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KHRydWUpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eSgxKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0VtcHR5KHsgJ2EnOiAxIH0pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgIGlzQnVmZmVyKHZhbHVlKSB8fCBpc1R5cGVkQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSkpIHtcbiAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgfVxuICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKTtcbiAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgfVxuICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRW1wdHk7XG4iLCJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKipcbiAqIFBlcmZvcm1zIGEgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmVcbiAqIGVxdWl2YWxlbnQuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGNvbXBhcmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLFxuICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAqIGJ5IHRoZWlyIG93biwgbm90IGluaGVyaXRlZCwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLiBGdW5jdGlvbnMgYW5kIERPTVxuICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5pc0VxdWFsKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIG9iamVjdCA9PT0gb3RoZXI7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VxdWFsKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0VxdWFsO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBmdW5jdGlvbiwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oXyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0Z1bmN0aW9uKC9hYmMvKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGdW5jdGlvbjtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0xlbmd0aDtcbiIsInZhciBiYXNlSXNNYXAgPSByZXF1aXJlKCcuL19iYXNlSXNNYXAnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXA7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlSXNTZXQgPSByZXF1aXJlKCcuL19iYXNlSXNTZXQnKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU2V0KG5ldyBTZXQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTZXQ7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgYmFzZUlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vX2Jhc2VJc1R5cGVkQXJyYXknKSxcbiAgICBiYXNlVW5hcnkgPSByZXF1aXJlKCcuL19iYXNlVW5hcnknKSxcbiAgICBub2RlVXRpbCA9IHJlcXVpcmUoJy4vX25vZGVVdGlsJyk7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVHlwZWRBcnJheTtcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBpc0FycmF5TGlrZSA9IHJlcXVpcmUoJy4vaXNBcnJheUxpa2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5cztcbiIsInZhciBhcnJheUxpa2VLZXlzID0gcmVxdWlyZSgnLi9fYXJyYXlMaWtlS2V5cycpLFxuICAgIGJhc2VLZXlzSW4gPSByZXF1aXJlKCcuL19iYXNlS2V5c0luJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNJbjtcbiIsInZhciBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBub29wO1xuIiwidmFyIGJhc2VQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VQcm9wZXJ0eScpLFxuICAgIGJhc2VQcm9wZXJ0eURlZXAgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHlEZWVwJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHByb3BlcnR5O1xuIiwidmFyIGNyZWF0ZVJhbmdlID0gcmVxdWlyZSgnLi9fY3JlYXRlUmFuZ2UnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICpcbiAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ucmFuZ2UoNCk7XG4gKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAqXG4gKiBfLnJhbmdlKC00KTtcbiAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICpcbiAqIF8ucmFuZ2UoMSwgNSk7XG4gKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAqXG4gKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gKlxuICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gKlxuICogXy5yYW5nZSgxLCA0LCAwKTtcbiAqIC8vID0+IFsxLCAxLCAxXVxuICpcbiAqIF8ucmFuZ2UoMCk7XG4gKiAvLyA9PiBbXVxuICovXG52YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJhbmdlO1xuIiwidmFyIGJhc2VTb3J0ZWRJbmRleCA9IHJlcXVpcmUoJy4vX2Jhc2VTb3J0ZWRJbmRleCcpO1xuXG4vKipcbiAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNvcnRlZEluZGV4KFszMCwgNTBdLCA0MCk7XG4gKiAvLyA9PiAxXG4gKi9cbmZ1bmN0aW9uIHNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSkge1xuICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc29ydGVkSW5kZXg7XG4iLCJ2YXIgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgYmFzZVNvcnRlZEluZGV4QnkgPSByZXF1aXJlKCcuL19iYXNlU29ydGVkSW5kZXhCeScpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAqICBpbnRvIGBhcnJheWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICpcbiAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICogLy8gPT4gMFxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5zb3J0ZWRJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sICd4Jyk7XG4gKiAvLyA9PiAwXG4gKi9cbmZ1bmN0aW9uIHNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0ZWRJbmRleEJ5O1xuIiwidmFyIGJhc2VTb3J0ZWRJbmRleCA9IHJlcXVpcmUoJy4vX2Jhc2VTb3J0ZWRJbmRleCcpO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAqIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0b1xuICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gKiAgaW50byBgYXJyYXlgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICogLy8gPT4gNFxuICovXG5mdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzb3J0ZWRMYXN0SW5kZXg7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDAsXG4gICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwODtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTIuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvRmluaXRlKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b0Zpbml0ZShJbmZpbml0eSk7XG4gKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICpcbiAqIF8udG9GaW5pdGUoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvRmluaXRlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gIH1cbiAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgIHZhciBzaWduID0gKHZhbHVlIDwgMCA/IC0xIDogMSk7XG4gICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgfVxuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gdmFsdWUgOiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRmluaXRlO1xuIiwidmFyIGJhc2VUcmltID0gcmVxdWlyZSgnLi9fYmFzZVRyaW0nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvTnVtYmVyKDMuMik7XG4gKiAvLyA9PiAzLjJcbiAqXG4gKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gNWUtMzI0XG4gKlxuICogXy50b051bWJlcihJbmZpbml0eSk7XG4gKiAvLyA9PiBJbmZpbml0eVxuICpcbiAqIF8udG9OdW1iZXIoJzMuMicpO1xuICogLy8gPT4gMy4yXG4gKi9cbmZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiBOQU47XG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgfVxuICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsInZhciBiYXNlVW5pcSA9IHJlcXVpcmUoJy4vX2Jhc2VVbmlxJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICogaW4gdGhlIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlxKFsyLCAxLCAyXSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqL1xuZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB1bmlxO1xuIiwidmFyIGJhc2VVbmlxID0gcmVxdWlyZSgnLi9fYmFzZVVuaXEnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LlRoZSBjb21wYXJhdG9yIGlzIGludm9rZWRcbiAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gKlxuICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICogLy8gPT4gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XVxuICovXG5mdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pcVdpdGg7XG4iLCJ2YXIgaW5kaWNhdG9yID0gcmVxdWlyZSgnLi9pbmRpY2F0b3InKVxuXG5mdW5jdGlvbiBvcmRpbmFsIChpKSB7XG4gIGlmICh0eXBlb2YgaSAhPT0gJ251bWJlcicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIE51bWJlciwgZ290ICcgKyAodHlwZW9mIGkpICsgJyAnICsgaSlcblxuICBpZiAoIU51bWJlci5pc0Zpbml0ZShpKSkgcmV0dXJuIGlcbiAgcmV0dXJuIGkgKyBpbmRpY2F0b3IoaSlcbn1cblxub3JkaW5hbC5pbmRpY2F0b3IgPSBpbmRpY2F0b3Jcbm1vZHVsZS5leHBvcnRzID0gb3JkaW5hbFxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmRpY2F0b3IgKGkpIHtcbiAgaSA9IE1hdGguYWJzKGkpXG4gIHZhciBjZW50ID0gaSAlIDEwMFxuICBpZiAoY2VudCA+PSAxMCAmJiBjZW50IDw9IDIwKSByZXR1cm4gJ3RoJ1xuICB2YXIgZGVjID0gaSAlIDEwXG4gIGlmIChkZWMgPT09IDEpIHJldHVybiAnc3QnXG4gIGlmIChkZWMgPT09IDIpIHJldHVybiAnbmQnXG4gIGlmIChkZWMgPT09IDMpIHJldHVybiAncmQnXG4gIHJldHVybiAndGgnXG59XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Jlc2V0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJleHBvcnQgZGVmYXVsdCAvXig/OlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9fDAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCkkL2k7IiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gSW4gdGhlIGJyb3dzZXIgd2UgdGhlcmVmb3JlXG4vLyByZXF1aXJlIHRoZSBjcnlwdG8gQVBJIGFuZCBkbyBub3Qgc3VwcG9ydCBidWlsdC1pbiBmYWxsYmFjayB0byBsb3dlciBxdWFsaXR5IHJhbmRvbSBudW1iZXJcbi8vIGdlbmVyYXRvcnMgKGxpa2UgTWF0aC5yYW5kb20oKSkuXG52YXIgZ2V0UmFuZG9tVmFsdWVzO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICAvLyBsYXp5IGxvYWQgc28gdGhhdCBlbnZpcm9ubWVudHMgdGhhdCBuZWVkIHRvIHBvbHlmaWxsIGhhdmUgYSBjaGFuY2UgdG8gZG8gc29cbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAvLyBnZXRSYW5kb21WYWx1ZXMgbmVlZHMgdG8gYmUgaW52b2tlZCBpbiBhIGNvbnRleHQgd2hlcmUgXCJ0aGlzXCIgaXMgYSBDcnlwdG8gaW1wbGVtZW50YXRpb24uIEFsc28sXG4gICAgLy8gZmluZCB0aGUgY29tcGxldGUgaW1wbGVtZW50YXRpb24gb2YgY3J5cHRvIChtc0NyeXB0bykgb24gSUUxMS5cbiAgICBnZXRSYW5kb21WYWx1ZXMgPSB0eXBlb2YgY3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChtc0NyeXB0byk7XG5cbiAgICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKCkgbm90IHN1cHBvcnRlZC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCNnZXRyYW5kb212YWx1ZXMtbm90LXN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXRSYW5kb21WYWx1ZXMocm5kczgpO1xufSIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG52YXIgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIpIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHZhciB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsImltcG9ydCBybmcgZnJvbSAnLi9ybmcuanMnO1xuaW1wb3J0IHN0cmluZ2lmeSBmcm9tICcuL3N0cmluZ2lmeS5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgcm5kcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7IC8vIFBlciA0LjQsIHNldCBiaXRzIGZvciB2ZXJzaW9uIGFuZCBgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZGBcblxuICBybmRzWzZdID0gcm5kc1s2XSAmIDB4MGYgfCAweDQwO1xuICBybmRzWzhdID0gcm5kc1s4XSAmIDB4M2YgfCAweDgwOyAvLyBDb3B5IGJ5dGVzIHRvIGJ1ZmZlciwgaWYgcHJvdmlkZWRcblxuICBpZiAoYnVmKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHJuZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdpZnkocm5kcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHY0OyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gdmVyc2lvbih1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlSW50KHV1aWQuc3Vic3RyKDE0LCAxKSwgMTYpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2ZXJzaW9uOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG5cdFx0ZnVuY3Rpb24oKSB7IHJldHVybiBtb2R1bGU7IH07XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImltcG9ydCAnLi9zaGltcy9jbGFzc0xpc3QnO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vbW9kdWxlcy9hcHAnO1xuXG5jb25zdCBhcHAgPSBuZXcgQXBwKGRvY3VtZW50LmJvZHkpO1xuYXBwLnJ1bigpO1xuIl0sIm5hbWVzIjpbIlIiLCJSZWZsZWN0IiwiUmVmbGVjdEFwcGx5IiwiYXBwbHkiLCJ0YXJnZXQiLCJyZWNlaXZlciIsImFyZ3MiLCJGdW5jdGlvbiIsInByb3RvdHlwZSIsImNhbGwiLCJSZWZsZWN0T3duS2V5cyIsIm93bktleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uY2F0IiwiUHJvY2Vzc0VtaXRXYXJuaW5nIiwid2FybmluZyIsImNvbnNvbGUiLCJ3YXJuIiwiTnVtYmVySXNOYU4iLCJOdW1iZXIiLCJpc05hTiIsInZhbHVlIiwiRXZlbnRFbWl0dGVyIiwiaW5pdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJvbmNlIiwiX2V2ZW50cyIsInVuZGVmaW5lZCIsIl9ldmVudHNDb3VudCIsIl9tYXhMaXN0ZW5lcnMiLCJkZWZhdWx0TWF4TGlzdGVuZXJzIiwiY2hlY2tMaXN0ZW5lciIsImxpc3RlbmVyIiwiVHlwZUVycm9yIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiYXJnIiwiUmFuZ2VFcnJvciIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlIiwic2V0TWF4TGlzdGVuZXJzIiwibiIsIl9nZXRNYXhMaXN0ZW5lcnMiLCJ0aGF0IiwiZ2V0TWF4TGlzdGVuZXJzIiwiZW1pdCIsInR5cGUiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHVzaCIsImRvRXJyb3IiLCJldmVudHMiLCJlcnJvciIsImVyIiwiRXJyb3IiLCJlcnIiLCJtZXNzYWdlIiwiY29udGV4dCIsImhhbmRsZXIiLCJsZW4iLCJsaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsIm0iLCJleGlzdGluZyIsIm5ld0xpc3RlbmVyIiwidW5zaGlmdCIsIndhcm5lZCIsInciLCJTdHJpbmciLCJuYW1lIiwiZW1pdHRlciIsImNvdW50IiwiYWRkTGlzdGVuZXIiLCJvbiIsInByZXBlbmRMaXN0ZW5lciIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJyZW1vdmVMaXN0ZW5lciIsIndyYXBGbiIsIl9vbmNlV3JhcCIsInN0YXRlIiwid3JhcHBlZCIsImJpbmQiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdCIsInBvc2l0aW9uIiwib3JpZ2luYWxMaXN0ZW5lciIsInNoaWZ0Iiwic3BsaWNlT25lIiwib2ZmIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwia2V5cyIsImtleSIsIl9saXN0ZW5lcnMiLCJ1bndyYXAiLCJldmxpc3RlbmVyIiwidW53cmFwTGlzdGVuZXJzIiwicmF3TGlzdGVuZXJzIiwibGlzdGVuZXJDb3VudCIsImV2ZW50TmFtZXMiLCJhcnIiLCJjb3B5IiwiQXJyYXkiLCJpbmRleCIsInBvcCIsInJldCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3JMaXN0ZW5lciIsInJlc29sdmVyIiwic2xpY2UiLCJldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIiLCJhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlciIsImZsYWdzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIndyYXBMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGQiLCJhZGRUb0RhdGUiLCJlbmRPZkRheSIsInN0YXJ0T2ZEYXkiLCJNZW51SWNvbiIsIkFwcE9wdGlvbnNJY29uIiwiQWRkSWNvbiIsIkRlbGV0ZUljb24iLCJEb25lSWNvbiIsIkVkaXRJY29uIiwiR3JvdXBJY29uIiwiTW9yZUljb24iLCJPcmRlckljb24iLCJTYXZlSWNvbiIsIlNldHRpbmdzSWNvbiIsIlNvcnRJY29uIiwiSW5mb0ljb24iLCJBcHBJbmZvIiwiQWRkUHJvamVjdE1vZGFsIiwiQWRkVGFza01vZGFsIiwiQ29uZmlybU1vZGFsIiwiRGF0YU1vZGFsIiwiRmlsdGVyTWVudSIsIkluZm9Nb2RhbCIsIk1vZGFsU3RhY2siLCJQb3B1cE1lbnUiLCJQcm9qZWN0IiwiUHJvamVjdExpc3QiLCJSZWN1cnJpbmdEYXRlIiwiU2V0dGluZ3MiLCJTZXR0aW5nc01vZGFsIiwiVGFzayIsIlRhc2tEaXNwbGF5IiwiVGFza0xpc3QiLCJjb21wYXJlVmVyc2lvbnMiLCJmb3JtYXREYXRlIiwiY3JlYXRlSW1hZ2VCdXR0b24iLCJjcmVhdGVQYXJhZ3JhcGhzIiwiY2xlYXJEYXRhIiwiZm9yRWFjaERhdGFJdGVtIiwiZ2VuZXJhdGVGaWxlIiwiZ2V0RmlsZUV4dGVuc2lvbiIsInBhcnNlQ3N2IiwicmVtb3ZlRGF0YSIsInJldHJpZXZlRGF0YSIsInN0b3JlRGF0YSIsIklDT05fV0lEVEgiLCJJQ09OX0hFSUdIVCIsIk5BUlJPV19MQVlPVVRfQ1VUT0ZGIiwicHJpdmF0ZU1lbWJlcnMiLCJXZWFrTWFwIiwiYWRkUmFuZG9tRGF0YSIsImluc3RhbmNlIiwidGFza0NvdW50IiwicHJvakNvdW50IiwiZ2V0UmFuZG9tIiwibWluIiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicGFzc0NoZWNrIiwicHJvYmFiaWxpdHkiLCJzZW50ZW5jZXMiLCJyYW5kb21TZW50ZW5jZSIsInJhbmRvbURhdGUiLCJ0b2RheSIsIkRhdGUiLCJkYXlzIiwicmFuZG9tUmVjdXJyZW5jZSIsInVuaXQiLCJpbnRlcnZhbExlbmd0aCIsInN0YXJ0RGF0ZSIsImJhc2VPbkNvbXBsZXRpb24iLCJwcml2YXRlcyIsInByb2plY3RzIiwicHJvamVjdCIsImRlc2NyaXB0aW9uIiwiYWRkUHJvamVjdCIsInJhbmRvbVByb2plY3QiLCJ0YXNrIiwiZHVlRGF0ZSIsImNvbXBsZXRpb25EYXRlIiwicHJpb3JpdHkiLCJyZWN1cnJpbmdEYXRlIiwidGFza3MiLCJhZGRUYXNrIiwib3BlblNpZGVQYW5lbCIsImVsZW1lbnRzIiwic2lkZVBhbmVsIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwicmVzaXplciIsImNsb3NlU2lkZVBhbmVsIiwidG9nZ2xlU2lkZVBhbmVsIiwiY2xvc2VkIiwidG9nZ2xlIiwidXBkYXRlTWFpblBhbmVsTWVudSIsImN1cnJlbnRGaWx0ZXIiLCJncm91cCIsImZpbHRlciIsImZpbHRlck9wdGlvbnMiLCJzZXR0aW5ncyIsImdldEZpbHRlck9wdGlvbnMiLCJHUk9VUF9JQ09OIiwiU09SVF9JQ09OIiwiaWNvbk9wdGlvbnMiLCJzb3VyY2UiLCJ3aWR0aCIsImhlaWdodCIsImdyb3VwQnkiLCJzb3J0QnkiLCJzb3J0RGVzY2VuZGluZyIsInNob3dDb21wbGV0ZWQiLCJvcHRpb25JdGVtcyIsImxhYmVsIiwiaWQiLCJpY29uIiwiZ3JvdXBCeUl0ZW1zIiwic29ydEJ5SXRlbXMiLCJtZW51SXRlbXMiLCJtYWluUGFuZWxNZW51Iiwic2V0TWVudUl0ZW1zIiwidXBkYXRlTWFpbkhlYWRpbmciLCJoZWFkaW5nIiwic3ViaGVhZGluZyIsImhlYWRpbmdFbGVtIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN1YmhlYWRpbmdFbGVtIiwidGV4dENvbnRlbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJ1cGRhdGVNYWluUGFuZWwiLCJvcHRpb25zIiwiZGlzcGxheU9wdGlvbnMiLCJyZXNldFNjcm9sbCIsImRhdGVGb3JtYXQiLCJ0b2RheUVuZCIsImR1cmF0aW9uIiwid2Vla3MiLCJtb250aHMiLCJyZXF1aXJlRHVlRGF0ZSIsImVuZERhdGUiLCJvdXRwdXRQYXR0ZXJuIiwic3RhcnRTdHIiLCJlbmRTdHIiLCJnZXRQcm9qZWN0IiwiY29udmVydFN0cmluZ1RvUHJpb3JpdHkiLCJjb252ZXJ0UHJpb3JpdHlUb1ByZXR0eVN0cmluZyIsImNvbXBsZXRlZCIsInRhc2tEaXNwbGF5IiwidXBkYXRlIiwidXBkYXRlUHJvamVjdEZpbHRlcnMiLCJzZWxlY3Rpb24iLCJmaWx0ZXJNZW51IiwiZ2V0U2VsZWN0aW9uIiwicmVtb3ZlQWxsRmlsdGVycyIsImFkZEZpbHRlciIsImZvckVhY2giLCJlbnRyeSIsImhhc0ZpbHRlciIsInNlbGVjdEZpbHRlciIsImV4cG9ydFRvSnNvbiIsIm91dHB1dCIsIkpTT04iLCJzdHJpbmdpZnkiLCJuZXdsaW5lU2VxdWVuY2UiLCJyZXBsYWNlIiwiZXhwb3J0VG9Dc3YiLCJ0b0NzdiIsInByb2plY3RMaXN0IiwiaW1wb3J0RnJvbUpzb24iLCJkYXRhIiwidGFza0NvdW50cyIsImFkZGVkIiwidXBkYXRlZCIsImZhaWxlZCIsInRvdGFsIiwicHJvamVjdENvdW50cyIsImVycm9ycyIsInBhcnNlIiwiYXBwIiwidmVyc2lvbiIsInJlc3VsdCIsImFzc2lnbiIsInN1Y2Nlc3NmdWwiLCJmb3JtYXQiLCJlIiwiU3ludGF4RXJyb3IiLCJpbXBvcnRGcm9tQ3N2IiwicGFyc2VkRGF0YSIsImltcG9ydEZyb21GaWxlIiwiY29udGVudCIsImZpbGVFeHQiLCJ0b0xvd2VyQ2FzZSIsImNvdW50cyIsImRlbGV0ZUFsbERhdGEiLCJyZXNldFRvRGVmYXVsdCIsImRlbGV0ZUFsbCIsInNob3dDb25maXJtYXRpb24iLCJvbkNvbmZpcm0iLCJvbkNhbmNlbCIsIm1vZGFsIiwiY29uZmlybSIsImNhbmNlbCIsIm1vZGFsU3RhY2siLCJzaG93TW9kYWwiLCJzaG93QWRkVGFza01vZGFsIiwidGFza0lkIiwicHJvamVjdElkIiwibmV3UHJvamVjdCIsInNob3dBZGRQcm9qZWN0TW9kYWwiLCJwcm9qZWN0VG9VcGRhdGUiLCJuZXdJZCIsInVwZGF0ZVByb2plY3QiLCJzaG93U2V0dGluZ3NNb2RhbCIsInNob3dEYXRhTW9kYWwiLCJpbXBvcnREYXRhIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsInN0YXR1c01zZyIsImFwcGVuZENoaWxkIiwiam9pbiIsImVycm9yTGlzdCIsImxpc3RJdGVtIiwiaW5mb01vZGFsIiwidGl0bGUiLCJleHBvcnREYXRhIiwiZmlsZVR5cGUiLCJmaWxlT3B0aW9ucyIsInNob3dBYm91dE1vZGFsIiwicGFyYWdyYXBocyIsImNvcHlyaWdodFllYXJzIiwiYXV0aG9yIiwidXJsIiwiYXV0aG9yV2Vic2l0ZSIsImxpY2Vuc2UiLCJoYW5kbGVNYWluUGFuZWxNZW51U2VsZWN0aW9uIiwiaXRlbUlkIiwibmVlZFBhbmVsVXBkYXRlIiwibmVlZEZpbHRlck9wdGlvblVwZGF0ZSIsIm1vZGFsT3B0aW9ucyIsImNsZWFyUHJvamVjdCIsImRlbGV0ZVByb2plY3QiLCJzZXRGaWx0ZXJPcHRpb25zIiwiY29tcGxldGVUYXNrIiwidGFza0xpc3QiLCJnZXRUYXNrIiwibm93IiwiYmFzZURhdGUiLCJuZXdEdWVEYXRlIiwiZ2V0TmV4dE9jY3VycmVuY2UiLCJtYXJrQ29tcGxldGUiLCJtYXJrSW5jb21wbGV0ZSIsImFkdmFuY2UiLCJ1cGRhdGVUYXNrIiwiaGFuZGxlVGFza1VwZGF0ZSIsIm5lZWRVcGRhdGUiLCJkZWxldGVUYXNrIiwiaGFuZGxlRmlsdGVyQ2hhbmdlIiwiZXZlbnQiLCJncm91cElkIiwiZmlsdGVySWQiLCJoYW5kbGVBcHBNZW51U2VsZWN0aW9uIiwiaW5pdGlhbGl6ZVN0b3JhZ2UiLCJzdG9yYWdlUHJlZml4Iiwic3RvcmFnZU1ldGhvZCIsImxvYWRBbGxTdG9yYWdlRGF0YSIsImRvdEluZGV4IiwiaW5kZXhPZiIsInN1YnN0cmluZyIsImFkZE9yVXBkYXRlVGFzayIsImZyb21Kc29uIiwiYWRkT3JVcGRhdGVQcm9qZWN0Iiwic2V0U2V0dGluZyIsInN0b3JlQWxsRGF0YSIsInVwZGF0ZVN0b3JhZ2UiLCJldmVudERhdGEiLCJldmVudFR5cGUiLCJjcmVhdGVGaWx0ZXJNZW51IiwiZmlsdGVyR3JvdXBzIiwiZmlsdGVycyIsImFkZEdyb3VwSWNvbkJ1dHRvbiIsImFsdFRleHQiLCJjYWxsYmFjayIsImNyZWF0ZUhlYWRlciIsInBhcmVudCIsImhlYWRlciIsIm1lbnVCdXR0b24iLCJ0aXRsZUNvbnRhaW5lciIsImFwcE9wdGlvbnNCdXR0b24iLCJ0b29sQ29udGFpbmVyIiwiY3JlYXRlU2lkZVBhbmVsIiwiY3JlYXRlUmVzaXplciIsInNpemUiLCJ4IiwicHJldmVudERlZmF1bHQiLCJidXR0b24iLCJjcmVhdGVNYWluUGFuZWwiLCJtYWluUGFuZWwiLCJoZWFkaW5nQ29udGFpbmVyIiwibWVudSIsImNsb3NlSWZTY3JvbGxlZCIsImFkZFRhc2tCdXR0b24iLCJtYWluUGFuZWxNZW51QnV0dG9uIiwiaWNvbkNvbnRhaW5lciIsInRhc2tEaXNwbGF5T3B0aW9ucyIsInRhc2tDYWxsYmFjayIsImNyZWF0ZUZvb3RlciIsImZvb3RlciIsImNvcHlyaWdodCIsImlubmVySFRNTCIsImNyZWF0ZVBhZ2VFbGVtZW50cyIsImFwcENvbnRhaW5lciIsIm1pZGRsZUNvbnRhaW5lciIsIkFwcCIsIm5hcnJvd1NjcmVlbiIsIndpbmRvdyIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwibmFycm93IiwiZXhwYW5kR3JvdXAiLCJhcHBPcHRpb25zTWVudSIsIm9wZW4iLCJyZWZlcmVuY2VFbGVtZW50IiwiaXRlbSIsInByb2pDYWxsYmFjayIsInNldHRpbmdzQ2FsbGJhY2siLCJQQUNLQUdFX1ZFUlNJT04iLCJQQUNLQUdFX0FVVEhPUl9OQU1FIiwiUEFDS0FHRV9BVVRIT1JfV0VCU0lURSIsIlBBQ0tBR0VfTElDRU5TRSIsImhvbWVwYWdlIiwiUEFDS0FHRV9IT01FUEFHRSIsIlBBQ0tBR0VfTkFNRSIsIkZPQ1VTQUJMRV9TRUxFQ1RPUiIsIkNvbGxhcHNpYmxlIiwicmVmZXJlbmNlTm9kZSIsImlubmVyQ29udGFpbmVyIiwiaW5zZXJ0QmVmb3JlIiwiY29sbGFwc2VkIiwiY29sbGFwc2UiLCJleHBhbmQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWxlbSIsInNldEF0dHJpYnV0ZSIsIm9mZnNldEhlaWdodCIsImlzQmVmb3JlIiwiaXNTYW1lRGF5IiwiaXNTYW1lTW9udGgiLCJpc1RvZGF5Iiwic3RhcnRPZk1vbnRoIiwic3RhcnRPZldlZWsiLCJMZWZ0QXJyb3dJY29uIiwiUmlnaHRBcnJvd0ljb24iLCJUb2RheUljb24iLCJjcmVhdGVGb3JtQ29udHJvbCIsIk1PTlRIUyIsInVwZGF0ZURheUdyaWQiLCJkYXlHcmlkIiwiZGF0ZSIsImRpc3BsYXllZFllYXIiLCJkaXNwbGF5ZWRNb250aCIsInNldEZ1bGxZZWFyIiwic2VsZWN0ZWQiLCJtb250aFN0YXJ0Iiwic3RhcnQiLCJlbmQiLCJob3VycyIsImRheUxhYmVsIiwiY3VycmVudERheSIsImRheUVsZW0iLCJnZXREYXRlIiwiZGF0YXNldCIsInllYXIiLCJnZXRGdWxsWWVhciIsIm1vbnRoIiwiZ2V0TW9udGgiLCJkYXkiLCJ1cGRhdGVJbnB1dHMiLCJtb250aElucHV0IiwidG9TdHJpbmciLCJ5ZWFySW5wdXQiLCJjcmVhdGVGb3JtRWxlbWVudHMiLCJtYXAiLCJtb250aFllYXJDb250YWluZXIiLCJzcGFjZXIiLCJidXR0b25Db250YWluZXIiLCJiYWNrQnV0dG9uIiwidG9kYXlCdXR0b24iLCJmb3J3YXJkQnV0dG9uIiwiZ3JpZCIsImdvVG9QcmV2aW91c01vbnRoIiwiZ29Ub1RoaXNNb250aCIsImdvVG9OZXh0TW9udGgiLCJ5ZWFyTGlzdGVuZXIiLCJpc0ludGVnZXIiLCJjb250YWlucyIsIkRhdGVQaWNrZXIiLCJDb2xsYXBzZWRJY29uIiwiRXhwYW5kZWRJY29uIiwiZ2V0R3JvdXBFbGVtZW50cyIsImdyb3VwRWxlbWVudHMiLCJnZXRGaWx0ZXJJdGVtRWxlbWVudCIsImZpbHRlckl0ZW1zIiwic2lsZW50Q2xlYXJTZWxlY3Rpb24iLCJzZWxlY3RlZEZpbHRlciIsImdyb3VwcyIsIk1hcCIsImV2ZW50RW1pdHRlciIsImFkZEdyb3VwIiwiZ3JvdXBDb250YWluZXIiLCJhcnJvdyIsIkltYWdlIiwic3JjIiwiYWx0IiwidGV4dCIsImNvbGxhcHNpYmxlIiwibGlzdENvbnRhaW5lciIsImV4cGFuZEljb24iLCJmaWx0ZXJMaXN0IiwidG9nZ2xlR3JvdXAiLCJmaWx0ZXJMYWJlbCIsImxhYmVsRWxlbSIsImNvdW50RWxlbSIsImNsZWFyU2VsZWN0aW9uIiwicmVtb3ZlQ2hpbGQiLCJkZWxldGUiLCJjbGVhciIsImhhcyIsImNvbGxhcHNlR3JvdXAiLCJxdWVyeVNlbGVjdG9yIiwiQ2xvc2VJY29uIiwiWl9JTkRFWF9TVEFSVCIsIlpfSU5ERVhfU1RFUCIsIlpfSU5ERVhfT1ZFUkxBWV9TVEVQIiwiZ2V0WkluZGV4IiwidXBkYXRlT3ZlcmxheSIsIm1vZGFscyIsInpJbmRleCIsIm92ZXJsYXkiLCJoaWRlQmFja2dyb3VuZCIsInRvSGlkZSIsImJhY2tncm91bmQiLCJ3cmFwcGVyIiwib2xkVGFiSW5kZXgiLCJ0YWJJbmRleCIsImhhc0F0dHJpYnV0ZSIsImVsZW1lbnQiLCJyZXN0b3JlQmFja2dyb3VuZCIsInRvUmVzdG9yZSIsImJvZHkiLCJjYW5jZWxNb2RhbCIsIm9sZEFjdGl2ZSIsImFjdGl2ZUVsZW1lbnQiLCJibHVyIiwidGl0bGVCYXIiLCJ0aXRsZVRleHQiLCJjbG9zZUljb24iLCJhZGRDb250ZW50IiwiY2FuY2VsQnV0dG9uIiwibm9DYW5jZWxCdXR0b24iLCJjYW5jZWxMYWJlbCIsIm9rYXlCdXR0b24iLCJjb25maXJtTGFiZWwiLCJjb25maXJtTW9kYWwiLCJtb2RhbEluZm8iLCJpbml0Rm9jdXMiLCJmb2N1cyIsInZhbGlkYXRlIiwiY2xvc2VNb2RhbCIsImluaXRGb3JtVmFsdWVzIiwiY29udHJvbHMiLCJtb2RlIiwiY2FsbGJhY2tzIiwiY29udGFpbmVyVHlwZSIsImxhYmVsVHlwZSIsInJlcXVpcmVkIiwicm93cyIsImNvbHMiLCJyZXBvcnRWYWxpZGl0eSIsIkRhdGVQaWNrZXJNb2RhbCIsIlJlY3VycmVuY2VNb2RhbCIsInBhcnNlRGF0ZSIsImNyZWF0ZURhdGVJbnB1dEZpZWxkIiwidXBkYXRlUHJvamVjdHMiLCJwcm9qZWN0SXRlbXMiLCJzZWxlY3RCb3giLCJvcHRFbGVtIiwiaXNEZWZhdWx0IiwiaW50ZXJ2YWxVbml0IiwiY3VzdG9tUmVjdXJyZW5jZSIsInByaW9yaXR5U3RyaW5nIiwiY29udmVydFByaW9yaXR5VG9TdHJpbmciLCJwaWNrRHVlRGF0ZSIsImlucHV0IiwiaW5wdXRQYXR0ZXJucyIsInNldEN1c3RvbVZhbGlkaXR5IiwiYWRkTGlzdGVuZXJzIiwicmVjdXJyZW5jZVZhbHVlIiwicHJvY2Vzc1JlY3VycmVuY2UiLCJyZWN1cnJlbmNlIiwibmV3VmFsdWUiLCJzZWxlY3RvciIsImxhc3RDaGlsZCIsImRhdGVGb3JtYXRTdHIiLCJ0b1N0cmluZ1ZlcmJvc2UiLCJjYW5jZWxSZWN1cnJlbmNlIiwiZGF0ZUlucHV0IiwiaW5pdGlhbCIsInByb2plY3RWYWx1ZSIsInZpc3VhbFBhdHRlcm4iLCJsb29rdXBEYXRlRm9ybWF0IiwiZGF0ZUNvbnRhaW5lciIsImRhdGVMYWJlbCIsImh0bWxGb3IiLCJwbGFjZWhvbGRlciIsImNyZWF0aW9uRGF0ZSIsImluaXRGb3JtQ29udHJvbHMiLCJjb25maXJtQm94IiwiZXJyb3JNZXNzYWdlIiwiRXhwb3J0TW9kYWwiLCJyZWFkRmlsZSIsImRvSW1wb3J0IiwiZmlsZSIsImZpbGVJbmZvIiwiZG9FeHBvcnQiLCJzZXRUaW1lb3V0IiwiZG9EZWxldGUiLCJpbXBvcnRCdXR0b24iLCJmaWxlU2VsZWN0b3IiLCJjbGljayIsImV4cG9ydEJ1dHRvbiIsImRlbGV0ZUJ1dHRvbiIsImZpbGVzIiwiY2xvc2UiLCJhZGRDb250YWluZXIiLCJhZGRIZWFkaW5nIiwiYWRkQnV0dG9uIiwiYWNjZXB0IiwicGlja2VyIiwiZXhwb3J0SnNvbiIsImV4cG9ydENzdiIsInJhZGlvTGFiZWwiLCJjaGVja2VkIiwiTm9kZSIsImlzQXJyYXkiLCJwYXJhZ3JhcGgiLCJwRWxlbSIsIm9yZGluYWwiLCJnZXRXZWVrZGF5TmFtZSIsImdldE1vbnRoTmFtZSIsImdldERheXNJbk1vbnRoIiwiY3JlYXRlVG9nZ2xlQnV0dG9uIiwiVU5JVFMiLCJzaW5ndWxhciIsInBsdXJhbCIsImNyZWF0ZVdlZWtDb250ZXh0Rm9ybSIsIm9wdGlvbkNvbnRhaW5lciIsImNyZWF0ZU1vbnRoQ29udGV4dEZvcm0iLCJzZWxlY3RJdGVtcyIsIndlZWsiLCJjcmVhdGVZZWFyQ29udGV4dEZvcm0iLCJnZXRDb250cm9sIiwiaWRTdWZmaXgiLCJjb250YWluZXJzIiwid2Vla09wdGlvbnMiLCJtb250aE9wdGlvbnMiLCJ5ZWFyT3B0aW9ucyIsImluaXRpYWxSZWN1cnJlbmNlIiwiZGF5c09mV2VlayIsImRheU9mTW9udGgiLCJ3ZWVrTnVtYmVyIiwid2Vla1NlbGVjdCIsImRheVNlbGVjdCIsIm1vbnRoU2VsZWN0IiwibWF4Q291bnQiLCJvbldlZWtlbmQiLCJkYXlPZldlZWsiLCJnZXREYXkiLCJkYXlCdXR0b24iLCJtb250aERheVNlbGVjdCIsIm1vbnRoV2Vla051bVNlbGVjdCIsIm1vbnRoV2Vla0RheVNlbGVjdCIsInllYXJNb250aFNlbGVjdCIsInllYXJEYXlTZWxlY3QiLCJwaWNrRGF0ZSIsImZpZWxkIiwidXBkYXRlQ29udGV4dENvbnRhaW5lciIsImNvbnRleHRDb250YWluZXIiLCJmaXJzdENoaWxkIiwiZmlyZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwibGVuZ3RoU2VsZWN0IiwidW5pdFNlbGVjdCIsImlzRmluaXRlIiwib3B0aW9uIiwicmFkaW9TZWxlY3RvciIsIndlZWtUeXBlTGlzdGVuZXIiLCJidXR0b25zIiwiZW5hYmxlIiwiZGlzYWJsZWQiLCJyYWRpbyIsIm1vbnRoVHlwZUxpc3RlbmVyIiwid2Vla051bWJlclNlbGVjdCIsIndlZWtEYXlTZWxlY3QiLCJ5ZWFyVHlwZUxpc3RlbmVyIiwic2VsZWN0Qm94ZXMiLCJzZWxlY3QiLCJ5ZWFyTW9udGhMaXN0ZW5lciIsImZpbmRJbmRleCIsIm1vbnRoSW5kZXgiLCJvbGRWYWx1ZSIsIm1heERheXMiLCJvcHQiLCJlbmRDb3VudCIsImVuZFJhZGlvU2VsZWN0b3IiLCJlbmRUeXBlTGlzdGVuZXIiLCJkYXRlQnV0dG9uIiwiY291bnRJbnB1dCIsInVzZURhdGVDaGVja2JveCIsIm5vV2Vla2VuZENoZWNrYm94IiwiZGF0ZUxpc3RlbmVyIiwiaW5saW5lIiwibGVuZ3RoSW5wdXQiLCJnZXREYXlJbmRleCIsImRheUluZGV4IiwiaXNMb2NhbFN0b3JhZ2VTdXBwb3J0ZWQiLCJjb25maXJtTm9TdG9yYWdlIiwic2F2ZU5ldmVyIiwic2F2ZUxvY2FsIiwiZGVsZXRlT2xkIiwiZGVsZXRlQWZ0ZXIiLCJkZWxldGVBZnRlckxhYmVsIiwiZGF0ZUZvcm1hdHMiLCJzZXREYXRlRm9ybWF0IiwicG9zaXRpb25NZW51Iiwib2Zmc2V0V2lkdGgiLCJsZWZ0IiwidG9wIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIk1BUkdJTiIsImJvZHlXaWR0aCIsImJvZHlIZWlnaHQiLCJzZWxlY3RJdGVtIiwiZ2V0SXRlbSIsImZvY3VzSXRlbSIsImFjdGl2ZUl0ZW0iLCJoYW5kbGVFdmVudCIsImFjdGl2ZSIsIml0ZW1Db3VudCIsInNjcm9sbFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzY3JvbGxUYXJnZXQiLCJldmVudExpc3RlbmVyIiwiaXNPcGVuIiwidjQiLCJnZW5lcmF0ZVV1aWQiLCJnZXRKc29uVHlwZSIsImlzVXVpZFZhbGlkIiwidmFsaWRhdGVWYWx1ZSIsIm5lZWRTb3J0Iiwic3BsaWNlIiwiaW5zZXJ0QXQiLCJoYXNQcm9qZWN0IiwiaGFuZGxlRXJyb3IiLCJlcnJvclR5cGUiLCJvcHRzIiwibXNnUHJlZml4IiwibXNnIiwiZXhwZWN0ZWRUeXBlIiwidmFsdWVOYW1lIiwicHJvamVjdE9wdGlvbnMiLCJlcnJvckNhbGxiYWNrIiwicmVxdWlyZVV1aWQiLCJjb2x1bW5zIiwiZW50cmllcyIsImNzdlJlY29yZCIsImNzdkluZGV4IiwiaXNFbnRyeUVxdWFsIiwicmlnaHQiLCJpc0RhdGVCZWZvcmUiLCJpc1dlZWtlbmQiLCJuZXh0RGF5IiwicHJldmlvdXNEYXkiLCJwYXJzZUlzb0RhdGVUaW1lIiwibmV4dERheU9mV2VlayIsImRheXNUb0FkZCIsInJlZHVjZSIsImN1cnJlbnQiLCJuZXh0RGF5T2ZNb250aCIsImN1cnJlbnRNb250aCIsIm5leHRNb250aCIsImRheXNJbk1vbnRoIiwic2V0RGF0ZSIsIm5leHRXZWVrT2ZNb250aCIsIndlZWtEYXkiLCJmaW5kRGF5IiwibmV4dERheU9mWWVhciIsImRhdGVPZkN1cnJlbnRZZWFyIiwiZGF0ZU9mTmV4dFllYXIiLCJyZWZlcmVuY2UiLCJpc0JlZm9yZVN0YXJ0IiwieWVhcnMiLCJmb3J3YXJkIiwiZGVmIiwiZ2V0VGltZSIsInN0clZhbHVlIiwid2Vla1N0ciIsImRheVN0ciIsIm1vbnRoU3RyIiwiZGF0ZVN0ciIsImNvbnZlcnREYXRlIiwiZ2V0RGF0ZUZvcm1hdCIsInN0YXJ0c1dpdGgiLCJ2YWxpZFNldHRpbmciLCJzZXR0aW5nTGlzdCIsImdyb3VwS2V5cyIsInNldHRpbmciLCJnZXRTZXR0aW5nIiwibWV0aG9kIiwiZmlsdGVyR3JvdXAiLCJvbGRPcHRpb25zIiwibmV3T3B0aW9ucyIsImV4cGVjdGVkVmFsdWVzIiwicmVxdWlyZUludGVnZXIiLCJwcm9jZXNzR3JvdXAiLCJmb3JtYXRPcHRzIiwidG9rZW5TdHlsZSIsImZ1bGxZZWFyIiwicGFkTW9udGhzIiwicGFkRGF5cyIsIkJvb2xlYW4iLCJwcmlvcml0eVN0ciIsIkNoZWNrZWRJY29uIiwiQ29weUljb24iLCJQcm9qZWN0SWNvbiIsIlVuY2hlY2tlZEljb24iLCJTVEFOREFSRF9NRU5VX0lURU1TIiwiUFJPSkVDVF9NRU5VX0lURU1TIiwiaXNTYW1lR3JvdXAiLCJ0YXNrMSIsInRhc2syIiwiY3JlYXRlTGlzdCIsIml0ZW1FbGVtIiwiaWNvblNyYyIsImlzQ29tcGxldGUiLCJpY29uQWx0IiwiY2hlY2tCdXR0b24iLCJpbmZvQ29udGFpbmVyIiwibmFtZUVsZW0iLCJkZXNjRWxlbSIsImRldGFpbHNDb250YWluZXIiLCJhZGREZXRhaWwiLCJzdHlsZUNsYXNzIiwiaGFzQ2hpbGROb2RlcyIsImNvbW1hIiwiZGV0YWlsIiwicmVjdXJyZW5jZVN0ciIsImVkaXRCdXR0b24iLCJtb3JlQnV0dG9uIiwidGFza01lbnUiLCJnZXRHcm91cEhlYWRpbmciLCJwYW5lbCIsImxpc3RPcHRpb25zIiwiZGVzY2VuZGluZyIsImNhc2VTZW5zaXRpdmUiLCJtaXNzaW5nTGFzdCIsInB1c2hTb3J0RmllbGQiLCJwcmV2VGFzayIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJhZGRUb01hcEFycmF5IiwiZmluZEluTWFwQXJyYXkiLCJyZW1vdmVGcm9tTWFwQXJyYXlCeSIsImZvcm1hdElzb0RhdGUiLCJnZXRNb250aEluZGV4IiwiZ2V0V2Vla2RheUluZGV4IiwiYXJyYXlUb0NzdlJlY29yZCIsInRhc2tzQnlEdWVEYXRlIiwidGFza3NCeVByb2plY3QiLCJ0YXNrc0J5UHJpb3JpdHkiLCJvbGRUYXNrIiwidXBkYXRlSW5kZXgiLCJvbGRLZXkiLCJuZXdLZXkiLCJwcm9qZWN0U3RyIiwidXBkYXRlZFRhc2tzIiwibG9va3VwVHlwZSIsImNvcHlUYXNrcyIsImRhdGVzIiwic29ydCIsInN0YXJ0S2V5IiwiZW5kS2V5IiwibG93SW5kZXgiLCJoaWdoSW5kZXgiLCJhIiwiYiIsImxlZnRUYXNrIiwicmlnaHRUYXNrIiwiTEVTUyIsIk1PUkUiLCJsZWZ0TmFtZSIsInJpZ2h0TmFtZSIsImxlZnREYXRlIiwicmlnaHREYXRlIiwibGVmdFByb2oiLCJyaWdodFByb2oiLCJwcm9qZWN0RmllbGRzIiwiY3N2T3B0aW9ucyIsInRvSlNPTiIsImxpbmVzIiwiZmllbGRzIiwiYWxsb3dDb252ZXJzaW9uIiwidGFza09wdGlvbnMiLCJzdWNjZXNzQ2FsbGJhY2siLCJzZXRQcmlvcml0eSIsInJlY09wdGlvbnMiLCJjdXN0b21QcmVkaWNhdGUiLCJoYXNUYXNrIiwibmV3VGFzayIsInNwbGl0IiwidHJpbSIsImJlaGF2aW9yIiwidmFsaWRhdGVVdWlkIiwidXVpZFZlcnNpb24iLCJpc0RhdGVWYWxpZCIsInYxIiwidjIiLCJzcGxpdFZlcnNpb24iLCJjb21wb25lbnRzIiwibWF0Y2giLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJsZWZ0VmVyIiwicmlnaHRWZXIiLCJwcmVkaWNhdGUiLCJmaW5kIiwicmVtb3ZlRnJvbU1hcEFycmF5IiwiZmFpbCIsImNvbnZlcnRlZFZhbHVlIiwiaW5jbHVkZXMiLCJkZkZvcm1hdCIsImZvcm1hdElTTyIsImlzVmFsaWQiLCJkZlBhcnNlIiwicGFyc2VJU08iLCJXRUVLREFZUyIsImxvY2FsZSIsIlJFRkVSRU5DRV9EQVRFIiwiZm9ybWF0dGVyT3B0aW9ucyIsImRhdGVTdHlsZSIsInRpbWVTdHlsZSIsImhvdXJTeXN0ZW0iLCJob3VyMTIiLCJmb3JtYXR0ZXIiLCJJbnRsIiwiRGF0ZVRpbWVGb3JtYXQiLCJwYXJ0cyIsImRhdGVQYXJ0cyIsInRpbWVQYXJ0cyIsInJlc29sdmVkT3B0aW9ucyIsImhhc0RhdGUiLCJoYXNUaW1lIiwiZm9ybWF0VG9QYXJ0cyIsInRva2VuIiwidGVzdCIsInBhZEhvdXJzIiwicGFkTWludXRlcyIsInBhZFNlY29uZHMiLCJyZXBlYXQiLCJyZXByZXNlbnRhdGlvbiIsImZvcm1hdElzb0RhdGVUaW1lIiwiZGF0ZVN0cmluZyIsInBhdHRlcm5zIiwiZGF5TG93ZXIiLCJtb250aExvd2VyIiwiY29udGFpbmVyVGFnIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGVmYXVsdFZhbHVlIiwicGF0dGVybiIsInN0ZXAiLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJjaGVja2FibGUiLCJkZWZhdWx0Q2hlY2tlZCIsInBsYWNlbWVudCIsImltYWdlRWxlbSIsImltZ0lkIiwiaW1nQ2xhc3NMaXN0IiwiYWN0aXZlQ2xhc3MiLCJkZWZhdWx0QWN0aXZlIiwicEFycmF5IiwiZnJhZ21lbnRzIiwiZnJhZ21lbnQiLCJub2RlIiwiaHJlZiIsImNyZWF0ZVRleHROb2RlIiwic3RvcmFnZVN1cHBvcnRlZCIsInN0b3JhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJ0ZXN0SXRlbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiRE9NRXhjZXB0aW9uIiwiY29kZSIsInByZWZpeCIsImZ1bGxLZXkiLCJsb2NhbEtleSIsImluY2x1ZGVQcmVmaXgiLCJub1ZhbHVlIiwiZmlsZW5hbWUiLCJCbG9iIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibGlua0VsZW0iLCJkb3dubG9hZCIsInJldm9rZU9iamVjdFVSTCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNUZXh0IiwibmVlZFF1b3RlcyIsImN1cnJlbnRSb3ciLCJjdXJyZW50RmllbGQiLCJjb21taXRGaWVsZCIsImNvbW1pdFJvdyIsInF1b3RlZCIsInBvcyIsImxhc3RDaGFyIiwibGFzdEluZGV4T2YiLCJzZWxmIiwiY3JlYXRlRWxlbWVudE5TIiwidmlldyIsImNsYXNzTGlzdFByb3AiLCJwcm90b1Byb3AiLCJlbGVtQ3RyUHJvdG8iLCJFbGVtZW50Iiwib2JqQ3RyIiwic3RyVHJpbSIsImFyckluZGV4T2YiLCJET01FeCIsImNoZWNrVG9rZW5BbmRHZXRJbmRleCIsIkNsYXNzTGlzdCIsInRyaW1tZWRDbGFzc2VzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlcyIsIl91cGRhdGVDbGFzc05hbWUiLCJjbGFzc0xpc3RQcm90byIsImNsYXNzTGlzdEdldHRlciIsInRva2VucyIsImwiLCJmb3JjZSIsInJlcGxhY2VtZW50X3Rva2VuIiwiY2xhc3NMaXN0UHJvcERlc2MiLCJjb25maWd1cmFibGUiLCJleCIsIm51bWJlciIsIl9fZGVmaW5lR2V0dGVyX18iLCJ0ZXN0RWxlbWVudCIsImNyZWF0ZU1ldGhvZCIsIm9yaWdpbmFsIiwiRE9NVG9rZW5MaXN0IiwiX3RvZ2dsZSIsInJ1biJdLCJzb3VyY2VSb290IjoiIn0=